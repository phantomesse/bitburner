{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":31,\"max\":31},\"skills\":{\"hacking\":411,\"strength\":218,\"defense\":218,\"dexterity\":218,\"agility\":217,\"charisma\":289,\"intelligence\":95},\"exp\":{\"hacking\":12952267.910969732,\"strength\":170587.71525700964,\"defense\":170883.83490493766,\"dexterity\":170714.61761444987,\"agility\":170063.60109410112,\"charisma\":161819.1936871305,\"intelligence\":9679.278693233842},\"mults\":{\"hacking_chance\":1.2691296786581887,\"hacking_speed\":1.2691296786581887,\"hacking_money\":1.2691296786581887,\"hacking_grow\":1.2691296786581887,\"hacking\":1.2691296786581887,\"hacking_exp\":1.2691296786581887,\"strength\":1.1751200728316562,\"strength_exp\":1.1751200728316562,\"defense\":1.1751200728316562,\"defense_exp\":1.1751200728316562,\"dexterity\":1.1751200728316562,\"dexterity_exp\":1.1751200728316562,\"agility\":1.1751200728316562,\"agility_exp\":1.1751200728316562,\"charisma\":1.5737208015361541,\"charisma_exp\":1.1751200728316562,\"hacknet_node_money\":1.316134481571455,\"hacknet_node_purchase_cost\":0.7488573979356281,\"hacknet_node_ram_cost\":0.7488573979356281,\"hacknet_node_core_cost\":0.7488573979356281,\"hacknet_node_level_cost\":0.7488573979356281,\"company_rep\":1.1751200728316562,\"faction_rep\":1.1751200728316562,\"work_money\":1.2691296786581887,\"crime_success\":1.4571488903112535,\"crime_money\":1.4571488903112535,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"The Syndicate\",\"Slum Snakes\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"The Covenant\",\"Speakers for the Dead\"]},\"hacknetNodes\":[\"hacknet-server-0\",\"hacknet-server-1\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\"],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":640,\"hashes\":2.1260665429217314,\"upgrades\":{\"Sell for Money\":59,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":3,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-5858.94999999997,\"numPeopleKilled\":295,\"location\":\"Alpha Enterprises\",\"money\":156592.89655808744,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-534240,\"codingcontract\":16387500000,\"corporation\":0,\"crime\":17620326697.926216,\"gang\":0,\"gang_expenses\":0,\"hacking\":17607031524.18367,\"hacknet\":3573080046.9538727,\"hacknet_expenses\":-969949753.6268305,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-21600,\"stock\":-6229819751.45289,\"total\":155441.89655808744,\"work\":0,\"servers\":-47700257482.08752,\"other\":-287200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-534240,\"codingcontract\":16387500000,\"corporation\":0,\"crime\":17620326697.926216,\"gang\":0,\"gang_expenses\":0,\"hacking\":17607031524.18367,\"hacknet\":3573080046.9538727,\"hacknet_expenses\":-969949753.6268305,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-21600,\"stock\":-6229819751.45289,\"total\":155441.89655808744,\"work\":0,\"servers\":-47700257482.08752,\"other\":-287200000,\"augmentations\":0}},\"playtimeSinceLastAug\":564595600,\"playtimeSinceLastBitnode\":564595600,\"lastAugReset\":1710382530128,\"lastNodeReset\":1710382530128,\"purchasedServers\":[\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-14\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\"],\"scriptProdSinceLastAug\":1235443639.2632017,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":3,\"strength\":3,\"defense\":3,\"dexterity\":3,\"agility\":3,\"charisma\":3,\"intelligence\":47},\"exp\":{\"hacking\":49.77533322388416,\"strength\":50.430790319022066,\"defense\":49.77533322388416,\"dexterity\":49.77533322388416,\"agility\":49.77533322388416,\"charisma\":49.77533322388416,\"intelligence\":1780.0133605841654},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":1,\"shock\":89.16323262451407,\"storedCycles\":2720190,\"sync\":17.494888871729763}}],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1],[2,1],[12,1],[3,1],[4,1],[5,1],[10,1],[9,1]]},\"exploits\":[\"N00dles\",\"Unclickable\",\"RealityAlteration\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1704070135213},{\"ID\":\"FROZE\",\"unlockedOn\":1704070135222},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1704079402616},{\"ID\":\"WORKOUT\",\"unlockedOn\":1704081997256},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1704085310642},{\"ID\":\"TOR\",\"unlockedOn\":1704088636233},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1704091709650},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1704125258633},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1704144228234},{\"ID\":\"TRAVEL\",\"unlockedOn\":1704151357816},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1704169468544},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1704170548545},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1704228378452},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1704238095961},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1704241395954},{\"ID\":\"NITESEC\",\"unlockedOn\":1704242995955},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1704331510388},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1704337810388},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1704343390388},{\"ID\":\"4S\",\"unlockedOn\":1704343870389},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1704404274170},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1704651907253},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1704661239445},{\"ID\":\"DONATION\",\"unlockedOn\":1704671467161},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1704684346576},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1704729001977},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1704729001980},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1704743986025},{\"ID\":\"SF1.1\",\"unlockedOn\":1704756093389},{\"ID\":\"N00DLES\",\"unlockedOn\":1704761514401},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1704761574401},{\"ID\":\"GANG\",\"unlockedOn\":1704764062582},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1704900063536},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1704900843531},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1705270991356},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1705275675262},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1705297415024},{\"ID\":\"SF2.1\",\"unlockedOn\":1705334104216},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1705824429608},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1705824789613},{\"ID\":\"SF12.1\",\"unlockedOn\":1706041931139},{\"ID\":\"CORPORATION\",\"unlockedOn\":1706042411141},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1706157163366},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1707338253837},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1707535625995},{\"ID\":\"SF3.1\",\"unlockedOn\":1707584909369},{\"ID\":\"SF4.1\",\"unlockedOn\":1708919337448},{\"ID\":\"SF5.1\",\"unlockedOn\":1709305069897},{\"ID\":\"SF10.1\",\"unlockedOn\":1709783440379},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1709783440382},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1709825332875},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1709825332902},{\"ID\":\"SF9.1\",\"unlockedOn\":1710382581668}],\"terminalCommandHistory\":[\"top\",\"free\",\"run manage-hashes.js \",\"run manage-hacknet.js \",\"run manage-servers.js \",\"free\",\"top\",\"kill manage-servers.js \",\"run manage-servers.js \",\"free\",\"top\",\"run manage-hacking.js 4\",\"run find-backdoors.js \",\"connect n00dles; connect zer0; connect silver-helix; connect computek\",\"backdoor\",\"home\",\"connect n00dles; connect zer0; connect phantasy; connect netlink\",\"backdoor\",\"home\",\"connect n00dles; connect zer0; connect omega-net; connect crush-fitness; connect I.I.I.I\",\"backdoor\",\"home\",\"connect darkweb\",\"backdoor\",\"home\",\"free\",\"top\",\"run find-contracts.js \",\"kill manage-hacking.js 4\",\"free\",\"top\",\"run manage-hacking.js 30\",\"free\",\"top\",\"run find-contracts.js \",\"free\",\"top\",\"connect darkweb \",\"buy -l\",\"home\",\"free\",\"top\",\"free\",\"top\",\"kill manage-hacking.js 30\",\"free\",\"top\",\"run manage-hacking.js 0\",\"free\",\"top\"],\"lastUpdate\":1710947125831,\"lastSave\":1710947106101,\"totalPlaytime\":6882237800,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":3513,\"crimeType\":\"Mug\",\"unitCompleted\":2600}},\"focus\":false,\"entropy\":0,\"identifier\":\"113891341353c3\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"38.4.6.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * @param {import(\\\"../NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Object.<string, string|number>]} style\\n * @returns {import(\\\"../NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"manage-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND, HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\nconst NODE_NAME_COLUMN = { name: 'Node Name', style: { width: 'max-content' } };\\nconst PRODUCTION_COLUMN = {\\n  name: 'Production',\\n  style: { textAlign: 'center', width: 'max-content' },\\n};\\n\\n/**\\n * Manages purchasing and upgrading Hacknet nodes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  // const augmentations = ns.singularity.getOwnedAugmentations();\\n  // ns.singularity.getAugmentationStats().hackn;\\n\\n  // ns.tprint(\\n  //   formatMoney(\\n  //     ns,\\n  //     ns.formulas.hacknetNodes.hacknetNodeCost(ns.hacknet.numNodes() + 1, 1)\\n  //   )\\n  // );\\n\\n  while (true) {\\n    ns.clearLog();\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n\\n    // Attempt to purchase a new node.\\n    if (\\n      ns.hacknet.numNodes() < ns.hacknet.maxNumNodes() &&\\n      ns.hacknet.getPurchaseNodeCost() < moneyAvailable\\n    ) {\\n      ns.hacknet.purchaseNode();\\n    }\\n\\n    const nodeCount = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodeCount; i++) {\\n      // Upgrade level.\\n      upgrade(\\n        () => ns.hacknet.getLevelUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeLevel(i)\\n      );\\n\\n      // Upgrade RAM.\\n      upgrade(\\n        () => ns.hacknet.getRamUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeRam(i)\\n      );\\n\\n      // Upgrade cores.\\n      upgrade(\\n        () => ns.hacknet.getCoreUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeCore(i)\\n      );\\n\\n      // Upgrade cache.\\n      upgrade(\\n        () => ns.hacknet.getCacheUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeCache(i)\\n      );\\n    }\\n\\n    log(ns);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Upgrades using the given upgrade function until it is no longer possible.\\n *\\n * @param {function():boolean} canUpgradeFunction\\n * @param {function():boolean} upgradeFunction\\n */\\nfunction upgrade(canUpgradeFunction, upgradeFunction) {\\n  let canUpgrade;\\n  do {\\n    canUpgrade = canUpgradeFunction();\\n    canUpgrade = upgradeFunction();\\n  } while (canUpgrade);\\n}\\n\\n/**\\n * Logs to tail.\\n *\\n * @param {NS} ns\\n */\\nfunction log(ns) {\\n  const nodeCount = ns.hacknet.numNodes();\\n  let totalProduction = 0;\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (let nodeIndex = 0; nodeIndex < nodeCount; nodeIndex++) {\\n    const nodeStats = ns.hacknet.getNodeStats(nodeIndex);\\n    totalProduction += nodeStats.production;\\n\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        { column: NODE_NAME_COLUMN, content: `hacknet-node-${nodeIndex}` },\\n        {\\n          column: PRODUCTION_COLUMN,\\n          content: formatMoney(ns, nodeStats.production) + ' / s',\\n        },\\n        {\\n          column: { name: 'Level', style: { textAlign: 'center' } },\\n          content: nodeStats.level,\\n        },\\n        {\\n          column: { name: 'RAM', style: { textAlign: 'center' } },\\n          content: ns.formatRam(nodeStats.ram),\\n        },\\n        {\\n          column: { name: 'Cores', style: { textAlign: 'center' } },\\n          content: nodeStats.cores,\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  // Total row.\\n  table.rows.push({\\n    cells: [\\n      { column: NODE_NAME_COLUMN, content: 'TOTAL' },\\n      {\\n        column: PRODUCTION_COLUMN,\\n        content: formatMoney(ns, totalProduction) + ' / s',\\n      },\\n    ],\\n    style: {\\n      color: ns.ui.getTheme().success,\\n    },\\n  });\\n\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"server\":\"home\"}}],[\"manage-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers, updateServers } from 'database/servers';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\nconst MAX_RAM_POWER = 20;\\n\\n/**\\n * Manages purchasing and upgrading servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const purchasedHostnames = getServers(ns)\\n    .filter(server => server.isPurchased)\\n    .map(server => server.hostname);\\n\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n\\n    for (let power = MAX_RAM_POWER; power > 1; power--) {\\n      const ram = Math.pow(2, power);\\n\\n      // Attempt to purchase a server.\\n      const cost = ns.getPurchasedServerCost(ram);\\n      if (cost <= moneyAvailable) {\\n        const hostname = ns.purchaseServer('lauren', ram);\\n        if (hostname.length > 0) {\\n          purchasedHostnames.push(hostname);\\n          updateServers(ns, {\\n            hostname: hostname,\\n            organization: '',\\n            path: [hostname],\\n            isPurchased: true,\\n            maxRam: ram,\\n            maxMoney: 0,\\n            minSecurity: 0,\\n            baseSecurity: 0,\\n            hackingLevel: 0,\\n          });\\n          ns.toast(\\n            `Purchased ${hostname} (${ns.formatRam(ram, 0)}) for ${formatMoney(\\n              ns,\\n              cost\\n            )}`\\n          );\\n        }\\n      }\\n\\n      // Attempt to upgrade an existing server.\\n      for (const hostname of purchasedHostnames) {\\n        const currentRam = ns.getServerMaxRam(hostname);\\n        if (ram <= currentRam) continue;\\n        const cost = ns.getPurchasedServerUpgradeCost(hostname, ram);\\n        const upgradeSuccessful = ns.upgradePurchasedServer(hostname, ram);\\n        if (upgradeSuccessful) {\\n          updateServers(ns, {\\n            hostname: hostname,\\n            maxRam: ram,\\n          });\\n          ns.toast(\\n            `Upgraded ${hostname} from ${ns.formatRam(\\n              currentRam,\\n              0\\n            )} to ${ns.formatRam(ram, 0)} for ${formatMoney(ns, cost)}`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"manage-servers.js\",\"server\":\"home\"}}],[\"database/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing servers.txt */\\n\\n/**\\n * @typedef Server\\n * @property {string} hostname\\n * @property {string} organization\\n * @property {string[]} path\\n *           path from home to the hostname not including home but including the\\n *           hostname (e.g. ['foodnstuff', 'CSEC'] for 'CSEC' server)\\n * @property {[boolean]} isPurchased\\n * @property {[number]} maxRam maximum RAM the server has\\n * @property {[cpuCores]} cpuCores\\n * @property {[number]} maxMoney\\n * @property {[number]} minSecurity\\n * @property {[number]} baseSecurity\\n * @property {[number]} hackingLevel required hacking level\\n */\\n\\nconst SERVERS_FILENAME = 'database/servers.txt';\\n\\n/**\\n * Updates any existing servers in the database and adds any new servers to the\\n * database.\\n *\\n * @param {NS} ns\\n * @param  {...Server} serversToUpdate\\n */\\nexport function updateServers(ns, ...serversToUpdate) {\\n  const databaseServers = getServers(ns);\\n\\n  for (const server of serversToUpdate) {\\n    const databaseServer = databaseServers.find(\\n      databaseServer => databaseServer.hostname === server.hostname\\n    );\\n    if (!databaseServer) {\\n      databaseServers.push(server);\\n    } else {\\n      Object.keys(server).forEach(key => (databaseServer[key] = server[key]));\\n    }\\n  }\\n\\n  ns.write(SERVERS_FILENAME, JSON.stringify(databaseServers), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Server[]} all servers in file\\n */\\nexport function getServers(ns) {\\n  return JSON.parse(ns.read(SERVERS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/servers.js\",\"server\":\"home\"}}],[\"manage-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { createColorForString } from 'utils/colors';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { GROW_JS, HACK_JS, WEAKEN_JS, getRamToReserve } from 'utils/scripts';\\nimport { printTable } from 'utils/table';\\n\\n/** Minimum amount of money on a server to allow hacking that server. */\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/** Minimum percentage of max money on a server to allow hacking that server. */\\nconst MIN_MONEY_PERCENT = 0.5;\\n\\nconst MIN_HACK_CHANCE = 0.5;\\n\\n/**\\n * Manages hacking in all servers, reserving enough RAM in Home server to run\\n * all other scripts.\\n *\\n * Override the RAM to reserve by passing as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const hackWeakenGrowScripts = [HACK_JS, WEAKEN_JS, GROW_JS];\\n  const minRamNecessaryToRunHackWeakenGrow = Math.min(\\n    ...hackWeakenGrowScripts.map(script => ns.getScriptRam(script))\\n  );\\n\\n  while (true) {\\n    const serversWithRootAccess = getServers(ns).filter(server =>\\n      ns.hasRootAccess(server.hostname)\\n    );\\n\\n    // Get servers to hack, weaken, and grow.\\n    const hackableServers = serversWithRootAccess.filter(\\n      server => server.maxMoney > 0\\n    );\\n\\n    // Get servers to hack.\\n    const serversToHack = getServersToHack(ns, hackableServers);\\n    const hostnameToHackToThreadCountMap = Object.fromEntries(\\n      serversToHack\\n        .map(server => [server.hostname, getHackThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToHackToRunningThreadCountMap = {};\\n\\n    // Get servers to weaken.\\n    const serversToWeaken = getServersToWeaken(ns, hackableServers);\\n    const hostnameToWeakenToThreadCountMap = Object.fromEntries(\\n      serversToWeaken\\n        .map(server => [server.hostname, getWeakenThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToWeakenToRunningThreadCountMap = {};\\n\\n    // Get servers to grow.\\n    const serversToGrow = getServersToGrow(ns, hackableServers);\\n    const hostnameToGrowToThreadCountMap = Object.fromEntries(\\n      serversToGrow\\n        .map(server => [server.hostname, getGrowThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToGrowToRunningThreadCountMap = {};\\n\\n    // Get runnable servers.\\n    const ramToReserveInHome = ns.args[0] ?? getRamToReserve(ns);\\n    const runnableServers = getRunnableServers(\\n      ns,\\n      serversWithRootAccess,\\n      minRamNecessaryToRunHackWeakenGrow,\\n      ramToReserveInHome\\n    );\\n\\n    const scriptToThreadCountMapMap = {\\n      [HACK_JS]: hostnameToHackToThreadCountMap,\\n      [WEAKEN_JS]: hostnameToWeakenToThreadCountMap,\\n      [GROW_JS]: hostnameToGrowToThreadCountMap,\\n    };\\n    const scriptToRunningThreadCountMapMap = {\\n      [HACK_JS]: hostnameToHackToRunningThreadCountMap,\\n      [WEAKEN_JS]: hostnameToWeakenToRunningThreadCountMap,\\n      [GROW_JS]: hostnameToGrowToRunningThreadCountMap,\\n    };\\n\\n    // Subtract threads that are already running.\\n    for (const runnableServer of runnableServers) {\\n      const processes = ns\\n        .ps(runnableServer.hostname)\\n        .filter(process => hackWeakenGrowScripts.includes(process.filename));\\n      for (const process of processes) {\\n        const threadCountMap = scriptToThreadCountMapMap[process.filename];\\n        const runningThreadCountMap =\\n          scriptToRunningThreadCountMapMap[process.filename];\\n        const targetHostname = process.args[0];\\n\\n        // Add to running thread count map.\\n        if (!(targetHostname in runningThreadCountMap)) {\\n          runningThreadCountMap[targetHostname] = 0;\\n        }\\n        runningThreadCountMap[targetHostname] += process.threads;\\n\\n        // Subtract from thread count map.\\n        if (!(targetHostname in threadCountMap)) continue;\\n        threadCountMap[targetHostname] -= process.threads;\\n        if (threadCountMap[targetHostname] <= 0) {\\n          delete threadCountMap[targetHostname];\\n        }\\n      }\\n    }\\n\\n    // Determine order of hack, weaken, and grow based on the least amount of\\n    // time.\\n    const getMinTime = (hostnameToThreadCountMap, getTimeFn) => {\\n      const hostname = Object.keys(hostnameToThreadCountMap)[0];\\n      return hostname ? getTimeFn(hostname) : Infinity;\\n    };\\n    const scriptToMinTimeMap = {\\n      [HACK_JS]: getMinTime(hostnameToHackToThreadCountMap, ns.getHackTime),\\n      [WEAKEN_JS]: getMinTime(\\n        hostnameToWeakenToThreadCountMap,\\n        ns.getWeakenTime\\n      ),\\n      [GROW_JS]: getMinTime(hostnameToGrowToThreadCountMap, ns.getGrowTime),\\n    };\\n    const scriptsInOrder = Object.keys(scriptToMinTimeMap)\\n      .filter(script => scriptToMinTimeMap[script] < Infinity)\\n      .sort((a, b) => scriptToMinTimeMap[a] - scriptToMinTimeMap[b]);\\n\\n    // Execute hack, weaken, and grow on runnable servers.\\n    for (const runnableServer of runnableServers) {\\n      for (const scriptName of scriptsInOrder) {\\n        const hostnameToThreadCountMap = scriptToThreadCountMapMap[scriptName];\\n        const hostnameToRunningThreadCountMap =\\n          scriptToRunningThreadCountMapMap[scriptName];\\n        for (const hostname in hostnameToThreadCountMap) {\\n          const threadsNeeded = hostnameToThreadCountMap[hostname];\\n\\n          // Modify threads needed based on runnable server's CPU cores.\\n          const targetServer = hackableServers.find(\\n            server => server.hostname === hostname\\n          );\\n          let adjustedThreadsNeeded = threadsNeeded;\\n          if (scriptName === WEAKEN_JS) {\\n            adjustedThreadsNeeded = getWeakenThreadCount(\\n              ns,\\n              targetServer,\\n              runnableServer.cpuCores\\n            );\\n          }\\n          if (scriptName === GROW_JS) {\\n            adjustedThreadsNeeded = getGrowThreadCount(\\n              ns,\\n              targetServer,\\n              runnableServer.cpuCores\\n            );\\n          }\\n\\n          const threadsUsed = runScript(\\n            ns,\\n            scriptName,\\n            runnableServer,\\n            hostname,\\n            threadsNeeded,\\n            ramToReserveInHome\\n          );\\n          if (threadsUsed > 0) {\\n            hostnameToThreadCountMap[hostname] -=\\n              threadsUsed === adjustedThreadsNeeded\\n                ? threadsNeeded\\n                : threadsUsed;\\n            if (hostnameToThreadCountMap[hostname] <= 0) {\\n              delete hostnameToThreadCountMap[hostname];\\n            }\\n            if (!(hostname in hostnameToRunningThreadCountMap)) {\\n              hostnameToRunningThreadCountMap[hostname] = 0;\\n            }\\n            hostnameToRunningThreadCountMap[hostname] += threadsUsed;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Use any unused RAM on runnable servers to weaken the server with the\\n    // lowest weak time even if it doesn't need weakening to gain hacking exp.\\n    hackableServers.sort(\\n      (a, b) => ns.getWeakenTime(a.hostname) - ns.getWeakenTime(b.hostname)\\n    );\\n    const serverWithLowestWeakTime = hackableServers[0];\\n    // if (ns.getWeakenTime(serverWithLowestWeakTime.hostname) < ONE_SECOND) {\\n    const weakenScriptRam = ns.getScriptRam(WEAKEN_JS);\\n    for (const runnableServer of runnableServers) {\\n      const availableRam = getAvailableRam(\\n        ns,\\n        runnableServer,\\n        ramToReserveInHome\\n      );\\n      const threadCount = Math.floor(availableRam / weakenScriptRam);\\n      runScript(\\n        ns,\\n        WEAKEN_JS,\\n        runnableServer,\\n        serverWithLowestWeakTime.hostname,\\n        threadCount,\\n        ramToReserveInHome\\n      );\\n    }\\n    // }\\n\\n    // Log hack, weaken, and grow.\\n    ns.clearLog();\\n    for (const script of scriptsInOrder) {\\n      switch (script) {\\n        case HACK_JS:\\n          logServersToHack(\\n            ns,\\n            hackableServers,\\n            hostnameToHackToThreadCountMap,\\n            hostnameToHackToRunningThreadCountMap\\n          );\\n          break;\\n        case WEAKEN_JS:\\n          logServersToWeaken(\\n            ns,\\n            hackableServers,\\n            hostnameToWeakenToThreadCountMap,\\n            hostnameToWeakenToRunningThreadCountMap\\n          );\\n          break;\\n        case GROW_JS:\\n          logServersToGrow(\\n            ns,\\n            hackableServers,\\n            hostnameToGrowToThreadCountMap,\\n            hostnameToGrowToRunningThreadCountMap\\n          );\\n          break;\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Runs a script on a server with the targetHostname passed as an argument.\\n *\\n * @param {NS} ns\\n * @param {string} scriptName\\n * @param {Server} server\\n * @param {string} targetHostname\\n * @param {number} threadsNeeded number of threads needed\\n * @param {number} ramToReserveinHome\\n * @returns {number} number of threads used\\n */\\nfunction runScript(\\n  ns,\\n  scriptName,\\n  server,\\n  targetHostname,\\n  threadsNeeded,\\n  ramToReserveinHome\\n) {\\n  // If script file doesn't exist, then copy it over to that server.\\n  if (!ns.fileExists(scriptName, server.hostname)) {\\n    ns.scp(scriptName, server.hostname);\\n  }\\n\\n  // Get threads to use.\\n  const availableRam = getAvailableRam(ns, server, ramToReserveinHome);\\n  const threadsAvailable = Math.floor(\\n    availableRam / ns.getScriptRam(scriptName)\\n  );\\n  const threadsToUse = Math.min(threadsAvailable, threadsNeeded);\\n  if (threadsToUse <= 0) return 0;\\n\\n  // Execute script.\\n  const pid = ns.exec(\\n    scriptName,\\n    server.hostname,\\n    threadsToUse,\\n    targetHostname\\n  );\\n  return pid === 0 ? 0 : threadsToUse;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {number} ramToReserveInHome\\n * @returns {number} available RAM\\n */\\nfunction getAvailableRam(ns, server, ramToReserveInHome) {\\n  let availableRam = server.maxRam - ns.getServerUsedRam(server.hostname);\\n  if (server.hostname === HOME_HOSTNAME) availableRam -= ramToReserveInHome;\\n  return availableRam;\\n}\\n\\n/**\\n * Get all servers that have enough RAM available to run a hack, weaken, or grow\\n * script.\\n *\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} serversWithRootAccess\\n * @param {number} minRamNecessaryToRunHackWeakenGrow\\n * @param {number} ramToReserveInHome\\n * @returns {import('database/servers').Server[]} runnable servers\\n */\\nfunction getRunnableServers(\\n  ns,\\n  serversWithRootAccess,\\n  minRamNecessaryToRunHackWeakenGrow,\\n  ramToReserveInHome\\n) {\\n  return serversWithRootAccess.filter(server => {\\n    if (server.maxRam <= 0) return false;\\n\\n    let availableRam = getAvailableRam(ns, server, ramToReserveInHome);\\n    if (availableRam < minRamNecessaryToRunHackWeakenGrow) return false;\\n\\n    return true;\\n  });\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to hack sorted by hack time\\n */\\nfunction getServersToHack(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerMoneyAvailable(server.hostname) >\\n        Math.min(server.maxMoney * MIN_MONEY_PERCENT, MIN_MONEY_AMOUNT) &&\\n      ns.hackAnalyzeChance(server.hostname) > MIN_HACK_CHANCE\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getHackTime(a.hostname) * getHackThreadCount(ns, a) -\\n      ns.getHackTime(b.hostname) * getHackThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @returns {number} number of threads needed to hack the given server\\n */\\nfunction getHackThreadCount(ns, server) {\\n  const moneyToHack =\\n    ns.getServerMoneyAvailable(server.hostname) -\\n    Math.min(server.maxMoney * MIN_MONEY_PERCENT, MIN_MONEY_AMOUNT);\\n  return Math.floor(ns.hackAnalyzeThreads(server.hostname, moneyToHack));\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to weaken sorted by weaken time\\n */\\nfunction getServersToWeaken(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerSecurityLevel(server.hostname) > server.minSecurity &&\\n      ns.hackAnalyzeChance(server.hostname) <= MIN_HACK_CHANCE\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getWeakenTime(a.hostname) * getWeakenThreadCount(ns, a) -\\n      ns.getWeakenTime(b.hostname) * getWeakenThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {[number]} cpuCores\\n * @returns {number} number of threads needed to weaken the given server\\n */\\nfunction getWeakenThreadCount(ns, server, cpuCores) {\\n  const securityToDecrease =\\n    ns.getServerSecurityLevel(server.hostname) - server.minSecurity;\\n  let threadCount = 0;\\n  do {\\n    threadCount++;\\n  } while (ns.weakenAnalyze(threadCount, cpuCores) < securityToDecrease);\\n  return threadCount;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to grow sorted by grow time\\n */\\nfunction getServersToGrow(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerMoneyAvailable(server.hostname) <\\n      server.maxMoney * MIN_MONEY_PERCENT\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getGrowTime(a.hostname) * getGrowThreadCount(ns, a) -\\n      ns.getGrowTime(b.hostname) * getGrowThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {[number]} cpuCores\\n * @returns {number} number of threads needed to grow the given server\\n */\\nfunction getGrowThreadCount(ns, server, cpuCores) {\\n  const growMultiplier = Math.floor(\\n    server.maxMoney / (ns.getServerMoneyAvailable(server.hostname) || 1)\\n  );\\n  return Math.floor(\\n    ns.growthAnalyze(server.hostname, growMultiplier, cpuCores)\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToHack(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to hack',\\n    ns.ui.getTheme().error,\\n    server => ({\\n      column: { name: 'Available Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, ns.getServerMoneyAvailable(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Chance', style: { textAlign: 'right' } },\\n      content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getHackTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToWeaken(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to weaken',\\n    ns.ui.getTheme().warning,\\n    server => ({\\n      column: { name: 'Min Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(server.minSecurity, 0),\\n    }),\\n    server => ({\\n      column: { name: 'Current Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(ns.getServerSecurityLevel(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Base Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(server.baseSecurity, 0),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Chance', style: { textAlign: 'right' } },\\n      content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Weaken Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getWeakenTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToGrow(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to grow',\\n    ns.ui.getTheme().success,\\n    server => ({\\n      column: { name: 'Available Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, ns.getServerMoneyAvailable(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Max Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, server.maxMoney),\\n    }),\\n    server => ({\\n      column: { name: 'Grow Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getGrowTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n * @param {string} header\\n * @param {string} color\\n * @param {...function(import('database/servers').Server): import('utils/table').Cell} additionalCells\\n */\\nfunction logServers(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap,\\n  header,\\n  color,\\n  ...additionalCells\\n) {\\n  servers = servers.filter(\\n    server =>\\n      server.hostname in hostnameToThreadCountMap ||\\n      server.hostname in hostnameToRunningThreadCountMap\\n  );\\n  if (servers.length === 0) return;\\n\\n  const borderColor = `${color}33`;\\n  /** @type {import('utils/table').Table} */ const table = {\\n    rows: [],\\n    style: { color: color, borderColor: borderColor },\\n  };\\n  for (const server of servers) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: {\\n            name: 'Hostname',\\n            style: { borderColor: borderColor, width: 'max-content' },\\n          },\\n          content: createReactElement(server.hostname, {\\n            color: createColorForString(ns, server.hostname),\\n          }),\\n        },\\n        ...additionalCells.map(fn => {\\n          const cell = fn(server);\\n          cell.column.style.borderColor = borderColor;\\n          return cell;\\n        }),\\n        {\\n          column: {\\n            name: 'Threads Needed',\\n            style: {\\n              borderColor: borderColor,\\n              textAlign: 'right',\\n              width: 'min-content',\\n            },\\n          },\\n          content:\\n            server.hostname in hostnameToThreadCountMap\\n              ? ns.formatNumber(hostnameToThreadCountMap[server.hostname], 0)\\n              : '-',\\n        },\\n        {\\n          column: {\\n            name: 'Threads Running',\\n            style: {\\n              borderColor: borderColor,\\n              textAlign: 'right',\\n              width: 'min-content',\\n            },\\n          },\\n          content:\\n            server.hostname in hostnameToRunningThreadCountMap\\n              ? ns.formatNumber(\\n                  hostnameToRunningThreadCountMap[server.hostname],\\n                  0\\n                )\\n              : '-',\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  ns.printRaw(\\n    createReactElement('\\\\n ' + header, { color: color, fontWeight: 'bold' })\\n  );\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-hacking.js\",\"server\":\"home\"}}],[\"gain-access.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { ONE_MINUTE } from 'utils/constants';\\n\\n/**\\n * Attempts to gain root access to servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  let hostnames = getServers(ns).map(server => server.hostname);\\n\\n  do {\\n    for (const hostname of hostnames) {\\n      runProgram(() => ns.brutessh(hostname));\\n      runProgram(() => ns.ftpcrack(hostname));\\n      runProgram(() => ns.httpworm(hostname));\\n      runProgram(() => ns.relaysmtp(hostname));\\n      runProgram(() => ns.sqlinject(hostname));\\n      runProgram(() => ns.nuke(hostname));\\n    }\\n    hostnames = hostnames.filter(hostname => !ns.hasRootAccess(hostname));\\n    if (hostnames.length > 0) await ns.sleep(ONE_MINUTE);\\n  } while (hostnames.length > 0);\\n}\\n\\n/** @param {function()} programFunction */\\nfunction runProgram(programFunction) {\\n  try {\\n    programFunction();\\n  } catch (_) {}\\n}\\n\",\"filename\":\"gain-access.js\",\"server\":\"home\"}}],[\"init.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateServers } from 'database/servers';\\nimport { writeStocks } from 'database/stocks';\\nimport { getAllPaths } from 'utils/servers';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { writeGangTasks } from 'database/gang-tasks';\\n\\n/**\\n * Run this script at the beginning of every session.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  // Optionally clean up files in all servers if there is enough RAM to do so.\\n  const cleanupFilesPid = ns.run('cleanup-files.js');\\n  while (ns.isRunning(cleanupFilesPid)) await ns.sleep(ONE_SECOND);\\n\\n  // Reset database files.\\n  const hostnameToPathMap = { [HOME_HOSTNAME]: [] };\\n  const allPaths = getAllPaths(ns, HOME_HOSTNAME);\\n  for (const path of allPaths) {\\n    hostnameToPathMap[path[path.length - 1]] = path.slice(1);\\n  }\\n  updateServers(\\n    ns,\\n    ...Object.keys(hostnameToPathMap).map(hostname =>\\n      getServerData(ns, hostname, hostnameToPathMap[hostname])\\n    )\\n  );\\n  if (ns.stock.hasWSEAccount() && ns.stock.hasTIXAPIAccess()) {\\n    writeStocks(ns);\\n    ns.run('manage-stocks.js', { preventDuplicates: true });\\n    ns.run('monitor-net-worth.js', { preventDuplicates: true });\\n  }\\n  // try {\\n  //   writeGangTasks(ns);\\n  //   if (ns.gang.inGang()) ns.run('manage-gang.js', { preventDuplicates: true });\\n  // } catch (_) {}\\n\\n  if (ns.getPurchasedServerLimit() > 0) {\\n    ns.run('manage-servers.js', { preventDuplicates: true });\\n  }\\n\\n  // Start scripts.\\n  // ns.run('gain-access.js', { preventDuplicates: true });\\n  // ns.run('manage-hacknet.js', { preventDuplicates: true });\\n  // ns.run('manage-hashes.js', { preventDuplicates: true });\\n  // ns.run('manage-life.js', { preventDuplicates: true });\\n  // ns.run('apply-to-all-jobs.js', { preventDuplicates: true });\\n  // // ns.run('gym-workout.js', { preventDuplicates: true });\\n  // ns.run('manage-hacking.js', { preventDuplicates: true }, 4);\\n  // ns.run('find-backdoors.js', { preventDuplicates: true });\\n}\\n\\n/**\\n * Get stats of a server to save to the database.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {string[]} path\\n * @returns {import('database/servers').Server} server\\n */\\nexport function getServerData(ns, hostname, path) {\\n  const serverData = ns.getServer(hostname);\\n  return {\\n    hostname: hostname,\\n    path: path,\\n    organization: serverData.organizationName,\\n    isPurchased: serverData.purchasedByPlayer,\\n    maxRam: serverData.maxRam,\\n    cpuCores: serverData.cpuCores,\\n    maxMoney: serverData.moneyMax,\\n    minSecurity: ns.getServerMinSecurityLevel(hostname),\\n    baseSecurity: ns.getServerBaseSecurityLevel(hostname),\\n    hackingLevel: ns.getServerRequiredHackingLevel(hostname),\\n  };\\n}\\n\",\"filename\":\"init.js\",\"server\":\"home\"}}],[\"cleanup-files.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils/servers';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Stops all scripts and removes JS files from every server except the home\\n * server. Also remove database files.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const allHostnames = getAllHostnames(ns);\\n  for (const hostname of allHostnames) {\\n    if (hostname === HOME_HOSTNAME) continue;\\n\\n    // Kill all scripts.\\n    ns.killall(hostname);\\n\\n    // Remove files.\\n    const filenames = ns.ls(hostname, '.js');\\n    for (const filename of filenames) ns.rm(filename, hostname);\\n  }\\n\\n  // Remove database files.\\n  const filenames = ns.ls(HOME_HOSTNAME, '.txt');\\n  for (const filename of filenames) ns.rm(filename);\\n}\\n\",\"filename\":\"cleanup-files.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *     3 + 1\\n *     2 + 2\\n *     2 + 1 + 1\\n *     1 + 1 + 1 + 1\\n *\\n * How many different distinct ways can the number 46 be written as a sum of at\\n * least two positive integers?\\n *\\n * @param {number} input\\n */\\nexport default function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * You are given the following array of integers:\\n *\\n * 4,0,0,3,3,4,7,5,0,1,2,4,5,1\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} maxJumps\\n * @returns {0|1} representing whether able to reach the last index\\n */\\nexport default function arrayJumpingGame(maxJumps) {\\n  return canReachEnd(0, maxJumps) ? 1 : 0;\\n}\\n\\n/**\\n * @param {number} index\\n * @param {number[]} maxJumps\\n * @returns {boolean}\\n */\\nfunction canReachEnd(index, maxJumps) {\\n  if (index === maxJumps.length - 1) return true;\\n  if (index >= maxJumps.length) return false;\\n\\n  for (let jump = 1; jump <= maxJumps[index]; jump++) {\\n    if (canReachEnd(index + jump, maxJumps)) return true;\\n  }\\n  return false;\\n}\\n\\n// console.log(arrayJumpingGame([4, 0, 0, 3, 3, 4, 7, 5, 0, 1, 2, 4, 5, 1])); // 1\\n// console.log(\\n//   arrayJumpingGame([9, 1, 2, 0, 9, 1, 6, 7, 9, 4, 0, 0, 10, 0, 7, 1, 4, 2])\\n// ); // 1\\n\",\"filename\":\"contracts/array-jumping-game.js\",\"server\":\"home\"}}],[\"monitor-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatTime } from 'utils/format';\\nimport { printTable } from 'utils/table';\\nimport { ONE_SECOND } from 'utils/constants';\\nimport { createColorForString } from 'utils/colors';\\n\\n/**\\n * Monitors all servers that can run scripts in the --tail.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(750, 1000);\\n  ns.moveTail(800, 50);\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    const allServers = getServers(ns);\\n    const hostnameToColor = {};\\n    for (const server of allServers) {\\n      hostnameToColor[server.hostname] = createColorForString(\\n        ns,\\n        server.hostname\\n      );\\n    }\\n\\n    const servers = allServers.filter(\\n      server => ns.hasRootAccess(server.hostname) && server.maxRam > 0\\n    );\\n    servers.sort(\\n      (server1, server2) =>\\n        ns.getServerUsedRam(server2.hostname) -\\n        ns.getServerUsedRam(server1.hostname)\\n    );\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const server of servers) {\\n      const usedRam = ns.getServerUsedRam(server.hostname);\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Hostname', style: { width: 'max-content' } },\\n            content: createReactElement(server.hostname, {\\n              color: hostnameToColor[server.hostname],\\n            }),\\n          },\\n          {\\n            column: {\\n              name: 'Used Ram',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatRam(usedRam, 0),\\n            style: { color: usedRam === 0 ? ns.ui.getTheme().error : '' },\\n          },\\n          {\\n            column: {\\n              name: 'Max Ram',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatRam(server.maxRam, 0),\\n          },\\n          {\\n            column: { name: 'Running Scripts', style: {} },\\n            content: getRunningScripts(ns, server.hostname, hostnameToColor),\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n\\n    ns.clearLog();\\n    printTable(ns, table);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Returns a ReactElement showing the scripts that are running on a given\\n * hostname.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {Object.<string, string>} hostnameToColor\\n * @returns {import('../NetscriptDefinitions').ReactElement}\\n */\\nfunction getRunningScripts(ns, hostname, hostnameToColor) {\\n  const elements = ns.ps(hostname).map(process => {\\n    const style = {};\\n    const message = [createReactElement(process.filename, {}, 'span')];\\n\\n    for (const args of process.args) {\\n      message.push(\\n        createReactElement(\\n          ` ${args}`,\\n          {\\n            color: args in hostnameToColor ? hostnameToColor[args] : 'inherit',\\n          },\\n          'span'\\n        )\\n      );\\n    }\\n\\n    message.push(\\n      createReactElement(` (${process.threads.toLocaleString()})`, {}, 'span')\\n    );\\n\\n    if (['hack.js', 'grow.js', 'weaken.js'].includes(process.filename)) {\\n      const script = ns.getRunningScript(process.pid, hostname);\\n      const totalTimeMessage = script.logs[0]\\n        .match(/ in .* \\\\(/)[0]\\n        .replace(' in ', '')\\n        .replace(' (', '');\\n      const totalSeconds = totalTimeMessage\\n        .match(/[0-9.]+ [a-z]+/g)\\n        .map(timePart => {\\n          const number = parseFloat(timePart.split(' ')[0]);\\n          if (timePart.includes('hour')) return number * 60 * 60;\\n          if (timePart.includes('minute')) return number * 60;\\n          if (timePart.includes('second')) return number;\\n          return number;\\n        })\\n        .reduce((a, b) => a + b);\\n      message.push(\\n        createReactElement(\\n          ` - ${formatTime(\\n            ns,\\n            (totalSeconds - script.onlineRunningTime) * 1000\\n          )} left`,\\n          {},\\n          'span'\\n        )\\n      );\\n      style.color = {\\n        'hack.js': ns.ui.getTheme().error,\\n        'grow.js': ns.ui.getTheme().success,\\n        'weaken.js': ns.ui.getTheme().warning,\\n      }[process.filename];\\n    }\\n\\n    return createReactElement(message, style);\\n  });\\n  return React.createElement('div', {}, ...elements);\\n}\\n\",\"filename\":\"monitor-servers.js\",\"server\":\"home\"}}],[\"utils/formatting.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting for printing to either --tail logs or to the terminal.\\n */\\n\\n/**\\n * @param {NS} ns\\n */\\nexport function printTable(ns) {}\\n\\nexport function tprintTable(ns) {}\\n\\nfunction getTableForPrinting() {}\\n\",\"filename\":\"utils/formatting.js\",\"server\":\"home\"}}],[\"utils/table.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting for printing tables to either --tail logs or to the\\n * terminal.\\n */\\n\\n/**\\n * @typedef Column\\n * @property {string} name\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Cell\\n * @property {Column} column\\n * @property {import('../../NetscriptDefinitions').ReactNode} content\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Row\\n * @property {Cell[]} cells\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Table\\n * @property {Row[]} rows\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * Prints a table to --tail logs.\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n */\\nexport const printTable = (ns, table) =>\\n  ns.printRaw(getTableForPrinting(ns, table, true));\\n\\n/**\\n * Prints a table to the terminal.\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n */\\nexport const tprintTable = (ns, table) =>\\n  ns.tprintRaw(getTableForPrinting(ns, table));\\n\\n/**\\n * Gets a formatted table for printing\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n * @param {[boolean]} fillWidth\\n *        whether the table should take up the full width of the window\\n * @returns {import('../../NetscriptDefinitions').ReactElement}\\n */\\nfunction getTableForPrinting(ns, table, fillWidth) {\\n  if (table.rows.length === 0) return createReactElement('Nothing to print!');\\n\\n  // Get border color.\\n  let primaryColor = ns.ui.getTheme().primary.substring(1);\\n  if (primaryColor.length === 3) {\\n    const colors = primaryColor.split('');\\n    primaryColor =\\n      colors[0] + colors[0] + colors[1] + colors[1] + colors[2] + colors[2];\\n  }\\n  const border = `.5px #${primaryColor}33 solid`;\\n\\n  // Build and return ReactElement for table.\\n  const cellStyling = {\\n    border: border,\\n    padding: '2px 8px',\\n  };\\n  const headerCellElements = table.rows[0].cells.map(cell =>\\n    createReactElement(cell.column.name, {\\n      ...cellStyling,\\n      ...cell.column.style,\\n      fontWeight: 'bold',\\n      width: 'auto',\\n    })\\n  );\\n  const cellElements = table.rows\\n    .map(row => {\\n      const rowStyle = row.style ?? {};\\n      return row.cells.map(cell =>\\n        createReactElement(cell.content, {\\n          ...cellStyling,\\n          ...cell.column.style,\\n          ...rowStyle,\\n          ...cell.style,\\n          width: 'auto',\\n        })\\n      );\\n    })\\n    .flat();\\n  const tableStyle = table.style ?? {};\\n  return createReactElement([...headerCellElements, ...cellElements], {\\n    border: border,\\n    display: 'grid',\\n    gridTemplateColumns: table.rows[0].cells\\n      .map(cell => {\\n        if (cell.column.style.width) return cell.column.style.width;\\n        return fillWidth ? '1fr' : 'max-content';\\n      })\\n      .join(' '),\\n    width: fillWidth ? '100%' : 'max-content',\\n    ...tableStyle,\\n  });\\n}\\n\\n/**\\n * Creates a <div> react element.\\n *\\n * @param {import('../../NetscriptDefinitions').ReactNode|import('../../NetscriptDefinitions').ReactNode[]} content\\n * @param {[import('utils/dom').Style]} style\\n * @returns {import('../../NetscriptDefinitions').ReactElement}\\n */\\nfunction createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\",\"filename\":\"utils/table.js\",\"server\":\"home\"}}],[\"contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * HammingCodes: Encoded Binary to Integer\\n *\\n * You are given the following encoded binary string:\\n * '10100000000001101100000001110011'\\n *\\n * Treat it as an extended Hamming code with 1 'possible' error at a random\\n * index.\\n *\\n * Find the 'possible' wrong bit, fix it and extract the decimal value, which is\\n * hidden inside the string.\\n *\\n * Note: The length of the binary string is dynamic, but its encoding/decoding\\n * follows Hamming's 'rule'\\n *\\n * Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from\\n * 3Blue1Brown for more information\\n *\\n * Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an\\n * altered Bit 😉\\n *\\n * Note: The endianness of the encoded decimal value is reversed in relation to\\n * the endianness of the Hamming code. Where the Hamming code is expressed as\\n * little-endian (LSB at index 0), the decimal value encoded in it is expressed\\n * as big-endian (MSB at index 0).\\n *\\n * Extra note for automation: return the decimal value as a string\\n */\\n\",\"filename\":\"contracts/hamming-codes.js\",\"server\":\"home\"}}],[\"utils/format.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting strings.\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {string} e.g. \\\"$123.45\\\"\\n */\\nexport function formatMoney(ns, amount) {\\n  return '$' + ns.formatNumber(amount, 2);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} milliseconds\\n * @returns {string} e.g. \\\"12m 34s\\\"\\n */\\nexport function formatTime(ns, milliseconds) {\\n  const totalSeconds = Math.ceil(milliseconds / 1000);\\n  if (totalSeconds < 60) return `${totalSeconds}s`;\\n\\n  const minutes = Math.floor(totalSeconds / 60);\\n  const seconds = totalSeconds - minutes * 60;\\n  return `${minutes}m ${seconds}s`;\\n}\\n\",\"filename\":\"utils/format.js\",\"server\":\"home\"}}],[\"utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n} from 'contracts/algorithmic-stock-trader';\\nimport arrayJumpingGame from 'contracts/array-jumping-game';\\nimport compressionIRLECompression from 'contracts/compression-i-rle-compression';\\nimport compressionIILZDecompression from 'contracts/compression-ii-lz-decompression';\\nimport encryptionICaesarCipher from 'contracts/encryption-i-caesar-cipher';\\nimport encryptionIIVigenereCipher from 'contracts/encryption-ii-vigenere-cipher';\\nimport findAllValidMathExpressions from 'contracts/find-all-valid-math-expressions';\\nimport findLargestPrimeFactor from 'contracts/find-largest-prime-factor';\\nimport generateIPAddresses from 'contracts/generate-ip-addresses';\\nimport mergeOverlappingIntervals from 'contracts/merge-overlapping-intervals';\\nimport minimumPathSumInATriangle from 'contracts/minimum-path-sum-in-a-triangle';\\nimport proper2ColoringOfAGraph from 'contracts/proper-2-coloring-of-a-graph';\\nimport sanitizeParenthesesInExpression from 'contracts/sanitize-parentheses-in-expression';\\nimport spiralizeMatrix from 'contracts/spiralize-matrix';\\nimport subarrayWithMaximumSum from 'contracts/subarray-with-maximum-sum';\\nimport totalWaysToSum from 'contracts/total-ways-to-sum';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from 'contracts/unique-paths-in-a-grid';\\n\\nexport const HOME_HOSTNAME = 'home';\\n\\n/** One second in milliseconds. */\\nexport const ONE_SECOND = 1000;\\n\\n/** One minute in milliseconds. */\\nexport const ONE_MINUTE = ONE_SECOND * 60;\\n\\nexport const CONTRACT_TYPE_TO_SOLVER_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  // 'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  // 'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  // 'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game II': null,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Compression I: RLE Compression': compressionIRLECompression,\\n  'Compression II: LZ Decompression': compressionIILZDecompression,\\n  'Compression III: LZ Compression': null,\\n  'Encryption I: Caesar Cipher': encryptionICaesarCipher,\\n  'Encryption II: Vigenère Cipher': encryptionIIVigenereCipher,\\n  'Find All Valid Math Expressions': findAllValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIPAddresses,\\n  'HammingCodes: Encoded Binary to Integer': null,\\n  'HammingCodes: Integer to Encoded Binary': null,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Proper 2-Coloring of a Graph': proper2ColoringOfAGraph,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  // 'Shortest Path in a Grid': shortestPathInAGrid,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum II': null,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\\n/** @type {import(\\\"../NetscriptDefinitions\\\").CrimeType[]} */\\nexport const CRIME_TYPES = [\\n  'Shoplift',\\n  'Rob Store',\\n  'Mug',\\n  'Larceny',\\n  'Deal Drugs',\\n  'Bond Forgery',\\n  'Traffick Arms',\\n  'Homicide',\\n  'Grand Theft Auto',\\n  'Kidnap',\\n  'Assassination',\\n  'Heist',\\n];\\n\\nexport const COMPANY_NAMES = [\\n  'ECorp',\\n  'MegaCorp',\\n  'Bachman & Associates',\\n  'Blade Industries',\\n  'NWO',\\n  'Clarke Incorporated',\\n  'OmniTek Incorporated',\\n  'Four Sigma',\\n  'KuaiGong International',\\n  'Fulcrum Technologies',\\n  'Storm Technologies',\\n  'DefComm',\\n  'Helios Labs',\\n  'VitaLife',\\n  'Icarus Microsystems',\\n  'Universal Energy',\\n  'Galactic Cybersystems',\\n  'AeroCorp',\\n  'Omnia Cybersystems',\\n  'Solaris Space Systems',\\n  'DeltaOne',\\n  'Global Pharmaceuticals',\\n  'Nova Medical',\\n  'Central Intelligence Agency',\\n  'National Security Agency',\\n  'Watchdog Security',\\n  'LexoCorp',\\n  'Rho Construction',\\n  'Alpha Enterprises',\\n  'Aevum Police Headquarters',\\n  'SysCore Securities',\\n  'CompuTek',\\n  'NetLink Technologies',\\n  'Carmichael Security',\\n  'FoodNStuff',\\n  \\\"Joe's Guns\\\",\\n  'Omega Software',\\n  'Noodle Bar',\\n];\\n\",\"filename\":\"utils/constants.js\",\"server\":\"home\"}}],[\"contracts/santize.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} input\\n */\\nexport function sanitizeParenthesesInExpression(input) {}\\n\\n/**\\n * Checks if an expression is valid based on the parentheses pairs.\\n *\\n * @param {string} expression\\n */\\nfunction isValidExpression(expression) {\\n  const parentheses = [];\\n  const characters = expression.split('');\\n  for (const character of characters) {\\n    switch (character) {\\n      case '(':\\n        parentheses.push(1);\\n        break;\\n      case ')':\\n        if (parentheses.pop() === undefined) return false;\\n        break;\\n    }\\n  }\\n  return parentheses.length === 0;\\n}\\n\\nconsole.log(isValidExpression('(a)())()'));\\n\",\"filename\":\"contracts/santize.js\",\"server\":\"home\"}}],[\"contracts/santize-parentheses-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} input\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  // Input expression is already valid.\\n  if (isValidExpression(input)) return [input];\\n\\n  const validExpressions = [];\\n  for (let i = 0; i < input.length; i++) {\\n    const newExpression = input.slice(0, i) + input.slice(i + 1);\\n    console.log(newExpression);\\n  }\\n}\\n\\n/**\\n * Checks if an expression is valid based on the parentheses pairs.\\n *\\n * @param {string} expression\\n */\\nfunction isValidExpression(expression) {\\n  const parentheses = [];\\n  const characters = expression.split('');\\n  for (const character of characters) {\\n    switch (character) {\\n      case '(':\\n        parentheses.push(1);\\n        break;\\n      case ')':\\n        if (parentheses.pop() === undefined) return false;\\n        break;\\n    }\\n  }\\n  return parentheses.length === 0;\\n}\\n\\nconsole.log(sanitizeParenthesesInExpression);\\n\",\"filename\":\"contracts/santize-parentheses-in-expression.js\",\"server\":\"home\"}}],[\"contracts/sanitize-parentheses-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} expression\\n * @returns {string[]} valid expressions\\n */\\nexport default function sanitizeParenthesesInExpression(expression) {\\n  let charactersToRemove = 0;\\n  let expressions = [expression];\\n  while (charactersToRemove < expression.length) {\\n    const validExpressions = new Set();\\n    for (const expression of expressions) {\\n      if (isValidExpression(expression)) validExpressions.add(expression);\\n    }\\n    if (validExpressions.size > 0) return [...validExpressions];\\n\\n    const shortenedExpressions = new Set();\\n    for (const expression of expressions) {\\n      for (let i = 0; i < expression.length; i++) {\\n        shortenedExpressions.add(\\n          expression.substring(0, i) + expression.substring(i + 1)\\n        );\\n      }\\n    }\\n    expressions = [...shortenedExpressions];\\n\\n    charactersToRemove++;\\n  }\\n  return [];\\n}\\n\\n/** @type {Object.<string, boolean>} */\\nconst expressionToIsValidMap = {};\\n\\n/**\\n * @param {string} expression\\n * @returns {boolean} is valid\\n */\\nfunction isValidExpression(expression) {\\n  if (expression in expressionToIsValidMap) {\\n    return expressionToIsValidMap[expression];\\n  }\\n\\n  let stack = 0;\\n  for (let i = 0; i < expression.length; i++) {\\n    const character = expression.charAt(i);\\n    if (character === '(') stack++;\\n    else if (character === ')') stack--;\\n    if (stack < 0) break;\\n  }\\n  expressionToIsValidMap[expression] = stack === 0;\\n  return expressionToIsValidMap[expression];\\n}\\n\",\"filename\":\"contracts/sanitize-parentheses-in-expression.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-on-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n */\\nexport default function uniquePathsInAGridI {}\\n\",\"filename\":\"contracts/unique-paths-on-a-grid.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-in-a-grid-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n */\\nexport default function uniquePathsInAGridI(input) {\\n  const [rows, columns] = input;\\n  return new Set(getPaths(0, 0, new Grid(rows, columns), [])).size;\\n}\\n\\n/**\\n * @typedef {('d'|'r')[]} Path\\n */\\n\\n/**\\n * Gets all possible (can have duplicates) paths from the given position to the\\n * bottom-right corner ({x: columns, y: rows}).\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {Grid} grid\\n * @param {Path[]} pathThusFar\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (x === grid.columns - 1 && y === grid.rows - 1) return [pathThusFar];\\n\\n  const paths = [];\\n\\n  const rightPosition = { x: x + 1, y: y };\\n  if (grid.isValidPosition(rightPosition.x, rightPosition.y)) {\\n    paths.push(\\n      ...getPaths(rightPosition.x, rightPosition.y, grid, [...pathThusFar, 'r'])\\n    );\\n  }\\n\\n  const downPosition = { x: x, y: y + 1 };\\n  if (grid.isValidPosition(downPosition.x, downPosition.y)) {\\n    paths.push(\\n      ...getPaths(downPosition.x, downPosition.y, grid, [...pathThusFar, 'd'])\\n    );\\n  }\\n\\n  return paths;\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number} rows\\n   * @param {number} columns\\n   */\\n  constructor(rows, columns) {\\n    this.rows = rows;\\n    this.columns = columns;\\n  }\\n\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   * @returns {boolean} whether the position is valid\\n   */\\n  isValidPosition(x, y) {\\n    return x >= 0 && y >= 0 && x < this.columns && y < this.rows;\\n  }\\n}\\n\",\"filename\":\"contracts/unique-paths-in-a-grid-i.js\",\"server\":\"home\"}}],[\"contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime factor of 301829830?\\n *\\n * @param {number} input\\n */\\nexport default function findLargestPrimeFactor(input) {\\n  const squareRoot = Math.floor(Math.sqrt(input));\\n  let otherPrimeFactor;\\n  for (let i = 1; i <= squareRoot; i++) {\\n    if (input % i !== 0) continue; // Not a factor.\\n    if (isPrime(input / i)) return input / i;\\n    if (isPrime(i)) otherPrimeFactor = i;\\n  }\\n  return otherPrimeFactor;\\n}\\n\\n/** @type {Object.<number, boolean>}*/\\nconst numberToIsPrimeMap = {\\n  1: true,\\n  2: true,\\n  3: true,\\n  5: true,\\n  7: true,\\n  11: true,\\n  13: true,\\n  17: true,\\n  19: true,\\n  23: true,\\n  29: true,\\n  31: true,\\n  37: true,\\n  41: true,\\n  43: true,\\n  47: true,\\n  53: true,\\n  59: true,\\n  61: true,\\n  67: true,\\n  71: true,\\n  73: true,\\n  79: true,\\n  83: true,\\n  89: true,\\n  97: true,\\n};\\n\\n/**\\n * Checks whether a number is prime and records it into the `NUMBER_TO_IS_PRIME`\\n * map.\\n *\\n * @param {number} number\\n */\\nfunction isPrime(number) {\\n  if (number in numberToIsPrimeMap) return numberToIsPrimeMap[number];\\n\\n  let isPrime = true;\\n\\n  for (let i = 2; i < Math.sqrt(number); i++) {\\n    if (number % i === 0) {\\n      isPrime = false;\\n      break;\\n    }\\n  }\\n\\n  numberToIsPrimeMap[number] = isPrime;\\n  return isPrime;\\n}\\n\",\"filename\":\"contracts/find-largest-prime-factor.js\",\"server\":\"home\"}}],[\"monitor-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { printTable } from 'utils/table';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { ONE_SECOND } from 'utils/constants';\\nimport { createColorForString } from 'utils/colors';\\nimport { GROW_JS, HACK_JS, WEAKEN_JS } from 'utils/scripts';\\nimport { createReactElement } from 'utils/dom';\\n\\n/**\\n * Monitors all servers that can be hacked in the --tail.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(1300, 1000);\\n  ns.moveTail(50, 50);\\n  ns.atExit(() => ns.closeTail());\\n\\n  const allServers = getServers(ns).filter(server => server.maxMoney > 0);\\n  const hackColor = ns.ui.getTheme().error;\\n  const growColor = ns.ui.getTheme().success;\\n  const weakenColor = ns.ui.getTheme().warning;\\n\\n  while (true) {\\n    const servers = allServers.filter(\\n      server =>\\n        ns.hasRootAccess(server.hostname) &&\\n        ns.getHackingLevel() >= server.hackingLevel\\n    );\\n    servers.sort(\\n      (server1, server2) =>\\n        ns.hackAnalyzeChance(server2.hostname) -\\n        ns.hackAnalyzeChance(server1.hostname)\\n    );\\n\\n    const processes = getServers(ns)\\n      .map(server => ns.ps(server.name))\\n      .flat();\\n    const serverNameToHackThreadsMap = {};\\n    const serverNameToWeakenThreadsMap = {};\\n    const serverNameToGrowThreadsMap = {};\\n    for (const process of processes) {\\n      if (![HACK_JS, WEAKEN_JS, GROW_JS].includes(process.filename)) continue;\\n      const serverName = process.args[0];\\n      const threadCount = process.threads;\\n      const map = {\\n        [HACK_JS]: serverNameToHackThreadsMap,\\n        [WEAKEN_JS]: serverNameToWeakenThreadsMap,\\n        [GROW_JS]: serverNameToGrowThreadsMap,\\n      }[process.filename];\\n      if (!(serverName in map)) map[serverName] = 0;\\n      map[serverName] += threadCount;\\n    }\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const server of servers) {\\n      const scripts = [];\\n      if (server.hostname in serverNameToHackThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToHackThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads hacking`, {\\n            color: hackColor,\\n          })\\n        );\\n      }\\n      if (server.hostname in serverNameToWeakenThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToWeakenThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads weakening`, {\\n            color: weakenColor,\\n          })\\n        );\\n      }\\n      if (server.hostname in serverNameToGrowThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToGrowThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads growing`, {\\n            color: growColor,\\n          })\\n        );\\n      }\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Hostname', style: { width: 'max-content' } },\\n            content: server.hostname,\\n            style: { color: createColorForString(ns, server.hostname) },\\n          },\\n          {\\n            column: {\\n              name: 'Hack Chance',\\n              style: { textAlign: 'right', color: hackColor },\\n            },\\n            content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Hack Time',\\n              style: { textAlign: 'center', color: hackColor },\\n            },\\n            content: formatTime(ns, ns.getHackTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Available Money',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatMoney(\\n              ns,\\n              ns.getServerMoneyAvailable(server.hostname)\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Max Money',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatMoney(ns, server.maxMoney),\\n          },\\n          {\\n            column: {\\n              name: 'Grow Time',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatTime(ns, ns.getGrowTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Current Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(\\n              ns.getServerSecurityLevel(server.hostname)\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Min Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(server.minSecurity, 0),\\n          },\\n          {\\n            column: {\\n              name: 'Base Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(server.baseSecurity, 0),\\n          },\\n          {\\n            column: {\\n              name: 'Weaken Time',\\n              style: { textAlign: 'center', color: weakenColor },\\n            },\\n            content: formatTime(ns, ns.getWeakenTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Scripts',\\n              style: { width: 'max-content' },\\n            },\\n            content: scripts.length === 0 ? '-' : createReactElement(scripts),\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n\\n    ns.clearLog();\\n    printTable(ns, table);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-hacking.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { CONTRACT_TYPE_TO_SOLVER_MAP, HOME_HOSTNAME } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Manages contracts.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const servers = getServers(ns);\\n\\n  /** @type {Contract[]} */ const contracts = servers\\n    .map(server =>\\n      ns.ls(server.hostname, '.cct').map(\\n        fileName =>\\n          /** @type {Contract} */ ({\\n            fileName,\\n            type: ns.codingcontract.getContractType(fileName, server.hostname),\\n            server,\\n          })\\n      )\\n    )\\n    .flat();\\n  contracts.sort((a, b) => a.type.localeCompare(b.type));\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const contract of contracts) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Contract Type', style: {} },\\n          content: contract.type,\\n        },\\n        {\\n          column: { name: 'Status', style: {} },\\n          content: attemptContract(ns, contract),\\n        },\\n        {\\n          column: { name: 'Run Command', style: { maxWidth: '800px' } },\\n          content: getRunCommand(contract),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n/**\\n * @typedef Contract\\n * @property {string} fileName\\n * @property {string} type\\n * @property {Server} server\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {Contract} connect\\n * @returns {import('NetscriptDefinitions').ReactElement} message representing the status of attempting the contract\\n */\\nfunction attemptContract(ns, contract) {\\n  const theme = ns.ui.getTheme();\\n  if (\\n    !(contract.type in CONTRACT_TYPE_TO_SOLVER_MAP) ||\\n    CONTRACT_TYPE_TO_SOLVER_MAP[contract.type] === null\\n  ) {\\n    return createReactElement('No solver available', { color: theme.warning });\\n  }\\n\\n  const data = ns.codingcontract.getData(\\n    contract.fileName,\\n    contract.server.hostname\\n  );\\n  const solver = CONTRACT_TYPE_TO_SOLVER_MAP[contract.type];\\n  const answer = solver(data);\\n  if (answer) {\\n    const reward = ns.codingcontract.attempt(\\n      answer,\\n      contract.fileName,\\n      contract.server.hostname\\n    );\\n    return reward\\n      ? createReactElement(reward, { color: theme.success })\\n      : createReactElement('Attempt failed!', { color: theme.error });\\n  }\\n  return createReactElement('Attempt failed!', { color: theme.error });\\n}\\n\\n/**\\n * @param {Contract} contract\\n * @returns {string} run command\\n */\\nfunction getRunCommand(contract) {\\n  return [\\n    'home',\\n    ...contract.server.path.map(hostname => `connect ${hostname}`),\\n    `run ${contract.fileName}`,\\n  ].join('; ');\\n}\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"find-backdoors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Prints out a command to run backdoor on all unowned servers with root access.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const currentHackingLevel = ns.getHackingLevel();\\n  const servers = getServers(ns).filter(server => {\\n    const serverData = ns.getServer(server.hostname);\\n    return (\\n      ns.hasRootAccess(server.hostname) &&\\n      serverData.requiredHackingSkill <= currentHackingLevel &&\\n      !serverData.purchasedByPlayer &&\\n      !serverData.backdoorInstalled\\n    );\\n  });\\n  for (const server of servers) {\\n    const commands = [\\n      server.path.map(hostname => `connect ${hostname}`).join('; '),\\n      'backdoor',\\n      'home',\\n    ];\\n    await executeTerminalCommand(ns, ...commands);\\n  }\\n}\\n\",\"filename\":\"find-backdoors.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-iii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Permutation, Transaction } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 47,69,73,32,15,167,100,135,5,80,18,192,171,183,152\\n *\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderIII(stockPrices) {\\n  const permutations = [];\\n\\n  for (let buyDay1 = 0; buyDay1 < stockPrices.length; buyDay1++) {\\n    for (let sellDay1 = buyDay1; sellDay1 < stockPrices.length; sellDay1++) {\\n      const transaction1 = new Transaction(stockPrices, buyDay1, sellDay1);\\n      if (transaction1.profit > 0) {\\n        permutations.push(new Permutation(transaction1));\\n      }\\n\\n      for (let buyDay2 = sellDay1; buyDay2 < stockPrices.length; buyDay2++) {\\n        for (\\n          let sellDay2 = buyDay2;\\n          sellDay2 < stockPrices.length;\\n          sellDay2++\\n        ) {\\n          const transaction2 = new Transaction(stockPrices, buyDay2, sellDay2);\\n          const permutation = new Permutation(transaction1, transaction2);\\n          if (permutation.profit > 0) permutations.push(permutation);\\n        }\\n      }\\n    }\\n  }\\n\\n  return Math.max(...permutations.map(permutation => permutation.profit));\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-iii.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Transaction } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 35,172,130,31,111,79,19,41,125,183,11,39,153,11,19,126,130,22,139,134,54,47,169,138,75\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderI(stockPrices) {\\n  const transactions = [];\\n\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    for (let sellDay = buyDay; sellDay < stockPrices.length; sellDay++) {\\n      const transaction = new Transaction(stockPrices, buyDay, sellDay);\\n      if (transaction.profit >= 0) transactions.push(transaction);\\n    }\\n  }\\n\\n  return Math.max(...transactions.map(transaction => transaction.profit));\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-i.js\",\"server\":\"home\"}}],[\"generate-test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { createReactElement } from 'utils/dom';\\nimport { CONTRACT_TYPE_TO_SOLVER_MAP, HOME_HOSTNAME } from 'utils/constants';\\n\\nconst PADDING = '16px';\\n\\n/**\\n * Generates test contracts.\\n *\\n * Takes in a contract type as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const contractType = ns.args[0];\\n\\n  // Check if there is an existing test contract that we can run.\\n  let contractFileName = getDummyContract(ns, contractType);\\n  if (!contractFileName) {\\n    ns.codingcontract.createDummyContract(contractType);\\n    contractFileName = getDummyContract(ns, contractType);\\n  }\\n\\n  // Print out the contract into --tail logs.\\n  printContract(ns, contractFileName);\\n}\\n\\nexport function autocomplete() {\\n  return Object.keys(CONTRACT_TYPE_TO_SOLVER_MAP).map(\\n    contractType => `\\\"${contractType}\\\"`\\n  );\\n}\\n\\n/**\\n * Returns a dummy contract's file name if it exists and undefined if otherwise.\\n *\\n * @param {NS} ns\\n * @param {string} contractType\\n * @returns {string|undefined} contract file name\\n */\\nfunction getDummyContract(ns, contractType) {\\n  return ns\\n    .ls(HOME_HOSTNAME, '.cct')\\n    .find(\\n      contractFileName =>\\n        ns.codingcontract.getContractType(contractFileName) === contractType\\n    );\\n}\\n\\n/**\\n * Prints a contract to terminal given the contract file name.\\n *\\n * @param {NS} ns\\n * @param {string} contractFileName\\n */\\nfunction printContract(ns, contractFileName) {\\n  const color = ns.ui.getTheme().success;\\n\\n  // Print contract type.\\n  ns.tprintRaw(\\n    createReactElement(ns.codingcontract.getContractType(contractFileName), {\\n      color: color,\\n      fontWeight: 'bold',\\n      padding: PADDING,\\n    })\\n  );\\n\\n  // Print description.\\n  ns.tprintRaw(\\n    createReactElement(\\n      ns.codingcontract\\n        .getDescription(contractFileName)\\n        .replaceAll('&nbsp;', ' '),\\n      {\\n        padding: PADDING,\\n      }\\n    )\\n  );\\n\\n  // Print command to attempt.\\n  ns.tprintRaw(\\n    createReactElement(`home; run ${contractFileName}`, {\\n      color: color,\\n      padding: PADDING,\\n    })\\n  );\\n}\\n\",\"filename\":\"generate-test-contract.js\",\"server\":\"home\"}}],[\"utils/dom.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {Object.<string, (string|number)>} Style\\n */\\n\\nimport { ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * Creates a React element that can be appended to the terminal or --tail logs.\\n *\\n * @param {import(\\\"NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Style]} style optional CSS\\n * @param {[string]} tag to override <div>\\n * @returns {import(\\\"NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style, tag) {\\n  if (Array.isArray(content)) {\\n    return React.createElement(\\n      tag ?? 'div',\\n      { style: style ?? {} },\\n      ...content\\n    );\\n  } else {\\n    return React.createElement(tag ?? 'div', { style: style ?? {} }, content);\\n  }\\n}\\n\\n/**\\n * Executes terminal commands (e.g. `connect n00dles`) without RAM penalties.\\n *\\n * @param {NS} ns\\n * @param {...string} commands\\n */\\nexport async function executeTerminalCommand(ns, ...commands) {\\n  for (let command of commands) {\\n    let wasSuccessful = executeCommand(command);\\n    while (!wasSuccessful) {\\n      await ns.sleep(ONE_SECOND / 2);\\n      wasSuccessful = executeCommand(command);\\n    }\\n  }\\n}\\n\\n/**\\n * @param {string} command\\n * @returns {boolean} whether executing the event was successful\\n */\\nfunction executeCommand(command) {\\n  const input = getDocument().getElementById('terminal-input');\\n  if (input === null || input.hasAttribute('disabled')) return false;\\n  input.value = command;\\n  const handler = Object.keys(input)[1];\\n  input[handler].onChange({ target: input });\\n  input[handler].onKeyDown({\\n    key: 'Enter',\\n    code: 'Enter',\\n    which: 13,\\n    keyCode: 13,\\n    preventDefault: () => null,\\n  });\\n  return true;\\n}\\n\\n/**\\n * Returns DOM document without the RAM penalties.\\n *\\n * Note: Make sure to name the variable `doc` instead of `document` to avoid RAM\\n * penalties.\\n *\\n * @returns {Document}\\n */\\nexport const getDocument = () => eval('document');\\n\",\"filename\":\"utils/dom.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"class Transaction {\\n  constructor(buyDay, sellDay, stockPrices) {\\n    this.buyDay = buyDay;\\n    this.sellDay = sellDay;\\n    this.buyPrice = stockPrices[buyDay];\\n    this.sellPrice = stockPrices[sellDay];\\n    this.profit = this.sellPrice - this.buyPrice;\\n  }\\n\\n  toString() {\\n    return `buy ${this.buyDay} ($${this.buyPrice}), sell ${this.sellDay} ($${this.sellPrice})`;\\n  }\\n}\\n\\nclass Permutation {\\n  constructor(...transactions) {\\n    this.transactions = transactions;\\n    this.profit = transactions\\n      .map(transaction => transaction.profit)\\n      .reduce((a, b) => a + b);\\n  }\\n\\n  toString() {\\n    return (\\n      '[\\\\n' +\\n      this.transactions.map(transaction => ` ${transaction}`).join('\\\\n') +\\n      '\\\\n]'\\n    );\\n  }\\n}\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * @param {number[]} stockPrices\\n *        where the i-th element represents the stock on day i\\n * @returns {number} max profit using at most 1 transaction\\n */\\nexport const algorithmicStockTraderI = stockPrices =>\\n  getMaxProfit(stockPrices, 1);\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * @param {number[]} stockPrices\\n *        where the i-th element represents the stock on day i\\n * @returns {number} max profit using as many transactions as you'd like\\n */\\nexport const algorithmicStockTraderII = stockPrices =>\\n  getMaxProfit(stockPrices, stockPrices.length);\\n\\n//  * Algorithmic Stock Trader III\\n//  *\\n//  * @param {number[]} stockPrices\\n//  *        where the i-th element represents the stock on day i\\n//  * @returns {number} max profit using at most 2 transactions\\n//  */\\n// export const algorithmicStockTraderIII = stockPrices =>\\n//   getMaxProfit(stockPrices, 2);\\n\\n// /**\\n//  * Algorithmic Stock Trader IV\\n//  *\\n//  * @param {(number, number[])[]} input [k, stockPrices]\\n//  * @returns {number} max profit using at most k transactions\\n//  */\\n// export function algorithmicStockTraderIV(input) {\\n//   const [k, stockPrices] = input;\\n//   return getMaxProfit(stockPrices, k);\\n// }\\n\\n/**\\n *\\n * @param {number[]} stockPrices\\n * @param {number} transactionCount\\n */\\nfunction getMaxProfit(stockPrices, transactionCount) {\\n  const transactions = getPositiveTransactions(stockPrices);\\n  if (transactions.length === 0) return 0;\\n\\n  if (transactionCount === 1) {\\n    return Math.max(...transactions.map(transaction => transaction.profit));\\n  }\\n\\n  const sellDayToNextTransactionsMap = {};\\n  const sellDays = transactions.map(transaction => transaction.sellDay);\\n  for (const sellDay of sellDays) {\\n    sellDayToNextTransactionsMap[sellDay] = transactions.filter(\\n      transaction => transaction.buyDay > sellDay\\n    );\\n  }\\n\\n  const permutations = [];\\n  for (const transaction of transactions) {\\n    permutations.push(\\n      getMostProfitablePermutation(transaction, sellDayToNextTransactionsMap)\\n    );\\n  }\\n  permutations.sort((p1, p2) => p2.profit - p1.profit);\\n  return permutations[0].profit;\\n}\\n\\n/**\\n * @param {number[]} stockPrices\\n * @returns {Transaction[]} all possible positive profit transactions\\n */\\nfunction getPositiveTransactions(stockPrices) {\\n  const transactions = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n      const transaction = new Transaction(buyDay, sellDay, stockPrices);\\n      if (transaction.profit > 0) transactions.push(transaction);\\n    }\\n  }\\n  return transactions;\\n}\\n\\n/**\\n * @param {Transaction} transaction\\n * @param {Object.<number, Transaction[]>} sellDayToNextTransactionsMap\\n * @param {Permutation}\\n */\\nfunction getMostProfitablePermutation(\\n  transaction,\\n  sellDayToNextTransactionsMap\\n) {\\n  const permutations = [];\\n  const nextTransactions = sellDayToNextTransactionsMap[transaction.sellDay];\\n  if (nextTransactions.length === 0) return new Permutation(transaction);\\n  for (const nextTransaction of nextTransactions) {\\n    permutations.push(\\n      getMostProfitablePermutation(\\n        nextTransaction,\\n        sellDayToNextTransactionsMap\\n      )\\n    );\\n  }\\n  permutations.sort((p1, p2) => p2.profit - p1.profit);\\n  return new Permutation(transaction, ...permutations[0].transactions);\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader.js\",\"server\":\"home\"}}],[\"contracts/Shortest-Path-in-a-Grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"contracts/Shortest-Path-in-a-Grid.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} input\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(input) {\\n  // Starting from bottom corner of grid, get all paths possible to bottom corner.\\n  const grid = new Grid(input);\\n  return getPaths(grid.endPosition, grid, '', [], new Map());\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')} Direction\\n */\\n\\nconst directionToOffsetMap = {\\n  D: { x: 0, y: -1 },\\n  R: { x: -1, y: 0 },\\n  U: { x: 0, y: 1 },\\n  L: { x: 1, y: 0 },\\n};\\n\\n/**\\n *\\n * @param {Position} position\\n * @param {Grid} grid\\n * @param {string} pathThusFar\\n * @param {Position[]} visitedPositions\\n * @param {Map<Position, string[]>} positionToPathsCacheMap\\n * @returns {string[]}\\n */\\nfunction getPaths(\\n  position,\\n  grid,\\n  pathThusFar,\\n  visitedPositions,\\n  positionToPathsCacheMap\\n) {\\n  console.log(`position: ${position}, ${pathThusFar}`);\\n\\n  const cacheKey = [...positionToPathsCacheMap.keys()].find(key =>\\n    key.equals(position)\\n  );\\n  if (cacheKey) {\\n    console.log('getting from cache', cacheKey);\\n    return positionToPathsCacheMap.get(cacheKey);\\n  }\\n\\n  if (position.equals(new Position(0, 0))) {\\n    console.log(`reached the end ${pathThusFar}`);\\n    return [pathThusFar];\\n  }\\n\\n  let paths = [];\\n  for (const direction in directionToOffsetMap) {\\n    const offset = directionToOffsetMap[direction];\\n    const nextPosition = new Position(\\n      position.x + offset.x,\\n      position.y + offset.y\\n    );\\n    if (\\n      !grid.isValidPosition(nextPosition) ||\\n      visitedPositions.find(visitedPosition =>\\n        visitedPosition.equals(nextPosition)\\n      )\\n    ) {\\n      continue;\\n    }\\n\\n    paths.push(\\n      ...getPaths(\\n        nextPosition,\\n        grid,\\n        pathThusFar + direction,\\n        [...visitedPositions, position],\\n        positionToPathsCacheMap\\n      )\\n    );\\n  }\\n\\n  positionToPathsCacheMap.set(position, paths);\\n  return paths;\\n}\\n\\nclass Position {\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   */\\n  constructor(x, y) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n\\n  equals(other) {\\n    return this.x === other.x && this.y === other.y;\\n  }\\n\\n  toString() {\\n    return `(${this.x}, ${this.y})`;\\n  }\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number[][]} grid\\n   */\\n  constructor(grid) {\\n    this.grid = grid;\\n    this.endPosition = new Position(grid[0].length - 1, grid.length - 1);\\n  }\\n\\n  /**\\n   * @param {Position} position\\n   * @returns {boolean} is valid\\n   */\\n  isValidPosition(position) {\\n    const [x, y] = [position.x, position.y];\\n    return (\\n      x >= 0 &&\\n      y >= 0 &&\\n      y < this.grid.length &&\\n      x < this.grid[y].length &&\\n      this.grid[y][x] === 0\\n    );\\n  }\\n}\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 1, 0, 0, 0],\\n    [0, 0, 0, 1, 0],\\n  ])\\n);\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 1],\\n    [1, 0],\\n  ])\\n);\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1],\\n    [0, 0, 0, 1, 0, 0],\\n    [0, 0, 1, 1, 1, 0],\\n    [0, 0, 0, 0, 0, 0],\\n    [1, 1, 0, 0, 0, 0],\\n    [0, 1, 0, 0, 0, 1],\\n    [1, 1, 0, 0, 0, 0],\\n  ])\\n); // DDDDRRDDDRRR\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 1, 0, 1],\\n//     [1, 0, 0, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 1, 0, 0, 0, 0],\\n//     [1, 0, 0, 1, 1, 0, 0, 0],\\n//     [0, 0, 1, 0, 0, 0, 0, 0],\\n//     [0, 0, 1, 1, 0, 0, 0, 0],\\n//   ])\\n// );\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.js\",\"server\":\"home\"}}],[\"test-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, CONTRACT_TYPE_TO_SOLVER_MAP } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { tprintTable } from 'utils/table';\\n\\nconst NUM_CONTRACTS_TO_GENERATE = 5;\\n\\n/**\\n * Generates contracts to test a contract function again.\\n *\\n * Takes in a contract type as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const contractType = ns.args[0];\\n\\n  ns.tprintf(`Testing ${contractType}`);\\n\\n  // Generate contracts.\\n  for (let i = 0; i < NUM_CONTRACTS_TO_GENERATE; i++) {\\n    ns.codingcontract.createDummyContract(contractType);\\n  }\\n\\n  // Get generated contract file names.\\n  const contractFileNames = ns\\n    .ls(HOME_HOSTNAME, '.cct')\\n    .filter(\\n      contractFileName =>\\n        ns.codingcontract.getContractType(contractFileName) === contractType\\n    );\\n\\n  // Get contract solver.\\n  const solver = CONTRACT_TYPE_TO_SOLVER_MAP[contractType];\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const contractFileName of contractFileNames) {\\n    // Try to solve the contract.\\n    const input = ns.codingcontract.getData(contractFileName);\\n    const startTimestamp = new Date().getUTCMilliseconds();\\n    const output = solver(input);\\n    const endTimestamp = new Date().getUTCMilliseconds();\\n    const wasSuccessful =\\n      ns.codingcontract.attempt(output, contractFileName).length > 0;\\n    await ns.sleep(1);\\n\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Contract Name', style: {} },\\n          content: contractFileName,\\n        },\\n        {\\n          column: { name: 'Input', style: { maxWidth: '200px' } },\\n          content: `${input}`,\\n        },\\n        {\\n          column: { name: 'Output', style: {} },\\n          content: `${output}`,\\n        },\\n        {\\n          column: { name: 'Success?', style: {} },\\n          content: createReactElement(\\n            wasSuccessful ? 'Success!' : 'Failed 😭',\\n            {\\n              color: wasSuccessful\\n                ? ns.ui.getTheme().success\\n                : ns.ui.getTheme().error,\\n            }\\n          ),\\n        },\\n        {\\n          column: { name: 'Time', style: { textAlign: 'center' } },\\n          content: `${endTimestamp - startTimestamp}ms`,\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\\nexport function autocomplete() {\\n  return Object.keys(CONTRACT_TYPE_TO_SOLVER_MAP)\\n    .filter(contractType => CONTRACT_TYPE_TO_SOLVER_MAP[contractType] !== null)\\n    .map(contractType => `\\\"${contractType}\\\"`);\\n}\\n\",\"filename\":\"test-contracts.js\",\"server\":\"home\"}}],[\"contracts/compression-ii-lz-decompression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression II: LZ Decompression\\n *\\n * Lempel-Ziv (LZ) compression is a data compression technique which encodes\\n * data using references to earlier parts of the data. In this variant of LZ,\\n * data is encoded in two types of chunk. Each chunk begins with a length L,\\n * encoded as a single ASCII digit from 1 to 9, followed by the chunk data,\\n * which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data. To do this, the\\n *    length is followed by a second ASCII digit X: each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends immediately,\\n * and the next character is the start of a new chunk. The two chunk types\\n * alternate, starting with type 1, and the final chunk may be of either type.\\n *\\n * You are given the following LZ-encoded string:\\n *     65JFyHC910796NwIZRo6117911y997Qh8e5aQ77902YQHLfWe2378BaqXHi3432AA\\n *\\n * Decode it and output the original string.\\n *\\n * Example: decoding '5aaabb450723abb' chunk-by-chunk\\n *     5aaabb           ->  aaabb\\n *     5aaabb45         ->  aaabbaaab\\n *     5aaabb450        ->  aaabbaaab\\n *     5aaabb45072      ->  aaabbaaababababa\\n *     5aaabb450723abb  ->  aaabbaaababababaabb\\n *\\n * @param {string} encoded message\\n * @returns {string} uncompressed message\\n */\\nexport default function compressionIILZDecompression(encoded) {\\n  let uncompressed = '';\\n\\n  let index = 0;\\n  let chunkType = 1;\\n  while (index < encoded.length) {\\n    const l = parseInt(encoded.charAt(index));\\n    if (l === 0) {\\n      // Chunk ends.\\n      index++;\\n      chunkType = chunkType === 1 ? 2 : 1;\\n      continue;\\n    }\\n\\n    switch (chunkType) {\\n      case 1:\\n        // Copy the next L characters to the uncompressed message.\\n        uncompressed += encoded.substring(index + 1, index + 1 + l);\\n        index = index + 1 + l;\\n        chunkType = 2;\\n        break;\\n      case 2:\\n        const x = parseInt(encoded.charAt(index + 1));\\n        const chunk = uncompressed.substring(\\n          uncompressed.length - x,\\n          uncompressed.length - x + l\\n        );\\n        for (let i = 0; i < l; i++) {\\n          uncompressed += chunk.charAt(i % chunk.length);\\n        }\\n        index += 2;\\n        chunkType = 1;\\n        break;\\n    }\\n  }\\n\\n  return uncompressed;\\n}\\n\",\"filename\":\"contracts/compression-ii-lz-decompression.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-ii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Transaction, Permutation } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 103,150,154,3,98,150,182,97,41,96,99,1,1,28,66,19,51,4,172,22,199,40,93,33,185,96,158,123,47,76,18,93,103,126,120,92,194,126,97,124,34,86,29,22,73,156,27,18\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderII(stockPrices) {\\n  const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    permutations.push(...getAllPermutations(buyDay, stockPrices, {}));\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  return permutations.length === 0 ? 0 : permutations[0].profit;\\n}\\n\\n/**\\n * Returns all permutations given a buy day.\\n *\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n */\\nfunction getAllPermutations(buyDay, stockPrices, buyDayToPermutationsMap) {\\n  if (buyDay === stockPrices.length - 1) return [];\\n  if (buyDay in buyDayToPermutationsMap) {\\n    return buyDayToPermutationsMap[buyDay];\\n  }\\n\\n  const permutations = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const transaction = new Transaction(stockPrices, buyDay, sellDay);\\n    if (transaction.profit <= 0) continue;\\n    permutations.push(new Permutation(transaction));\\n\\n    for (\\n      let nextBuyDay = sellDay + 1;\\n      nextBuyDay < stockPrices.length;\\n      nextBuyDay++\\n    ) {\\n      const nextBuyDayPermutations = getAllPermutations(\\n        nextBuyDay,\\n        stockPrices,\\n        buyDayToPermutationsMap\\n      );\\n      nextBuyDayPermutations.sort((a, b) => b.profit - a.profit);\\n      if (nextBuyDayPermutations.length > 0) {\\n        const permutation = new Permutation(\\n          transaction,\\n          ...nextBuyDayPermutations[0].transactions\\n        );\\n        if (permutation.profit > 0) permutations.push(permutation);\\n      }\\n    }\\n  }\\n  buyDayToPermutationsMap[buyDay] = permutations;\\n  return permutations;\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-ii.js\",\"server\":\"home\"}}],[\"contracts/hamming-codes-integer-to-encoded-binary.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * HammingCodes: Integer to Encoded Binary\\n *\\n * You are given the following decimal Value:\\n * 223500403664\\n *\\n * Convert it to a binary representation and encode it as an 'extended Hamming\\n * code'. Eg: Value 8 is expressed in binary as '1000', which will be encoded\\n * with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The\\n * encoding of 8 is 11110000. As another example, '10101' (Value 21) will result\\n * into (pppdpdddpd) '1001101011'.\\n *\\n * The answer should be given as a string containing only 1s and 0s.\\n *\\n * NOTE: the endianness of the data bits is reversed in relation to the\\n *       endianness of the parity bits.\\n *\\n * NOTE: The bit at index zero is the overall parity bit, this should be set\\n *       last.\\n *\\n * NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which\\n *         explains the 'rule' of encoding, including the first index parity bit\\n *         mentioned in the previous note.\\n *\\n * Extra rule for encoding:\\n * There should be no leading zeros in the 'data bit' section\\n */\\n\",\"filename\":\"contracts/hamming-codes-integer-to-encoded-binary.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-iv.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader IV\\n *\\n * You are given the following array with two elements:\\n *\\n * [9, [164,113,142,36,159,53,111,154,6,61,134,22,195,142,7,39,190,28,112,140,17,156,88,78,88]]\\n *\\n * The first element is an integer k. The second element is an array of stock\\n * prices (which are numbers) where the i-th element represents the stock price\\n * on day i.\\n *\\n * Determine the maximum possible profit you can earn using at most k\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you can buy it again.\\n *\\n * If no profit can be made, then the answer should be 0.\\n */\\n\",\"filename\":\"contracts/algorithmic-stock-trader-iv.js\",\"server\":\"home\"}}],[\"manage-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\n/**\\n * Manages buying/selling stocks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const stocks = getStocks(ns);\\n  const servers = getServers(ns);\\n  const hostnameToServerMap = {};\\n  for (const server of servers) {\\n    hostnameToServerMap[server.hostname] = server;\\n  }\\n  const commission = ns.stock.getConstants().StockMarketCommission;\\n\\n  while (true) {\\n    logStocks(ns, stocks);\\n\\n    for (const stock of stocks) {\\n      const position = getPosition(ns, stock.symbol);\\n      const askPrice = ns.stock.getAskPrice(stock.symbol);\\n\\n      // Sell longs.\\n      if (\\n        position.longs > 0 &&\\n        askPrice * position.longs >\\n          position.longPrice * position.longs + commission\\n      ) {\\n        ns.stock.sellStock(stock.symbol, position.longs);\\n      }\\n\\n      // Buy longs.\\n      if (stock.server) {\\n        const serverMoneyAvailable = ns.getServerMoneyAvailable(stock.server);\\n        const serverMaxMoney = hostnameToServerMap[stock.server].maxMoney;\\n        if (serverMoneyAvailable < serverMaxMoney / 2) buyLongs(ns, stock);\\n      }\\n      if (\\n        ns.stock.has4SDataTIXAPI() &&\\n        ns.stock.getForecast(stock.symbol) > 0.5\\n      ) {\\n        buyLongs(ns, stock);\\n      }\\n    }\\n\\n    await ns.stock.nextUpdate();\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/stocks').Stock} stock\\n */\\nfunction buyLongs(ns, stock) {\\n  const sharesToBuy = Math.min(\\n    stock.maxShares - getPosition(ns, stock.symbol).longs,\\n    Math.floor(\\n      (ns.getServerMoneyAvailable(HOME_HOSTNAME) / 2 -\\n        ns.stock.getConstants().StockMarketCommission) /\\n        ns.stock.getAskPrice(stock.symbol)\\n    )\\n  );\\n  ns.stock.buyStock(stock.symbol, sharesToBuy);\\n}\\n\\n/**\\n * @typedef Position\\n * @property {number} longs\\n * @property {number} longPrice\\n * @property {number} shorts\\n * @property {number} shortPrice\\n *\\n * @param {NS} ns\\n * @param {string} symbol\\n * @returns {Position}\\n */\\nfunction getPosition(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  return {\\n    longs: position[0],\\n    longPrice: position[1],\\n    shorts: position[2],\\n    shortPrice: position[3],\\n  };\\n}\\n\\n/**\\n * Logs stock data to --tail.\\n *\\n * @param {NS} ns\\n * @param {import('database/stocks').Stock[]} stocks\\n */\\nfunction logStocks(ns, stocks) {\\n  ns.clearLog();\\n\\n  stocks.sort(\\n    (stock1, stock2) =>\\n      getPosition(ns, stock2.symbol).longs -\\n      getPosition(ns, stock1.symbol).longs\\n  );\\n\\n  const table = { rows: [] };\\n  for (const stock of stocks) {\\n    const position = getPosition(ns, stock.symbol);\\n    const row = {\\n      cells: [\\n        {\\n          column: { name: 'Symbol', style: {} },\\n          content: stock.symbol,\\n        },\\n        {\\n          column: { name: 'Organization', style: {} },\\n          content: stock.organization,\\n        },\\n        {\\n          column: { name: 'Server', style: {} },\\n          content: stock.server,\\n        },\\n        {\\n          column: { name: 'Longs', style: { textAlign: 'right' } },\\n          content:\\n            position.longs === 0 ? '-' : ns.formatNumber(position.longs, 0),\\n        },\\n        {\\n          column: { name: 'Avg. Long Price', style: { textAlign: 'right' } },\\n          content:\\n            position.longs === 0 ? '-' : formatMoney(ns, position.longPrice),\\n        },\\n        {\\n          column: { name: 'Ask Price', style: { textAlign: 'right' } },\\n          content: formatMoney(ns, ns.stock.getAskPrice(stock.symbol)),\\n        },\\n        {\\n          column: { name: 'Shorts', style: { textAlign: 'right' } },\\n          content:\\n            position.shorts === 0 ? '-' : ns.formatNumber(position.shorts, 0),\\n        },\\n        {\\n          column: { name: 'Avg. Short Price', style: { textAlign: 'right' } },\\n          content:\\n            position.shorts === 0 ? '-' : formatMoney(ns, position.shortPrice),\\n        },\\n        {\\n          column: { name: 'Max Shares', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(stock.maxShares, 0),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-stocks.js\",\"server\":\"home\"}}],[\"database/stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\n\\nconst STOCKS_FILENAME = 'database/stocks.txt';\\n\\n/**\\n * @typedef Stock\\n * @property {string} symbol\\n * @property {string} organization\\n * @property {string} server\\n * @property {number} maxShares\\n */\\n\\n/**\\n * Writes all stock symbols to file.\\n *\\n * @param {NS} ns\\n */\\nexport function writeStocks(ns) {\\n  const servers = getServers(ns);\\n  const organizationToServerMap = {};\\n  for (const server of servers) {\\n    organizationToServerMap[server.organization] = server.hostname;\\n  }\\n\\n  const stocks = ns.stock.getSymbols().map(symbol => {\\n    const organization = ns.stock.getOrganization(symbol);\\n    return {\\n      symbol: symbol,\\n      organization: organization,\\n      server: organizationToServerMap[organization],\\n      maxShares: ns.stock.getMaxShares(symbol),\\n    };\\n  });\\n  ns.write(STOCKS_FILENAME, JSON.stringify(stocks), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Stock[]}\\n */\\nexport function getStocks(ns) {\\n  return JSON.parse(ns.read(STOCKS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/stocks.js\",\"server\":\"home\"}}],[\"get-net-worth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { getNetWorth, getStockValue } from 'utils/money';\\n\\n/**\\n * Get net worth including stocks.\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.tprintf(`Total ${formatMoney(ns, getNetWorth(ns))}`);\\n  ns.tprintf(\\n    `Cash: ${formatMoney(ns, ns.getServerMoneyAvailable(HOME_HOSTNAME))}`\\n  );\\n  ns.tprintf(`Stocks: ${formatMoney(ns, getStockValue(ns))}`);\\n}\\n\",\"filename\":\"get-net-worth.js\",\"server\":\"home\"}}],[\"sell-all-stock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Sell all stock.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.scriptKill('manage-stocks.js', HOME_HOSTNAME);\\n\\n  const symbols = getStocks(ns).map(stock => stock.symbol);\\n\\n  for (const symbol of symbols) {\\n    const position = ns.stock.getPosition(symbol);\\n\\n    // Sell longs.\\n    ns.stock.sellStock(symbol, position[0]);\\n\\n    // Sell shorts.\\n    try {\\n      ns.stock.sellShort(symbol, position[2]);\\n    } catch (_) {}\\n  }\\n}\\n\",\"filename\":\"sell-all-stock.js\",\"server\":\"home\"}}],[\"utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\\n/**\\n * @typedef {@type string[]} Path\\n *\\n * Gets a list of all paths to hosts.\\n *\\n * @param {NS} ns\\n * @param {string} rootHostname\\n * @param {[Path]} path\\n * @returns {Path[]} all paths including home as the first server\\n */\\nexport function getAllPaths(ns, rootHostname, path) {\\n  path = path ?? [];\\n\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== path[path.length - 1]);\\n  if (childrenHostnames.length === 0) return [];\\n\\n  const allPaths = [];\\n  for (const childHostname of childrenHostnames) {\\n    allPaths.push([...path, rootHostname, childHostname]);\\n    allPaths.push(...getAllPaths(ns, childHostname, [...path, rootHostname]));\\n  }\\n  return allPaths;\\n}\\n\",\"filename\":\"utils/servers.js\",\"server\":\"home\"}}],[\"contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order:\\n *\\n *     [\\n *         [25,20,16, 5,39,24,15,41,12,13,27,10]\\n *         [44,26,34,22,19,39,20,28,37,34,43,24]\\n *         [34, 1, 7,36,43,37,44,44, 5,36,49, 7]\\n *         [ 7,24,41,41, 3,44,20,50,31, 6, 9,15]\\n *         [36,13,47,41, 7,41,23, 2, 4,45,40,12]\\n *         [31,43,21,14,30,47,14, 6,43,49,25,12]\\n *         [47,40,25,46,13,39,41,48,46,45,34,25]\\n *         [22,26,29,24,24,38,40,30,13,38,34,46]\\n *         [47,34,17,16,36,16,24,27,16,50,13, 9]\\n *         [10,10,13,26,14,17,36,14,49,50,25,11]\\n *         [11,49, 7,25,43, 9, 2,42, 7,12,25,25]\\n *         [25,16,24,17,31,31,45,22, 9, 7,35,39]\\n *     ]\\n *\\n * Here is an example of what spiral order should be:\\n *\\n *     [\\n *         [1, 2, 3]\\n *         [4, 5, 6]\\n *         [7, 8, 9]\\n *     ]\\n *\\n * Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\n *\\n * Note that the matrix will not always be square:\\n *\\n *     [\\n *         [1,  2,  3,  4]\\n *         [5,  6,  7,  8]\\n *         [9, 10, 11, 12]\\n *     ]\\n *\\n * Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\n *\\n * @param {number[][]} matrix\\n * @returns {number[]}\\n */\\nexport default function spiralizeMatrix(matrix) {\\n  const elements = [];\\n  const totalElementCount = matrix.length * matrix[0].length;\\n\\n  let [x, y] = [0, 0];\\n  let direction = Direction.Right;\\n  do {\\n    if (isValidPosition(x, y, matrix)) {\\n      elements.push(matrix[y][x]);\\n      matrix[y][x] = null;\\n    }\\n\\n    switch (direction) {\\n      case Direction.Right:\\n        if (isValidPosition(x + 1, y, matrix)) {\\n          x++;\\n        } else {\\n          direction = Direction.Down;\\n        }\\n        break;\\n      case Direction.Down:\\n        if (isValidPosition(x, y + 1, matrix)) {\\n          y++;\\n        } else {\\n          direction = Direction.Left;\\n        }\\n        break;\\n      case Direction.Left:\\n        if (isValidPosition(x - 1, y, matrix)) {\\n          x--;\\n        } else {\\n          direction = Direction.Up;\\n        }\\n        break;\\n      case Direction.Up:\\n        if (isValidPosition(x, y - 1, matrix)) {\\n          y--;\\n        } else {\\n          direction = Direction.Right;\\n        }\\n        break;\\n    }\\n  } while (elements.length < totalElementCount);\\n\\n  return elements;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} matrix\\n * @returns\\n */\\nfunction isValidPosition(x, y, matrix) {\\n  return (\\n    x >= 0 &&\\n    y >= 0 &&\\n    y < matrix.length &&\\n    x < matrix[y].length &&\\n    matrix[y][x] !== null\\n  );\\n}\\n\\nconst Direction = Object.freeze({\\n  Right: Symbol('Right'),\\n  Down: Symbol('Down'),\\n  Left: Symbol('Left'),\\n  Up: Symbol('Up'),\\n});\\n\",\"filename\":\"contracts/spiralize-matrix.js\",\"server\":\"home\"}}],[\"utils/colors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"class HSLA {\\n  /**\\n   * @param {number} h hue [0, 360]\\n   * @param {number} s saturation [0, 100]\\n   * @param {number} l luminosity [0, 100]\\n   * @param {[number]} a alpha [0.0, 1.0]\\n   */\\n  constructor(h, s, l, a) {\\n    this.h = h;\\n    this.s = s;\\n    this.l = l;\\n    this.a = a ?? 1;\\n  }\\n\\n  toString() {\\n    return `hsla(${this.h}, ${this.s}%, ${this.l}%, ${this.a})`;\\n  }\\n}\\n\\nclass RGBA {\\n  /**\\n   * @param {number} r [0, 255]\\n   * @param {number} g [0, 255]\\n   * @param {number} b [0, 255]\\n   * @param {[number]} a alpha [0.0, 1.0]\\n   */\\n  constructor(r, g, b, a) {\\n    this.r = r;\\n    this.g = g;\\n    this.b = b;\\n    this.a = a ?? 1;\\n  }\\n\\n  toString() {\\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\\n  }\\n}\\n\\n/**\\n * Creates a random color based on the UI theme and a given string (such as a\\n * server name).\\n *\\n * @param {NS} ns\\n * @param {string} str\\n * @returns {string} color that can be used in CSS\\n */\\nexport function createColorForString(ns, str) {\\n  const primaryHsla = hexToHsla(ns.ui.getTheme().primary);\\n  const seed =\\n    str\\n      .split('')\\n      .map(character => character.charCodeAt(0))\\n      .reduce((a, b) => a + b) *\\n    (str.match(/\\\\d/g) ?? [str.length])\\n      .map(number => parseInt(number))\\n      .reduce((a, b) => a + b);\\n\\n  // Generate hue.\\n  const hue = seed % 360;\\n\\n  // Generate saturation.\\n  const minSaturation = Math.max(0, primaryHsla.s - 50);\\n  const maxSaturation = Math.min(100, primaryHsla.s + 50);\\n  const saturation =\\n    ((seed % 100) / 100) * (maxSaturation - minSaturation) + minSaturation;\\n\\n  // Generate luminosity.\\n  const minLuminosity = Math.max(0, primaryHsla.l - 10);\\n  const maxLuminosity = Math.min(100, primaryHsla.l + 10);\\n  const luminosity =\\n    ((seed % 100) / 100) * (maxLuminosity - minLuminosity) + minLuminosity;\\n\\n  return new HSLA(hue, saturation, luminosity);\\n}\\n\\n/**\\n * @param {string} hex (e.g. #000000 or with alpha #FFFFFF33)\\n * @returns {RGBA}\\n */\\nfunction hexToRgba(hex) {\\n  hex = hex.replace('#', '');\\n\\n  // Expand any shorted hex values (e.g. 000 or with alpha FFF3).\\n  if (hex.length <= 4) {\\n    hex = hex\\n      .split('')\\n      .map(part => part + part)\\n      .join('');\\n  }\\n\\n  // Add alpha if it doesn't exist.\\n  if (hex.length === 6) hex += 'FF';\\n\\n  return new RGBA(\\n    parseInt(hex.substring(0, 2), 16),\\n    parseInt(hex.substring(2, 4), 16),\\n    parseInt(hex.substring(4, 6), 16),\\n    Math.round((parseInt(hex.substring(6, 8), 16) / 255) * 100) / 100\\n  );\\n}\\n\\n/**\\n * @param {string} hex (e.g. #000000 or with alpha #FFFFFF33)\\n * @returns {HSLA}\\n */\\nfunction hexToHsla(hex) {\\n  return rgbaToHsla(hexToRgba(hex));\\n}\\n\\n/**\\n * @param {RGBA} rgba\\n * @returns {HSLA}\\n */\\nfunction rgbaToHsla(rgba) {\\n  // Make r, g, and b fractions of 1.\\n  const [r, g, b] = [rgba.r, rgba.g, rgba.b].map(part => part / 255);\\n\\n  // Find greatest and smallest channel values.\\n  const [cmin, cmax] = [Math.min, Math.max].map(fn => fn(r, g, b));\\n  const delta = cmax - cmin;\\n\\n  // Calculate hue.\\n  let h;\\n  if (delta === 0) h = 0;\\n  else if (cmax == r) h = ((g - b) / delta) % 6;\\n  else if (cmax == g) h = (b - r) / delta + 2;\\n  else h = (r - g) / delta + 4;\\n  h = Math.round(h * 60);\\n  if (h < 0) h += 360;\\n\\n  // Calculate lightness.\\n  let l = (cmax + cmin) / 2;\\n\\n  // Calculate saturation.\\n  let s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\\n\\n  // Multiply l and s by 100.\\n  s = Math.round(s * 100);\\n  l = Math.round(l * 100);\\n\\n  return new HSLA(h, s, l, rgba.a);\\n}\\n\\n/**\\n * @param {string} hexString (e.g. #FFFFFF)\\n * @returns {string} translucent hex string (e.g. #FFFFFF33)\\n */\\nexport function getDimmedColor(hexString) {\\n  return hexString + '33';\\n}\\n\",\"filename\":\"utils/colors.js\",\"server\":\"home\"}}],[\"contracts/encryption-i-caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Encryption I: Caesar Cipher\\n *\\n * Caesar cipher is one of the simplest encryption technique. It is a type of\\n * substitution cipher in which each letter in the plaintext is replaced by a\\n * letter some fixed number of positions down the alphabet. For example, with a\\n * left shift of 3, D would be replaced by A, E would become B, and A would\\n * become X (because of rotation).\\n *\\n * You are given an array with two elements:\\n *   [\\\"ENTER MOUSE TRASH PASTE DEBUG\\\", 1]\\n * The first element is the plaintext, the second element is the left shift value.\\n *\\n * Return the ciphertext as uppercase string. Spaces remains the same.\\n *\\n * @param {(string | number)[]} input [plain text, left shift value]\\n * @returns {string} cipher\\n */\\nexport default function encryptionICaesarCipher(input) {\\n  const [plainText, leftShift] = input;\\n  const charCodeForA = 'A'.charCodeAt(0);\\n  const charCodeForZ = 'Z'.charCodeAt(0);\\n\\n  // Convert every character in plain text to a char code and shift it by left\\n  // shift value.\\n  /** @type {number[]} */ const shiftedCharCodes = [];\\n  for (let i = 0; i < plainText.length; i++) {\\n    const charCode = plainText.charCodeAt(i);\\n\\n    // Ignore characters that are outside of [A, Z].\\n    if (charCode < charCodeForA || charCode > charCodeForZ) {\\n      shiftedCharCodes.push(charCode);\\n      continue;\\n    }\\n\\n    let shiftedCharCode;\\n    if (charCode - leftShift < charCodeForA) {\\n      shiftedCharCode =\\n        charCodeForZ - (leftShift - (charCode - charCodeForA)) + 1;\\n    } else {\\n      shiftedCharCode = charCode - leftShift;\\n    }\\n    shiftedCharCodes.push(shiftedCharCode);\\n  }\\n\\n  return shiftedCharCodes\\n    .map(charCode => String.fromCharCode(charCode))\\n    .join('');\\n}\\n\",\"filename\":\"contracts/encryption-i-caesar-cipher.js\",\"server\":\"home\"}}],[\"contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of arrays of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * [[7,12],[25,35],[9,15],[22,24],[18,23],[8,17],[11,21],[16,24],[9,10],[4,8]]\\n *\\n * Example:\\n *\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n *\\n * would merge into [[1, 6], [8, 16]].\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @typedef {[number, number]} Interval\\n *\\n * @param {Interval[]} input\\n */\\nexport default function mergeOverlappingIntervals(input) {\\n  const intervals = [...input];\\n\\n  // Sort intervals by first number.\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  let i = 0;\\n  while (i < intervals.length - 1) {\\n    const a = intervals[i];\\n    const b = intervals[i + 1];\\n    if (isOverlapping(a, b)) {\\n      intervals.splice(i, 2, mergeIntervals(a, b));\\n      i = 0;\\n    } else {\\n      i++;\\n    }\\n  }\\n  return intervals;\\n}\\n\\n/**\\n * @param {Interval} a\\n * @param {Interval} b\\n * @returns {boolean} whether the intervals are overlapping\\n */\\nfunction isOverlapping(a, b) {\\n  // If 'a' is inside 'b'.\\n  if (b[0] <= a[0] && a[1] <= b[1]) return true;\\n\\n  // If 'b' is inside 'a'.\\n  if (a[0] <= b[0] && b[1] <= a[1]) return true;\\n\\n  // If 'a' is before 'b'.\\n  if (b[0] <= a[1]) return true;\\n\\n  return false;\\n}\\n\\n/**\\n * @param {Interval} a\\n * @param {Interval} b\\n * @returns {Interval} merged interval\\n */\\nfunction mergeIntervals(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\",\"filename\":\"contracts/merge-overlapping-intervals.js\",\"server\":\"home\"}}],[\"contracts/encryption-ii-vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Encryption II: Vigenère Cipher\\n *\\n * Vigenère cipher is a type of polyalphabetic substitution. It uses the\\n * Vigenère square to encrypt and decrypt plaintext with a keyword.\\n *\\n *   Vigenère square:\\n *          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *        +----------------------------------------------------\\n *      A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *      B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\\n *      C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\n *      D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\n *      E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\n *                 ...\\n *      Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\n *      Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\n *\\n * For encryption each letter of the plaintext is paired with the corresponding\\n * letter of a repeating keyword. For example, the plaintext DASHBOARD is\\n * encrypted with the keyword LINUX:\\n *    Plaintext: DASHBOARD\\n *    Keyword:   LINUXLINU\\n * So, the first letter D is paired with the first letter of the key L.\\n * Therefore, row D and column L of the Vigenère square are used to get the\\n * first cipher letter O. This must be repeated for the whole ciphertext.\\n *\\n * You are given an array with two elements:\\n *   [\\\"POPUPENTERMOUSEINBOXMACRO\\\", \\\"BLOGGER\\\"]\\n * The first element is the plaintext, the second element is the keyword.\\n *\\n * Return the ciphertext as uppercase string.\\n *\\n * @param {[string, string]} input\\n */\\nexport default function encryptionIIVigenereCipher(input) {\\n  const cipher = createCipher();\\n\\n  // Make the keyword match the length of the plain text.\\n  const plainText = input[0];\\n  let keyword = input[1];\\n  while (keyword.length < plainText.length) {\\n    keyword += keyword;\\n  }\\n  keyword = keyword.substring(0, plainText.length);\\n\\n  // Encrypt.\\n  let encryptedMessage = '';\\n  for (let i = 0; i < plainText.length; i++) {\\n    encryptedMessage += cipher[plainText[i]][keyword[i]];\\n  }\\n  return encryptedMessage;\\n}\\n\\n/**\\n * @typedef {Object.<string, Object<string, string>} Cipher\\n *\\n * @returns {Cipher} cipher\\n */\\nfunction createCipher() {\\n  const charCodeAtA = 'A'.charCodeAt(0);\\n  const charCodeAtZ = 'Z'.charCodeAt(0);\\n\\n  const alphabet = [];\\n  for (let i = charCodeAtA; i <= charCodeAtZ; i++) {\\n    alphabet.push(String.fromCharCode(i));\\n  }\\n\\n  const cipher = {};\\n  for (let i = 0; i < alphabet.length; i++) {\\n    cipher[alphabet[i]] = {};\\n    const offsetAlphabet = [...alphabet.slice(i), ...alphabet.slice(0, i)];\\n    for (let j = 0; j < alphabet.length; j++) {\\n      cipher[alphabet[i]][alphabet[j]] = offsetAlphabet[j];\\n    }\\n  }\\n  return cipher;\\n}\\n\",\"filename\":\"contracts/encryption-ii-vigenere-cipher.js\",\"server\":\"home\"}}],[\"contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * 9,-10,-5,3,-1,7,-3,8,5,9,5,-6,-5,-7,4,3,-4,-6,3,-7,10,-6,3,3,1,1,10,0,-8,2,3,-2,1\\n *\\n * @param {number[]} array\\n * @returns {number} sum\\n */\\nexport default function subarrayWithMaximumSum(array) {\\n  let maxSum;\\n  for (let startIndex = 0; startIndex < array.length; startIndex++) {\\n    for (let endIndex = array.length; endIndex > startIndex; endIndex--) {\\n      const subarray = array.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b, 0);\\n      if (!maxSum || sum > maxSum) maxSum = sum;\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"contracts/subarray-with-maximum-sum.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum-ii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum II\\n *\\n * How many different distinct ways can the number 174 be written as a sum of integers contained in the set:\\n *\\n * [1,2,3,4,5,7,8,9,10,13]?\\n *\\n * You may use each integer in the set zero or more times.\\n *\\n */\\nexport default function totalWaysToSumII() {\\n  const integers = [1, 2, 3, 4, 5, 7, 8, 9, 10, 13];\\n  const sum = 174;\\n\\n  const integerToMaxMultiplier = Object.fromEntries(\\n    integers.map(integer => [integer, Math.floor(sum / integer)])\\n  );\\n\\n  for (let i = 0; i < integers.length; i++) {\\n    for ()\\n  }\\n\\n  console.log(integerToMaxMultiplier);\\n}\\n\\ntotalWaysToSumII();\\n\",\"filename\":\"contracts/total-ways-to-sum-ii.js\",\"server\":\"home\"}}],[\"connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Connects to a server given in the argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const server = getServers(ns).find(server => server.hostname === ns.args[0]);\\n  const commands = [\\n    server.path.map(hostname => `connect ${hostname}`).join('; '),\\n  ];\\n  await executeTerminalCommand(ns, ...commands);\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"connect.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGangTasks } from 'database/gang-tasks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\nconst POTENTIAL_GANG_MEMBER_NAMES = [\\n  'Abyss',\\n  'Beast',\\n  'Bullet',\\n  'Catalyst',\\n  'Cipher',\\n  'Cobra',\\n  'Echo',\\n  'Eclipse',\\n  'Enigma',\\n  'Frost',\\n  'Ghost',\\n  'Havoc',\\n  'Haze',\\n  'Inferno',\\n  'Obsidian',\\n  'Omega',\\n  'Phantom',\\n  'Phoenix',\\n  'Razor',\\n  'Renegade',\\n  'Riptide',\\n  'Scorpion',\\n  'Shadow',\\n  'Spike',\\n  'Storm',\\n  'Tempest',\\n  'Thunder',\\n  'Venom',\\n  'Viper',\\n  'Vortex',\\n];\\n\\nconst EQUIPMENT_NAMES = [\\n  'Baseball Bat',\\n  'Katana',\\n  'Glock 18C',\\n  'P90C',\\n  'Steyr AUG',\\n  'AK-47',\\n  'M15A10 Assault Rifle',\\n  'AWM Sniper Rifle',\\n  'Bulletproof Vest',\\n  'Full Body Armor',\\n  'Liquid Body Armor',\\n  'Graphene Plating Armor',\\n  'Ford Flex V20',\\n  'ATX1070 Superbike',\\n  'Mercedes-Benz S9001',\\n  'White Ferrari',\\n  'NUKE Rootkit',\\n  'Soulstealer Rootkit',\\n  'Demon Rootkit',\\n  'Hmap Node',\\n  'Jack the Ripper',\\n  'Bionic Arms',\\n  'Bionic Legs',\\n  'Bionic Spine',\\n  'BrachiBlades',\\n  'Nanofiber Weave',\\n  'Synthetic Heart',\\n  'Synfibril Muscle',\\n  'BitWire',\\n  'Neuralstimulator',\\n  'DataJack',\\n  'Graphene Bone Lacings',\\n];\\n\\nconst WANTED_PENALTY_THRESHOLD = 0.99;\\n\\n/**\\n * Manages gang members.\\n *\\n * Use arg[0] to override amount of money to spend (e.g. run manage-gang.js 0)\\n * will not spend any money on equipment.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const gangTasks = getGangTasks(ns);\\n\\n  // Get profitable tasks sorted from least difficult to most difficult.\\n  const profitableTasks = gangTasks.filter(task => task.baseMoney > 0);\\n  profitableTasks.sort((task1, task2) => task1.difficulty - task2.difficulty);\\n  const profitableTaskNames = profitableTasks.map(task => task.name);\\n\\n  // Get vigilante justice task which decreases wanted level.\\n  const vigilanteJusticeTask = gangTasks.find(task => task.baseWanted < 0);\\n\\n  const gangMembers = getGangMembers(ns);\\n\\n  while (true) {\\n    log(ns, gangMembers);\\n    let gangInfo = ns.gang.getGangInformation();\\n\\n    // Only engage in territory warfare if wanted penalty is below threshold and\\n    // territory is less than threshold and we have enough power.\\n    const otherGangInfo = ns.gang.getOtherGangInformation();\\n    let maxClashWinChance = 1;\\n    for (const gangName in otherGangInfo) {\\n      if (otherGangInfo[gangName].territory === 0) continue;\\n      const clashChance = ns.gang.getChanceToWinClash(gangName);\\n      maxClashWinChance = Math.max(maxClashWinChance, clashChance);\\n    }\\n    // ns.gang.setTerritoryWarfare(\\n    //   (gangInfo.territory > 0 &&\\n    //     gangInfo.wantedPenalty >= WANTED_PENALTY_THRESHOLD &&\\n    //     gangInfo.territory < 0.5 &&\\n    //     maxClashWinChance > 0.5) ||\\n    //     (gangInfo.territory < 1 && maxClashWinChance > 0.9)\\n    // );\\n\\n    // Recruit if possible.\\n    const recruit = recruitGangMember(ns);\\n    if (recruit) gangMembers.push(recruit);\\n\\n    gangInfo = ns.gang.getGangInformation();\\n    for (const gangMember of gangMembers) {\\n      // Ascend if possible.\\n      const potentialAscensionResult = ns.gang.getAscensionResult(\\n        gangMember.name\\n      );\\n      if (potentialAscensionResult) {\\n        // Only ascend if any stat multiplier is >= 2.\\n        if (\\n          [\\n            potentialAscensionResult.agi,\\n            potentialAscensionResult.cha,\\n            potentialAscensionResult.def,\\n            potentialAscensionResult.dex,\\n            potentialAscensionResult.hack,\\n            potentialAscensionResult.str,\\n          ].filter(multiplier => multiplier >= 2).length > 0\\n        ) {\\n          const ascended = ns.gang.ascendMember(gangMember.name);\\n          if (ascended) ns.toast(`${gangMember.name} has ascended in gang`);\\n        }\\n      }\\n\\n      // Upgrade equipment.\\n      if (ns.args.length === 0 || ns.args[0] !== 0) {\\n        for (const equipmentName of EQUIPMENT_NAMES) {\\n          const moneyAvailable =\\n            ns.args[0] || ns.getServerMoneyAvailable(HOME_HOSTNAME) / 4;\\n          if (ns.gang.getEquipmentCost(equipmentName) < moneyAvailable) {\\n            ns.gang.purchaseEquipment(gangMember.name, equipmentName);\\n          }\\n        }\\n      }\\n\\n      // if (gangInfo.territoryClashChance > 0) {\\n      // ns.gang.setMemberTask(gangMember.name, 'Territory Warfare');\\n      //   continue;\\n      // }\\n\\n      // If wanted level is too high, then vigilante justice.\\n      // if (\\n      //   gangInfo.wantedLevel > 1 &&\\n      //   (gangInfo.wantedPenalty < WANTED_PENALTY_THRESHOLD ||\\n      //     (gangMember.task === vigilanteJusticeTask.name &&\\n      //       gangInfo.wantedPenalty < 0))\\n      // ) {\\n      //   ns.gang.setMemberTask(gangMember.name, vigilanteJusticeTask.name);\\n      //   continue;\\n      // }\\n\\n      // Upgrade to most profitable task.\\n    //   const taskNameToMoneyGainMap = {};\\n    //   for (const taskName of profitableTaskNames) {\\n    //     ns.gang.setMemberTask(gangMember.name, taskName);\\n    //     taskNameToMoneyGainMap[taskName] = ns.gang.getMemberInformation(\\n    //       gangMember.name\\n    //     ).moneyGain;\\n    //   }\\n    //   const mostProfitableTask = Object.entries(taskNameToMoneyGainMap).sort(\\n    //     (a, b) => b[1] - a[1]\\n    //   )[0];\\n    //   if (mostProfitableTask[1] < 1000) {\\n    //     // No profitable tasks will gain enough money, so go back to training.\\n    //     ns.gang.setMemberTask(gangMember.name, 'Train Combat');\\n    //   } else {\\n    //     ns.gang.setMemberTask(gangMember.name, mostProfitableTask[0]);\\n    //   }\\n    // }\\n\\n    // // If we're not engaging in territory warfare, have the member with the\\n    // // least profit work on Territory Warfare.\\n    // if (gangInfo.territoryClashChance === 0) {\\n    //   let gangMemberWithLeastProfit, leastProfit;\\n    //   for (const gangMember of gangMembers) {\\n    //     const profit = ns.gang.getMemberInformation(gangMember.name).moneyGain;\\n    //     if (profit === 0) continue;\\n    //     if (!leastProfit || profit < leastProfit) {\\n    //       gangMemberWithLeastProfit = gangMember;\\n    //       leastProfit = profit;\\n    //     }\\n    //   }\\n    //   if (gangMemberWithLeastProfit) {\\n    //     ns.gang.setMemberTask(\\n    //       gangMemberWithLeastProfit.name,\\n    //       'Territory Warfare'\\n    //     );\\n    //   }\\n    // }\\n\\n    }\\n    await ns.gang.nextUpdate();\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {GangMember[]} gangMembers\\n */\\nfunction log(ns, gangMembers) {\\n  ns.clearLog();\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const gangMember of gangMembers) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Name', style: {} },\\n          content: gangMember.name,\\n        },\\n        {\\n          column: { name: 'Task', style: {} },\\n          content: gangMember.task,\\n        },\\n        {\\n          column: { name: 'Hack', style: { textAlign: 'right' } },\\n          content: gangMember.hack,\\n        },\\n        {\\n          column: { name: 'Str', style: { textAlign: 'right' } },\\n          content: gangMember.str,\\n        },\\n        {\\n          column: { name: 'Def', style: { textAlign: 'right' } },\\n          content: gangMember.def,\\n        },\\n        {\\n          column: { name: 'Dex', style: { textAlign: 'right' } },\\n          content: gangMember.dex,\\n        },\\n        {\\n          column: { name: 'Agi', style: { textAlign: 'right' } },\\n          content: gangMember.agi,\\n        },\\n        {\\n          column: { name: 'Cha', style: { textAlign: 'right' } },\\n          content: gangMember.cha,\\n        },\\n        {\\n          column: { name: 'Money Gain', style: { textAlign: 'right' } },\\n          content: formatMoney(ns, gangMember.moneyGain),\\n        },\\n        {\\n          column: { name: 'Wanted Level Gain', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(gangMember.wantedLevelGain),\\n        },\\n        {\\n          column: { name: 'Respect Gain', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(gangMember.respectGain),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  printTable(ns, table);\\n}\\n\\n/**\\n * @typedef GangMember\\n * @property {string} name\\n * @property {string} task\\n * @property {number} earnedRespect\\n * @property {number} hack\\n * @property {number} str\\n * @property {number} def\\n * @property {number} dex\\n * @property {number} agi\\n * @property {number} cha\\n * @property {number} hack_exp\\n * @property {number} str_exp\\n * @property {number} def_exp\\n * @property {number} dex_exp\\n * @property {number} agi_exp\\n * @property {number} cha_exp\\n * @property {number} hack_mult\\n * @property {number} str_mult\\n * @property {number} def_mult\\n * @property {number} dex_mult\\n * @property {number} agi_mult\\n * @property {number} cha_mult\\n * @property {number} hack_asc_mult\\n * @property {number} str_asc_mult\\n * @property {number} def_asc_mult\\n * @property {number} dex_asc_mult\\n * @property {number} agi_asc_mult\\n * @property {number} cha_asc_mult\\n * @property {number} hack_asc_points\\n * @property {number} str_asc_points\\n * @property {number} def_asc_points\\n * @property {number} dex_asc_points\\n * @property {number} agi_asc_points\\n * @property {number} cha_asc_points\\n * @property {string[]} upgrades\\n * @property {string[]} augmentations\\n * @property {number} respectGain\\n * @property {number} wantedLevelGain\\n * @property {number} moneyGain\\n *\\n * @param {NS} ns\\n * @returns {GangMember[]} member information for all gang members\\n */\\nfunction getGangMembers(ns) {\\n  const gangMembers = [];\\n  for (const name of POTENTIAL_GANG_MEMBER_NAMES) {\\n    try {\\n      gangMembers.push(ns.gang.getMemberInformation(name));\\n    } catch (_) {}\\n  }\\n  return gangMembers;\\n}\\n\\n/**\\n * Recruits a gang member and give it a random unassigned name.\\n *\\n * @param {NS} ns\\n * @param {GangMember|null} null if cannot recruit\\n */\\nfunction recruitGangMember(ns) {\\n  if (!ns.gang.canRecruitMember()) return null;\\n\\n  let potentialNameIndex = Math.floor(\\n    Math.random() * POTENTIAL_GANG_MEMBER_NAMES.length\\n  );\\n  while (true) {\\n    const potentialName = POTENTIAL_GANG_MEMBER_NAMES[potentialNameIndex];\\n    const wasSuccessful = ns.gang.recruitMember(potentialName);\\n    if (wasSuccessful) {\\n      ns.toast(`Recruited ${potentialName} to gang`);\\n      return ns.gang.getMemberInformation(potentialName);\\n    }\\n    potentialNameIndex =\\n      (potentialNameIndex + 1) % POTENTIAL_GANG_MEMBER_NAMES.length;\\n  }\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"database/gang-tasks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing gang-tasks.txt */\\n\\nconst GANG_TASKS = [\\n  'Unassigned',\\n  'Mug People',\\n  'Deal Drugs',\\n  'Strongarm Civilians',\\n  'Run a Con',\\n  'Armed Robbery',\\n  'Traffick Illegal Arms',\\n  'Threaten & Blackmail',\\n  'Human Trafficking',\\n  'Terrorism',\\n  'Vigilante Justice',\\n  'Train Combat',\\n  'Train Hacking',\\n  'Train Charisma',\\n  'Territory Warfare',\\n];\\n\\nconst GANG_TASKS_FILENAME = 'database/gang-tasks.txt';\\n\\n/**\\n * @param {NS} ns\\n */\\nexport function writeGangTasks(ns) {\\n  const gangTasks = GANG_TASKS.map(task => ns.gang.getTaskStats(task));\\n  ns.write(GANG_TASKS_FILENAME, JSON.stringify(gangTasks), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {import(\\\"../../NetscriptDefinitions\\\").GangTaskStats[]}\\n */\\nexport function getGangTasks(ns) {\\n  return JSON.parse(ns.read(GANG_TASKS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/gang-tasks.js\",\"server\":\"home\"}}],[\"contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the string:\\n *\\n * 101168721\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * Examples:\\n *\\n * 25525511135 -> [\\\"255.255.11.135\\\", \\\"255.255.111.35\\\"]\\n * 1938718066 -> [\\\"193.87.180.66\\\"]\\n *\\n * @param {string} digits\\n */\\nexport default function generateIPAddresses(digits) {\\n  // IP Address consists of [A, B, C, D] where each part >=0 && <= 255.\\n  const ipAddresses = [];\\n\\n  const possibleAs = getValidParts(digits.substring(0, 3));\\n\\n  for (const a of possibleAs) {\\n    const possibleBs = getValidParts(digits.substring(a.length, a.length + 3));\\n\\n    for (const b of possibleBs) {\\n      const possibleCs = getValidParts(\\n        digits.substring(a.length + b.length, a.length + b.length + 3)\\n      );\\n\\n      for (const c of possibleCs) {\\n        const d = digits.substring(a.length + b.length + c.length);\\n        if (d.length > 3) continue;\\n        if (d.startsWith('0') && d.length > 1) continue;\\n        if (parseInt(d) > 255) continue;\\n\\n        ipAddresses.push([a, b, c, d].join('.'));\\n      }\\n    }\\n  }\\n\\n  return ipAddresses;\\n}\\n\\n/**\\n *\\n * @param {string} digits with length <= 3\\n * @returns {string[]} parts\\n */\\nfunction getValidParts(digits) {\\n  if (digits.startsWith('0')) return ['0'];\\n  const parts = [digits.substring(0, 1), digits.substring(0, 2)];\\n  if (digits.length === 3 && parseInt(digits) <= 255) parts.push(digits);\\n  return parts;\\n}\\n\",\"filename\":\"contracts/generate-ip-addresses.js\",\"server\":\"home\"}}],[\"contracts/compression-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\nCompression I: RLE Compression\\nYou are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n\\n\\nRun-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\n\\nYou are given the following input string:\\n    4oo55555555555mTTmmWWWWWOOlxWWggHHOll55O880000000000000kkkkkkkkkJJJJJ\\nEncode it using run-length encoding with the minimum possible output length.\\n\\nExamples:\\n    aaaaabccc            ->  5a1b3c\\n    aAaAaA               ->  1a1A1a1A1a1A\\n    111112333            ->  511233\\n    zzzzzzzzzzzzzzzzzzz  ->  9z9z1z  (or 9z8z2z, etc.)\\n\",\"filename\":\"contracts/compression-i.js\",\"server\":\"home\"}}],[\"contracts/compression-i-rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression I: RLE Compression\\n *\\n * Run-length encoding (RLE) is a data compression technique which encodes data\\n * as a series of runs of a repeated single character. Runs are encoded as a\\n * length, followed by the character itself. Lengths are encoded as a single\\n * ASCII digit; runs of 10 characters or more are encoded by splitting them into\\n * multiple runs.\\n *\\n * You are given the following input string:\\n *     4oo55555555555mTTmmWWWWWOOlxWWggHHOll55O880000000000000kkkkkkkkkJJJJJ\\n * Encode it using run-length encoding with the minimum possible output length.\\n *\\n * Examples:\\n *     aaaaabccc            ->  5a1b3c\\n *     aAaAaA               ->  1a1A1a1A1a1A\\n *     111112333            ->  511233\\n *     zzzzzzzzzzzzzzzzzzz  ->  9z9z1z  (or 9z8z2z, etc.)\\n *\\n * @param {string} input\\n */\\nexport default function compressionIRLECompression(input) {\\n  let compressed = '';\\n  let currentLetter, currentCount;\\n  for (let i = 0; i < input.length; i++) {\\n    const letter = input.charAt(i);\\n\\n    if (i === 0) {\\n      currentLetter = letter;\\n      currentCount = 1;\\n      continue;\\n    }\\n\\n    if (currentLetter !== letter || currentCount === 9) {\\n      compressed += `${currentCount}${currentLetter}`;\\n      currentLetter = letter;\\n      currentCount = 1;\\n      continue;\\n    }\\n\\n    currentCount++;\\n  }\\n  compressed += `${currentCount}${currentLetter}`;\\n  return compressed;\\n}\\n\",\"filename\":\"contracts/compression-i-rle-compression.js\",\"server\":\"home\"}}],[\"contracts/compression-iii-lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression III: LZ Compression\\n *\\n * Lempel-Ziv (LZ) compression is a data compression technique which encodes\\n * data using references to earlier parts of the data. In this variant of LZ,\\n * data is encoded in two types of chunk. Each chunk begins with a length L,\\n * encoded as a single ASCII digit from 1 to 9, followed by the chunk data,\\n * which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n *\\n * 2. A reference to an earlier part of the uncompressed data. To do this, the\\n *    length is followed by a second ASCII digit X: each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends immediately,\\n * and the next character is the start of a new chunk. The two chunk types\\n * alternate, starting with type 1, and the final chunk may be of either type.\\n *\\n * You are given the following input string:\\n *     s7UqDon67cXj6htLxf121v7q21v7q21v7fvflZ5W1fQufQufQuufQuu\\n * Encode it using Lempel-Ziv encoding with the minimum possible output length.\\n *\\n * Examples (some have other possible encodings of minimal length):\\n *     abracadabra     ->  7abracad47\\n *     mississippi     ->  4miss433ppi\\n *     aAAaAAaAaAA     ->  3aAA53035\\n *     2718281828      ->  627182844\\n *     abcdefghijk     ->  9abcdefghi02jk\\n *     aaaaaaaaaaaa    ->  3aaa91\\n *     aaaaaaaaaaaaa   ->  1a91031\\n *     aaaaaaaaaaaaaa  ->  1a91041\\n *\\n * @param {string} input\\n */\\nexport default function compressionIIILZCompression(input) {}\\n\",\"filename\":\"contracts/compression-iii-lz-compression.js\",\"server\":\"home\"}}],[\"list-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\nimport {\\n  getRamToReserve,\\n  getScriptsCountedTowardsRAMToReserve,\\n} from 'utils/scripts';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Lists all scripts on the home server along with their memory.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const scripts = ns.ls(HOME_HOSTNAME, '.js');\\n  scripts.sort((a, b) => ns.getScriptRam(b) - ns.getScriptRam(a));\\n  const scriptsCountedTowardsRAMToReserve =\\n    getScriptsCountedTowardsRAMToReserve(ns);\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const script of scripts) {\\n    const countedTowardsRAMToReserve =\\n      scriptsCountedTowardsRAMToReserve.includes(script);\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Script Name', style: {} },\\n          content: script,\\n        },\\n        {\\n          column: { name: 'RAM', style: { textAlign: 'right' } },\\n          content: ns.formatRam(ns.getScriptRam(script)),\\n        },\\n        {\\n          column: { name: 'Count towards RAM to reserve', style: {} },\\n          content: countedTowardsRAMToReserve ? 'true' : 'false',\\n        },\\n      ],\\n      style: {\\n        color: countedTowardsRAMToReserve\\n          ? ns.ui.getTheme().success\\n          : ns.ui.getTheme().error,\\n      },\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  tprintTable(ns, table);\\n}\\n\",\"filename\":\"list-scripts.js\",\"server\":\"home\"}}],[\"utils/scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\nexport const HACK_JS = 'hack.js';\\nexport const GROW_JS = 'grow.js';\\nexport const WEAKEN_JS = 'weaken.js';\\nconst UTILS_JS = 'utils.js';\\nconst INIT_JS = 'init.js';\\n\\n/**\\n * @param {NS} ns\\n * @returns {string[]} list of scripts to count towards how much RAM to reserve\\n *          so we can run any script\\n */\\nexport function getScriptsCountedTowardsRAMToReserve(ns) {\\n  const runningScripts = ns.ps(HOME_HOSTNAME).map(process => process.filename);\\n  const scripts = ns\\n    .ls(HOME_HOSTNAME, '.js')\\n    .filter(\\n      script =>\\n        ![HACK_JS, GROW_JS, WEAKEN_JS, UTILS_JS, INIT_JS].includes(script)\\n    )\\n    .filter(script => !script.includes('/'))\\n    .filter(script => !runningScripts.includes(script));\\n  return scripts;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {number} amount of RAM to reserve so that we can run any script\\n */\\nexport function getRamToReserve(ns) {\\n  return Math.max(\\n    ...getScriptsCountedTowardsRAMToReserve(ns).map(script =>\\n      ns.getScriptRam(script)\\n    )\\n  );\\n}\\n\",\"filename\":\"utils/scripts.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.old.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.old-copy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.old-copy.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid..js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid..js\",\"server\":\"home\"}}],[\"contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n *\\n * You are given data, representing a graph. Note that “graph”, as used here,\\n * refers to the field of graph theory, and has no relation to statistics or\\n * plotting.\\n *\\n * The first element of the data represents the number of vertices in the graph.\\n * Each vertex is a unique number between 0 and ${data[0] - 1}. The next element\\n * of the data represents the edges of the graph.\\n *\\n * Two vertices u,v in a graph are said to be adjacent if there exists an edge\\n * [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does\\n * not matter.\\n *\\n * You must construct a 2-coloring of the graph, meaning that you have to assign\\n * each vertex in the graph a “color”, either 0 or 1, such that no two adjacent\\n * vertices have the same color. Submit your answer in the form of an array,\\n * where element i represents the color of vertex i. If it is impossible to\\n * construct a 2-coloring of the given graph, instead submit an empty array.\\n *\\n * Examples:\\n *\\n * Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\n * Output: [0, 0, 1, 1]\\n *\\n * Input: [3, [[0, 1], [0, 2], [1, 2]]]\\n * Output: []\\n *\\n * @typedef {[number, number]} Edge\\n *\\n * @param {[number, Edge[]]} input\\n */\\nexport default function proper2ColoringOfAGraph(input) {\\n  const [vertexCount, edges] = input;\\n  const vertices = Array.from({ length: vertexCount }, (_, i) => new Vertex(i));\\n  for (const edge of edges) {\\n    vertices[edge[0]].adjacentVertexIds.add(edge[1]);\\n    vertices[edge[1]].adjacentVertexIds.add(edge[0]);\\n  }\\n\\n  let wasSuccessful;\\n  do {\\n    const index = vertices.find(vertex => vertex.color === undefined).id;\\n    vertices[index].color = 0;\\n    wasSuccessful = setColors(index, vertices);\\n  } while (\\n    wasSuccessful &&\\n    vertices.find(vertex => vertex.color === undefined)\\n  );\\n\\n  return wasSuccessful ? vertices.map(vertex => vertex.color) : [];\\n}\\n\\n/**\\n * @param {number} currentVertexId\\n * @param {Vertex[]} vertices\\n * @returns {boolean} whether successfully colored all vertices\\n */\\nfunction setColors(currentVertexId, vertices) {\\n  const currentVertex = vertices[currentVertexId];\\n  for (const adjacentVertexId of currentVertex.adjacentVertexIds) {\\n    const adjacentVertex = vertices[adjacentVertexId];\\n    if (adjacentVertex.color === currentVertex.color) return false; // No possible construction.\\n    if (adjacentVertex.color === undefined) {\\n      adjacentVertex.color = currentVertex.color === 0 ? 1 : 0;\\n      if (!setColors(adjacentVertexId, vertices)) return false; // No possible construction.\\n    }\\n  }\\n  return true;\\n}\\n\\nclass Vertex {\\n  /** @param {number} id */\\n  constructor(id) {\\n    this.id = id;\\n    /** @type {Set<number>} */ this.adjacentVertexIds = new Set();\\n    /** @type {(0|1|undefined)} */ this.color = undefined;\\n  }\\n}\\n\",\"filename\":\"contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"home\"}}],[\"contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find All Valid Math Expressions\\n *\\n * You are given a string which contains only digits between 0 and 9 as well as\\n * a target number. Return all possible ways you can add the +, -, and *\\n * operators to the string of digits such that it evaluates to the target number.\\n *\\n * The answer should be provided as an array of strings containing the valid\\n * expressions.\\n *\\n * NOTE: Numbers in an expression cannot have leading 0’s\\n * NOTE: The order of evaluation expects script operator precedence\\n *\\n * Examples:\\n * Input: digits = “123”, target = 6\\n * Output: [1+2+3, 1*2*3]\\n *\\n * Input: digits = “105”, target = 5\\n * Output: [1*0+5, 10-5]\\n *\\n * @param {[string, number]} input\\n * @returns {string[]} valid expressions\\n */\\nexport default function findAllValidMathExpressions(input) {\\n  const [digits, target] = input;\\n  return getExpressions(digits, target, '');\\n}\\n\\nconst operators = ['+', '-', '*'];\\n\\n/**\\n * Gets all possible expressions.\\n *\\n * @param {string} digits\\n * @param {number} target\\n * @param {string} expressionThusFar\\n * @returns {string[]} expressions\\n */\\nfunction getExpressions(digits, target, expressionThusFar) {\\n  if (digits.length === 0) {\\n    return eval(expressionThusFar) === target ? [expressionThusFar] : [];\\n  }\\n  const expressions = [];\\n  for (let i = 1; i <= digits.length; i++) {\\n    const number = digits.substring(0, i);\\n    if (number.length > 1 && number.startsWith(0)) continue;\\n    if (expressionThusFar.length === 0) {\\n      expressions.push(...getExpressions(digits.substring(i), target, number));\\n    } else {\\n      for (const operator of operators) {\\n        expressions.push(\\n          ...getExpressions(\\n            digits.substring(i),\\n            target,\\n            expressionThusFar + operator + number\\n          )\\n        );\\n      }\\n    }\\n  }\\n  return expressions;\\n}\\n\",\"filename\":\"contracts/find-all-valid-math-expressions.js\",\"server\":\"home\"}}],[\"terminal-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Runs the weaken command on the given hostname in the terminal until the\\n * script is stopped.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  // Connect to server.\\n  const server = getServers(ns).find(server => server.hostname === ns.args[0]);\\n  const commands = [\\n    server.path.map(hostname => `connect ${hostname}`).join('; '),\\n  ];\\n\\n  await executeTerminalCommand(ns, ...commands);\\n\\n  while (true) {\\n    // Weaken server.\\n    await executeTerminalCommand(ns, 'weaken');\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"terminal-weaken.js\",\"server\":\"home\"}}],[\"contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *         [4],\\n *        [6,2],\\n *       [8,9,1],\\n *      [5,3,8,6],\\n *     [3,3,6,6,6],\\n *    [1,8,9,3,2,4],\\n *   [9,4,3,3,9,5,2]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} triangle\\n */\\nexport default function minimumPathSumInATriangle(triangle) {\\n  return getMinimumSum(triangle);\\n}\\n\\n/**\\n *\\n * @param {number[][]} triangle\\n * @param {[number]} index\\n * @param {[number]} sumThusFar\\n * @returns {number} minimum sum\\n */\\nfunction getMinimumSum(triangle, index, sumThusFar) {\\n  if (!triangle || triangle.length === 0) return sumThusFar;\\n\\n  const row = triangle[0];\\n  if (row.length === 1) {\\n    return getMinimumSum(triangle.slice(1), 0, row[0]);\\n  }\\n\\n  const sumA = getMinimumSum(triangle.slice(1), index, sumThusFar + row[index]);\\n  const sumB = getMinimumSum(\\n    triangle.slice(1),\\n    index + 1,\\n    sumThusFar + row[index + 1]\\n  );\\n  return Math.min(sumA, sumB);\\n}\\n\",\"filename\":\"contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"home\"}}],[\"monitor-net-worth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND } from 'utils/constants';\\nimport { getDocument } from 'utils/dom';\\nimport { formatMoney } from 'utils/format';\\nimport { getNetWorth } from 'utils/money';\\n\\n/**\\n * Monitors net worth.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const netWorthRowElement = getDocument().createElement('tr');\\n  netWorthRowElement.className = 'MuiTableRow-root';\\n  netWorthRowElement.style.display = 'table-row';\\n  netWorthRowElement.style.color = ns.ui.getTheme().money;\\n  netWorthRowElement.style.fontFamily = ns.ui.getStyles().fontFamily;\\n  netWorthRowElement.style.lineHeight = ns.ui.getStyles().lineHeight;\\n  ns.atExit(() => netWorthRowElement.remove());\\n\\n  const netWorthHeadingElement = getDocument().createElement('th');\\n  netWorthHeadingElement.className =\\n    'MuiTableCell-root MuiTableCell-body MuiTableCell-sizeMedium';\\n  netWorthHeadingElement.innerText = 'Net worth';\\n  netWorthHeadingElement.style.textAlign = 'leftt';\\n  netWorthHeadingElement.style.display = 'table-cell';\\n  netWorthHeadingElement.style.fontWeight = 'normal';\\n  netWorthHeadingElement.style.margin = '0';\\n  netWorthHeadingElement.style.padding = '0';\\n  netWorthHeadingElement.style.width = '0';\\n  netWorthHeadingElement.style.whiteSpace = 'nowrap';\\n  netWorthHeadingElement.style.overflow = 'hidden';\\n  netWorthRowElement.style.borderBottom = `1px ${\\n    ns.ui.getTheme().combat\\n  } solid`;\\n  netWorthRowElement.append(netWorthHeadingElement);\\n\\n  const netWorthValueElement = getDocument().createElement('td');\\n  netWorthValueElement.className =\\n    'MuiTableCell-root MuiTableCell-body MuiTableCell-alignRight MuiTableCell-sizeMedium';\\n  netWorthValueElement.style.display = 'table-cell';\\n  netWorthValueElement.style.textAlign = 'right';\\n  netWorthValueElement.style.margin = '0';\\n  netWorthValueElement.style.padding = '0';\\n  netWorthRowElement.append(netWorthValueElement);\\n\\n  const moneyRowDiv = getDocument().querySelector(\\n    '.MuiTableRow-root:nth-of-type(2)'\\n  );\\n  moneyRowDiv.insertAdjacentElement('afterend', netWorthRowElement);\\n\\n  while (true) {\\n    netWorthValueElement.innerText = formatMoney(ns, getNetWorth(ns));\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-net-worth.js\",\"server\":\"home\"}}],[\"get-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Get karma.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.tprint(ns.heart.break());\\n}\\n\",\"filename\":\"get-karma.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const [rows, columns] = input;\\n  return getPaths(0, 0, new Grid(rows, columns));\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n * 0,1,0,0,0,\\n * 0,0,0,0,0,\\n * 0,0,0,0,1,\\n * 1,0,0,0,0,\\n * 0,0,0,0,0,\\n * 0,0,0,1,0,\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {number[][]} input\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridII(input) {\\n  const rows = input.length;\\n  const columns = input[0].length;\\n  return getPaths(0, 0, new Grid(rows, columns, input));\\n}\\n\\n/**\\n * Gets all possible (can have duplicates) paths from the given position to the\\n * bottom-right corner ({x: columns, y: rows}).\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {Grid} grid\\n * @returns {number} number of paths\\n */\\nfunction getPaths(x, y, grid) {\\n  if (x === grid.columns - 1 && y === grid.rows - 1) return 1;\\n\\n  let paths = 0;\\n\\n  const rightPosition = { x: x + 1, y: y };\\n  if (grid.isValidPosition(rightPosition.x, rightPosition.y)) {\\n    paths += getPaths(rightPosition.x, rightPosition.y, grid);\\n  }\\n\\n  const downPosition = { x: x, y: y + 1 };\\n  if (grid.isValidPosition(downPosition.x, downPosition.y)) {\\n    paths += getPaths(downPosition.x, downPosition.y, grid);\\n  }\\n\\n  return paths;\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number} rows\\n   * @param {number} columns\\n   * @param {[number[][]]} obstacles\\n   */\\n  constructor(rows, columns, obstacles) {\\n    this.rows = rows;\\n    this.columns = columns;\\n    this.obstacles = obstacles;\\n  }\\n\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   * @returns {boolean} whether the position is valid\\n   */\\n  isValidPosition(x, y) {\\n    return (\\n      x >= 0 &&\\n      y >= 0 &&\\n      x < this.columns &&\\n      y < this.rows &&\\n      (this.obstacles ? this.obstacles[y][x] === 0 : true)\\n    );\\n  }\\n}\\n\",\"filename\":\"contracts/unique-paths-in-a-grid.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader.old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Transaction {\\n  constructor(buyDay, sellDay, stockPrices) {\\n    this.buyDay = buyDay;\\n    this.buyPrice = stockPrices[buyDay];\\n\\n    this.sellDay = sellDay;\\n    this.sellPrice = stockPrices[sellDay];\\n\\n    this.profit = this.sellPrice - this.buyPrice;\\n  }\\n\\n  toString() {\\n    return [\\n      `buy day ${this.buyDay} ($${this.buyPrice})`,\\n      `sell day ${this.sellDay} ($${this.sellPrice})`,\\n      `profit $${this.profit}`,\\n    ].join(', ');\\n  }\\n}\\n\\nexport class Permutation {\\n  /**\\n   * @param  {...Transaction} transactions\\n   */\\n  constructor(...transactions) {\\n    this.transactions = transactions;\\n    this.profit = transactions\\n      .map(transaction => transaction.profit)\\n      .reduce((a, b) => a + b);\\n  }\\n\\n  toString() {\\n    return [\\n      '\\\\n{',\\n      `  ${this.transactions.length} transactions, total profit $${this.profit}`,\\n      ...this.transactions.map(transaction => `  ${transaction}`),\\n      '}',\\n    ].join('\\\\n');\\n  }\\n}\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 35,172,130,31,111,79,19,41,125,183,11,39,153,11,19,126,130,22,139,134,54,47,169,138,75\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderI(stockPrices) {\\n  return getMaxProfit(stockPrices, 1);\\n}\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 103,150,154,3,98,150,182,97,41,96,99,1,1,28,66,19,51,4,172,22,199,40,93,33,185,96,158,123,47,76,18,93,103,126,120,92,194,126,97,124,34,86,29,22,73,156,27,18\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  return getMaxProfit(stockPrices);\\n}\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 47,69,73,32,15,167,100,135,5,80,18,192,171,183,152\\n *\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderIII(stockPrices) {\\n  return getMaxProfit(stockPrices, 2);\\n}\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * You are given the following array with two elements:\\n *\\n * [9, [164,113,142,36,159,53,111,154,6,61,134,22,195,142,7,39,190,28,112,140,17,156,88,78,88]]\\n *\\n * The first element is an integer k. The second element is an array of stock\\n * prices (which are numbers) where the i-th element represents the stock price\\n * on day i.\\n *\\n * Determine the maximum possible profit you can earn using at most k\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you can buy it again.\\n *\\n * If no profit can be made, then the answer should be 0.\\n *\\n * @param {(number, number[])[]} input [k, stockPrices]\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderIV(input) {\\n  const [maxTransactions, stockPrices] = input;\\n  return getMaxProfit(stockPrices, maxTransactions);\\n}\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {[number]} maxTransactions\\n */\\nfunction getMaxProfit(stockPrices, maxTransactions) {\\n  const buyDayToPermutationMap = {};\\n  const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    permutations.push(\\n      ...getProfitablePermutation(\\n        buyDay,\\n        stockPrices,\\n        buyDayToPermutationMap,\\n        maxTransactions\\n      )\\n    );\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  console.log(`${permutations[0]}`);\\n  return permutations[0].profit;\\n}\\n\\n/**\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n * @param {Object.<number, Permutation[]>} buyDayToPermutationMap\\n * @param {number} maxTransactions\\n * @returns {Permutation} profitable permutations\\n */\\nfunction getProfitablePermutation(\\n  buyDay,\\n  stockPrices,\\n  buyDayToPermutationMap,\\n  maxTransactions\\n) {\\n  if (buyDay in buyDayToPermutationMap) return buyDayToPermutationMap[buyDay];\\n\\n  const permutations = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const transaction = new Transaction(buyDay, sellDay, stockPrices);\\n    if (transaction.profit <= 0) continue;\\n    permutations.push(new Permutation(transaction));\\n    if (maxTransactions === 1) continue;\\n\\n    for (\\n      let nextBuyDay = sellDay + 1;\\n      nextBuyDay < stockPrices.length - 1;\\n      nextBuyDay++\\n    ) {\\n      const nextBuyDayPermutations = getProfitablePermutation(\\n        nextBuyDay,\\n        stockPrices,\\n        buyDayToPermutationMap,\\n        maxTransactions ? maxTransactions - 1 : maxTransactions\\n      );\\n      if (nextBuyDayPermutations.length === 0) continue;\\n      nextBuyDayPermutations.sort((a, b) => b.profit - a.profit);\\n\\n      // for (const permutation of nextBuyDayPermutations) {\\n      //   permutations.push(\\n      //     new Permutation(transaction, ...permutation.transactions)\\n      //   );\\n      // }\\n\\n      permutations.push(\\n        new Permutation(transaction, ...nextBuyDayPermutations[0].transactions)\\n      );\\n    }\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  buyDayToPermutationMap[buyDay] = permutations;\\n  return permutations;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderIII([\\n    177, 124, 184, 55, 108, 175, 3, 102, 77, 54, 170, 130, 141, 157,\\n  ])\\n);\\n\",\"filename\":\"contracts/algorithmic-stock-trader.old.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Charter, getCharters } from 'corporation/charter';\\nimport {\\n  CharterMaterial,\\n  PRODUCTION_MATERIAL_NAMES,\\n} from 'corporation/charter-material';\\nimport { getPotentialProductName } from 'corporation/product-names';\\nimport { ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\nconst CITIES = [\\n  'Aevum',\\n  'Chongqing',\\n  'Sector-12',\\n  'New Tokyo',\\n  'Ishima',\\n  'Volhaven',\\n];\\n\\n/**\\n * Manages corporation.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    const charters = getCharters(ns);\\n\\n    manageUpgrades(ns);\\n    expandIndustries(ns);\\n    expandOffices(ns);\\n\\n    manageResearch(ns, charters);\\n    manageWarehouses(ns, charters);\\n    manageEmployees(ns, charters);\\n    hireAdverts(ns, charters);\\n\\n    // manageProductionMaterials(ns, charters);\\n    manageMaterials(ns, charters);\\n    manageProducts(ns, charters);\\n\\n    await ns.corporation.nextUpdate();\\n  }\\n}\\n\\n/**  @param {NS} ns */\\nfunction manageUpgrades(ns) {\\n  const upgradeNames = ns.corporation.getConstants().upgradeNames;\\n  for (const upgradeName of upgradeNames) {\\n    try {\\n      ns.corporation.levelUpgrade(upgradeName);\\n    } catch (_) {}\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction expandIndustries(ns) {\\n  const industryNames = ns.corporation.getConstants().industryNames;\\n  const divisionNames = ns.corporation.getCorporation().divisions;\\n  for (const industryName of industryNames) {\\n    const divisionName = `${industryName} Division`;\\n    if (divisionNames.includes(divisionName)) continue;\\n    try {\\n      ns.corporation.expandIndustry(industryName, divisionName);\\n    } catch (_) {}\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction expandOffices(ns) {\\n  const divisionNames = ns.corporation.getCorporation().divisions;\\n  for (const divisionName of divisionNames) {\\n    for (const city of CITIES) {\\n      try {\\n        ns.corporation.expandCity(divisionName, city);\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction hireAdverts(ns, charters) {\\n  for (const charter of charters) {\\n    if (!charter.hasWarehouse) continue;\\n    ns.corporation.hireAdVert(charter.division.name);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageResearch(ns, charters) {\\n  for (const charter of charters) {\\n    if (charter.lockedResearchNames.length === 0) continue;\\n\\n    for (const researchName of charter.lockedResearchNames) {\\n      try {\\n        ns.corporation.research(charter.divisionName, researchName);\\n        ns.toast(`Researched ${researchName} in ${charter}`);\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageWarehouses(ns, charters) {\\n  for (const charter of charters) {\\n    const divisionName = charter.divisionName;\\n    const city = charter.city;\\n    if (charter.warehouse) {\\n      if (charter.warehouse.sizeUsed < charter.warehouse.size * 0.99) continue;\\n      const upgradeCost = ns.corporation.getUpgradeWarehouseCost(\\n        divisionName,\\n        city\\n      );\\n      ns.corporation.upgradeWarehouse(divisionName, city);\\n      const newWarehouse = ns.corporation.getWarehouse(divisionName, city);\\n      if (newWarehouse.size > charter.warehouse.size) {\\n        ns.toast(\\n          `Upgraded warehouse from ${ns.formatNumber(\\n            charter.warehouse.size\\n          )} to ${ns.formatNumber(newWarehouse.size)} for ${formatMoney(\\n            ns,\\n            upgradeCost\\n          )} in ${charter}`,\\n          'success',\\n          ONE_SECOND * 10\\n        );\\n      }\\n    } else {\\n      ns.corporation.purchaseWarehouse(divisionName, city);\\n      if (ns.corporation.hasWarehouse(divisionName, city)) {\\n        ns.toast(\\n          `Purchased warehouse in ${charter}`,\\n          'success',\\n          ONE_SECOND * 10\\n        );\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageEmployees(ns, charters) {\\n  for (const charter of charters) {\\n    const divisionName = charter.divisionName;\\n    const city = charter.city;\\n\\n    // Try to upgrade office size.\\n    ns.corporation.upgradeOfficeSize(divisionName, city, 1);\\n\\n    // Try to hire a new employee.\\n    ns.corporation.hireEmployee(divisionName, city);\\n\\n    // Get necessary job titles sorted from least production to most production.\\n    const necessaryJobTitles = [\\n      ...new Set([\\n        ...(charter.needsResearchers ? ['Research & Development'] : []),\\n        ...(charter.hasWarehouse\\n          ? ['Operations', 'Engineer', 'Business', 'Management']\\n          : ['Research & Development']),\\n      ]),\\n    ];\\n    const employeeProductionByJob = charter.office.employeeProductionByJob;\\n    necessaryJobTitles.sort(\\n      (jobTitle1, jobTitle2) =>\\n        employeeProductionByJob[jobTitle1] - employeeProductionByJob[jobTitle2]\\n    );\\n\\n    // Remove all employees in unnecessary jobs.\\n    const employeeJobs = { ...charter.office.employeeJobs };\\n    for (const jobTitle in employeeJobs) {\\n      if (necessaryJobTitles.includes(jobTitle)) continue;\\n      if (jobTitle === 'Intern' && charter.needsInterns) continue;\\n      if (jobTitle === 'Unassigned') continue;\\n      employeeJobs[jobTitle] = 0;\\n    }\\n\\n    // Assign all unassigned employees.\\n    const jobTitleWithLeastProduction = necessaryJobTitles[0];\\n    employeeJobs[jobTitleWithLeastProduction] += employeeJobs.Unassigned;\\n    employeeJobs.Unassigned = 0;\\n\\n    // Move an employee from the most production job to the least production\\n    // job.\\n    const jobTitleWithMostProduction = necessaryJobTitles.slice(-1)[0];\\n    if (employeeJobs[jobTitleWithMostProduction] > 0) {\\n      employeeJobs[jobTitleWithMostProduction]--;\\n      employeeJobs[jobTitleWithLeastProduction]++;\\n    }\\n\\n    // Move interns around so we don't have too many interns, but enough interns\\n    // to max out energy and morale.\\n    if (charter.needsInterns) {\\n      if (employeeJobs.Intern > charter.office.numEmployees / 3) {\\n        const employeesToMove =\\n          employeeJobs.Intern - Math.floor(charter.office.numEmployees / 3);\\n        employeeJobs.Intern -= employeesToMove;\\n        employeeJobs[jobTitleWithLeastProduction] += employeesToMove;\\n      } else if (\\n        charter.office.avgMorale < charter.office.maxMorale ||\\n        charter.office.avgEnergy < charter.office.maxEnergy\\n      ) {\\n        employeeJobs.Intern++;\\n        for (let i = necessaryJobTitles.length - 1; i >= 0; i--) {\\n          if (employeeJobs[necessaryJobTitles[i]] > 0) {\\n            employeeJobs[necessaryJobTitles[i]]--;\\n            break;\\n          }\\n        }\\n      } else {\\n        employeeJobs.Intern = 0;\\n      }\\n    }\\n\\n    // Assign jobs.\\n    const entries = Object.entries(employeeJobs);\\n    entries.sort((entry1, entry2) => {\\n      const [jobTitle1, employeeCount1] = entry1;\\n      const [jobTitle2, employeeCount2] = entry2;\\n      const oldEmployeeJobs = charter.office.employeeJobs;\\n      const oldEmployeeCount1 = oldEmployeeJobs[jobTitle1];\\n      const oldEmployeeCount2 = oldEmployeeJobs[jobTitle2];\\n      const delta1 = employeeCount1 - oldEmployeeCount1;\\n      const delta2 = employeeCount2 - oldEmployeeCount2;\\n      return delta1 - delta2;\\n    });\\n    for (const entry of entries) {\\n      ns.corporation.setAutoJobAssignment(\\n        divisionName,\\n        city,\\n        entry[0],\\n        entry[1]\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageProductionMaterials(ns, charters) {\\n  const chartersWithWarehouses = charters.filter(\\n    charter => charter.hasWarehouse\\n  );\\n  for (const charter of chartersWithWarehouses) {\\n    const allocatedMaterialStorage = charter.warehouse.size / 2;\\n\\n    // Remove excess production material.\\n    for (const materialName of PRODUCTION_MATERIAL_NAMES) {\\n      const charterMaterial = charter.getCharterMaterial(materialName);\\n\\n      const materialStored = charterMaterial.material.stored;\\n      if (materialStored === 0) continue;\\n\\n      if (materialName !== charter.mostEffectiveProductionMaterialName) {\\n        // Remove all materials that are not the most effective production\\n        // material.\\n        sellMaterial(\\n          ns,\\n          materialName,\\n          materialStored,\\n          charter,\\n          chartersWithWarehouses\\n        );\\n\\n        // Do not continue to buy this material.\\n        ns.corporation.buyMaterial(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          0\\n        );\\n\\n        // Cancel any imports of this material.\\n        cancelImports(ns, materialName, charter, chartersWithWarehouses);\\n        continue;\\n      }\\n\\n      // Remove materials of this type until it only takes up half the warehouse\\n      // space.\\n      if (charterMaterial.spaceTakenUp > allocatedMaterialStorage) {\\n        const amountToSell =\\n          (charterMaterial.spaceTakenUp - allocatedMaterialStorage) /\\n          charterMaterial.materialData.size;\\n        sellMaterial(\\n          ns,\\n          materialName,\\n          amountToSell,\\n          charter,\\n          chartersWithWarehouses\\n        );\\n      }\\n    }\\n\\n    // Add most effective production material.\\n    const materialName = charter.mostEffectiveProductionMaterialName;\\n    const charterMaterial = charter.getCharterMaterial(materialName);\\n    if (charterMaterial.spaceTakenUp < allocatedMaterialStorage) {\\n      const amountToBuy =\\n        (allocatedMaterialStorage - charterMaterial.spaceTakenUp) /\\n        charterMaterial.materialData.size;\\n      buyMaterial(\\n        ns,\\n        materialName,\\n        amountToBuy,\\n        charter,\\n        chartersWithWarehouses,\\n        true\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * Sells material at the most profitable charter.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountToSell\\n * @param {Charter} sourceCharter\\n * @param {Charter[]} charters\\n */\\nfunction sellMaterial(ns, materialName, amountToSell, sourceCharter, charters) {\\n  // Get only the charters that can sell the material to sell sorted from\\n  // highest market price to lowest market price.\\n  const chartersWithMaterial = charters.filter(charter =>\\n    charter.hasCharterMaterial(materialName)\\n  );\\n  chartersWithMaterial.sort((charter1, charter2) => {\\n    const getMarketPrice = (/** @type {Charter} */ charter) =>\\n      charter.getCharterMaterial(materialName).material.marketPrice;\\n    return getMarketPrice(charter2) - getMarketPrice(charter1);\\n  });\\n\\n  // Sell material from the highest market price to lowest market price based on\\n  // the target city's actual sell amount.\\n  for (const targetCharter of chartersWithMaterial) {\\n    if (amountToSell <= 0) break;\\n\\n    const material = targetCharter.getCharterMaterial(materialName).material;\\n\\n    let actualSellAmount = material.actualSellAmount;\\n    if (actualSellAmount === 0) {\\n      // If the actual sell amount is 0, then that might mean that this charter\\n      // has never sold this item before, so sell the max and this will readjust\\n      // in the next tick.\\n      actualSellAmount = amountToSell;\\n    }\\n    if (targetCharter !== sourceCharter) {\\n      // Export only the amount that the target charter can sell.\\n      exportMaterial(\\n        ns,\\n        materialName,\\n        actualSellAmount,\\n        sourceCharter,\\n        targetCharter\\n      );\\n    }\\n\\n    // Set market TA I and II if they're not already set.\\n    try {\\n      ns.corporation.setMaterialMarketTA1(\\n        targetCharter.division.name,\\n        targetCharter.office.city,\\n        materialName,\\n        true\\n      );\\n      ns.corporation.setMaterialMarketTA2(\\n        targetCharter.division.name,\\n        targetCharter.office.city,\\n        materialName,\\n        true\\n      );\\n    } catch (e) {}\\n\\n    // Sell only the amount that the target charter can sell.\\n    ns.corporation.sellMaterial(\\n      targetCharter.division.name,\\n      targetCharter.office.city,\\n      materialName,\\n      actualSellAmount,\\n      'MP'\\n    );\\n\\n    amountToSell -= actualSellAmount;\\n  }\\n}\\n\\n/**\\n * Buys material at the cheapest charter.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountToBuy\\n * @param {Charter} sourceCharter\\n * @param {Charter[]} charters\\n * @param {boolean} [inBulk]\\n *        if set to true, buy one time in bulk. Otherwise, continuously buy\\n */\\nfunction buyMaterial(\\n  ns,\\n  materialName,\\n  amountToBuy,\\n  sourceCharter,\\n  charters,\\n  inBulk\\n) {\\n  const chartersWithMaterial = charters.filter(charter =>\\n    charter.hasCharterMaterial(materialName)\\n  );\\n  const lowestMarketPrice = Math.min(\\n    ...chartersWithMaterial.map(\\n      charter => charter.getCharterMaterial(materialName).material.marketPrice\\n    )\\n  );\\n  const targetCharter = chartersWithMaterial.find(\\n    charter =>\\n      charter.getCharterMaterial(materialName).material.marketPrice ===\\n      lowestMarketPrice\\n  );\\n\\n  // Buy from target charter.\\n  if (inBulk) {\\n    // Only buy the amount that we don't have in the target charter warehouse.\\n    const charterMaterial = targetCharter.getCharterMaterial(materialName);\\n    let actualAmountToBuy = amountToBuy - charterMaterial.material.stored;\\n\\n    // Only buy the amount that we can fit in the warehouse.\\n    const availableSpace =\\n      targetCharter.warehouse.size - targetCharter.warehouse.sizeUsed;\\n    const materialSize = charterMaterial.materialData.size;\\n    actualAmountToBuy = Math.min(\\n      actualAmountToBuy,\\n      availableSpace / materialSize\\n    );\\n\\n    try {\\n      ns.corporation.bulkPurchase(\\n        targetCharter.division.name,\\n        targetCharter.office.city,\\n        materialName,\\n        actualAmountToBuy\\n      );\\n    } catch (e) {\\n      // Probably couldn't afford this.\\n    }\\n  } else {\\n    ns.corporation.buyMaterial(\\n      targetCharter.division.name,\\n      targetCharter.office.city,\\n      materialName,\\n      amountToBuy\\n    );\\n  }\\n\\n  if (targetCharter !== sourceCharter) {\\n    // Export to source charter.\\n    exportMaterial(ns, materialName, amountToBuy, targetCharter, sourceCharter);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountToExport\\n * @param {Charter} sourceCharter charter to export from\\n * @param {Charter} targetCharter charter to import to\\n */\\nfunction exportMaterial(\\n  ns,\\n  materialName,\\n  amountToExport,\\n  sourceCharter,\\n  targetCharter\\n) {\\n  const targetDivision = targetCharter.division.name;\\n  const targetCity = targetCharter.office.city;\\n  const sourceDivision = sourceCharter.division.name;\\n  const sourceCity = sourceCharter.office.city;\\n  ns.corporation.cancelExportMaterial(\\n    sourceDivision,\\n    sourceCity,\\n    targetDivision,\\n    targetCity,\\n    materialName\\n  );\\n  ns.corporation.exportMaterial(\\n    sourceDivision,\\n    sourceCity,\\n    targetDivision,\\n    targetCity,\\n    materialName,\\n    amountToExport\\n  );\\n}\\n\\n/**\\n * Cancel any exports of a material to a city.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {Charter} importCharter charter to cancel exports to\\n * @param {Charter[]} charters\\n */\\nfunction cancelImports(ns, materialName, importCharter, charters) {\\n  for (const charter of charters) {\\n    if (!charter.hasCharterMaterial(materialName)) continue;\\n\\n    const charterMaterial = charter.getCharterMaterial(materialName);\\n    for (const exportOrder of charterMaterial.material.exports) {\\n      if (exportOrder.division !== importCharter.division.name) continue;\\n      if (exportOrder.city !== importCharter.office.city) continue;\\n      ns.corporation.cancelExportMaterial(\\n        charter.division.name,\\n        charter.office.city,\\n        importCharter.division.name,\\n        importCharter.office.city,\\n        materialName\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageMaterials(ns, charters) {\\n  for (const charter of charters) {\\n    if (!charter.warehouse) continue;\\n\\n    const producedCharterMaterials = (\\n      charter.industryData.producedMaterials ?? []\\n    ).map(materialName =>\\n      charter.charterMaterials.find(\\n        charterMaterial => charterMaterial.material.name === materialName\\n      )\\n    );\\n    const producedProducts = charter.division.products.map(productName =>\\n      ns.corporation.getProduct(charter.divisionName, charter.city, productName)\\n    );\\n    const maxProducedAmount = Math.max(\\n      ...[\\n        ...producedCharterMaterials.map(\\n          (/** @type {CharterMaterial} */ charterMaterial) =>\\n            charterMaterial.material.productionAmount\\n        ),\\n        ...producedProducts.map(product => product.productionAmount),\\n      ]\\n    );\\n    for (const materialName in charter.industryData.requiredMaterials ?? {}) {\\n      const amountNeeded =\\n        maxProducedAmount *\\n        charter.industryData.requiredMaterials[materialName];\\n      getMaterialSource(ns, materialName, amountNeeded, charter, charters);\\n    }\\n\\n    for (const materialName of charter.industryData.producedMaterials ?? []) {\\n      try {\\n        ns.corporation.sellMaterial(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          'MAX',\\n          'MP'\\n        );\\n        ns.corporation.setMaterialMarketTA1(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          true\\n        );\\n        ns.corporation.setMaterialMarketTA2(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          true\\n        );\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\\n/**\\n * Gets the cheapest but highest quality source of a material and creates\\n * export/import and buy connections.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountPerCycle\\n * @param {Charter} requestingCharter\\n * @param {Charter[]} charters\\n */\\nfunction getMaterialSource(\\n  ns,\\n  materialName,\\n  amountPerCycle,\\n  requestingCharter,\\n  charters\\n) {\\n  const chartersThatProduceMaterial = [];\\n  const chartersThatSellMaterial = [];\\n  for (const charter of charters) {\\n    if ((charter.industryData.producedMaterials ?? []).includes(materialName)) {\\n      chartersThatProduceMaterial.push(charter);\\n    }\\n    if (\\n      charter.charterMaterials.find(\\n        (/** @type {CharterMaterial} */ charterMaterial) =>\\n          charterMaterial.material.name === materialName\\n      )\\n    ) {\\n      chartersThatSellMaterial.push(charter);\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageProducts(ns, charters) {\\n  for (const charter of charters) {\\n    if (!charter.industryData.makesProducts) continue;\\n\\n    // Make new products.\\n    const funds = ns.corporation.getCorporation().funds;\\n    const division = ns.corporation.getDivision(charter.divisionName);\\n    if (division.products.length < division.maxProducts) {\\n      const productName = getPotentialProductName(\\n        division.type,\\n        ...division.products\\n      );\\n      ns.corporation.makeProduct(\\n        charter.divisionName,\\n        charter.city,\\n        productName,\\n        Math.floor(funds / 2),\\n        Math.floor(funds / 2)\\n      );\\n    }\\n\\n    // Sell products.\\n    for (const productName of division.products) {\\n      ns.corporation.sellProduct(\\n        charter.divisionName,\\n        charter.city,\\n        productName,\\n        'MAX',\\n        'MP'\\n      );\\n      try {\\n        ns.corporation.setProductMarketTA1(\\n          charter.divisionName,\\n          productName,\\n          true\\n        );\\n        ns.corporation.setProductMarketTA2(\\n          charter.divisionName,\\n          productName,\\n          true\\n        );\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"corporation/charter.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  CharterMaterial,\\n  PRODUCTION_MATERIAL_NAMES,\\n} from 'corporation/charter-material';\\n\\n/**\\n * A Charter represents an office of a division (e.g. Aevum of the Agriculture\\n * Division).\\n */\\nexport class Charter {\\n  /**\\n   * @param {NS} ns\\n   * @param {import(\\\"../../NetscriptDefinitions\\\").Division} division\\n   * @param {import(\\\"../../NetscriptDefinitions\\\").Office} office\\n   */\\n  constructor(ns, division, office) {\\n    this.division = division;\\n    this.divisionName = division.name;\\n    this.office = office;\\n    this.city = office.city;\\n    this.industryData = ns.corporation.getIndustryData(division.type);\\n\\n    this.hasWarehouse = ns.corporation.hasWarehouse(\\n      this.divisionName,\\n      this.city\\n    );\\n    this.warehouse = this.hasWarehouse\\n      ? ns.corporation.getWarehouse(division.name, office.city)\\n      : null;\\n\\n    /** Name of all the research that we have no researched yet. */\\n    const constants = ns.corporation.getConstants();\\n    this.lockedResearchNames = (\\n      this.industryData.makesProducts\\n        ? constants.researchNames\\n        : constants.researchNamesBase\\n    ).filter(\\n      researchName => !ns.corporation.hasResearched(division.name, researchName)\\n    );\\n    this.needsResearchers = this.lockedResearchNames.length > 0;\\n    this.needsInterns =\\n      (this.lockedResearchNames.includes('AutoBrew') ||\\n        this.lockedResearchNames.includes('AutoPartyManager')) &&\\n      (office.avgMorale < 100 || office.avgEnergy < 100);\\n\\n    this.charterMaterials = this._getMaterials(ns);\\n    this.mostEffectiveProductionMaterialName =\\n      this._getMostEffectiveProductionMaterialName(ns);\\n  }\\n\\n  /**\\n   * @param {import('../../NetscriptDefinitions').CorpMaterialName} materialName\\n   * @returns {boolean} whether this charter can buy/sell this material.\\n   */\\n  hasCharterMaterial(materialName) {\\n    return (\\n      this.charterMaterials.filter(\\n        charterMaterial => charterMaterial.material.name === materialName\\n      ).length > 0\\n    );\\n  }\\n\\n  /**\\n   * @param {import('../../NetscriptDefinitions').CorpMaterialName} materialName\\n   * @returns {CharterMaterial} material to get\\n   */\\n  getCharterMaterial(materialName) {\\n    if (!this.hasCharterMaterial(materialName)) {\\n      throw `${this} does not have ${materialName}`;\\n    }\\n    return this.charterMaterials.find(\\n      charterMaterial => charterMaterial.material.name === materialName\\n    );\\n  }\\n\\n  /**\\n   * @param {NS} ns\\n   * @returns {CharterMaterial} all materials available to buy/sell\\n   */\\n  _getMaterials(ns) {\\n    if (!this.warehouse) {\\n      return [];\\n    }\\n    const materialNames = [\\n      ...Object.keys(this.industryData.requiredMaterials ?? {}),\\n      ...(this.industryData.producedMaterials || []),\\n      ...PRODUCTION_MATERIAL_NAMES,\\n    ];\\n    return materialNames.map(materialName => {\\n      const material = ns.corporation.getMaterial(\\n        this.divisionName,\\n        this.city,\\n        materialName\\n      );\\n      return new CharterMaterial(ns, material);\\n    });\\n  }\\n\\n  /**\\n   * @param {NS} ns\\n   * @returns {import('corporation/charter-material').ProductionMaterialName}\\n   *          name of the most effective production material\\n   */\\n  _getMostEffectiveProductionMaterialName(ns) {\\n    const materialNameToFactorMap = {\\n      Hardware: this.industryData.hardwareFactor,\\n      Robots: this.industryData.robotFactor,\\n      'AI Cores': this.industryData.aiCoreFactor,\\n      'Real Estate': this.industryData.realEstateFactor,\\n    };\\n    const highestFactor = Math.max(...Object.values(materialNameToFactorMap));\\n    const materialNamesWithHighestFactor = Object.keys(\\n      materialNameToFactorMap\\n    ).filter(\\n      materialName => materialNameToFactorMap[materialName] === highestFactor\\n    );\\n\\n    // If there is only one material, then return that material.\\n    if (materialNamesWithHighestFactor.length === 1) {\\n      return materialNamesWithHighestFactor[0];\\n    }\\n\\n    // Otherwise return the material with the lowest base cost.\\n    materialNamesWithHighestFactor.sort(\\n      (materialName1, materialName2) =>\\n        ns.corporation.getMaterialData(materialName1).baseCost -\\n        ns.corporation.getMaterialData(materialName2).baseCost\\n    );\\n    return materialNamesWithHighestFactor[0];\\n  }\\n\\n  toString() {\\n    return `${this.divisionName} - ${this.city}`;\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Charter[]} all existing charters\\n */\\nexport function getCharters(ns) {\\n  /** @type {Charter[]} */ const charters = [];\\n\\n  const divisions = ns.corporation\\n    .getCorporation()\\n    .divisions.map(divisionName => ns.corporation.getDivision(divisionName));\\n  for (const division of divisions) {\\n    const offices = division.cities.map(city =>\\n      ns.corporation.getOffice(division.name, city)\\n    );\\n    charters.push(...offices.map(office => new Charter(ns, division, office)));\\n  }\\n\\n  return charters;\\n}\\n\",\"filename\":\"corporation/charter.js\",\"server\":\"home\"}}],[\"corporation/charter-material.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {'Hardware' | 'Robots' | 'AI Cores' | 'Real Estate'} ProductionMaterialName\\n */\\n\\n/** @type {ProductionMaterialName} */\\nexport const PRODUCTION_MATERIAL_NAMES = [\\n  'Hardware',\\n  'Robots',\\n  'AI Cores',\\n  'Real Estate',\\n];\\n\\n/** Represents a Material in a Charter warehouse. */\\nexport class CharterMaterial {\\n  /**\\n   * @param {NS} ns\\n   * @param {import(\\\"../../NetscriptDefinitions\\\").Material} material\\n   */\\n  constructor(ns, material) {\\n    this.material = material;\\n    this.materialData = ns.corporation.getMaterialData(material.name);\\n\\n    /** Amount of space this material is taking up in the warehouse. */\\n    this.spaceTakenUp = material.stored * this.materialData.size;\\n  }\\n}\\n\",\"filename\":\"corporation/charter-material.js\",\"server\":\"home\"}}],[\"monitor-corporation-employees.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getCharters } from 'corporation/charter';\\nimport { getDimmedColor } from 'utils/colors';\\nimport { ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\nimport { printTable } from 'utils/table';\\n\\n/**\\n * Monitors the employees in the corporation.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n  ns.tail();\\n\\n  while (true) {\\n    ns.clearLog();\\n    const charters = getCharters(ns);\\n\\n    /** @type {import(\\\"utils/table\\\").Table} */ const table = { rows: [] };\\n    for (const charter of charters) {\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Division', style: { whiteSpace: 'nowrap' } },\\n            content: charter.division.name,\\n          },\\n          {\\n            column: { name: 'City', style: {} },\\n            content: charter.office.city,\\n          },\\n        ],\\n      };\\n\\n      for (const job in charter.office.employeeJobs) {\\n        const employeeCount = charter.office.employeeJobs[job];\\n        const employeeProduction = ns.formatNumber(\\n          charter.office.employeeProductionByJob[job],\\n          2\\n        );\\n        row.cells.push({\\n          column: {\\n            name: job,\\n            style: { textAlign: 'center', whiteSpace: 'nowrap' },\\n          },\\n          content:\\n            employeeCount === 0\\n              ? '-'\\n              : `${employeeCount} (${employeeProduction})`,\\n          style: {\\n            ...(employeeCount === 0 && {\\n              color: getDimmedColor(ns.ui.getTheme().primary),\\n            }),\\n          },\\n        });\\n      }\\n\\n      row.cells.push({\\n        column: { name: '# Employees', style: { textAlign: 'center' } },\\n        content: `${charter.office.numEmployees} / ${charter.office.size}`,\\n      });\\n\\n      table.rows.push(row);\\n    }\\n    printTable(ns, table);\\n\\n    // await ns.corporation.nextUpdate();\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-corporation-employees.js\",\"server\":\"home\"}}],[\"buy-back-corporation-shares.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * Continuously buys back shares from the corporation.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n    const sharesToBuy = Math.min(\\n      Math.floor(\\n        moneyAvailable / (ns.corporation.getCorporation().sharePrice * 1.1)\\n      ),\\n      ns.corporation.getCorporation().totalShares -\\n        ns.corporation.getCorporation().numShares\\n    );\\n    try {\\n      ns.corporation.buyBackShares(sharesToBuy);\\n    } catch (e) {\\n      ns.toast(`${e}`, 'error', 30 * ONE_SECOND);\\n    }\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"buy-back-corporation-shares.js\",\"server\":\"home\"}}],[\"get-crime-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CRIME_TYPES } from 'utils/constants';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * @typedef Crime\\n * @property {import(\\\"../NetscriptDefinitions\\\").CrimeType} type\\n * @property {import(\\\"../NetscriptDefinitions\\\").CrimeStats} stats\\n * @property {number} chance\\n * @property {number} averageProfitPerSecond\\n *\\n * Prints out crime stats to the terminal.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  /** @type {Crime[]} */\\n  const crimes = CRIME_TYPES.map(type => {\\n    const stats = ns.singularity.getCrimeStats(type);\\n    const chance = ns.singularity.getCrimeChance(type);\\n    const averageProfitPerSecond = (stats.money * chance) / (stats.time / 1000);\\n    return {\\n      type,\\n      stats,\\n      chance,\\n      averageProfitPerSecond,\\n    };\\n  }).sort(\\n    (crime1, crime2) =>\\n      crime2.averageProfitPerSecond - crime1.averageProfitPerSecond\\n  );\\n\\n  /** @type {import(\\\"utils/table\\\").Table} */ const table = { rows: [] };\\n  for (const crime of crimes) {\\n    /** @type {import(\\\"utils/table\\\").Row} */ const row = {\\n      cells: [\\n        { column: { name: 'Crime', style: {} }, content: crime.type },\\n        {\\n          column: { name: 'Chance', style: { textAlign: 'center' } },\\n          content: ns.formatPercent(crime.chance),\\n        },\\n        {\\n          column: { name: 'Money', style: { textAlign: 'center' } },\\n          content: formatMoney(ns, crime.stats.money),\\n        },\\n        {\\n          column: { name: 'Time', style: { textAlign: 'center' } },\\n          content: formatTime(ns, crime.stats.time),\\n        },\\n        {\\n          column: { name: 'Avg. Profit / s', style: { textAlign: 'center' } },\\n          content: formatMoney(ns, crime.averageProfitPerSecond),\\n        },\\n        {\\n          column: { name: 'Karma', style: { textAlign: 'center' } },\\n          content: crime.stats.karma,\\n        },\\n        {\\n          column: { name: 'Avg. Karma / s', style: { textAlign: 'center' } },\\n          content: ns.formatNumber(\\n            (crime.stats.karma * crime.chance) / (crime.stats.time / 1000)\\n          ),\\n        },\\n        {\\n          column: { name: 'Str Exp', style: { textAlign: 'center' } },\\n          content: getAverageStatIncrease(\\n            ns,\\n            crime.stats.strength_exp,\\n            crime.stats.strength_success_weight,\\n            crime.chance,\\n            crime.stats.time\\n          ),\\n        },\\n        {\\n          column: { name: 'Def Exp', style: { textAlign: 'center' } },\\n          content: getAverageStatIncrease(\\n            ns,\\n            crime.stats.defense_exp,\\n            crime.stats.defense_success_weight,\\n            crime.chance,\\n            crime.stats.time\\n          ),\\n        },\\n        {\\n          column: { name: 'Dex Exp', style: { textAlign: 'center' } },\\n          content: getAverageStatIncrease(\\n            ns,\\n            crime.stats.dexterity_exp,\\n            crime.stats.dexterity_success_weight,\\n            crime.chance,\\n            crime.stats.time\\n          ),\\n        },\\n        {\\n          column: { name: 'Agi Exp', style: { textAlign: 'center' } },\\n          content: getAverageStatIncrease(\\n            ns,\\n            crime.stats.agility_exp,\\n            crime.stats.agility_success_weight,\\n            crime.chance,\\n            crime.stats.time\\n          ),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} exp\\n * @param {number} successWeight\\n * @param {number} chance chance of successfully completing the crime\\n * @param {number} time that it takse to complete crime in seconds\\n * @returns {string} average stat increase per second\\n */\\nfunction getAverageStatIncrease(ns, exp, successWeight, chance, time) {\\n  const averageStatIncrease =\\n    (exp * successWeight * chance + exp * (1 - chance)) / (time / 1000);\\n  return averageStatIncrease === 0 ? '-' : ns.formatNumber(averageStatIncrease);\\n}\\n\",\"filename\":\"get-crime-stats.js\",\"server\":\"home\"}}],[\"corporation/product-names.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const POTENTIAL_RESTAURANT_PRODUCT_NAMES = [\\n  'Savory Haven',\\n  'Urban Bites',\\n  'Gourmet Grove',\\n  'Culinary Canvas',\\n  'Fusion Flavors',\\n  'Taste Treasury',\\n  'Sizzle & Spice',\\n  'Palette Paradise',\\n  'Epicurean Elegance',\\n  'Gastronomy Junction',\\n];\\n\\nconst POTENTIAL_TOBACCO_PRODUCT_NAMES = [\\n  'Sparkle Stix Bliss Buds',\\n  'Fluff Cloud Puff Pods',\\n  'Rainbow Dream Wraps',\\n  'Bubblegum Cloud Ciglets',\\n  'Giggly Grove Tobacco Treats',\\n  'CottonCandy Cigarillos',\\n  'Moonbeam Shisha Swirls',\\n  'Wonder Leaf Whispers',\\n  'Marshmallow Mist Pipes',\\n  'Starry Skies Snuggle Sticks',\\n];\\n\\nconst POTENTIAL_PHARMACEUTICAL_PRODUCT_NAMES = [\\n  'Solivra',\\n  'Zyrron',\\n  'Vectralis',\\n  'Ecliptix',\\n  'Lunarisol',\\n  'Veridox',\\n  'Vortexa',\\n  'Exilith',\\n  'Nebulith',\\n  'Zenolyx',\\n];\\n\\nconst POTENTIAL_COMPUTER_HARDWARE_PRODUCT_NAMES = [\\n  'Quantum Core Processor',\\n  'Blaze Graph Graphics Card',\\n  'Nebula Link Motherboard',\\n  'Turbo Drive SSD',\\n  'Aero Cool Cooling System',\\n  'Titan Sync RAM Modules',\\n  'PhotonX Quantum Mouse',\\n  'Celestial Touch Keyboard',\\n  'Nova Stream Webcam',\\n  'Pulse Force Power Supply',\\n];\\n\\nconst POTENTIAL_ROBOTICS_PRODUCT_NAMES = [\\n  'Roomba Rover',\\n  'Toasty Tech Bot',\\n  'Blender Buddy',\\n  'Iron Innovator',\\n  'Dish Bot Pro',\\n  'Brew Master Bot',\\n  'Cleansweep Crafter',\\n  'Microwave Mate',\\n  'Chores Champion',\\n  'Sizzle-Serve Bot',\\n];\\n\\nconst POTENTIAL_SOFTWARE_PRODUCT_NAMES = [\\n  'Data-Craft Pro',\\n  'Data Forge',\\n  'Logic Loom',\\n  'Infusion Sheets',\\n  'iHarmony',\\n  'Infinity Desk',\\n  'Task Sync',\\n  'Focus Flow',\\n  'Agenda Mate',\\n  'DocHub',\\n];\\n\\nconst POTENTIAL_HEALTHCARE_PRODUCT_NAMES = [\\n  'Heal Tech Relief Patch',\\n  'Vita-Vista Wellness Monitor',\\n  'PulseCare Vitality Tonic',\\n  'NutriGuard Immune Boost',\\n  'BioBalance Energy Caps',\\n  'Revita-Calm Sleep-Aid',\\n  'Meditonic Heart Care',\\n  'Respira-EZ Lung Support',\\n  'Nourish Flow Wellness Fuel',\\n  'Aura Energy Essence',\\n];\\n\\nconst POTENTIAL_REAL_ESTATE_PRODUCT_NAMES = [\\n  'Maplewood Heights',\\n  'Harbor View Gardens',\\n  'Meadowbrook Village',\\n  'Sunflower Grove',\\n  'Riverbend Terrace',\\n  'Tranquil Pines Estates',\\n  'Serenity Springs',\\n  'Crescent Lakeside',\\n  'Willowbrook Commons',\\n  'Radiant Ridge District',\\n];\\n\\n/**\\n * @param {import(\\\"../../NetscriptDefinitions\\\").CorpIndustryName} industry\\n * @param  {...string} blocklist names to avoid\\n * @returns {string} product name\\n */\\nexport function getPotentialProductName(industry, ...blocklist) {\\n  const potentialProductNames = getPotentialProductNames(industry).filter(\\n    productName => !blocklist.includes(productName)\\n  );\\n  return potentialProductNames[\\n    Math.floor(Math.random() * potentialProductNames.length)\\n  ];\\n}\\n\\n/**\\n * @param {import(\\\"../../NetscriptDefinitions\\\").CorpIndustryName} industry\\n * @returns {string[]} list of potential product names\\n */\\nfunction getPotentialProductNames(industry) {\\n  switch (industry) {\\n    case 'Restaurant':\\n      return POTENTIAL_RESTAURANT_PRODUCT_NAMES;\\n    case 'Tobacco':\\n      return POTENTIAL_TOBACCO_PRODUCT_NAMES;\\n    case 'Pharmaceutical':\\n      return POTENTIAL_PHARMACEUTICAL_PRODUCT_NAMES;\\n    case 'Computer Hardware':\\n      return POTENTIAL_COMPUTER_HARDWARE_PRODUCT_NAMES;\\n    case 'Robotics':\\n      return POTENTIAL_ROBOTICS_PRODUCT_NAMES;\\n    case 'Software':\\n      return POTENTIAL_SOFTWARE_PRODUCT_NAMES;\\n    case 'Healthcare':\\n      return POTENTIAL_HEALTHCARE_PRODUCT_NAMES;\\n    case 'Real Estate':\\n      return POTENTIAL_REAL_ESTATE_PRODUCT_NAMES;\\n  }\\n}\\n\",\"filename\":\"corporation/product-names.js\",\"server\":\"home\"}}],[\"exploits/infiltration-helper.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Run this in the console.\\n */\\n\\nconst puzzleNames = ['Say something nice about the guard', 'Enter the Code!'];\\n\\nfunction infiltrationHelper() {\\n  const puzzleName = [...document.getElementsByTagName('h4')].find(h4 =>\\n    puzzleNames.includes(h4.innerText)\\n  );\\n  console.log(puzzleName);\\n  setTimeout(infiltrationHelper(), 1000);\\n}\\ninfiltrationHelper();\\n\",\"filename\":\"exploits/infiltration-helper.js\",\"server\":\"home\"}}],[\"manage-life.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND } from 'utils/constants';\\n\\nconst PROGRAM_NAMES = [\\n  'BruteSSH.exe',\\n  'FTPCrack.exe',\\n  'relaySMTP.exe',\\n  'HTTPWorm.exe',\\n  'SQLInject.exe',\\n];\\n\\n/**\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    // Buy programs from the dark web.\\n    const hasTor = ns.singularity.purchaseTor();\\n    if (hasTor) {\\n      for (const programName of PROGRAM_NAMES) {\\n        ns.singularity.purchaseProgram(programName);\\n      }\\n    }\\n\\n    // Upgrade home server.\\n    ns.singularity.upgradeHomeRam();\\n    ns.singularity.upgradeHomeCores();\\n\\n    // Join factions.\\n    const factionsToJoin = ns.singularity.checkFactionInvitations();\\n    for (const faction of factionsToJoin) {\\n      ns.singularity.joinFaction(faction);\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"manage-life.js\",\"server\":\"home\"}}],[\"apply-to-all-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { COMPANY_NAMES } from 'utils/constants';\\n\\n/**\\n * Apply to all jobs in order to get the faction rumors.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  for (const companyName of COMPANY_NAMES) {\\n    const positionNames = ns.singularity.getCompanyPositions(companyName);\\n\\n    for (const positionName of positionNames) {\\n      const field = ns.singularity.getCompanyPositionInfo(\\n        companyName,\\n        positionName\\n      ).field;\\n      ns.singularity.applyToCompany(companyName, field);\\n    }\\n  }\\n}\\n\",\"filename\":\"apply-to-all-jobs.js\",\"server\":\"home\"}}],[\"get-company-position-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { COMPANY_NAMES } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Prints out company position stats to the terminal.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const skills = ns.getPlayer().skills;\\n\\n  /** @type {CompanyPosition} */ const eligiblePositions = [];\\n  for (const companyName of COMPANY_NAMES) {\\n    const reputation = ns.singularity.getCompanyRep(companyName);\\n    const positionNames = ns.singularity.getCompanyPositions(companyName);\\n    for (const positionName of positionNames) {\\n      // Only include the positions that we are eligible for.\\n      const positionInfo = ns.singularity.getCompanyPositionInfo(\\n        companyName,\\n        positionName\\n      );\\n      if (positionInfo.requiredReputation > reputation) continue;\\n      let hasRequiredSkills = true;\\n      for (const skillName in positionInfo.requiredSkills) {\\n        ns.tprint(positionInfo.requiredSkills[skillName]);\\n        if (positionInfo.requiredSkills[skillName] > skills[skillName]) {\\n          hasRequiredSkills = false;\\n          break;\\n        }\\n      }\\n      if (!hasRequiredSkills) continue;\\n      eligiblePositions.push(new CompanyPosition(companyName, positionInfo));\\n    }\\n  }\\n\\n  eligiblePositions.sort(\\n    (position1, position2) =>\\n      position2.positionInfo.salary - position1.positionInfo.salary\\n  );\\n\\n  /** @type {import(\\\"utils/table\\\").Table} */ const table = { rows: [] };\\n  for (const position of eligiblePositions) {\\n    /** @type {import(\\\"utils/table\\\").Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Company', style: {} },\\n          content: position.companyName,\\n        },\\n        {\\n          column: { name: 'Position', style: {} },\\n          content: position.positionInfo.name,\\n        },\\n        {\\n          column: { name: 'Field', style: {} },\\n          content: position.positionInfo.field,\\n        },\\n        {\\n          column: { name: 'Salary / s', style: {} },\\n          content: formatMoney(ns, position.positionInfo.salary),\\n        },\\n        {\\n          column: { name: 'Required Rep', style: {} },\\n          content: ns.formatNumber(position.positionInfo.requiredReputation),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\\nclass CompanyPosition {\\n  /**\\n   * @param {string} companyName\\n   * @param {import('../NetscriptDefinitions').CompanyPositionInfo} positionInfo\\n   */\\n  constructor(companyName, positionInfo) {\\n    this.companyName = companyName;\\n    this.positionInfo = positionInfo;\\n  }\\n}\\n\",\"filename\":\"get-company-position-stats.js\",\"server\":\"home\"}}],[\"utils/common.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Gets net worth including stocks.\\n *\\n * @param {NS} ns\\n * @returns {number} net worth\\n */\\nexport function getNetWorth(ns) {\\n  const commission = ns.stock.getConstants().StockMarketCommission;\\n  const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n  const moneyInStocks = getStocks(ns)\\n    .map(\\n      stock =>\\n        ns.stock.getAskPrice(stock.symbol) *\\n          ns.stock.getPosition(stock.symbol)[0] -\\n        commission\\n    )\\n    .reduce((a, b) => a + b);\\n}\\n\\n/**\\n *\\n * @param {*} ns\\n */\\nexport function getStockValue(ns) {}\\n\",\"filename\":\"utils/common.js\",\"server\":\"home\"}}],[\"utils/money.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Gets net worth including stocks.\\n *\\n * @param {NS} ns\\n * @returns {number} net worth\\n */\\nexport function getNetWorth(ns) {\\n  const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n  return moneyAvailable + getStockValue(ns);\\n}\\n\\n/**\\n * Gets amount of money in stocks subtracking commission.\\n *\\n * @param {NS} ns\\n * @returns {number} money value in stocks\\n */\\nexport function getStockValue(ns) {\\n  try {\\n    const commission = ns.stock.getConstants().StockMarketCommission;\\n    return getStocks(ns)\\n      .map(\\n        stock =>\\n          ns.stock.getAskPrice(stock.symbol) *\\n            ns.stock.getPosition(stock.symbol)[0] -\\n          commission\\n      )\\n      .reduce((a, b) => a + b);\\n  } catch (_) {\\n    return 0;\\n  }\\n}\\n\",\"filename\":\"utils/money.js\",\"server\":\"home\"}}],[\"monitor-augmentations.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\nconst NEUROFLUX_GOVERNOR = 'NeuroFlux Governor';\\nconst COMBAT_STAT_NAMES = ['strength', 'defense', 'dexterity', 'agility'];\\n\\nclass Augmentation {\\n  /**\\n   * @param {NS} ns\\n   * @param {string} name augmentation name\\n   */\\n  constructor(ns, name) {\\n    this.name = name;\\n    this.price = ns.singularity.getAugmentationPrice(name);\\n\\n    // Only include factions where there is enough reputation to buy this\\n    // augmentation.\\n    const reputationRequired = ns.singularity.getAugmentationRepReq(this.name);\\n\\n    this.factions = ns.singularity\\n      .getAugmentationFactions(this.name)\\n      .filter(\\n        faction => ns.singularity.getFactionRep(faction) >= reputationRequired\\n      );\\n    try {\\n      const gangFaction = ns.gang.getGangInformation().faction;\\n      const gangFactionAugmentations =\\n        ns.singularity.getAugmentationsFromFaction(gangFaction);\\n      if (name === NEUROFLUX_GOVERNOR) {\\n        this.factions = this.factions.filter(\\n          faction => faction !== gangFaction\\n        );\\n      } else {\\n        if (\\n          gangFactionAugmentations.includes(this.name) &&\\n          ns.singularity.getFactionRep(gangFaction) >= reputationRequired\\n        ) {\\n          this.factions.push(gangFaction);\\n        }\\n      }\\n    } catch (_) {}\\n  }\\n\\n  /**\\n   * @param {NS} ns\\n   * @returns {boolean} whether we can buy this augmentation right now\\n   */\\n  canBuy(ns) {\\n    if (this.factions.length === 0) return false;\\n\\n    // Check that we don't already own this augmentation.\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\n    if (\\n      !this.name.includes(NEUROFLUX_GOVERNOR) &&\\n      ownedAugmentations.includes(this.name)\\n    ) {\\n      return false;\\n    }\\n\\n    // Check that we have all the prereq augmentations.\\n    const requiredAugmentations = ns.singularity.getAugmentationPrereq(\\n      this.name\\n    );\\n    for (const requiredAugmentation of requiredAugmentations) {\\n      if (!ownedAugmentations.includes(requiredAugmentation)) return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /** @param {NS} ns */\\n  getDescription(ns) {\\n    if (this.name === NEUROFLUX_GOVERNOR) return 'all: +1%';\\n\\n    const stats = Object.fromEntries(\\n      Object.entries(ns.singularity.getAugmentationStats(this.name)).filter(\\n        entry => entry[1] > 1\\n      )\\n    );\\n\\n    // Combine combat stats if needed.\\n    function combineStats(stats, statNamesToCombine, combinedStatName) {\\n      const uniqueValues = new Set(\\n        statNamesToCombine\\n          .map(statName => stats[statName])\\n          .filter(value => value != null)\\n      );\\n      if (uniqueValues.size !== 1) return;\\n      stats[combinedStatName] = [...uniqueValues][0];\\n      for (const statName of statNamesToCombine) delete stats[statName];\\n    }\\n    combineStats(stats, COMBAT_STAT_NAMES, 'combat');\\n    combineStats(\\n      stats,\\n      COMBAT_STAT_NAMES.map(statName => `${statName}_exp`),\\n      'combat_exp'\\n    );\\n\\n    return Object.entries(stats)\\n      .sort((entry1, entry2) => entry1[0].localeCompare(entry2[0]))\\n      .map(entry => {\\n        const statName = entry[0].replace('_', ' ');\\n        const message = `${statName}: +${ns.formatPercent(entry[1] - 1, 0)}`;\\n        let color = ns.ui.getTheme().combat;\\n        if (statName.includes('hacking')) color = ns.ui.getTheme().hack;\\n        if (statName.includes('charisma')) color = ns.ui.getTheme().cha;\\n        if (statName.includes('money')) color = ns.ui.getTheme().money;\\n        if (statName.includes('rep')) color = ns.ui.getTheme().rep;\\n        return createReactElement(message, { color: color });\\n      });\\n  }\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(900, 600);\\n  ns.moveTail(500, 200);\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    ns.clearLog();\\n\\n    const augmentations = [\\n      ...new Set(\\n        ns\\n          .getPlayer()\\n          .factions.map(ns.singularity.getAugmentationsFromFaction)\\n          .flat()\\n      ),\\n    ]\\n      .map(augmentationName => new Augmentation(ns, augmentationName))\\n      .filter(augmentation => augmentation.canBuy(ns))\\n      .sort(\\n        (augmentation1, augmentation2) =>\\n          augmentation1.price - augmentation2.price\\n      );\\n\\n    const money = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const augmentation of augmentations) {\\n      const canAfford = money >= augmentation.price;\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Augmentation', style: { width: 'max-content' } },\\n            content: augmentation.name,\\n          },\\n          {\\n            column: { name: 'Description', style: { width: 'max-content' } },\\n            content: augmentation.getDescription(ns),\\n          },\\n          {\\n            column: { name: 'Price', style: { width: 'min-content' } },\\n            content: formatMoney(ns, augmentation.price),\\n          },\\n          {\\n            column: { name: 'Factions', style: {} },\\n            content: augmentation.factions.join('\\\\n'),\\n          },\\n        ],\\n        ...(canAfford ? { style: { color: ns.ui.getTheme().success } } : {}),\\n      };\\n      table.rows.push(row);\\n    }\\n    printTable(ns, table);\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-augmentations.js\",\"server\":\"home\"}}],[\"monitor-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND } from 'utils/constants';\\nimport { printTable } from 'utils/table';\\n\\nclass Faction {\\n  /**\\n   * @param {NS} ns\\n   * @param {string} name faction name\\n   */\\n  constructor(ns, name) {\\n    this.name = name;\\n    this.reputation = ns.singularity.getFactionRep(name);\\n    this.currentFavor = Math.round(ns.singularity.getFactionFavor(name));\\n    this.favorGain = Math.round(ns.singularity.getFactionFavorGain(name));\\n\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\n    const augmentations = ns.singularity\\n      .getAugmentationsFromFaction(name)\\n      .filter(augmentation => !ownedAugmentations.includes(augmentation));\\n    this.augmentationCount = augmentations.length;\\n\\n    this.reputationUntilNextAugmentationUnlock =\\n      (augmentations\\n        .map(augmentation => ns.singularity.getAugmentationRepReq(augmentation))\\n        .filter(reputation => reputation > this.reputation)\\n        .sort()[0] ?? this.reputation) - this.reputation;\\n  }\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(900, 600);\\n  ns.moveTail(500, 200);\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    ns.clearLog();\\n\\n    const joinedFactions = ns\\n      .getPlayer()\\n      .factions.map(factionName => new Faction(ns, factionName))\\n      .sort(\\n        (faction1, faction2) => faction2.currentFavor - faction1.currentFavor\\n      );\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const faction of joinedFactions) {\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Faction', style: {} },\\n            content: faction.name,\\n          },\\n          {\\n            column: {\\n              name: 'Reputation',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatNumber(faction.reputation),\\n          },\\n          {\\n            column: {\\n              name: 'Current Favor',\\n              style: { textAlign: 'center', width: 'max-content' },\\n            },\\n            content:\\n              ns.formatNumber(faction.currentFavor, 0) +\\n              ` (+${ns.formatNumber(faction.favorGain, 0)})`,\\n          },\\n          {\\n            column: {\\n              name: 'Net Favor',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatNumber(\\n              faction.currentFavor + faction.favorGain,\\n              0\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Augmentations Left',\\n              style: { textAlign: 'center' },\\n            },\\n            content:\\n              faction.augmentationCount === 0\\n                ? '-'\\n                : `${faction.augmentationCount} (need ${ns.formatNumber(\\n                    faction.reputationUntilNextAugmentationUnlock\\n                  )} rep)`,\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n    printTable(ns, table);\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-factions.js\",\"server\":\"home\"}}],[\"gym-workout.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\n\\nclass Gym {\\n  /**\\n   * @param {NS} ns\\n   * @param {string} gymName\\n   * @param {string} city\\n   */\\n  constructor(ns, gymName, city) {\\n    this.gymName = gymName;\\n    this.city = city;\\n  }\\n}\\n\\n/**\\n * Workout at the best gym.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const gyms = Object.keys(ns.enums.LocationName)\\n    .filter(key => key.endsWith('Gym'))\\n    .map(gymKey => {\\n      const gymName = ns.enums.LocationName[gymKey];\\n      const cityKeys = Object.keys(ns.enums.CityName);\\n      const city =\\n        ns.enums.CityName[\\n          cityKeys.filter(cityKey => gymKey.startsWith(cityKey))\\n        ];\\n      return new Gym(ns, gymName, city);\\n    });\\n\\n  const citiesWithGyms = [new Set(gyms.map(gym => gym.city))];\\n  const currentCity = ns.getPlayer().city;\\n  if (citiesWithGyms.includes(currentCity)) {\\n    await workout(\\n      ns,\\n      gyms.find(gym => gym.city === currentCity)\\n    );\\n  } else {\\n    ns.singularity.travelToCity(gyms[0].city);\\n    await workout(ns, gyms[0]);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Gym} gym\\n */\\nasync function workout(ns, gym) {\\n  while (true) {\\n    const currentSkills = ns.getPlayer().skills;\\n    const skills = Object.keys(ns.enums.GymType).sort(\\n      (skill1, skill2) => currentSkills[skill1] - currentSkills[skill2]\\n    );\\n    ns.singularity.gymWorkout(\\n      gym.gymName,\\n      ns.enums.GymType[skills[0]],\\n      ns.singularity.isFocused()\\n    );\\n    await ns.sleep(ONE_SECOND * 30);\\n  }\\n}\\n\",\"filename\":\"gym-workout.js\",\"server\":\"home\"}}],[\"manage-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const companyNamesWithFactions = [\\n    ns.enums.CompanyName.MegaCorp,\\n    ns.enums.CompanyName.BachmanAndAssociates,\\n    ns.enums.CompanyName.BladeIndustries,\\n    ns.enums.CompanyName.ClarkeIncorporated,\\n    ns.enums.CompanyName.KuaiGongInternational,\\n    ns.enums.CompanyName.ECorp,\\n    ns.enums.CompanyName.OmniTekIncorporated,\\n    ns.enums.CompanyName.NWO,\\n    ns.enums.CompanyName.FourSigma,\\n    ns.enums.CompanyName.FulcrumTechnologies,\\n  ];\\n\\n  while (true) {\\n    const factions = ns.getPlayer().factions;\\n    for (const companyName of companyNamesWithFactions) {\\n      const companyReputation = ns.singularity.getCompanyRep(companyName);\\n      if (companyReputation >= 400000 || factions.includes(companyName))\\n        continue;\\n      const field = getFieldWithHighestSalary(\\n        ns,\\n        companyName,\\n        companyReputation\\n      );\\n      ns.singularity.applyToCompany(companyName, field);\\n      ns.singularity.workForCompany(companyName, ns.singularity.isFocused());\\n      await ns.sleep(ONE_MINUTE);\\n    }\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} companyName\\n * @param {number} companyReputation\\n * @returns {string} field with highest salary\\n */\\nfunction getFieldWithHighestSalary(ns, companyName, companyReputation) {\\n  const currentSkills = ns.getPlayer().skills;\\n  const positionInfos = ns.singularity\\n    .getCompanyPositions(companyName)\\n    .map(position =>\\n      ns.singularity.getCompanyPositionInfo(companyName, position)\\n    )\\n    .filter(positionInfo => {\\n      if (positionInfo.requiredReputation > companyReputation) return false;\\n      const requiredSkills = positionInfo.requiredSkills;\\n      for (const skill in requiredSkills) {\\n        if (requiredSkills[skill] > currentSkills[skill]) return false;\\n      }\\n      return true;\\n    })\\n    .sort((position1, position2) => position2.salary - position1.salary);\\n  return positionInfos[0].field;\\n}\\n\",\"filename\":\"manage-jobs.js\",\"server\":\"home\"}}],[\"manage-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers, updateServers } from 'database/servers';\\nimport { ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * Selling hashes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    const hackableServers = getServers(ns)\\n      .filter(\\n        server =>\\n          !server.isPurchased &&\\n          ns.hasRootAccess(server.hostname) &&\\n          server.maxMoney > 0\\n      )\\n      .map(server => ({\\n        hostname: server.hostname,\\n        minSecurityLevel: ns.getServerMinSecurityLevel(server.hostname),\\n        maxMoney: ns.getServerMaxMoney(server.hostname),\\n      }))\\n      .filter(server => server.minSecurityLevel > 1)\\n      .sort(\\n        (server1, server2) =>\\n          server2.minSecurityLevel - server1.minSecurityLevel\\n      );\\n    for (const server of hackableServers) {\\n      const isSuccessful = ns.hacknet.spendHashes(\\n        'Reduce Minimum Security',\\n        server.hostname\\n      );\\n      if (isSuccessful) {\\n        const newMinSecurity = ns.getServerMinSecurityLevel(server.hostname);\\n        ns.toast(\\n          `Reduced security level on ${server.hostname} from ${server.minSecurityLevel} to ${newMinSecurity}`\\n        );\\n        updateServers(ns, {\\n          hostname: server.hostname,\\n          minSecurity: newMinSecurity,\\n        });\\n      }\\n    }\\n\\n    ns.hacknet.spendHashes('Sell for Money');\\n    await ns.sleep(ONE_SECOND / 2);\\n  }\\n}\\n\",\"filename\":\"manage-hashes.js\",\"server\":\"home\"}}],[\"manage-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Keep this script running to manage queuing scripts in the home server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {}\\n\",\"filename\":\"manage-scripts.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-server-0\",\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"hacknet-server-1\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-14\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\",\"darkweb\",\"hacknet-server-2\",\"hacknet-server-3\",\"hacknet-server-4\",\"hacknet-server-5\",\"hacknet-server-6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"database/servers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/servers.txt\",\"text\":\"[{\\\"hostname\\\":\\\"home\\\",\\\"path\\\":[],\\\"organization\\\":\\\"Home PC\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":1024,\\\"cpuCores\\\":2,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"n00dles\\\",\\\"path\\\":[\\\"n00dles\\\"],\\\"organization\\\":\\\"Noodle Bar\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":4,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1750000,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"zer0\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\"],\\\"organization\\\":\\\"ZER0 Nightclub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":187500000,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":75},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"silver-helix\\\"],\\\"organization\\\":\\\"Silver Helix\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1125000000,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":150},{\\\"hostname\\\":\\\"computek\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"silver-helix\\\",\\\"computek\\\"],\\\"organization\\\":\\\"CompuTek\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":5559078725,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":62,\\\"hackingLevel\\\":360},{\\\"hostname\\\":\\\"phantasy\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\"],\\\"organization\\\":\\\"Phantasy Club\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":600000000,\\\"minSecurity\\\":7,\\\"baseSecurity\\\":20,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"netlink\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\"],\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":6875000000,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":73,\\\"hackingLevel\\\":375},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"rothman-uni\\\"],\\\"organization\\\":\\\"Rothman University\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4970835575,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":45,\\\"hackingLevel\\\":401},{\\\"hostname\\\":\\\"catalyst\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\"],\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":8405572075,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":66,\\\"hackingLevel\\\":449},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\"],\\\"organization\\\":\\\"LexoCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":17919721475,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":63,\\\"hackingLevel\\\":695},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\"],\\\"organization\\\":\\\"AeroCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":26860522050,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":81,\\\"hackingLevel\\\":899},{\\\"hostname\\\":\\\"deltaone\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\"],\\\"organization\\\":\\\"DeltaOne\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":32796417950,\\\"minSecurity\\\":25,\\\"baseSecurity\\\":75,\\\"hackingLevel\\\":836},{\\\"hostname\\\":\\\"icarus\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"icarus\\\"],\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24785240325,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":86,\\\"hackingLevel\\\":851},{\\\"hostname\\\":\\\"infocomm\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\"],\\\"organization\\\":\\\"InfoComm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":21751992350,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":85,\\\"hackingLevel\\\":890},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"univ-energy\\\"],\\\"organization\\\":\\\"Universal Energy\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":28787157825,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":89,\\\"hackingLevel\\\":812},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"taiyang-digital\\\"],\\\"organization\\\":\\\"Taiyang Digital\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":20999394100,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":72,\\\"hackingLevel\\\":871},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"zeus-med\\\"],\\\"organization\\\":\\\"Zeus Medical\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":34388335000,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":87,\\\"hackingLevel\\\":810},{\\\"hostname\\\":\\\"nova-med\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"nova-med\\\"],\\\"organization\\\":\\\"Nova Medical\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":27515548875,\\\"minSecurity\\\":20,\\\"baseSecurity\\\":61,\\\"hackingLevel\\\":812},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"titan-labs\\\"],\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":21577367725,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":821},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"applied-energetics\\\"],\\\"organization\\\":\\\"Applied Energetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":19802361275,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":79,\\\"hackingLevel\\\":818},{\\\"hostname\\\":\\\"vitalife\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"netlink\\\",\\\"catalyst\\\",\\\"lexo-corp\\\",\\\"aerocorp\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"nova-med\\\",\\\"applied-energetics\\\",\\\"vitalife\\\"],\\\"organization\\\":\\\"VitaLife\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":18054029775,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":863},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"johnson-ortho\\\"],\\\"organization\\\":\\\"Johnson Orthopedics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1842116725,\\\"minSecurity\\\":11.76,\\\"baseSecurity\\\":36,\\\"hackingLevel\\\":276},{\\\"hostname\\\":\\\"omega-net\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\"],\\\"organization\\\":\\\"Omega Software\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1623893725,\\\"minSecurity\\\":11,\\\"baseSecurity\\\":33,\\\"hackingLevel\\\":199},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\"],\\\"organization\\\":\\\"Crush Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1197681450,\\\"minSecurity\\\":12.74,\\\"baseSecurity\\\":38,\\\"hackingLevel\\\":247},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\"],\\\"organization\\\":\\\"Summit University\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":7394720025,\\\"minSecurity\\\":20,\\\"baseSecurity\\\":60,\\\"hackingLevel\\\":429},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\",\\\"alpha-ent\\\"],\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":17686757525,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":65,\\\"hackingLevel\\\":592},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\"],\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":40042970600,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":82,\\\"hackingLevel\\\":781},{\\\"hostname\\\":\\\"omnia\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"omnia\\\"],\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24271815075,\\\"minSecurity\\\":31,\\\"baseSecurity\\\":92,\\\"hackingLevel\\\":906},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"summit-uni\\\",\\\"alpha-ent\\\",\\\"snap-fitness\\\"],\\\"organization\\\":\\\"Snap Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":11250000000,\\\"minSecurity\\\":17,\\\"baseSecurity\\\":50,\\\"hackingLevel\\\":687},{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"I.I.I.I\\\"],\\\"organization\\\":\\\"I.I.I.I\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":365},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\"],\\\"organization\\\":\\\"Rho Construction\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":12577114750,\\\"minSecurity\\\":16,\\\"baseSecurity\\\":49,\\\"hackingLevel\\\":523},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"crush-fitness\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\"],\\\"organization\\\":\\\"Millenium Fitness Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":6250000000,\\\"minSecurity\\\":16,\\\"baseSecurity\\\":47,\\\"hackingLevel\\\":517},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"path\\\":[\\\"foodnstuff\\\"],\\\"organization\\\":\\\"FoodNStuff\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":50000000,\\\"minSecurity\\\":3,\\\"baseSecurity\\\":10,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"max-hardware\\\"],\\\"organization\\\":\\\"Max Hardware Store\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":250000000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":80},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"path\\\":[\\\"sigma-cosmetics\\\"],\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":57500000,\\\"minSecurity\\\":3,\\\"baseSecurity\\\":10,\\\"hackingLevel\\\":5},{\\\"hostname\\\":\\\"joesguns\\\",\\\"path\\\":[\\\"joesguns\\\"],\\\"organization\\\":\\\"Joe's Guns\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":62500000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":10},{\\\"hostname\\\":\\\"CSEC\\\",\\\"path\\\":[\\\"joesguns\\\",\\\"CSEC\\\"],\\\"organization\\\":\\\"CyberSec\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":8,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":54},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"path\\\":[\\\"hong-fang-tea\\\"],\\\"organization\\\":\\\"HongFang Teahouse\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":75000000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":30},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"path\\\":[\\\"harakiri-sushi\\\"],\\\"organization\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":100000000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":40},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\"],\\\"organization\\\":\\\"Nectar Nightclub Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":68750000,\\\"minSecurity\\\":7,\\\"baseSecurity\\\":20,\\\"hackingLevel\\\":20},{\\\"hostname\\\":\\\"neo-net\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\"],\\\"organization\\\":\\\"Neo Nightclub Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":125000000,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":50},{\\\"hostname\\\":\\\"the-hub\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\"],\\\"organization\\\":\\\"The Hub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":8,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4741572125,\\\"minSecurity\\\":11.76,\\\"baseSecurity\\\":36,\\\"hackingLevel\\\":311},{\\\"hostname\\\":\\\"syscore\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"syscore\\\"],\\\"organization\\\":\\\"SysCore Securities\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":10286389050,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":63,\\\"hackingLevel\\\":617},{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\"],\\\"organization\\\":\\\"NiteSec\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":204},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\"],\\\"organization\\\":\\\"ZB Institute of Technology\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24922304700,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":67,\\\"hackingLevel\\\":752},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\"],\\\"organization\\\":\\\"Aevum Police Headquarters\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":7999103825,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":77,\\\"hackingLevel\\\":447},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\"],\\\"organization\\\":\\\"Galactic Cybersystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":19789477150,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":64,\\\"hackingLevel\\\":830},{\\\"hostname\\\":\\\"unitalife\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"organization\\\":\\\"UnitaLife Group\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":25441088875,\\\"minSecurity\\\":25,\\\"baseSecurity\\\":74,\\\"hackingLevel\\\":800},{\\\"hostname\\\":\\\"defcomm\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\"],\\\"organization\\\":\\\"DefComm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":23259976350,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":88,\\\"hackingLevel\\\":850},{\\\"hostname\\\":\\\"zb-def\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\"],\\\"organization\\\":\\\"ZB Defense Industries\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24126401375,\\\"minSecurity\\\":20,\\\"baseSecurity\\\":61,\\\"hackingLevel\\\":776},{\\\"hostname\\\":\\\"microdyne\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\"],\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":14376715075,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":67,\\\"hackingLevel\\\":838},{\\\"hostname\\\":\\\"stormtech\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"stormtech\\\"],\\\"organization\\\":\\\"Storm Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":26405253925,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":82,\\\"hackingLevel\\\":1061},{\\\"hostname\\\":\\\"omnitek\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"stormtech\\\",\\\"omnitek\\\"],\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":512,\\\"cpuCores\\\":1,\\\"maxMoney\\\":327061539425,\\\"minSecurity\\\":31,\\\"baseSecurity\\\":92,\\\"hackingLevel\\\":1001},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"stormtech\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\"],\\\"organization\\\":\\\"Powerhouse Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":22500000000,\\\"minSecurity\\\":19,\\\"baseSecurity\\\":56,\\\"hackingLevel\\\":1038},{\\\"hostname\\\":\\\"ecorp\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"stormtech\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\",\\\"ecorp\\\"],\\\"organization\\\":\\\"ECorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1136858411125,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1142},{\\\"hostname\\\":\\\"megacorp\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"stormtech\\\",\\\"omnitek\\\",\\\"powerhouse-fitness\\\",\\\"megacorp\\\"],\\\"organization\\\":\\\"MegaCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1285780916825,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1350},{\\\"hostname\\\":\\\"helios\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\"],\\\"organization\\\":\\\"Helios Labs\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":14070405075,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":91,\\\"hackingLevel\\\":802},{\\\"hostname\\\":\\\"4sigma\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"organization\\\":\\\"Four Sigma\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":393127008725,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":68,\\\"hackingLevel\\\":977},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"kuai-gong\\\"],\\\"organization\\\":\\\"KuaiGong International\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":626828067800,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":98,\\\"hackingLevel\\\":1174},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"b-and-a\\\"],\\\"organization\\\":\\\"Bachman & Associates\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":683576332250,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":82,\\\"hackingLevel\\\":1031},{\\\"hostname\\\":\\\"nwo\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"nwo\\\"],\\\"organization\\\":\\\"NWO\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":879785259450,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1120},{\\\"hostname\\\":\\\".\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\".\\\"],\\\"organization\\\":\\\".\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":509},{\\\"hostname\\\":\\\"blade\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\".\\\",\\\"blade\\\"],\\\"organization\\\":\\\"Blade Industries\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":805650542500,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":964},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\".\\\",\\\"clarkinc\\\"],\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":507979144900,\\\"minSecurity\\\":19,\\\"baseSecurity\\\":57,\\\"hackingLevel\\\":1012},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\".\\\",\\\"clarkinc\\\",\\\"fulcrumassets\\\"],\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":25000000,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1281},{\\\"hostname\\\":\\\"The-Cave\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"microdyne\\\",\\\"helios\\\",\\\".\\\",\\\"clarkinc\\\",\\\"The-Cave\\\"],\\\"organization\\\":\\\"Helios\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":925},{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"run4theh111z\\\"],\\\"organization\\\":\\\"The Runners\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":508},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\"],\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":36656447225,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":84,\\\"hackingLevel\\\":1141},{\\\"hostname\\\":\\\"solaris\\\",\\\"path\\\":[\\\"harakiri-sushi\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"solaris\\\"],\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":19857955925,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":71,\\\"hackingLevel\\\":817},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"path\\\":[\\\"iron-gym\\\"],\\\"organization\\\":\\\"Iron Gym Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":500000000,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"hacknet-server-0\\\",\\\"path\\\":[\\\"hacknet-server-0\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":16,\\\"cpuCores\\\":6,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren\\\",\\\"path\\\":[\\\"lauren\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":524288,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-0\\\",\\\"path\\\":[\\\"lauren-0\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":131072,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-1\\\",\\\"path\\\":[\\\"lauren-1\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32768,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-2\\\",\\\"path\\\":[\\\"lauren-2\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8192,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-3\\\",\\\"path\\\":[\\\"lauren-3\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":2048,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-4\\\",\\\"path\\\":[\\\"lauren-4\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"hacknet-server-1\\\",\\\"path\\\":[\\\"hacknet-server-1\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":16,\\\"cpuCores\\\":5,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-5\\\",\\\"path\\\":[\\\"lauren-5\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-6\\\",\\\"path\\\":[\\\"lauren-6\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":512,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-7\\\",\\\"path\\\":[\\\"lauren-7\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-8\\\",\\\"path\\\":[\\\"lauren-8\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-9\\\",\\\"path\\\":[\\\"lauren-9\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-10\\\",\\\"path\\\":[\\\"lauren-10\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-11\\\",\\\"path\\\":[\\\"lauren-11\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-12\\\",\\\"path\\\":[\\\"lauren-12\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-13\\\",\\\"path\\\":[\\\"lauren-13\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-14\\\",\\\"path\\\":[\\\"lauren-14\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-15\\\",\\\"path\\\":[\\\"lauren-15\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-16\\\",\\\"path\\\":[\\\"lauren-16\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-17\\\",\\\"path\\\":[\\\"lauren-17\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-18\\\",\\\"path\\\":[\\\"lauren-18\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-19\\\",\\\"path\\\":[\\\"lauren-19\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-20\\\",\\\"path\\\":[\\\"lauren-20\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-21\\\",\\\"path\\\":[\\\"lauren-21\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-22\\\",\\\"path\\\":[\\\"lauren-22\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-23\\\",\\\"path\\\":[\\\"lauren-23\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"darkweb\\\",\\\"path\\\":[\\\"darkweb\\\"],\\\"organization\\\":\\\"darkweb\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"hacknet-server-2\\\",\\\"path\\\":[\\\"hacknet-server-2\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"cpuCores\\\":4,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"hacknet-server-3\\\",\\\"path\\\":[\\\"hacknet-server-3\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"cpuCores\\\":3,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"hacknet-server-4\\\",\\\"path\\\":[\\\"hacknet-server-4\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"cpuCores\\\":2,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"hacknet-server-5\\\",\\\"path\\\":[\\\"hacknet-server-5\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"cpuCores\\\":2,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"hacknet-server-6\\\",\\\"path\\\":[\\\"hacknet-server-6\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"cpuCores\\\":1,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1}]\"}}],[\"database/stocks.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/stocks.txt\",\"text\":\"[{\\\"symbol\\\":\\\"ECP\\\",\\\"organization\\\":\\\"ECorp\\\",\\\"server\\\":\\\"ecorp\\\",\\\"maxShares\\\":24300000},{\\\"symbol\\\":\\\"MGCP\\\",\\\"organization\\\":\\\"MegaCorp\\\",\\\"server\\\":\\\"megacorp\\\",\\\"maxShares\\\":18500000},{\\\"symbol\\\":\\\"BLD\\\",\\\"organization\\\":\\\"Blade Industries\\\",\\\"server\\\":\\\"blade\\\",\\\"maxShares\\\":13200000},{\\\"symbol\\\":\\\"CLRK\\\",\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"server\\\":\\\"clarkinc\\\",\\\"maxShares\\\":28000000},{\\\"symbol\\\":\\\"OMTK\\\",\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"server\\\":\\\"omnitek\\\",\\\"maxShares\\\":8900000},{\\\"symbol\\\":\\\"FSIG\\\",\\\"organization\\\":\\\"Four Sigma\\\",\\\"server\\\":\\\"4sigma\\\",\\\"maxShares\\\":7300000},{\\\"symbol\\\":\\\"KGI\\\",\\\"organization\\\":\\\"KuaiGong International\\\",\\\"server\\\":\\\"kuai-gong\\\",\\\"maxShares\\\":23100000},{\\\"symbol\\\":\\\"FLCM\\\",\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"server\\\":\\\"fulcrumtech\\\",\\\"maxShares\\\":12900000},{\\\"symbol\\\":\\\"STM\\\",\\\"organization\\\":\\\"Storm Technologies\\\",\\\"server\\\":\\\"stormtech\\\",\\\"maxShares\\\":11500000},{\\\"symbol\\\":\\\"DCOMM\\\",\\\"organization\\\":\\\"DefComm\\\",\\\"server\\\":\\\"defcomm\\\",\\\"maxShares\\\":14000000},{\\\"symbol\\\":\\\"HLS\\\",\\\"organization\\\":\\\"Helios Labs\\\",\\\"server\\\":\\\"helios\\\",\\\"maxShares\\\":15600000},{\\\"symbol\\\":\\\"VITA\\\",\\\"organization\\\":\\\"VitaLife\\\",\\\"server\\\":\\\"vitalife\\\",\\\"maxShares\\\":14700000},{\\\"symbol\\\":\\\"ICRS\\\",\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"server\\\":\\\"icarus\\\",\\\"maxShares\\\":10300000},{\\\"symbol\\\":\\\"UNV\\\",\\\"organization\\\":\\\"Universal Energy\\\",\\\"server\\\":\\\"univ-energy\\\",\\\"maxShares\\\":8300000},{\\\"symbol\\\":\\\"AERO\\\",\\\"organization\\\":\\\"AeroCorp\\\",\\\"server\\\":\\\"aerocorp\\\",\\\"maxShares\\\":10000000},{\\\"symbol\\\":\\\"OMN\\\",\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"server\\\":\\\"omnia\\\",\\\"maxShares\\\":16100000},{\\\"symbol\\\":\\\"SLRS\\\",\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"server\\\":\\\"solaris\\\",\\\"maxShares\\\":5400000},{\\\"symbol\\\":\\\"GPH\\\",\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"server\\\":\\\"global-pharm\\\",\\\"maxShares\\\":6400000},{\\\"symbol\\\":\\\"NVMD\\\",\\\"organization\\\":\\\"Nova Medical\\\",\\\"server\\\":\\\"nova-med\\\",\\\"maxShares\\\":6100000},{\\\"symbol\\\":\\\"WDS\\\",\\\"organization\\\":\\\"Watchdog Security\\\",\\\"maxShares\\\":12200000},{\\\"symbol\\\":\\\"LXO\\\",\\\"organization\\\":\\\"LexoCorp\\\",\\\"server\\\":\\\"lexo-corp\\\",\\\"maxShares\\\":10100000},{\\\"symbol\\\":\\\"RHOC\\\",\\\"organization\\\":\\\"Rho Construction\\\",\\\"server\\\":\\\"rho-construction\\\",\\\"maxShares\\\":7100000},{\\\"symbol\\\":\\\"APHE\\\",\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"server\\\":\\\"alpha-ent\\\",\\\"maxShares\\\":7100000},{\\\"symbol\\\":\\\"SYSC\\\",\\\"organization\\\":\\\"SysCore Securities\\\",\\\"server\\\":\\\"syscore\\\",\\\"maxShares\\\":6500000},{\\\"symbol\\\":\\\"CTK\\\",\\\"organization\\\":\\\"CompuTek\\\",\\\"server\\\":\\\"computek\\\",\\\"maxShares\\\":12700000},{\\\"symbol\\\":\\\"NTLK\\\",\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"server\\\":\\\"netlink\\\",\\\"maxShares\\\":4100000},{\\\"symbol\\\":\\\"OMGA\\\",\\\"organization\\\":\\\"Omega Software\\\",\\\"server\\\":\\\"omega-net\\\",\\\"maxShares\\\":3600000},{\\\"symbol\\\":\\\"FNS\\\",\\\"organization\\\":\\\"FoodNStuff\\\",\\\"server\\\":\\\"foodnstuff\\\",\\\"maxShares\\\":9100000},{\\\"symbol\\\":\\\"JGN\\\",\\\"organization\\\":\\\"Joe's Guns\\\",\\\"server\\\":\\\"joesguns\\\",\\\"maxShares\\\":9800000},{\\\"symbol\\\":\\\"SGC\\\",\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"maxShares\\\":2900000},{\\\"symbol\\\":\\\"CTYS\\\",\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"server\\\":\\\"catalyst\\\",\\\"maxShares\\\":51400000},{\\\"symbol\\\":\\\"MDYN\\\",\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"server\\\":\\\"microdyne\\\",\\\"maxShares\\\":3800000},{\\\"symbol\\\":\\\"TITN\\\",\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"server\\\":\\\"titan-labs\\\",\\\"maxShares\\\":3800000}]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-stocks.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":-116169.92554893112,\"onlineRunningTime\":511.2099999999796,\"ramUsage\":14.25,\"server\":\"home\",\"scriptKey\":\"manage-stocks.js*[]\",\"title\":\"manage-stocks.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"monitor-net-worth.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":511.2099999999796,\"ramUsage\":5.7,\"server\":\"home\",\"scriptKey\":\"monitor-net-worth.js*[]\",\"title\":\"monitor-net-worth.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-hashes.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":502.80999999998005,\"ramUsage\":5.85,\"server\":\"home\",\"scriptKey\":\"manage-hashes.js*[]\",\"title\":\"manage-hashes.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-hacknet.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":501.20999999998014,\"ramUsage\":5.7,\"server\":\"home\",\"scriptKey\":\"manage-hacknet.js*[]\",\"title\":\"manage-hacknet.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-servers.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":493.2099999999806,\"ramUsage\":4.6,\"server\":\"home\",\"scriptKey\":\"manage-servers.js*[]\",\"title\":\"manage-servers.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"zb-def\\\"]\",\"title\":\"weaken.js zb-def\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":28,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13577.149302285303,\"onlineMoneyMade\":3134093.585631584,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":8.55,\"server\":\"home\",\"scriptKey\":\"manage-hacking.js*[0]\",\"title\":\"manage-hacking.js 0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":186,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":77,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":39,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-75941.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1],[0,0,0,1,1,0,1],[0,0,0,0,0,0,1],[0,1,0,0,1,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,1,0],[1,1,1,1,1,1,1],[0,1,0,1,0,0,1],[0,0,0,1,0,0,0],[0,0,0,0,1,0,0],[0,1,0,0,1,1,0],[1,1,0,0,0,1,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418484-NiteSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,1],[0,0,1,0,1,0,0,0,1,0],[0,0,0,1,1,0,0,0,0,0],[0,1,0,1,1,0,0,1,0,0],[0,0,1,1,0,0,0,0,0,0],[0,0,0,1,0,1,0,0,0,0],[1,1,0,0,1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"31.9.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45474336445,\"moneyMax\":1136858411125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1142,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"84.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51431236673,\"moneyMax\":1285780916825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1350,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"6.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":27343053290,\"moneyMax\":683576332250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1031,\"serverGrowth\":66,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-43642.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":161839902202,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"25.7.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"blade\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"blade\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":32226021700,\"moneyMax\":805650542500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":964,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"blade\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.75,\"server\":\"blade\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":21,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"80.9.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":35191410378,\"moneyMax\":879785259450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1120,\"serverGrowth\":79,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"85.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":20319165796,\"moneyMax\":507979144900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1012,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92990.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100100010000000100000000101101100011111101011110111001101100011\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-246895.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[43,141,90,46,69,52,95,111,71,168,68,64,99,78],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"95.1.9.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omnitek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omnitek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":13082461577,\"moneyMax\":327061539425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1001,\"serverGrowth\":95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":211.8099999999965,\"ramUsage\":1.7,\"server\":\"omnitek\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":28,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":219,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":25,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"24.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":15725080349,\"moneyMax\":393127008725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":99,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795415.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,1,1,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,1,1,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0],[1,0,1,1,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-687961.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[49,[2,5,7,8,9,10,11,13]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"61.4.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":25073122712,\"moneyMax\":626828067800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1174,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273690.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[197,124,5,84,124,58,154,23,35,111,49,100,42,151,27,109,134,157,106,145,155,151,167,40],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570177.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,1,1],[0,1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[1,0,0,1,0,0,0,0,1,0],[0,0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0,0],[1,0,1,0,1,0,1,0,0,0],[1,0,0,0,0,1,0,0,0,0],[1,1,0,0,0,1,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"54.4.0.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"fulcrumtech\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"fulcrumtech\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1466257889,\"moneyMax\":36656447225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1141,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":323,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":262,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130433-NiteSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":139437406293146,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"30.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1281,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"65.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1056210157,\"moneyMax\":26405253925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":90,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-351900.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,1,1,1,1],[0,0,1,0,1,0,0,1,1,0,0,0],[0,1,0,1,0,0,0,0,1,0,0,1],[0,0,0,1,1,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,1,1,0,0,0],[0,1,1,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,1,0,0],[1,0,0,0,0,1,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"5.8.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":930399054,\"moneyMax\":23259976350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":66,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623591.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":5100,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512200.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[61,[4,6,7,10,11,12,13,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"52.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":870079694,\"moneyMax\":21751992350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":72,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922223.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000100010000000100000000000100001010001000001110011111001100111\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"80.3.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"helios\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"helios\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":562816203,\"moneyMax\":14070405075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":18,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"16.0.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"vitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"vitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":722161191,\"moneyMax\":18054029775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"ramUsage\":1.75,\"server\":\"vitalife\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":18,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-329730.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,4,3,0,3,2,3,3,3,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-986551.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11000000000100000011000001011010\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"81.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":991409613,\"moneyMax\":24785240325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"51.0.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1151486313,\"moneyMax\":28787157825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":82,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.7,\"server\":\"univ-energy\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":3,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-528325-Netburners.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0,1,0,1,0,0],[1,0,1,0,1,0,0,0,1,0,0],[0,1,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,1,1,0,0],[0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,1,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938403-Sector12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[128,62,177,111,45,126,63,77,173,2,15,73,97,102,118,193,154,72,156,182,14,142,46,165,123,109,191,149,186,194,4,48,187,36,67,68,176,92,60,5,74,48,177,144,135,8],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"61.3.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"titan-labs\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"titan-labs\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":863094709,\"moneyMax\":21577367725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":67,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":1,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922576.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[102,169,41]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"92.9.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"microdyne\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"microdyne\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":575068603,\"moneyMax\":14376715075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":76,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.7,\"server\":\"microdyne\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"microdyne\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"microdyne\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":5,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"17.2.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":839975764,\"moneyMax\":20999394100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":79,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"79.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":791579086,\"moneyMax\":19789477150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":72,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-678069.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[105,23,198,199,198,109,27,77,41,17,151,129,145,110,7,80,14,116,179,90,199,29,167,88,192,91,25,60,116,132,161,142],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314924.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[19,40,158,2,130,89,96,34,15,34,51,15,12,193,77,177,23,128,130,193,52,60,105,8,15]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"78.4.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1074420882,\"moneyMax\":26860522050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-911126.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[150,[1,2,4,5,7,8,9,10,11]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"49.1.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omnia\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omnia\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":970872603,\"moneyMax\":24271815075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.210000000000335,\"ramUsage\":1.7,\"server\":\"omnia\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"omnia\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":30,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705775-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[64,[1,2,3,4,5,7,9,10,11,12,13]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380158-CyberSec.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,5,1,2,5,5,0,2,4,3,5,4,4,4,2,3],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-153143.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11011001\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"55.5.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":965056055,\"moneyMax\":24126401375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":776,\"serverGrowth\":66,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-909224.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1644075953,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"44.3.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":792094451,\"moneyMax\":19802361275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":70,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"60.8.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"solaris\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"solaris\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":794318237,\"moneyMax\":19857955925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":79,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"solaris\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":9,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"56.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1311856718,\"moneyMax\":32796417950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":55,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"6.8.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1601718824,\"moneyMax\":40042970600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":86,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.210000000000335,\"ramUsage\":1.7,\"server\":\"global-pharm\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-798465.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,1,2,5,3,5,3],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"7.0.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1100621955,\"moneyMax\":27515548875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":74,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"90.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1375533400,\"moneyMax\":34388335000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688704-NiteSec.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,0,2,3],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"62.3.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1017643555,\"moneyMax\":25441088875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":76,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"unitalife\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":36,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-752587.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,1,0,0,1,0],[0,0,0,0,0,0,1,0,0,0,0],[1,0,0,0,1,1,0,0,0,0,0],[0,0,0,0,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,1,0,1,1,0],[1,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,1,1,0,0,1,0,0],[0,1,1,1,0,0,0,0,1,0,0],[1,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155294.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"fsEYu60JbUCu560JSS0w3ascHHHHHHHHHHHHHHHHHHIYIYIYI3f37ah5ayLHayLHayLHLHLH8dHLH8d8dHHHHHHHHH\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-295400.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"N65TjaR65TjaR6nmxvZ1NjqEyedDNyQsD0mNyQsD0myQsD0myQsxizTQsxizTQsxIIASIASIASS\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871794.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":45965,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173969.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":529807983279,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"39.2.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":716788859,\"moneyMax\":17919721475,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":695,\"serverGrowth\":61,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":3,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-598053.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[85,[1,2,3,5,6,7,9,11,12,14,15,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417025.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[196,21,34,65,194,150,74],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133043-Sector12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[59,17,93,75,194,57,17,72]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"97.3.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":503084590,\"moneyMax\":12577114750,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":523,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-910069.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[137,[2,4,5,6,8,9,10,13,14,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"99.4.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":707470301,\"moneyMax\":17686757525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":592,\"serverGrowth\":53,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.210000000000335,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"scriptKey\":\"hack.js*[\\\"max-hardware\\\"]\",\"title\":\"hack.js max-hardware\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.210000000000335,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":1,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981767-Sector12.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,9,0,5,4,4,5,9,7,9,9,9,6,2,1],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"18.2.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":319964153,\"moneyMax\":7999103825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":447,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"78.5.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":198833423,\"moneyMax\":4970835575,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112709.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":15,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-942310-CyberSec.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"jt6kZHjt6kZHjzkZHjzkZHjaf5XICKj64XQj64XQj64XMwwwwwwwwwwne5wwwwn1eBe5zpNe5zpNe\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"98.5.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"zb-institute\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":996892188,\"moneyMax\":24922304700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":752,\"serverGrowth\":78,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"37.3.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":295788801,\"moneyMax\":7394720025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":429,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":36,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-819611.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,1,1,0,0,1,0,1],[0,0,0,0,1,0,1,0,1,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"46.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":411455562,\"moneyMax\":10286389050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":617,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"21.9.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":336222883,\"moneyMax\":8405572075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":449,\"serverGrowth\":34,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":73,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"32.9.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":11.76,\"moneyAvailable\":189662885,\"moneyMax\":4741572125,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":311,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-891795.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":878456,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-515724.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,1,1],[1,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,1,0,0,1],[0,0,0,1,0,1,1,1,0,0,1],[0,0,0,0,0,1,1,0,1,0,0],[0,0,1,0,1,1,1,0,0,0,0],[0,0,0,1,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,1,0,1,0,1,0,0],[1,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"92.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":222363149,\"moneyMax\":5559078725,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":360,\"serverGrowth\":58,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489243.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"M61KFqdNdNdS8ol3l3l3l3l3uuuuuuuuuuuLVruLVruL2ruL2bw2ruL2bwrrAM4U5mt\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"5.9.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":375,\"serverGrowth\":69,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":73,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727743.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00000001100010011110011101110000\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-267272.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[157,116,123,180,12,42,43,121,115,34,148,57,79,137,26,108]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"64.2.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":36,\"hackDifficulty\":39.01800000000001,\"minDifficulty\":11.76,\"moneyAvailable\":1164467.393078023,\"moneyMax\":1842116725,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":276,\"serverGrowth\":49,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-358967.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[24,13,181,44,200,172,6,74,114,185,49,68,167,54,79,58,56,105,81,139,119,34,112,200,116,18,28,147,102,10,61,154],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415492.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"sdRTVAIETVAIETVARtWzVARtWXtCJw16Jw16Jw16RO16Jw1CGvaKo5xCK3o8J4mio8J4mio8JNGypZs6WGzqW\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"95.3.1.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":879013.9877116551,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141427.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[8,120,190,126,102,118,55,67,12,194,78,165,2,124,170,107,35,115,53],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-919205.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,1,0,0,0,0],[1,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0],[1,0,1,1,0,0,0,0],[0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0],[1,1,0,1,0,0,0,0],[1,0,0,0,0,1,0,0],[0,0,1,0,0,0,1,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22346.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[66,163,122,195,43,151,11,126,144,83,138,56,96,61,160,19,108,43,48,4,135,56,154,45,80,5,107,200,49,42,102,64,129,157,145,180,135,28,183,37,164,165,65,70]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"16.0.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":6.692,\"minDifficulty\":3,\"moneyAvailable\":677281.1133045226,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":3,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-944803.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,3,2,2,3,2,2,3,1,4,3,0,4,4,6,2,2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828605.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01011110000101001001100110011010\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"78.7.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":7761448.3360155765,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-282528.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,0,2,3,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"43.2.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":51.784000000000006,\"minDifficulty\":5,\"moneyAvailable\":1024953.3767683154,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-256514.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[136,10,15,109,39,76,103,7,136,47,122,180,117,98,107,123,71,122,195]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"69.7.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":73.46799999999999,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-464437-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":750106636155,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-125567.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,1,1,1,0,0],[0,1,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,1,0],[1,1,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,0,0,1,0,0,0,1,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"9.7.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":26.60799999999999,\"minDifficulty\":7,\"moneyAvailable\":870934.8658172319,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"9.3.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":98.196,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"39.2.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890912.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[163,25,124,12,151,171,139,198,179,141,109,139,174,179,192,54,197,103,97,115,117,36,196,64,63,100,154,81,125,50,26,153,20,72,114,75,76,13,130,95,43,139,22,143,85,63,197]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-600976.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[194,[1,2,3,4,5,8,9,11]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-235623.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[62,186,32,6,65,137,179,154,154,22,137,108,192,28,97,199,186,165,46,183,145,85,174]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"91.6.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168720-Netburners.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,1,0,1,0,1],[0,1,1,0,0,1,1,0,1],[1,0,0,1,0,1,0,0,1],[1,1,0,0,1,0,1,1,0],[0,0,1,0,0,0,0,1,1],[1,0,0,0,0,0,0,1,0],[0,1,0,0,1,0,0,0,0],[1,1,0,0,1,0,1,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-980895.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[149,18,122,147,157,78,120,51],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"0.8.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":100,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-674552.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000000010000110110110110001010011001000101011100010111001001101\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542191.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,6,1,4,4,3,2,0,7,1,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"65.9.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":72.94799999999998,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-238375.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,1,0],[0,1,1,0,0,1,0,1],[1,0,0,1,0,1,1,1],[0,0,0,0,0,1,0,1],[0,0,0,1,0,0,0,0],[0,0,1,1,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,1],[1,0,1,0,0,0,0,1],[0,0,1,0,1,0,0,0],[1,0,0,1,0,0,0,0],[1,0,0,1,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"66.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":56.106,\"minDifficulty\":5,\"moneyAvailable\":1005262.7200526632,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181379.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[105,120,1,150,79,134],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-912878.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[17,95,127,167,92,149,184,66,120,117,128,136,1,107,184,39,93,61,94,34,143,161,110,106,78,72,169,33,139,162,167,176,35,157,152,45,174,147,67,158,173,81,121,93]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229174-Netburners.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0],[0,0,1,0,0,0,1],[0,0,0,0,1,1,0],[1,0,1,0,1,0,1],[1,1,0,0,1,0,0],[1,1,0,0,0,1,0],[0,1,0,0,0,0,0],[1,0,1,1,1,0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-654677.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[49,[3,4,5,6,7,8,9,11,12,14,17]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"55.1.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":33,\"hackDifficulty\":100,\"minDifficulty\":11,\"moneyAvailable\":1623893725,\"moneyMax\":1623893725,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":199,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":9,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39286.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[199,[1,3,4,5,6,7,9,12,14,21,23]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"93.0.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":38,\"hackDifficulty\":41.27600000000002,\"minDifficulty\":12.74,\"moneyAvailable\":283614.2094563395,\"moneyMax\":1197681450,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":247,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"69.6.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":3,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-945965.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,1,6,1,7,1,3,6,2,4,1,4,2,2,1,1,6,3,4,2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257960.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,1,3,3,0],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"6.9.8.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":517,\"serverGrowth\":42,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":37,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.80999999999995,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":24,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712015.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[27,50,77,41,28,182]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-630784.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":3224,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"52.6.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1038,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":211.8099999999965,\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955782-Sector12.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,4,3,2,2,4,1],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"85.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":687,\"serverGrowth\":51,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-428929.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[73,[1,2,4,5,6,7,8,9,10,12]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"97.6.5.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":508,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":18,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":66,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-206751-CyberSec.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000100000000010000000000011110000010110001000000011000100011001\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"47.4.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":365,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-391398.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[162,195,96,72,129,62,52,11,111,137,184,2,169,167,104,185,102,53]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-675154.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[122,113,174,97,34,67,149,102,191,114,114,139,92,151,115,114,66,53,25,101,133,12,159,148,184]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"38.4.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":204,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"47.0.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000085,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"weaken.js*[\\\"zb-def\\\"]\",\"title\":\"weaken.js zb-def\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":5,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-791716-CyberSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":11808464583,\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"10.6.2.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":54,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.610000000000003,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"95.6.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"60.2.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803291.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[110,13,175,47,27,186,112,55,155,174,181,198,168,24,85,35,200,139,20,125]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-608050-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[153,26,1,179,17,147,92,26,32,60,43,44,58,158,82,191,104,160,28,137,32,133,95,182,85,189,199,195,95,43],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"77.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"hacknet-server-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":9,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-0\",\"httpPortOpen\":false,\"ip\":\"78.2.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"hacknet-server-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":3,\"cores\":9,\"hashCapacity\":256,\"hashRate\":0.21592851861232892,\"level\":52,\"onlineTimeSeconds\":564534.9999998282,\"totalHashesGenerated\":2714.8523403630393,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"hacknet-server-0\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"hacknet-server-0\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":3,\"temporary\":false}}]}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":true,\"ip\":\"44.4.0.3\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"grow.js johnson-ortho\",\"threads\":6213,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":6343,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"grow.js crush-fitness\",\"threads\":9739,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"grow.js rothman-uni\",\"threads\":10873,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"computek\\\"]\",\"title\":\"grow.js computek\",\"threads\":9039,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"millenium-fitness\\\"]\",\"title\":\"grow.js millenium-fitness\",\"threads\":9463,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9008,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"summit-uni\\\"]\",\"title\":\"grow.js summit-uni\",\"threads\":9060,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"netlink\\\"]\",\"title\":\"grow.js netlink\",\"threads\":8946,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"snap-fitness\\\"]\",\"title\":\"grow.js snap-fitness\",\"threads\":8291,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"syscore\\\"]\",\"title\":\"grow.js syscore\",\"threads\":8196,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nova-med\\\"]\",\"title\":\"grow.js nova-med\",\"threads\":6970,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"zb-institute\\\"]\",\"title\":\"grow.js zb-institute\",\"threads\":7263,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"zb-def\\\"]\",\"title\":\"grow.js zb-def\",\"threads\":7815,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"lexo-corp\\\"]\",\"title\":\"grow.js lexo-corp\",\"threads\":8733,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"4sigma\\\"]\",\"title\":\"grow.js 4sigma\",\"threads\":5808,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"galactic-cyber\\\"]\",\"title\":\"grow.js galactic-cyber\",\"threads\":7516,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"alpha-ent\\\"]\",\"title\":\"grow.js alpha-ent\",\"threads\":10370,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"microdyne\\\"]\",\"title\":\"grow.js microdyne\",\"threads\":7454,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"solaris\\\"]\",\"title\":\"grow.js solaris\",\"threads\":7599,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"clarkinc\\\"]\",\"title\":\"grow.js clarkinc\",\"threads\":8310,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"grow.js powerhouse-fitness\",\"threads\":8308,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"taiyang-digital\\\"]\",\"title\":\"grow.js taiyang-digital\",\"threads\":7706,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"unitalife\\\"]\",\"title\":\"grow.js unitalife\",\"threads\":1079,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.41000000000052,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"max-hardware\\\"]\",\"title\":\"hack.js max-hardware\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"max-hardware\\\"]\",\"title\":\"hack.js max-hardware\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":190.00999999999775,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.80999999999995,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":39,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"johnson-ortho\\\"]\",\"title\":\"hack.js johnson-ortho\",\"threads\":33,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000076,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"weaken.js nectar-net\",\"threads\":87,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\"]\",\"title\":\"weaken.js the-hub\",\"threads\":485,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"weaken.js hong-fang-tea\",\"threads\":1900,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zer0\\\"]\",\"title\":\"weaken.js zer0\",\"threads\":1310,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"weaken.js harakiri-sushi\",\"threads\":1900,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"neo-net\\\"]\",\"title\":\"weaken.js neo-net\",\"threads\":1804,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"phantasy\\\"]\",\"title\":\"weaken.js phantasy\",\"threads\":1319,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"rothman-uni\\\"]\",\"title\":\"weaken.js rothman-uni\",\"threads\":600,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"millenium-fitness\\\"]\",\"title\":\"weaken.js millenium-fitness\",\"threads\":620,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"weaken.js rho-construction\",\"threads\":660,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"weaken.js iron-gym\",\"threads\":1800,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"computek\\\"]\",\"title\":\"weaken.js computek\",\"threads\":820,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"summit-uni\\\"]\",\"title\":\"weaken.js summit-uni\",\"threads\":800,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"weaken.js snap-fitness\",\"threads\":660,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"catalyst\\\"]\",\"title\":\"weaken.js catalyst\",\"threads\":880,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"netlink\\\"]\",\"title\":\"weaken.js netlink\",\"threads\":980,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":179.20999999999836,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"syscore\\\"]\",\"title\":\"weaken.js syscore\",\"threads\":180,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"syscore\\\"]\",\"title\":\"weaken.js syscore\",\"threads\":660,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.81000000000076,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"weaken.js silver-helix\",\"threads\":1728,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"silver-helix\\\"]\",\"title\":\"weaken.js silver-helix\",\"threads\":72,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"weaken.js sigma-cosmetics\",\"threads\":1940,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"weaken.js alpha-ent\",\"threads\":860,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"weaken.js aevum-police\",\"threads\":1020,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"weaken.js lexo-corp\",\"threads\":840,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":45.61000000000011,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zb-def\\\"]\",\"title\":\"weaken.js zb-def\",\"threads\":668,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000085,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zb-def\\\"]\",\"title\":\"weaken.js zb-def\",\"threads\":150,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.210000000000036,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zb-def\\\"]\",\"title\":\"weaken.js zb-def\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.610000000000085,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":597,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":133,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.210000000000036,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":27,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"nova-med\\\"]\",\"title\":\"weaken.js nova-med\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"powerhouse-fitness\\\"]\",\"title\":\"weaken.js powerhouse-fitness\",\"threads\":740,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"clarkinc\\\"]\",\"title\":\"weaken.js clarkinc\",\"threads\":760,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zb-institute\\\"]\",\"title\":\"weaken.js zb-institute\",\"threads\":900,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":860,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"microdyne\\\"]\",\"title\":\"weaken.js microdyne\",\"threads\":900,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"solaris\\\"]\",\"title\":\"weaken.js solaris\",\"threads\":940,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"unitalife\\\"]\",\"title\":\"weaken.js unitalife\",\"threads\":980,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"4sigma\\\"]\",\"title\":\"weaken.js 4sigma\",\"threads\":900,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":960,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"deltaone\\\"]\",\"title\":\"weaken.js deltaone\",\"threads\":1000,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.41000000000007,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"applied-energetics\\\"]\",\"title\":\"weaken.js applied-energetics\",\"threads\":690,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"applied-energetics\\\"]\",\"title\":\"weaken.js applied-energetics\",\"threads\":370,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"titan-labs\\\"]\",\"title\":\"weaken.js titan-labs\",\"threads\":1060,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"weaken.js global-pharm\",\"threads\":1100,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"vitalife\\\"]\",\"title\":\"weaken.js vitalife\",\"threads\":1060,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"aerocorp\\\"]\",\"title\":\"weaken.js aerocorp\",\"threads\":1080,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"weaken.js zeus-med\",\"threads\":1160,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"icarus\\\"]\",\"title\":\"weaken.js icarus\",\"threads\":1140,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"weaken.js univ-energy\",\"threads\":1180,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":39.21000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"infocomm\\\"]\",\"title\":\"weaken.js infocomm\",\"threads\":730,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"infocomm\\\"]\",\"title\":\"weaken.js infocomm\",\"threads\":410,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":839,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.80999999999996,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":106,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":930,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":37.00999999999999,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"b-and-a\\\"]\",\"title\":\"weaken.js b-and-a\",\"threads\":118,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.809999999999974,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":2531,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":720,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.009999999999938,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":703,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.80999999999995,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":1169,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.609999999999957,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":2002,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":1850,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"nectar-net\\\"]\",\"title\":\"grow.js nectar-net\",\"threads\":3179,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.809999999999988,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":31,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.410000000000005,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":19498,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"joesguns\\\"]\",\"title\":\"grow.js joesguns\",\"threads\":22918,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"joesguns\\\"]\",\"title\":\"grow.js joesguns\",\"threads\":76,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":7438,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"joesguns\\\"]\",\"title\":\"hack.js joesguns\",\"threads\":9,\"temporary\":false}}]}},\"lauren-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-0\",\"httpPortOpen\":true,\"ip\":\"79.1.7.9\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"unitalife\\\"]\",\"title\":\"grow.js unitalife\",\"threads\":7154,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"catalyst\\\"]\",\"title\":\"grow.js catalyst\",\"threads\":16414,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\"]\",\"title\":\"grow.js global-pharm\",\"threads\":8062,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"aevum-police\\\"]\",\"title\":\"grow.js aevum-police\",\"threads\":16277,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"icarus\\\"]\",\"title\":\"grow.js icarus\",\"threads\":7819,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"applied-energetics\\\"]\",\"title\":\"grow.js applied-energetics\",\"threads\":9543,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"vitalife\\\"]\",\"title\":\"grow.js vitalife\",\"threads\":9019,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"univ-energy\\\"]\",\"title\":\"grow.js univ-energy\",\"threads\":610,\"temporary\":false}}]}},\"lauren-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-1\",\"httpPortOpen\":true,\"ip\":\"16.4.8.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"grow.js*[\\\"univ-energy\\\"]\",\"title\":\"grow.js univ-energy\",\"threads\":8567,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"grow.js*[\\\"titan-labs\\\"]\",\"title\":\"grow.js titan-labs\",\"threads\":10096,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":61,\"temporary\":false}}]}},\"lauren-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-2\",\"httpPortOpen\":true,\"ip\":\"68.4.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":4681,\"temporary\":false}}]}},\"lauren-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-3\",\"httpPortOpen\":true,\"ip\":\"66.8.7.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":1170,\"temporary\":false}}]}},\"lauren-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-4\",\"httpPortOpen\":true,\"ip\":\"80.5.6.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":585,\"temporary\":false}}]}},\"hacknet-server-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":7,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-1\",\"httpPortOpen\":false,\"ip\":\"54.8.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":7,\"hashCapacity\":64,\"hashRate\":0.001957005403829448,\"level\":33,\"onlineTimeSeconds\":564304.3999998274,\"totalHashesGenerated\":3785.4674061176956,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"hacknet-server-1\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":9,\"temporary\":false}}]}},\"lauren-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-5\",\"httpPortOpen\":true,\"ip\":\"12.9.3.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":585,\"temporary\":false}}]}},\"lauren-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-6\",\"httpPortOpen\":true,\"ip\":\"19.2.8.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":292,\"temporary\":false}}]}},\"lauren-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-7\",\"httpPortOpen\":true,\"ip\":\"18.9.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-7\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-8\",\"httpPortOpen\":true,\"ip\":\"97.3.5.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-8\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-9\",\"httpPortOpen\":true,\"ip\":\"12.5.4.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-9\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"scriptKey\":\"grow.js*[\\\"stormtech\\\"]\",\"title\":\"grow.js stormtech\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":117,\"temporary\":false}}]}},\"lauren-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-10\",\"httpPortOpen\":true,\"ip\":\"91.6.8.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":146,\"temporary\":false}}]}},\"lauren-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-11\",\"httpPortOpen\":true,\"ip\":\"66.0.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":146,\"temporary\":false}}]}},\"lauren-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-12\",\"httpPortOpen\":true,\"ip\":\"65.4.3.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":146,\"temporary\":false}}]}},\"lauren-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-13\",\"httpPortOpen\":true,\"ip\":\"80.8.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-13\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":146,\"temporary\":false}}]}},\"lauren-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-14\",\"httpPortOpen\":true,\"ip\":\"5.0.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-14\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":146,\"temporary\":false}}]}},\"lauren-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-15\",\"httpPortOpen\":true,\"ip\":\"12.8.7.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-15\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-15\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":146,\"temporary\":false}}]}},\"lauren-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-16\",\"httpPortOpen\":true,\"ip\":\"85.2.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-16\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-16\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-17\",\"httpPortOpen\":true,\"ip\":\"23.8.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-17\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-18\",\"httpPortOpen\":true,\"ip\":\"73.9.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-18\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-18\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-19\",\"httpPortOpen\":true,\"ip\":\"41.5.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-19\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-20\",\"httpPortOpen\":true,\"ip\":\"93.1.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-20\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-21\",\"httpPortOpen\":true,\"ip\":\"33.4.9.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-21\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-22\",\"httpPortOpen\":true,\"ip\":\"55.3.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-22\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-22\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"lauren-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-23\",\"httpPortOpen\":true,\"ip\":\"0.3.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-23\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"lauren-23\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":73,\"temporary\":false}}]}},\"hacknet-server-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-2\",\"httpPortOpen\":false,\"ip\":\"36.3.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":5,\"hashCapacity\":64,\"hashRate\":0.048908961497357455,\"level\":28,\"onlineTimeSeconds\":563028.9999998257,\"totalHashesGenerated\":2841.1309101349175,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"hacknet-server-2\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":4,\"temporary\":false}}]}},\"hacknet-server-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-3\",\"httpPortOpen\":false,\"ip\":\"99.3.4.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":5,\"hashCapacity\":64,\"hashRate\":0.0087065352020218,\"level\":24,\"onlineTimeSeconds\":555695.9999998272,\"totalHashesGenerated\":2204.296437607652,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"hacknet-server-3\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":4,\"temporary\":false}}]}},\"hacknet-server-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-4\",\"httpPortOpen\":false,\"ip\":\"35.1.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":4,\"hashCapacity\":64,\"hashRate\":0.02902178400673933,\"level\":20,\"onlineTimeSeconds\":555655.9999998272,\"totalHashesGenerated\":1522.703177894674,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"hacknet-server-4\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":2,\"temporary\":false}}]}},\"hacknet-server-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-5\",\"httpPortOpen\":false,\"ip\":\"36.7.1.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":3,\"hashCapacity\":64,\"hashRate\":0.021584951855012375,\"level\":17,\"onlineTimeSeconds\":555628.7999998272,\"totalHashesGenerated\":1518.950158643466,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"hacknet-server-5\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":2,\"temporary\":false}}]}},\"hacknet-server-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-server-6\",\"httpPortOpen\":false,\"ip\":\"62.9.4.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hacknet-server-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hacknet-server-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"cache\":1,\"cores\":3,\"hashCapacity\":64,\"hashRate\":0.021584951855012375,\"level\":17,\"onlineTimeSeconds\":712.8000000000246,\"totalHashesGenerated\":7.0458235965324825,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.4099999999811,\"ramUsage\":1.75,\"server\":\"hacknet-server-6\",\"scriptKey\":\"grow.js*[\\\"zeus-med\\\"]\",\"title\":\"grow.js zeus-med\",\"threads\":2,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":3.37847020939101}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":153187.20588367293}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":155750.08460023667}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":26.449994305986134}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":78568.22877462131}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":174437.20588367293}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":169437.20588367293}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21372.19531816594,\"lastPrice\":21359.309631845383,\"playerShares\":222,\"playerAvgPx\":21280.003400405578,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":true,\"otlkMag\":19.354589895861217,\"otlkMagForecast\":68.94348308168861,\"cap\":397434574,\"spreadPerc\":0.5,\"shareTxForMovement\":67887,\"shareTxUntilMovement\":67203,\"totalShares\":121500000,\"maxShares\":24300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":24759.769035685775,\"lastPrice\":24777.62071826384,\"playerShares\":290,\"playerAvgPx\":25564.160084620355,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":18.95388572887853,\"otlkMagForecast\":30.891994247628826,\"cap\":448955103,\"spreadPerc\":0.3,\"shareTxForMovement\":79975,\"shareTxUntilMovement\":79927,\"totalShares\":92400000,\"maxShares\":18500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":25339.54039527116,\"lastPrice\":25369.368468955374,\"playerShares\":37,\"playerAvgPx\":24727.399980042792,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":13.066021718764556,\"otlkMagForecast\":62.76838122622295,\"cap\":554386751,\"spreadPerc\":0.5,\"shareTxForMovement\":41261,\"shareTxUntilMovement\":41261,\"totalShares\":66000000,\"maxShares\":13200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11458.621333318431,\"lastPrice\":11447.504240403887,\"playerShares\":215,\"playerAvgPx\":11248.5419280678,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":12.868592212266936,\"otlkMagForecast\":62.371347520372275,\"cap\":65963560,\"spreadPerc\":0.4,\"shareTxForMovement\":83695,\"shareTxUntilMovement\":83660,\"totalShares\":140000000,\"maxShares\":28000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":44046.69700256142,\"lastPrice\":44003.96313354592,\"playerShares\":1,\"playerAvgPx\":41362.95145695584,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":11.796168608266536,\"otlkMagForecast\":61.601492440451565,\"cap\":450161783,\"spreadPerc\":0.6,\"shareTxForMovement\":76005,\"shareTxUntilMovement\":76005,\"totalShares\":44400000,\"maxShares\":8900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":55108.56791421346,\"lastPrice\":55189.65573184627,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":17.827053890660945,\"otlkMagForecast\":33.6577306305472,\"cap\":1151741213,\"spreadPerc\":1,\"shareTxForMovement\":66185,\"shareTxUntilMovement\":66185,\"totalShares\":36400000,\"maxShares\":7300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":18033.966262428658,\"lastPrice\":18056.521461545723,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":9.273179626034064,\"otlkMagForecast\":59.955213436656166,\"cap\":376455454,\"spreadPerc\":0.4,\"shareTxForMovement\":52647,\"shareTxUntilMovement\":52647,\"totalShares\":115600000,\"maxShares\":23100000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":39278.226988474424,\"lastPrice\":39207.267875464124,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":17.774079326207517,\"otlkMagForecast\":66.94539702432559,\"cap\":190458163,\"spreadPerc\":0.4,\"shareTxForMovement\":39062,\"shareTxUntilMovement\":39062,\"totalShares\":64300000,\"maxShares\":12900000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":21180.75553416509,\"lastPrice\":21153.986841106875,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":6.738800328780854,\"otlkMagForecast\":42.90450254905211,\"cap\":409414793,\"spreadPerc\":0.8,\"shareTxForMovement\":87167,\"shareTxUntilMovement\":87167,\"totalShares\":57600000,\"maxShares\":11500000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":12268.972576452958,\"lastPrice\":12280.16531533286,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":10.026494589012978,\"otlkMagForecast\":39.953836098886036,\"cap\":125867815,\"spreadPerc\":0.9,\"shareTxForMovement\":101941,\"shareTxUntilMovement\":101941,\"totalShares\":70100000,\"maxShares\":14000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":10958.089904028124,\"lastPrice\":10949.228904538766,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":8.547826307637905,\"otlkMagForecast\":58.85648608948597,\"cap\":93408651,\"spreadPerc\":1,\"shareTxForMovement\":47820,\"shareTxUntilMovement\":47820,\"totalShares\":77800000,\"maxShares\":15600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":14793.879292037758,\"lastPrice\":14809.334573065333,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.917336465255007,\"otlkMagForecast\":56.83122218458152,\"cap\":264597659,\"spreadPerc\":0.2,\"shareTxForMovement\":42596,\"shareTxUntilMovement\":42596,\"totalShares\":73300000,\"maxShares\":14700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15224.679190643681,\"lastPrice\":15240.13649390801,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":7.668144639922744,\"otlkMagForecast\":42.57949660192791,\"cap\":32621902,\"spreadPerc\":0.6,\"shareTxForMovement\":57805,\"shareTxUntilMovement\":57805,\"totalShares\":51500000,\"maxShares\":10300000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":20232.88805652358,\"lastPrice\":20249.559852715076,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":10.0929614927197,\"otlkMagForecast\":40.122867640151284,\"cap\":91261356,\"spreadPerc\":0.8,\"shareTxForMovement\":99932,\"shareTxUntilMovement\":99932,\"totalShares\":41600000,\"maxShares\":8300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":13479.234872512428,\"lastPrice\":13466.751271633162,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.701176758231985,\"otlkMagForecast\":56.07269722250421,\"cap\":38136131,\"spreadPerc\":0.8,\"shareTxForMovement\":75399,\"shareTxUntilMovement\":75399,\"totalShares\":50200000,\"maxShares\":10000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7730.123539665565,\"lastPrice\":7721.602252971587,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.1253160163650335,\"otlkMagForecast\":55.93791710484645,\"cap\":175931257,\"spreadPerc\":0.7,\"shareTxForMovement\":91841,\"shareTxUntilMovement\":91841,\"totalShares\":80600000,\"maxShares\":16100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":27586.464834269365,\"lastPrice\":27617.31419216148,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":8.341927003780695,\"otlkMagForecast\":58.561125608596576,\"cap\":105189832,\"spreadPerc\":0.5,\"shareTxForMovement\":108226,\"shareTxUntilMovement\":108226,\"totalShares\":26900000,\"maxShares\":5400000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":21186.738284965908,\"lastPrice\":21204.19604886312,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":10.318885640490306,\"otlkMagForecast\":39.541638833129014,\"cap\":258769036,\"spreadPerc\":0.5,\"shareTxForMovement\":99562,\"shareTxUntilMovement\":99562,\"totalShares\":32100000,\"maxShares\":6400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":20077.353951232028,\"lastPrice\":20055.22171903716,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.089235509824523,\"otlkMagForecast\":55.056485087519064,\"cap\":39286847,\"spreadPerc\":0.8,\"shareTxForMovement\":48852,\"shareTxUntilMovement\":48852,\"totalShares\":30700000,\"maxShares\":6100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":8547.482328301781,\"lastPrice\":8516.40494309139,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":false,\"otlkMag\":1.3449612854658977,\"otlkMagForecast\":51.729118978212504,\"cap\":167231446,\"spreadPerc\":1.2,\"shareTxForMovement\":47673,\"shareTxUntilMovement\":47673,\"totalShares\":61100000,\"maxShares\":12200000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6589.58406288848,\"lastPrice\":6601.122352905438,\"playerShares\":20,\"playerAvgPx\":6221.77084790688,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.19,\"b\":true,\"otlkMag\":6.243464129134975,\"otlkMagForecast\":56.100062934339434,\"cap\":139560473,\"spreadPerc\":1,\"shareTxForMovement\":90365,\"shareTxUntilMovement\":90365,\"totalShares\":50600000,\"maxShares\":10100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4893.105152541063,\"lastPrice\":4889.3641137532095,\"playerShares\":1,\"playerAvgPx\":5157.040440753466,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":1.8440117961734153,\"otlkMagForecast\":48.53065942759217,\"cap\":36148184,\"spreadPerc\":1,\"shareTxForMovement\":70112,\"shareTxUntilMovement\":70112,\"totalShares\":35600000,\"maxShares\":7100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":7133.614650746496,\"lastPrice\":7152.7183521068455,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.82,\"b\":true,\"otlkMag\":10.372902207467567,\"otlkMagForecast\":59.66329963856037,\"cap\":151278496,\"spreadPerc\":1.3,\"shareTxForMovement\":63994,\"shareTxUntilMovement\":63994,\"totalShares\":35500000,\"maxShares\":7100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5605.81030719908,\"lastPrice\":5592.807908556613,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.58,\"b\":false,\"otlkMag\":3.6062906521595486,\"otlkMagForecast\":48.482603397461325,\"cap\":29366665,\"spreadPerc\":0.9,\"shareTxForMovement\":71081,\"shareTxUntilMovement\":71081,\"totalShares\":32300000,\"maxShares\":6500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3034.026867161367,\"lastPrice\":3038.3126202038557,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.090151190326937,\"otlkMagForecast\":53.668949183179336,\"cap\":46837402,\"spreadPerc\":1.1,\"shareTxForMovement\":106637,\"shareTxUntilMovement\":106637,\"totalShares\":63700000,\"maxShares\":12700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2453.5732562956787,\"lastPrice\":2440.680615369858,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.59,\"b\":false,\"otlkMag\":7.225193785413646,\"otlkMagForecast\":51.82109777892288,\"cap\":33067429,\"spreadPerc\":1.9,\"shareTxForMovement\":31881,\"shareTxUntilMovement\":31881,\"totalShares\":20400000,\"maxShares\":4100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3313.0910614554273,\"lastPrice\":3317.966008019279,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":1.5959300017741822,\"otlkMagForecast\":50.442891226992806,\"cap\":15985352,\"spreadPerc\":0.4,\"shareTxForMovement\":88038,\"shareTxUntilMovement\":88038,\"totalShares\":18200000,\"maxShares\":3600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":934.5353617274286,\"lastPrice\":933.5326205602852,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":2.1267951136865406,\"otlkMagForecast\":50.82486489802668,\"cap\":18149355,\"spreadPerc\":1,\"shareTxForMovement\":148230,\"shareTxUntilMovement\":148230,\"totalShares\":45700000,\"maxShares\":9100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1783.7526652136955,\"lastPrice\":1777.2932599365295,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.47,\"b\":false,\"otlkMag\":5.914088152472487,\"otlkMagForecast\":49.31582255721882,\"cap\":36563440,\"spreadPerc\":1.4,\"shareTxForMovement\":37428,\"shareTxUntilMovement\":37428,\"totalShares\":14300000,\"maxShares\":2900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1007.6794878425335,\"lastPrice\":1011.2824954461306,\"playerShares\":2024,\"playerAvgPx\":1018.5319294739566,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.43,\"b\":true,\"otlkMag\":5.933632644723895,\"otlkMagForecast\":49.014459696778715,\"cap\":8492229,\"spreadPerc\":1.4,\"shareTxForMovement\":39857,\"shareTxUntilMovement\":37936,\"totalShares\":49100000,\"maxShares\":9800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":336.1099511503395,\"lastPrice\":335.41899231847776,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.4,\"b\":false,\"otlkMag\":13.742194570498848,\"otlkMagForecast\":36.12020243617437,\"cap\":2740699,\"spreadPerc\":1.1,\"shareTxForMovement\":59453,\"shareTxUntilMovement\":59453,\"totalShares\":257100000,\"maxShares\":51400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":19658.055821186168,\"lastPrice\":19681.19601743188,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.461249812378672,\"otlkMagForecast\":42.198655399757854,\"cap\":369834862,\"spreadPerc\":0.4,\"shareTxForMovement\":174120,\"shareTxUntilMovement\":174120,\"totalShares\":19100000,\"maxShares\":3800000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":23550.825540468446,\"lastPrice\":23526.59329990296,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":10.395981206038082,\"otlkMagForecast\":60.96261132207911,\"cap\":197293392,\"spreadPerc\":0.6,\"shareTxForMovement\":189064,\"shareTxUntilMovement\":189064,\"totalShares\":18900000,\"maxShares\":3800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":5,\"lastUpdate\":1710947124832,\"ticksUntilCycle\":11}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"init.js\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":true,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"EnableHistorySearch\":true,\"GoTraditionalStyle\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiAddress\":\"localhost\",\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"TailRenderInterval\":1000,\"theme\":{\"primarylight\":\"#EA9062\",\"primary\":\"#DD7B4A\",\"primarydark\":\"#D3591C\",\"successlight\":\"#6ACF6A\",\"success\":\"#43BF43\",\"successdark\":\"#3E913E\",\"errorlight\":\"#C15757\",\"error\":\"#B34141\",\"errordark\":\"#752525\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E6E69D\",\"warning\":\"#DADA56\",\"warningdark\":\"#A1A106\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#AD84CF\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#76C6B7\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\",\"maplocation\":\"#ffffff\",\"bnlvl0\":\"#ffff00\",\"bnlvl1\":\"#ff0000\",\"bnlvl2\":\"#48d1cc\",\"bnlvl3\":\"#0000ff\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Operator Mono, Victor Mono, monospace\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"38","AllGangsSave":"","LastExportBonus":"1710947125957","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}","GoSave":"{\"previousGame\":null,\"currentGame\":{\"ai\":\"Netburners\",\"board\":[\".......\",\".......\",\".......\",\".......\",\".......\",\".......\",\".......\"],\"previousBoard\":null,\"previousPlayer\":\"White\",\"cheatCount\":0,\"passCount\":0},\"stats\":{}}"}}