{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":12,\"max\":12},\"skills\":{\"hacking\":1,\"strength\":38,\"defense\":23,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":847.5116960587167,\"defense\":416.4914620631369,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.2107309943695856,\"hacking_speed\":1.2107309943695856,\"hacking_money\":1.2107309943695856,\"hacking_grow\":1.2107309943695856,\"hacking\":1.2712675440880647,\"hacking_exp\":1.2107309943695856,\"strength\":1.2107309943695856,\"strength_exp\":1.2107309943695856,\"defense\":1.2107309943695856,\"defense_exp\":1.2107309943695856,\"dexterity\":1.2712675440880647,\"dexterity_exp\":1.2107309943695856,\"agility\":1.334830921292468,\"agility_exp\":1.2107309943695856,\"charisma\":1.6214109476597491,\"charisma_exp\":1.2107309943695856,\"hacknet_node_money\":1.3318040938065443,\"hacknet_node_purchase_cost\":0.7433503430473575,\"hacknet_node_ram_cost\":0.8259448256081748,\"hacknet_node_core_cost\":0.8259448256081748,\"hacknet_node_level_cost\":0.8259448256081748,\"company_rep\":1.2107309943695856,\"faction_rep\":1.2107309943695856,\"work_money\":1.3075894739191525,\"crime_success\":1.5013064330182861,\"crime_money\":1.651437076320115,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":4},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"SoA - Flood of Poseidon\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":4,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":3,\"str\":6,\"def\":8,\"dex\":5,\"agi\":9,\"cha\":2,\"hack_exp\":41.375120234510156,\"str_exp\":59.71342350022355,\"def_exp\":64.77656297226812,\"dex_exp\":57.046585528272765,\"agi_exp\":68.52349621448998,\"cha_exp\":15.185389155318113,\"hack_mult\":1.05,\"str_mult\":1.3837824000000005,\"def_mult\":1.7554861209600008,\"dex_mult\":1.1880000000000002,\"agi_mult\":2.0305622937600005,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":0,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Havoc\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":3,\"str\":4,\"def\":5,\"dex\":4,\"agi\":4,\"cha\":2,\"hack_exp\":41.375120234510156,\"str_exp\":56.16391629660317,\"def_exp\":58.04882701852588,\"dex_exp\":55.57547014215671,\"agi_exp\":56.16391629660317,\"cha_exp\":14.040979074150792,\"hack_mult\":1.05,\"str_mult\":1.1232000000000002,\"def_mult\":1.2615782400000004,\"dex_mult\":1.08,\"agi_mult\":1.1232000000000002,\"cha_mult\":1.1232000000000002,\"hack_asc_points\":0,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Bulletproof Vest\",\"Full Body Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Riptide\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":3,\"str\":4,\"def\":5,\"dex\":4,\"agi\":5,\"cha\":2,\"hack_exp\":40.944129398734006,\"str_exp\":55.47557959124777,\"def_exp\":57.328129770297686,\"dex_exp\":54.89723600388205,\"agi_exp\":56.67853425296858,\"cha_exp\":13.894718875461722,\"hack_mult\":1.05,\"str_mult\":1.1440000000000001,\"def_mult\":1.2849408000000004,\"dex_mult\":1.1,\"agi_mult\":1.2355200000000004,\"cha_mult\":1.1232000000000002,\"hack_asc_points\":0,\"str_asc_points\":0,\"def_asc_points\":0,\"dex_asc_points\":0,\"agi_asc_points\":0,\"cha_asc_points\":0,\"upgrades\":[\"Baseball Bat\",\"Bulletproof Vest\",\"Full Body Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"NUKE Rootkit\",\"Glock 18C\"],\"augmentations\":[],\"name\":\"Viper\"}}],\"wanted\":1,\"respect\":1,\"isHackingGang\":false,\"respectGainRate\":0,\"wantedGainRate\":0,\"moneyGainRate\":0,\"storedCycles\":9,\"storedTerritoryAndPowerCycles\":70,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Slum Snakes\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"NiteSec\",\"Aevum\",\"Sector-12\",\"Tetrads\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"]},\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-90549.81000000163,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":-249447,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-250560,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-250560,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-752016,\"codingcontract\":1237500000,\"corporation\":0,\"crime\":423700560.5897204,\"gang\":-271999778.00026643,\"hacking\":358898180.1945641,\"hacknet\":23326739.04263793,\"hacknet_expenses\":-41725482.457722716,\"hospitalization\":-13128530.091559362,\"infiltration\":28810652.849078707,\"sleeves\":0,\"stock\":-200000000,\"total\":533895.1472467998,\"work\":2499615.2863109903,\"servers\":-1110068913.2149615,\"other\":-38499993.14024614,\"augmentations\":-398027139.91019785}},\"playtimeSinceLastAug\":134200,\"playtimeSinceLastBitnode\":171920200,\"lastAugReset\":1707756675764,\"lastNodeReset\":1707584889648,\"purchasedServers\":[],\"scriptProdSinceLastAug\":0,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1],[2,1],[12,1],[3,1]]},\"exploits\":[\"N00dles\",\"Unclickable\",\"RealityAlteration\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1704070135213},{\"ID\":\"FROZE\",\"unlockedOn\":1704070135222},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1704079402616},{\"ID\":\"WORKOUT\",\"unlockedOn\":1704081997256},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1704085310642},{\"ID\":\"TOR\",\"unlockedOn\":1704088636233},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1704091709650},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1704125258633},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1704144228234},{\"ID\":\"TRAVEL\",\"unlockedOn\":1704151357816},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1704169468544},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1704170548545},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1704228378452},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1704238095961},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1704241395954},{\"ID\":\"NITESEC\",\"unlockedOn\":1704242995955},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1704331510388},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1704337810388},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1704343390388},{\"ID\":\"4S\",\"unlockedOn\":1704343870389},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1704404274170},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1704651907253},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1704661239445},{\"ID\":\"DONATION\",\"unlockedOn\":1704671467161},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1704684346576},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1704729001977},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1704729001980},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1704743986025},{\"ID\":\"SF1.1\",\"unlockedOn\":1704756093389},{\"ID\":\"N00DLES\",\"unlockedOn\":1704761514401},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1704761574401},{\"ID\":\"GANG\",\"unlockedOn\":1704764062582},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1704900063536},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1704900843531},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1705270991356},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1705275675262},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1705297415024},{\"ID\":\"SF2.1\",\"unlockedOn\":1705334104216},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1705824429608},{\"ID\":\"REALITYALTERATION\",\"unlockedOn\":1705824789613},{\"ID\":\"SF12.1\",\"unlockedOn\":1706041931139},{\"ID\":\"CORPORATION\",\"unlockedOn\":1706042411141},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1706157163366},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1707338253837},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1707535625995},{\"ID\":\"SF3.1\",\"unlockedOn\":1707584909369}],\"terminalCommandHistory\":[\"free\",\"top\",\"kill manage-hacking.js 0; run manage-hacking.js \",\"free\",\"top\",\"run find-contracts.js \",\"run manage-gang.js \",\"free\",\"top\",\"run find-contracts.js \",\"run find-backdoors.js \",\"fere\",\"top\",\"kill manage-hacking.js ; run manage-hacking.js 0\",\"free\",\"top\",\"run init.js \",\"free\",\"top\",\"kill manage-hacking.js ; run manage-hacking.js 0\",\"free\",\"top\",\"free\",\"top\",\"kill manage-hacking.js 0; run manage-hacking.js \",\"kill gain-access.js \",\"free\",\"top\",\"run find-contracts.js \",\"run find-backdoors.js \",\"free\",\"top\",\"kill manage-hacknet.js \",\"free\",\"top\",\"run find-backdoors.js \",\"connect n00dles\",\"backdoor\",\"home\",\"connect foodnstuff\",\"backdoor\",\"home\",\"free\",\"top\",\"run find-backdoors.js \",\"free\",\"top\",\"kill manage-hacking.js ; run manage-hacking.js 0\",\"free\",\"top\"],\"lastUpdate\":1707756809890,\"lastSave\":1707756794692,\"totalPlaytime\":3691925400,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":false,\"cyclesWorked\":172,\"earnings\":{\"money\":-82560,\"reputation\":0,\"hackExp\":0,\"strExp\":0,\"defExp\":416.4914620631369,\"dexExp\":0,\"agiExp\":0,\"chaExp\":0,\"intExp\":0},\"classType\":\"def\",\"location\":\"Powerhouse Gym\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"113891341353c3\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"38.4.6.6\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * @param {import(\\\"../NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Object.<string, string|number>]} style\\n * @returns {import(\\\"../NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"manage-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND, HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Manages purchasing and upgrading Hacknet nodes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME) / 2;\\n\\n    // Attempt to purchase a new node.\\n    if (\\n      ns.hacknet.numNodes() < ns.hacknet.maxNumNodes() &&\\n      ns.hacknet.getPurchaseNodeCost() < moneyAvailable\\n    ) {\\n      ns.hacknet.purchaseNode();\\n    }\\n\\n    const nodeCount = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodeCount; i++) {\\n      // Upgrade level.\\n      upgrade(\\n        () => ns.hacknet.getLevelUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeLevel(i)\\n      );\\n\\n      // Upgrade RAM.\\n      upgrade(\\n        () => ns.hacknet.getRamUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeRam(i)\\n      );\\n\\n      // Upgrade cores.\\n      upgrade(\\n        () => ns.hacknet.getCoreUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeCore(i)\\n      );\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Upgrades using the given upgrade function until it is no longer possible.\\n *\\n * @param {function():boolean} canUpgradeFunction\\n * @param {function():boolean} upgradeFunction\\n */\\nfunction upgrade(canUpgradeFunction, upgradeFunction) {\\n  let canUpgrade;\\n  do {\\n    canUpgrade = canUpgradeFunction();\\n    canUpgrade = upgradeFunction();\\n  } while (canUpgrade);\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"server\":\"home\"}}],[\"manage-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers, updateServers } from 'database/servers';\\nimport {\\n  HOME_HOSTNAME,\\n  MAX_PURCHASED_SERVER_COUNT,\\n  ONE_SECOND,\\n} from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\nconst MAX_RAM_POWER = 20;\\n\\n/**\\n * Manages purchasing and upgrading servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const purchasedHostnames = getServers(ns)\\n    .filter(server => server.isPurchased)\\n    .map(server => server.hostname);\\n\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n\\n    for (let power = MAX_RAM_POWER; power > 1; power--) {\\n      const ram = Math.pow(2, power);\\n\\n      // Attempt to purchase a server.\\n      if (purchasedHostnames.length < MAX_PURCHASED_SERVER_COUNT) {\\n        const cost = ns.getPurchasedServerCost(ram);\\n        if (cost <= moneyAvailable) {\\n          const hostname = ns.purchaseServer('lauren', ram);\\n          if (hostname.length > 0) {\\n            purchasedHostnames.push(hostname);\\n            updateServers(ns, {\\n              hostname: hostname,\\n              organization: '',\\n              path: [hostname],\\n              isPurchased: true,\\n              maxRam: ram,\\n              maxMoney: 0,\\n              minSecurity: 0,\\n              baseSecurity: 0,\\n              hackingLevel: 0,\\n            });\\n            ns.toast(\\n              `Purchased ${hostname} (${ns.formatRam(\\n                ram,\\n                0\\n              )}) for ${formatMoney(ns, cost)}`\\n            );\\n          }\\n        }\\n      }\\n\\n      // Attempt to upgrade an existing server.\\n      for (const hostname of purchasedHostnames) {\\n        const currentRam = ns.getServerMaxRam(hostname);\\n        if (ram <= currentRam) continue;\\n        const cost = ns.getPurchasedServerUpgradeCost(hostname, ram);\\n        const upgradeSuccessful = ns.upgradePurchasedServer(hostname, ram);\\n        if (upgradeSuccessful) {\\n          updateServers(ns, {\\n            hostname: hostname,\\n            maxRam: ram,\\n          });\\n          ns.toast(\\n            `Upgraded ${hostname} from ${ns.formatRam(\\n              currentRam,\\n              0\\n            )} to ${ns.formatRam(ram, 0)} for ${formatMoney(ns, cost)}`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"manage-servers.js\",\"server\":\"home\"}}],[\"database/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing servers.txt */\\n\\n/**\\n * @typedef Server\\n * @property {string} hostname\\n * @property {string} organization\\n * @property {string[]} path\\n *           path from home to the hostname not including home but including the\\n *           hostname (e.g. ['foodnstuff', 'CSEC'] for 'CSEC' server)\\n * @property {[boolean]} isPurchased\\n * @property {[number]} maxRam maximum RAM the server has\\n * @property {[cpuCores]} cpuCores\\n * @property {[number]} maxMoney\\n * @property {[number]} minSecurity\\n * @property {[number]} baseSecurity\\n * @property {[number]} hackingLevel required hacking level\\n */\\n\\nconst SERVERS_FILENAME = 'database/servers.txt';\\n\\n/**\\n * Updates any existing servers in the database and adds any new servers to the\\n * database.\\n *\\n * @param {NS} ns\\n * @param  {...Server} serversToUpdate\\n */\\nexport function updateServers(ns, ...serversToUpdate) {\\n  const databaseServers = getServers(ns);\\n\\n  for (const server of serversToUpdate) {\\n    const databaseServer = databaseServers.find(\\n      databaseServer => databaseServer.hostname === server.hostname\\n    );\\n    if (!databaseServer) {\\n      databaseServers.push(server);\\n    } else {\\n      Object.keys(server).forEach(key => (databaseServer[key] = server[key]));\\n    }\\n  }\\n\\n  ns.write(SERVERS_FILENAME, JSON.stringify(databaseServers), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Server[]} all servers in file\\n */\\nexport function getServers(ns) {\\n  return JSON.parse(ns.read(SERVERS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/servers.js\",\"server\":\"home\"}}],[\"manage-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { createColorForString } from 'utils/colors';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { GROW_JS, HACK_JS, WEAKEN_JS, getRamToReserve } from 'utils/scripts';\\nimport { printTable } from 'utils/table';\\n\\n/** Minimum amount of money on a server to allow hacking that server. */\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/** Minimum percentage of max money on a server to allow hacking that server. */\\nconst MIN_MONEY_PERCENT = 0.5;\\n\\nconst MIN_HACK_CHANCE = 0.5;\\n\\n/**\\n * Manages hacking in all servers, reserving enough RAM in Home server to run\\n * all other scripts.\\n *\\n * Override the RAM to reserve by passing as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const hackWeakenGrowScripts = [HACK_JS, WEAKEN_JS, GROW_JS];\\n  const minRamNecessaryToRunHackWeakenGrow = Math.min(\\n    ...hackWeakenGrowScripts.map(script => ns.getScriptRam(script))\\n  );\\n\\n  while (true) {\\n    const serversWithRootAccess = getServers(ns).filter(server =>\\n      ns.hasRootAccess(server.hostname)\\n    );\\n\\n    // Get servers to hack, weaken, and grow.\\n    const hackableServers = serversWithRootAccess.filter(\\n      server => server.maxMoney > 0\\n    );\\n\\n    // Get servers to hack.\\n    const serversToHack = getServersToHack(ns, hackableServers);\\n    const hostnameToHackToThreadCountMap = Object.fromEntries(\\n      serversToHack\\n        .map(server => [server.hostname, getHackThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToHackToRunningThreadCountMap = {};\\n\\n    // Get servers to weaken.\\n    const serversToWeaken = getServersToWeaken(ns, hackableServers);\\n    const hostnameToWeakenToThreadCountMap = Object.fromEntries(\\n      serversToWeaken\\n        .map(server => [server.hostname, getWeakenThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToWeakenToRunningThreadCountMap = {};\\n\\n    // Get servers to grow.\\n    const serversToGrow = getServersToGrow(ns, hackableServers);\\n    const hostnameToGrowToThreadCountMap = Object.fromEntries(\\n      serversToGrow\\n        .map(server => [server.hostname, getGrowThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToGrowToRunningThreadCountMap = {};\\n\\n    // Get runnable servers.\\n    const ramToReserveInHome = ns.args[0] ?? getRamToReserve(ns);\\n    const runnableServers = getRunnableServers(\\n      ns,\\n      serversWithRootAccess,\\n      minRamNecessaryToRunHackWeakenGrow,\\n      ramToReserveInHome\\n    );\\n\\n    const scriptToThreadCountMapMap = {\\n      [HACK_JS]: hostnameToHackToThreadCountMap,\\n      [WEAKEN_JS]: hostnameToWeakenToThreadCountMap,\\n      [GROW_JS]: hostnameToGrowToThreadCountMap,\\n    };\\n    const scriptToRunningThreadCountMapMap = {\\n      [HACK_JS]: hostnameToHackToRunningThreadCountMap,\\n      [WEAKEN_JS]: hostnameToWeakenToRunningThreadCountMap,\\n      [GROW_JS]: hostnameToGrowToRunningThreadCountMap,\\n    };\\n\\n    // Subtract threads that are already running.\\n    for (const runnableServer of runnableServers) {\\n      const processes = ns\\n        .ps(runnableServer.hostname)\\n        .filter(process => hackWeakenGrowScripts.includes(process.filename));\\n      for (const process of processes) {\\n        const threadCountMap = scriptToThreadCountMapMap[process.filename];\\n        const runningThreadCountMap =\\n          scriptToRunningThreadCountMapMap[process.filename];\\n        const targetHostname = process.args[0];\\n\\n        // Add to running thread count map.\\n        if (!(targetHostname in runningThreadCountMap)) {\\n          runningThreadCountMap[targetHostname] = 0;\\n        }\\n        runningThreadCountMap[targetHostname] += process.threads;\\n\\n        // Subtract from thread count map.\\n        if (!(targetHostname in threadCountMap)) continue;\\n        threadCountMap[targetHostname] -= process.threads;\\n        if (threadCountMap[targetHostname] <= 0) {\\n          delete threadCountMap[targetHostname];\\n        }\\n      }\\n    }\\n\\n    // Determine order of hack, weaken, and grow based on the least amount of\\n    // time.\\n    const getMinTime = (hostnameToThreadCountMap, getTimeFn) => {\\n      const hostname = Object.keys(hostnameToThreadCountMap)[0];\\n      return hostname ? getTimeFn(hostname) : Infinity;\\n    };\\n    const scriptToMinTimeMap = {\\n      [HACK_JS]: getMinTime(hostnameToHackToThreadCountMap, ns.getHackTime),\\n      [WEAKEN_JS]: getMinTime(\\n        hostnameToWeakenToThreadCountMap,\\n        ns.getWeakenTime\\n      ),\\n      [GROW_JS]: getMinTime(hostnameToGrowToThreadCountMap, ns.getGrowTime),\\n    };\\n    const scriptsInOrder = Object.keys(scriptToMinTimeMap)\\n      .filter(script => scriptToMinTimeMap[script] < Infinity)\\n      .sort((a, b) => scriptToMinTimeMap[a] - scriptToMinTimeMap[b]);\\n\\n    // Execute hack, weaken, and grow on runnable servers.\\n    for (const runnableServer of runnableServers) {\\n      for (const scriptName of scriptsInOrder) {\\n        const hostnameToThreadCountMap = scriptToThreadCountMapMap[scriptName];\\n        const hostnameToRunningThreadCountMap =\\n          scriptToRunningThreadCountMapMap[scriptName];\\n        for (const hostname in hostnameToThreadCountMap) {\\n          const threadsNeeded = hostnameToThreadCountMap[hostname];\\n\\n          // Modify threads needed based on runnable server's CPU cores.\\n          const targetServer = hackableServers.find(\\n            server => server.hostname === hostname\\n          );\\n          let adjustedThreadsNeeded = threadsNeeded;\\n          if (scriptName === WEAKEN_JS) {\\n            adjustedThreadsNeeded = getWeakenThreadCount(\\n              ns,\\n              targetServer,\\n              runnableServer.cpuCores\\n            );\\n          }\\n          if (scriptName === GROW_JS) {\\n            adjustedThreadsNeeded = getGrowThreadCount(\\n              ns,\\n              targetServer,\\n              runnableServer.cpuCores\\n            );\\n          }\\n\\n          const threadsUsed = runScript(\\n            ns,\\n            scriptName,\\n            runnableServer,\\n            hostname,\\n            threadsNeeded,\\n            ramToReserveInHome\\n          );\\n          if (threadsUsed > 0) {\\n            hostnameToThreadCountMap[hostname] -=\\n              threadsUsed === adjustedThreadsNeeded\\n                ? threadsNeeded\\n                : threadsUsed;\\n            if (hostnameToThreadCountMap[hostname] <= 0) {\\n              delete hostnameToThreadCountMap[hostname];\\n            }\\n            if (!(hostname in hostnameToRunningThreadCountMap)) {\\n              hostnameToRunningThreadCountMap[hostname] = 0;\\n            }\\n            hostnameToRunningThreadCountMap[hostname] += threadsUsed;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Use any unused RAM on runnable servers to weaken the server with the\\n    // lowest weak time even if it doesn't need weakening to gain hacking exp.\\n    hackableServers.sort(\\n      (a, b) => ns.getWeakenTime(a.hostname) - ns.getWeakenTime(b.hostname)\\n    );\\n    const serverWithLowestWeakTime = hackableServers[0];\\n    // if (ns.getWeakenTime(serverWithLowestWeakTime.hostname) < ONE_SECOND) {\\n    const weakenScriptRam = ns.getScriptRam(WEAKEN_JS);\\n    for (const runnableServer of runnableServers) {\\n      const availableRam = getAvailableRam(\\n        ns,\\n        runnableServer,\\n        ramToReserveInHome\\n      );\\n      const threadCount = Math.floor(availableRam / weakenScriptRam);\\n      runScript(\\n        ns,\\n        WEAKEN_JS,\\n        runnableServer,\\n        serverWithLowestWeakTime.hostname,\\n        threadCount,\\n        ramToReserveInHome\\n      );\\n    }\\n    // }\\n\\n    // Log hack, weaken, and grow.\\n    ns.clearLog();\\n    for (const script of scriptsInOrder) {\\n      switch (script) {\\n        case HACK_JS:\\n          logServersToHack(\\n            ns,\\n            hackableServers,\\n            hostnameToHackToThreadCountMap,\\n            hostnameToHackToRunningThreadCountMap\\n          );\\n          break;\\n        case WEAKEN_JS:\\n          logServersToWeaken(\\n            ns,\\n            hackableServers,\\n            hostnameToWeakenToThreadCountMap,\\n            hostnameToWeakenToRunningThreadCountMap\\n          );\\n          break;\\n        case GROW_JS:\\n          logServersToGrow(\\n            ns,\\n            hackableServers,\\n            hostnameToGrowToThreadCountMap,\\n            hostnameToGrowToRunningThreadCountMap\\n          );\\n          break;\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Runs a script on a server with the targetHostname passed as an argument.\\n *\\n * @param {NS} ns\\n * @param {string} scriptName\\n * @param {Server} server\\n * @param {string} targetHostname\\n * @param {number} threadsNeeded number of threads needed\\n * @param {number} ramToReserveinHome\\n * @returns {number} number of threads used\\n */\\nfunction runScript(\\n  ns,\\n  scriptName,\\n  server,\\n  targetHostname,\\n  threadsNeeded,\\n  ramToReserveinHome\\n) {\\n  // If script file doesn't exist, then copy it over to that server.\\n  if (!ns.fileExists(scriptName, server.hostname)) {\\n    ns.scp(scriptName, server.hostname);\\n  }\\n\\n  // Get threads to use.\\n  const availableRam = getAvailableRam(ns, server, ramToReserveinHome);\\n  const threadsAvailable = Math.floor(\\n    availableRam / ns.getScriptRam(scriptName)\\n  );\\n  const threadsToUse = Math.min(threadsAvailable, threadsNeeded);\\n  if (threadsToUse <= 0) return 0;\\n\\n  // Execute script.\\n  const pid = ns.exec(\\n    scriptName,\\n    server.hostname,\\n    threadsToUse,\\n    targetHostname\\n  );\\n  return pid === 0 ? 0 : threadsToUse;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {number} ramToReserveInHome\\n * @returns {number} available RAM\\n */\\nfunction getAvailableRam(ns, server, ramToReserveInHome) {\\n  let availableRam = server.maxRam - ns.getServerUsedRam(server.hostname);\\n  if (server.hostname === HOME_HOSTNAME) availableRam -= ramToReserveInHome;\\n  return availableRam;\\n}\\n\\n/**\\n * Get all servers that have enough RAM available to run a hack, weaken, or grow\\n * script.\\n *\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} serversWithRootAccess\\n * @param {number} minRamNecessaryToRunHackWeakenGrow\\n * @param {number} ramToReserveInHome\\n * @returns {import('database/servers').Server[]} runnable servers\\n */\\nfunction getRunnableServers(\\n  ns,\\n  serversWithRootAccess,\\n  minRamNecessaryToRunHackWeakenGrow,\\n  ramToReserveInHome\\n) {\\n  return serversWithRootAccess.filter(server => {\\n    if (server.maxRam <= 0) return false;\\n\\n    let availableRam = getAvailableRam(ns, server, ramToReserveInHome);\\n    if (availableRam < minRamNecessaryToRunHackWeakenGrow) return false;\\n\\n    return true;\\n  });\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to hack sorted by hack time\\n */\\nfunction getServersToHack(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerMoneyAvailable(server.hostname) >\\n        Math.min(server.maxMoney * MIN_MONEY_PERCENT, MIN_MONEY_AMOUNT) &&\\n      ns.hackAnalyzeChance(server.hostname) > MIN_HACK_CHANCE\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getHackTime(a.hostname) * getHackThreadCount(ns, a) -\\n      ns.getHackTime(b.hostname) * getHackThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @returns {number} number of threads needed to hack the given server\\n */\\nfunction getHackThreadCount(ns, server) {\\n  const moneyToHack =\\n    ns.getServerMoneyAvailable(server.hostname) -\\n    Math.min(server.maxMoney * MIN_MONEY_PERCENT, MIN_MONEY_AMOUNT);\\n  return Math.floor(ns.hackAnalyzeThreads(server.hostname, moneyToHack));\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to weaken sorted by weaken time\\n */\\nfunction getServersToWeaken(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerSecurityLevel(server.hostname) > server.minSecurity &&\\n      ns.hackAnalyzeChance(server.hostname) <= MIN_HACK_CHANCE\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getWeakenTime(a.hostname) * getWeakenThreadCount(ns, a) -\\n      ns.getWeakenTime(b.hostname) * getWeakenThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {[number]} cpuCores\\n * @returns {number} number of threads needed to weaken the given server\\n */\\nfunction getWeakenThreadCount(ns, server, cpuCores) {\\n  const securityToDecrease =\\n    ns.getServerSecurityLevel(server.hostname) - server.minSecurity;\\n  let threadCount = 0;\\n  do {\\n    threadCount++;\\n  } while (ns.weakenAnalyze(threadCount, cpuCores) < securityToDecrease);\\n  return threadCount;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to grow sorted by grow time\\n */\\nfunction getServersToGrow(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerMoneyAvailable(server.hostname) <\\n      server.maxMoney * MIN_MONEY_PERCENT\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getGrowTime(a.hostname) * getGrowThreadCount(ns, a) -\\n      ns.getGrowTime(b.hostname) * getGrowThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {[number]} cpuCores\\n * @returns {number} number of threads needed to grow the given server\\n */\\nfunction getGrowThreadCount(ns, server, cpuCores) {\\n  const growMultiplier = Math.floor(\\n    server.maxMoney / (ns.getServerMoneyAvailable(server.hostname) || 1)\\n  );\\n  return Math.floor(\\n    ns.growthAnalyze(server.hostname, growMultiplier, cpuCores)\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToHack(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to hack',\\n    ns.ui.getTheme().error,\\n    server => ({\\n      column: { name: 'Available Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, ns.getServerMoneyAvailable(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Chance', style: { textAlign: 'right' } },\\n      content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getHackTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToWeaken(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to weaken',\\n    ns.ui.getTheme().warning,\\n    server => ({\\n      column: { name: 'Min Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(server.minSecurity, 0),\\n    }),\\n    server => ({\\n      column: { name: 'Current Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(ns.getServerSecurityLevel(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Base Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(server.baseSecurity, 0),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Chance', style: { textAlign: 'right' } },\\n      content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Weaken Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getWeakenTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToGrow(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to grow',\\n    ns.ui.getTheme().success,\\n    server => ({\\n      column: { name: 'Available Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, ns.getServerMoneyAvailable(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Max Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, server.maxMoney),\\n    }),\\n    server => ({\\n      column: { name: 'Grow Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getGrowTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n * @param {string} header\\n * @param {string} color\\n * @param {...function(import('database/servers').Server): import('utils/table').Cell} additionalCells\\n */\\nfunction logServers(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap,\\n  header,\\n  color,\\n  ...additionalCells\\n) {\\n  servers = servers.filter(\\n    server =>\\n      server.hostname in hostnameToThreadCountMap ||\\n      server.hostname in hostnameToRunningThreadCountMap\\n  );\\n  if (servers.length === 0) return;\\n\\n  const borderColor = `${color}33`;\\n  /** @type {import('utils/table').Table} */ const table = {\\n    rows: [],\\n    style: { color: color, borderColor: borderColor },\\n  };\\n  for (const server of servers) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: {\\n            name: 'Hostname',\\n            style: { borderColor: borderColor, width: 'max-content' },\\n          },\\n          content: createReactElement(server.hostname, {\\n            color: createColorForString(ns, server.hostname),\\n          }),\\n        },\\n        ...additionalCells.map(fn => {\\n          const cell = fn(server);\\n          cell.column.style.borderColor = borderColor;\\n          return cell;\\n        }),\\n        {\\n          column: {\\n            name: 'Threads Needed',\\n            style: {\\n              borderColor: borderColor,\\n              textAlign: 'right',\\n              width: 'min-content',\\n            },\\n          },\\n          content:\\n            server.hostname in hostnameToThreadCountMap\\n              ? ns.formatNumber(hostnameToThreadCountMap[server.hostname], 0)\\n              : '-',\\n        },\\n        {\\n          column: {\\n            name: 'Threads Running',\\n            style: {\\n              borderColor: borderColor,\\n              textAlign: 'right',\\n              width: 'min-content',\\n            },\\n          },\\n          content:\\n            server.hostname in hostnameToRunningThreadCountMap\\n              ? ns.formatNumber(\\n                  hostnameToRunningThreadCountMap[server.hostname],\\n                  0\\n                )\\n              : '-',\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  ns.printRaw(\\n    createReactElement('\\\\n ' + header, { color: color, fontWeight: 'bold' })\\n  );\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-hacking.js\",\"server\":\"home\"}}],[\"gain-access.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { ONE_MINUTE } from 'utils/constants';\\n\\n/**\\n * Attempts to gain root access to servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  let hostnames = getServers(ns).map(server => server.hostname);\\n\\n  do {\\n    for (const hostname of hostnames) {\\n      runProgram(() => ns.brutessh(hostname));\\n      runProgram(() => ns.ftpcrack(hostname));\\n      runProgram(() => ns.httpworm(hostname));\\n      runProgram(() => ns.relaysmtp(hostname));\\n      runProgram(() => ns.sqlinject(hostname));\\n      runProgram(() => ns.nuke(hostname));\\n    }\\n    hostnames = hostnames.filter(hostname => !ns.hasRootAccess(hostname));\\n    if (hostnames.length > 0) await ns.sleep(ONE_MINUTE);\\n  } while (hostnames.length > 0);\\n}\\n\\n/** @param {function()} programFunction */\\nfunction runProgram(programFunction) {\\n  try {\\n    programFunction();\\n  } catch (_) {}\\n}\\n\",\"filename\":\"gain-access.js\",\"server\":\"home\"}}],[\"init.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateServers } from 'database/servers';\\nimport { writeStocks } from 'database/stocks';\\nimport { getAllPaths } from 'utils/servers';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { writeGangTasks } from 'database/gang-tasks';\\n\\n/**\\n * Run this script at the beginning of every session.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  // Optionally clean up files in all servers if there is enough RAM to do so.\\n  const cleanupFilesPid = ns.run('cleanup-files.js');\\n  while (ns.isRunning(cleanupFilesPid)) await ns.sleep(ONE_SECOND);\\n\\n  // Reset database files.\\n  const hostnameToPathMap = { [HOME_HOSTNAME]: [] };\\n  const allPaths = getAllPaths(ns, HOME_HOSTNAME);\\n  for (const path of allPaths) {\\n    hostnameToPathMap[path[path.length - 1]] = path.slice(1);\\n  }\\n  updateServers(\\n    ns,\\n    ...Object.keys(hostnameToPathMap).map(hostname =>\\n      getServerData(ns, hostname, hostnameToPathMap[hostname])\\n    )\\n  );\\n  if (ns.stock.hasWSEAccount() && ns.stock.hasTIXAPIAccess()) {\\n    writeStocks(ns);\\n    ns.run('manage-stocks.js', { preventDuplicates: true });\\n  }\\n  try {\\n    writeGangTasks(ns);\\n    if (ns.gang.inGang()) ns.run('manage-gang.js', { preventDuplicates: true });\\n  } catch (_) {}\\n\\n  // Start scripts.\\n  ns.run('gain-access.js', { preventDuplicates: true });\\n  ns.run('manage-hacking.js', { preventDuplicates: true });\\n  ns.run('manage-hacknet.js', { preventDuplicates: true });\\n  ns.run('manage-servers.js', { preventDuplicates: true });\\n}\\n\\n/**\\n * Get stats of a server to save to the database.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {string[]} path\\n * @returns {import('database/servers').Server} server\\n */\\nexport function getServerData(ns, hostname, path) {\\n  const serverData = ns.getServer(hostname);\\n  return {\\n    hostname: hostname,\\n    path: path,\\n    organization: serverData.organizationName,\\n    isPurchased: serverData.purchasedByPlayer,\\n    maxRam: serverData.maxRam,\\n    cpuCores: serverData.cpuCores,\\n    maxMoney: serverData.moneyMax,\\n    minSecurity: ns.getServerMinSecurityLevel(hostname),\\n    baseSecurity: ns.getServerBaseSecurityLevel(hostname),\\n    hackingLevel: ns.getServerRequiredHackingLevel(hostname),\\n  };\\n}\\n\",\"filename\":\"init.js\",\"server\":\"home\"}}],[\"cleanup-files.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils/servers';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Stops all scripts and removes JS files from every server except the home\\n * server. Also remove database files.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const allHostnames = getAllHostnames(ns);\\n  for (const hostname of allHostnames) {\\n    if (hostname === HOME_HOSTNAME) continue;\\n\\n    // Kill all scripts.\\n    ns.killall(hostname);\\n\\n    // Remove files.\\n    const filenames = ns.ls(hostname, '.js');\\n    for (const filename of filenames) ns.rm(filename, hostname);\\n  }\\n\\n  // Remove database files.\\n  const filenames = ns.ls(HOME_HOSTNAME, '.txt');\\n  for (const filename of filenames) ns.rm(filename);\\n}\\n\",\"filename\":\"cleanup-files.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *     3 + 1\\n *     2 + 2\\n *     2 + 1 + 1\\n *     1 + 1 + 1 + 1\\n *\\n * How many different distinct ways can the number 46 be written as a sum of at\\n * least two positive integers?\\n *\\n * @param {number} input\\n */\\nexport default function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * You are given the following array of integers:\\n *\\n * 4,0,0,3,3,4,7,5,0,1,2,4,5,1\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} maxJumps\\n * @returns {0|1} representing whether able to reach the last index\\n */\\nexport default function arrayJumpingGame(maxJumps) {\\n  return canReachEnd(0, maxJumps) ? 1 : 0;\\n}\\n\\n/**\\n * @param {number} index\\n * @param {number[]} maxJumps\\n * @returns {boolean}\\n */\\nfunction canReachEnd(index, maxJumps) {\\n  if (index === maxJumps.length - 1) return true;\\n  if (index >= maxJumps.length) return false;\\n\\n  for (let jump = 1; jump <= maxJumps[index]; jump++) {\\n    if (canReachEnd(index + jump, maxJumps)) return true;\\n  }\\n  return false;\\n}\\n\\n// console.log(arrayJumpingGame([4, 0, 0, 3, 3, 4, 7, 5, 0, 1, 2, 4, 5, 1])); // 1\\n// console.log(\\n//   arrayJumpingGame([9, 1, 2, 0, 9, 1, 6, 7, 9, 4, 0, 0, 10, 0, 7, 1, 4, 2])\\n// ); // 1\\n\",\"filename\":\"contracts/array-jumping-game.js\",\"server\":\"home\"}}],[\"monitor-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatTime } from 'utils/format';\\nimport { printTable } from 'utils/table';\\nimport { ONE_SECOND } from 'utils/constants';\\nimport { createColorForString } from 'utils/colors';\\n\\n/**\\n * Monitors all servers that can run scripts in the --tail.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(750, 1000);\\n  ns.moveTail(800, 50);\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    const allServers = getServers(ns);\\n    const hostnameToColor = {};\\n    for (const server of allServers) {\\n      hostnameToColor[server.hostname] = createColorForString(\\n        ns,\\n        server.hostname\\n      );\\n    }\\n\\n    const servers = allServers.filter(\\n      server => ns.hasRootAccess(server.hostname) && server.maxRam > 0\\n    );\\n    servers.sort(\\n      (server1, server2) =>\\n        ns.getServerUsedRam(server2.hostname) -\\n        ns.getServerUsedRam(server1.hostname)\\n    );\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const server of servers) {\\n      const usedRam = ns.getServerUsedRam(server.hostname);\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Hostname', style: { width: 'max-content' } },\\n            content: createReactElement(server.hostname, {\\n              color: hostnameToColor[server.hostname],\\n            }),\\n          },\\n          {\\n            column: {\\n              name: 'Used Ram',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatRam(usedRam, 0),\\n            style: { color: usedRam === 0 ? ns.ui.getTheme().error : '' },\\n          },\\n          {\\n            column: {\\n              name: 'Max Ram',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatRam(server.maxRam, 0),\\n          },\\n          {\\n            column: { name: 'Running Scripts', style: {} },\\n            content: getRunningScripts(ns, server.hostname, hostnameToColor),\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n\\n    ns.clearLog();\\n    printTable(ns, table);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Returns a ReactElement showing the scripts that are running on a given\\n * hostname.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {Object.<string, string>} hostnameToColor\\n * @returns {import('../NetscriptDefinitions').ReactElement}\\n */\\nfunction getRunningScripts(ns, hostname, hostnameToColor) {\\n  const elements = ns.ps(hostname).map(process => {\\n    const style = {};\\n    const message = [createReactElement(process.filename, {}, 'span')];\\n\\n    for (const args of process.args) {\\n      message.push(\\n        createReactElement(\\n          ` ${args}`,\\n          {\\n            color: args in hostnameToColor ? hostnameToColor[args] : 'inherit',\\n          },\\n          'span'\\n        )\\n      );\\n    }\\n\\n    message.push(\\n      createReactElement(` (${process.threads.toLocaleString()})`, {}, 'span')\\n    );\\n\\n    if (['hack.js', 'grow.js', 'weaken.js'].includes(process.filename)) {\\n      const script = ns.getRunningScript(process.pid, hostname);\\n      const totalTimeMessage = script.logs[0]\\n        .match(/ in .* \\\\(/)[0]\\n        .replace(' in ', '')\\n        .replace(' (', '');\\n      const totalSeconds = totalTimeMessage\\n        .match(/[0-9.]+ [a-z]+/g)\\n        .map(timePart => {\\n          const number = parseFloat(timePart.split(' ')[0]);\\n          if (timePart.includes('hour')) return number * 60 * 60;\\n          if (timePart.includes('minute')) return number * 60;\\n          if (timePart.includes('second')) return number;\\n          return number;\\n        })\\n        .reduce((a, b) => a + b);\\n      message.push(\\n        createReactElement(\\n          ` - ${formatTime(\\n            ns,\\n            (totalSeconds - script.onlineRunningTime) * 1000\\n          )} left`,\\n          {},\\n          'span'\\n        )\\n      );\\n      style.color = {\\n        'hack.js': ns.ui.getTheme().error,\\n        'grow.js': ns.ui.getTheme().success,\\n        'weaken.js': ns.ui.getTheme().warning,\\n      }[process.filename];\\n    }\\n\\n    return createReactElement(message, style);\\n  });\\n  return React.createElement('div', {}, ...elements);\\n}\\n\",\"filename\":\"monitor-servers.js\",\"server\":\"home\"}}],[\"utils/formatting.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting for printing to either --tail logs or to the terminal.\\n */\\n\\n/**\\n * @param {NS} ns\\n */\\nexport function printTable(ns) {}\\n\\nexport function tprintTable(ns) {}\\n\\nfunction getTableForPrinting() {}\\n\",\"filename\":\"utils/formatting.js\",\"server\":\"home\"}}],[\"utils/table.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting for printing tables to either --tail logs or to the\\n * terminal.\\n */\\n\\n/**\\n * @typedef Column\\n * @property {string} name\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Cell\\n * @property {Column} column\\n * @property {import('../../NetscriptDefinitions').ReactNode} content\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Row\\n * @property {Cell[]} cells\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Table\\n * @property {Row[]} rows\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * Prints a table to --tail logs.\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n */\\nexport const printTable = (ns, table) =>\\n  ns.printRaw(getTableForPrinting(ns, table, true));\\n\\n/**\\n * Prints a table to the terminal.\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n */\\nexport const tprintTable = (ns, table) =>\\n  ns.tprintRaw(getTableForPrinting(ns, table));\\n\\n/**\\n * Gets a formatted table for printing\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n * @param {[boolean]} fillWidth\\n *        whether the table should take up the full width of the window\\n * @returns {import('../../NetscriptDefinitions').ReactElement}\\n */\\nfunction getTableForPrinting(ns, table, fillWidth) {\\n  if (table.rows.length === 0) return createReactElement('Nothing to print!');\\n\\n  // Get border color.\\n  let primaryColor = ns.ui.getTheme().primary.substring(1);\\n  if (primaryColor.length === 3) {\\n    const colors = primaryColor.split('');\\n    primaryColor =\\n      colors[0] + colors[0] + colors[1] + colors[1] + colors[2] + colors[2];\\n  }\\n  const border = `.5px #${primaryColor}33 solid`;\\n\\n  // Build and return ReactElement for table.\\n  const cellStyling = {\\n    border: border,\\n    padding: '2px 8px',\\n  };\\n  const headerCellElements = table.rows[0].cells.map(cell =>\\n    createReactElement(cell.column.name, {\\n      ...cellStyling,\\n      ...cell.column.style,\\n      fontWeight: 'bold',\\n      width: 'auto',\\n    })\\n  );\\n  const cellElements = table.rows\\n    .map(row => {\\n      const rowStyle = row.style ?? {};\\n      return row.cells.map(cell =>\\n        createReactElement(cell.content, {\\n          ...cellStyling,\\n          ...cell.column.style,\\n          ...rowStyle,\\n          ...cell.style,\\n          width: 'auto',\\n        })\\n      );\\n    })\\n    .flat();\\n  const tableStyle = table.style ?? {};\\n  return createReactElement([...headerCellElements, ...cellElements], {\\n    border: border,\\n    display: 'grid',\\n    gridTemplateColumns: table.rows[0].cells\\n      .map(cell => {\\n        if (cell.column.style.width) return cell.column.style.width;\\n        return fillWidth ? '1fr' : 'max-content';\\n      })\\n      .join(' '),\\n    width: fillWidth ? '100%' : 'max-content',\\n    ...tableStyle,\\n  });\\n}\\n\\n/**\\n * Creates a <div> react element.\\n *\\n * @param {import('../../NetscriptDefinitions').ReactNode|import('../../NetscriptDefinitions').ReactNode[]} content\\n * @param {[import('utils/dom').Style]} style\\n * @returns {import('../../NetscriptDefinitions').ReactElement}\\n */\\nfunction createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\",\"filename\":\"utils/table.js\",\"server\":\"home\"}}],[\"contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * HammingCodes: Encoded Binary to Integer\\n *\\n * You are given the following encoded binary string:\\n * '10100000000001101100000001110011'\\n *\\n * Treat it as an extended Hamming code with 1 'possible' error at a random\\n * index.\\n *\\n * Find the 'possible' wrong bit, fix it and extract the decimal value, which is\\n * hidden inside the string.\\n *\\n * Note: The length of the binary string is dynamic, but its encoding/decoding\\n * follows Hamming's 'rule'\\n *\\n * Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from\\n * 3Blue1Brown for more information\\n *\\n * Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an\\n * altered Bit 😉\\n *\\n * Note: The endianness of the encoded decimal value is reversed in relation to\\n * the endianness of the Hamming code. Where the Hamming code is expressed as\\n * little-endian (LSB at index 0), the decimal value encoded in it is expressed\\n * as big-endian (MSB at index 0).\\n *\\n * Extra note for automation: return the decimal value as a string\\n */\\n\",\"filename\":\"contracts/hamming-codes.js\",\"server\":\"home\"}}],[\"utils/format.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting strings.\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {string} e.g. \\\"$123.45\\\"\\n */\\nexport function formatMoney(ns, amount) {\\n  return '$' + ns.formatNumber(amount, 2);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} milliseconds\\n * @returns {string} e.g. \\\"12m 34s\\\"\\n */\\nexport function formatTime(ns, milliseconds) {\\n  const totalSeconds = Math.ceil(milliseconds / 1000);\\n  if (totalSeconds < 60) return `${totalSeconds}s`;\\n\\n  const minutes = Math.floor(totalSeconds / 60);\\n  const seconds = totalSeconds - minutes * 60;\\n  return `${minutes}m ${seconds}s`;\\n}\\n\",\"filename\":\"utils/format.js\",\"server\":\"home\"}}],[\"utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n  algorithmicStockTraderIII,\\n  algorithmicStockTraderIV,\\n} from 'contracts/algorithmic-stock-trader';\\nimport arrayJumpingGame from 'contracts/array-jumping-game';\\nimport compressionIRLECompression from 'contracts/compression-i-rle-compression';\\nimport compressionIILZDecompression from 'contracts/compression-ii-lz-decompression';\\nimport encryptionICaesarCipher from 'contracts/encryption-i-caesar-cipher';\\nimport encryptionIIVigenereCipher from 'contracts/encryption-ii-vigenere-cipher';\\nimport findAllValidMathExpressions from 'contracts/find-all-valid-math-expressions';\\nimport findLargestPrimeFactor from 'contracts/find-largest-prime-factor';\\nimport generateIPAddresses from 'contracts/generate-ip-addresses';\\nimport mergeOverlappingIntervals from 'contracts/merge-overlapping-intervals';\\nimport minimumPathSumInATriangle from 'contracts/minimum-path-sum-in-a-triangle';\\nimport proper2ColoringOfAGraph from 'contracts/proper-2-coloring-of-a-graph';\\nimport sanitizeParenthesesInExpression from 'contracts/sanitize-parentheses-in-expression';\\nimport spiralizeMatrix from 'contracts/spiralize-matrix';\\nimport subarrayWithMaximumSum from 'contracts/subarray-with-maximum-sum';\\nimport totalWaysToSum from 'contracts/total-ways-to-sum';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from 'contracts/unique-paths-in-a-grid';\\n\\nexport const HOME_HOSTNAME = 'home';\\n\\n/** Maximum number of servers that we can buy. */\\nexport const MAX_PURCHASED_SERVER_COUNT = 26;\\n\\n/** One second in milliseconds. */\\nexport const ONE_SECOND = 1000;\\n\\n/** One minute in milliseconds. */\\nexport const ONE_MINUTE = ONE_SECOND * 60;\\n\\nexport const CONTRACT_TYPE_TO_SOLVER_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  // 'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  // 'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game II': null,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Compression I: RLE Compression': compressionIRLECompression,\\n  'Compression II: LZ Decompression': compressionIILZDecompression,\\n  'Compression III: LZ Compression': null,\\n  'Encryption I: Caesar Cipher': encryptionICaesarCipher,\\n  'Encryption II: Vigenère Cipher': encryptionIIVigenereCipher,\\n  'Find All Valid Math Expressions': findAllValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIPAddresses,\\n  'HammingCodes: Encoded Binary to Integer': null,\\n  'HammingCodes: Integer to Encoded Binary': null,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Proper 2-Coloring of a Graph': proper2ColoringOfAGraph,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  // 'Shortest Path in a Grid': shortestPathInAGrid,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum II': null,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\\nexport const CRIME_TYPES = [\\n  'Shoplift',\\n  'Rob Store',\\n  'Mug',\\n  'Larceny',\\n  'Deal Drugs',\\n  'Bond Forgery',\\n  'Traffick Arms',\\n  'Homicide',\\n  'Grand Theft Auto',\\n  'Kidnap',\\n  'Assassination',\\n  'Heist',\\n];\\n\\nexport const COMPANY_NAMES = [\\n  'ECorp',\\n  'MegaCorp',\\n  'Bachman & Associates',\\n  'Blade Industries',\\n  'NWO',\\n  'Clarke Incorporated',\\n  'OmniTek Incorporated',\\n  'Four Sigma',\\n  'KuaiGong International',\\n  'Fulcrum Technologies',\\n  'Storm Technologies',\\n  'DefComm',\\n  'Helios Labs',\\n  'VitaLife',\\n  'Icarus Microsystems',\\n  'Universal Energy',\\n  'Galactic Cybersystems',\\n  'AeroCorp',\\n  'Omnia Cybersystems',\\n  'Solaris Space Systems',\\n  'DeltaOne',\\n  'Global Pharmaceuticals',\\n  'Nova Medical',\\n  'Central Intelligence Agency',\\n  'National Security Agency',\\n  'Watchdog Security',\\n  'LexoCorp',\\n  'Rho Construction',\\n  'Alpha Enterprises',\\n  'Aevum Police Headquarters',\\n  'SysCore Securities',\\n  'CompuTek',\\n  'NetLink Technologies',\\n  'Carmichael Security',\\n  'FoodNStuff',\\n  \\\"Joe's Guns\\\",\\n  'Omega Software',\\n  'Noodle Bar',\\n];\\n\",\"filename\":\"utils/constants.js\",\"server\":\"home\"}}],[\"contracts/santize.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} input\\n */\\nexport function sanitizeParenthesesInExpression(input) {}\\n\\n/**\\n * Checks if an expression is valid based on the parentheses pairs.\\n *\\n * @param {string} expression\\n */\\nfunction isValidExpression(expression) {\\n  const parentheses = [];\\n  const characters = expression.split('');\\n  for (const character of characters) {\\n    switch (character) {\\n      case '(':\\n        parentheses.push(1);\\n        break;\\n      case ')':\\n        if (parentheses.pop() === undefined) return false;\\n        break;\\n    }\\n  }\\n  return parentheses.length === 0;\\n}\\n\\nconsole.log(isValidExpression('(a)())()'));\\n\",\"filename\":\"contracts/santize.js\",\"server\":\"home\"}}],[\"contracts/santize-parentheses-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} input\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  // Input expression is already valid.\\n  if (isValidExpression(input)) return [input];\\n\\n  const validExpressions = [];\\n  for (let i = 0; i < input.length; i++) {\\n    const newExpression = input.slice(0, i) + input.slice(i + 1);\\n    console.log(newExpression);\\n  }\\n}\\n\\n/**\\n * Checks if an expression is valid based on the parentheses pairs.\\n *\\n * @param {string} expression\\n */\\nfunction isValidExpression(expression) {\\n  const parentheses = [];\\n  const characters = expression.split('');\\n  for (const character of characters) {\\n    switch (character) {\\n      case '(':\\n        parentheses.push(1);\\n        break;\\n      case ')':\\n        if (parentheses.pop() === undefined) return false;\\n        break;\\n    }\\n  }\\n  return parentheses.length === 0;\\n}\\n\\nconsole.log(sanitizeParenthesesInExpression);\\n\",\"filename\":\"contracts/santize-parentheses-in-expression.js\",\"server\":\"home\"}}],[\"contracts/sanitize-parentheses-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} expression\\n * @returns {string[]} valid expressions\\n */\\nexport default function sanitizeParenthesesInExpression(expression) {\\n  let charactersToRemove = 0;\\n  let expressions = [expression];\\n  while (charactersToRemove < expression.length) {\\n    const validExpressions = new Set();\\n    for (const expression of expressions) {\\n      if (isValidExpression(expression)) validExpressions.add(expression);\\n    }\\n    if (validExpressions.size > 0) return [...validExpressions];\\n\\n    const shortenedExpressions = new Set();\\n    for (const expression of expressions) {\\n      for (let i = 0; i < expression.length; i++) {\\n        shortenedExpressions.add(\\n          expression.substring(0, i) + expression.substring(i + 1)\\n        );\\n      }\\n    }\\n    expressions = [...shortenedExpressions];\\n\\n    charactersToRemove++;\\n  }\\n  return [];\\n}\\n\\n/** @type {Object.<string, boolean>} */\\nconst expressionToIsValidMap = {};\\n\\n/**\\n * @param {string} expression\\n * @returns {boolean} is valid\\n */\\nfunction isValidExpression(expression) {\\n  if (expression in expressionToIsValidMap) {\\n    return expressionToIsValidMap[expression];\\n  }\\n\\n  let stack = 0;\\n  for (let i = 0; i < expression.length; i++) {\\n    const character = expression.charAt(i);\\n    if (character === '(') stack++;\\n    else if (character === ')') stack--;\\n    if (stack < 0) break;\\n  }\\n  expressionToIsValidMap[expression] = stack === 0;\\n  return expressionToIsValidMap[expression];\\n}\\n\",\"filename\":\"contracts/sanitize-parentheses-in-expression.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-on-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n */\\nexport default function uniquePathsInAGridI {}\\n\",\"filename\":\"contracts/unique-paths-on-a-grid.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-in-a-grid-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n */\\nexport default function uniquePathsInAGridI(input) {\\n  const [rows, columns] = input;\\n  return new Set(getPaths(0, 0, new Grid(rows, columns), [])).size;\\n}\\n\\n/**\\n * @typedef {('d'|'r')[]} Path\\n */\\n\\n/**\\n * Gets all possible (can have duplicates) paths from the given position to the\\n * bottom-right corner ({x: columns, y: rows}).\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {Grid} grid\\n * @param {Path[]} pathThusFar\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (x === grid.columns - 1 && y === grid.rows - 1) return [pathThusFar];\\n\\n  const paths = [];\\n\\n  const rightPosition = { x: x + 1, y: y };\\n  if (grid.isValidPosition(rightPosition.x, rightPosition.y)) {\\n    paths.push(\\n      ...getPaths(rightPosition.x, rightPosition.y, grid, [...pathThusFar, 'r'])\\n    );\\n  }\\n\\n  const downPosition = { x: x, y: y + 1 };\\n  if (grid.isValidPosition(downPosition.x, downPosition.y)) {\\n    paths.push(\\n      ...getPaths(downPosition.x, downPosition.y, grid, [...pathThusFar, 'd'])\\n    );\\n  }\\n\\n  return paths;\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number} rows\\n   * @param {number} columns\\n   */\\n  constructor(rows, columns) {\\n    this.rows = rows;\\n    this.columns = columns;\\n  }\\n\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   * @returns {boolean} whether the position is valid\\n   */\\n  isValidPosition(x, y) {\\n    return x >= 0 && y >= 0 && x < this.columns && y < this.rows;\\n  }\\n}\\n\",\"filename\":\"contracts/unique-paths-in-a-grid-i.js\",\"server\":\"home\"}}],[\"contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime factor of 301829830?\\n *\\n * @param {number} input\\n */\\nexport default function findLargestPrimeFactor(input) {\\n  const squareRoot = Math.floor(Math.sqrt(input));\\n  let otherPrimeFactor;\\n  for (let i = 1; i <= squareRoot; i++) {\\n    if (input % i !== 0) continue; // Not a factor.\\n    if (isPrime(input / i)) return input / i;\\n    if (isPrime(i)) otherPrimeFactor = i;\\n  }\\n  return otherPrimeFactor;\\n}\\n\\n/** @type {Object.<number, boolean>}*/\\nconst numberToIsPrimeMap = {\\n  1: true,\\n  2: true,\\n  3: true,\\n  5: true,\\n  7: true,\\n  11: true,\\n  13: true,\\n  17: true,\\n  19: true,\\n  23: true,\\n  29: true,\\n  31: true,\\n  37: true,\\n  41: true,\\n  43: true,\\n  47: true,\\n  53: true,\\n  59: true,\\n  61: true,\\n  67: true,\\n  71: true,\\n  73: true,\\n  79: true,\\n  83: true,\\n  89: true,\\n  97: true,\\n};\\n\\n/**\\n * Checks whether a number is prime and records it into the `NUMBER_TO_IS_PRIME`\\n * map.\\n *\\n * @param {number} number\\n */\\nfunction isPrime(number) {\\n  if (number in numberToIsPrimeMap) return numberToIsPrimeMap[number];\\n\\n  let isPrime = true;\\n\\n  for (let i = 2; i < Math.sqrt(number); i++) {\\n    if (number % i === 0) {\\n      isPrime = false;\\n      break;\\n    }\\n  }\\n\\n  numberToIsPrimeMap[number] = isPrime;\\n  return isPrime;\\n}\\n\\nconsole.log(findLargestPrimeFactor(764191163));\\n// console.log(findLargestPrimeFactor(1000));\\n\",\"filename\":\"contracts/find-largest-prime-factor.js\",\"server\":\"home\"}}],[\"monitor-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { printTable } from 'utils/table';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { ONE_SECOND } from 'utils/constants';\\nimport { createColorForString } from 'utils/colors';\\nimport { GROW_JS, HACK_JS, WEAKEN_JS } from 'utils/scripts';\\nimport { createReactElement } from 'utils/dom';\\n\\n/**\\n * Monitors all servers that can be hacked in the --tail.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(1300, 1000);\\n  ns.moveTail(50, 50);\\n  ns.atExit(() => ns.closeTail());\\n\\n  const allServers = getServers(ns).filter(server => server.maxMoney > 0);\\n  const hackColor = ns.ui.getTheme().error;\\n  const growColor = ns.ui.getTheme().success;\\n  const weakenColor = ns.ui.getTheme().warning;\\n\\n  while (true) {\\n    const servers = allServers.filter(\\n      server =>\\n        ns.hasRootAccess(server.hostname) &&\\n        ns.getHackingLevel() >= server.hackingLevel\\n    );\\n    servers.sort(\\n      (server1, server2) =>\\n        ns.hackAnalyzeChance(server2.hostname) -\\n        ns.hackAnalyzeChance(server1.hostname)\\n    );\\n\\n    const processes = getServers(ns)\\n      .map(server => ns.ps(server.name))\\n      .flat();\\n    const serverNameToHackThreadsMap = {};\\n    const serverNameToWeakenThreadsMap = {};\\n    const serverNameToGrowThreadsMap = {};\\n    for (const process of processes) {\\n      if (![HACK_JS, WEAKEN_JS, GROW_JS].includes(process.filename)) continue;\\n      const serverName = process.args[0];\\n      const threadCount = process.threads;\\n      const map = {\\n        [HACK_JS]: serverNameToHackThreadsMap,\\n        [WEAKEN_JS]: serverNameToWeakenThreadsMap,\\n        [GROW_JS]: serverNameToGrowThreadsMap,\\n      }[process.filename];\\n      if (!(serverName in map)) map[serverName] = 0;\\n      map[serverName] += threadCount;\\n    }\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const server of servers) {\\n      const scripts = [];\\n      if (server.hostname in serverNameToHackThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToHackThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads hacking`, {\\n            color: hackColor,\\n          })\\n        );\\n      }\\n      if (server.hostname in serverNameToWeakenThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToWeakenThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads weakening`, {\\n            color: weakenColor,\\n          })\\n        );\\n      }\\n      if (server.hostname in serverNameToGrowThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToGrowThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads growing`, {\\n            color: growColor,\\n          })\\n        );\\n      }\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Hostname', style: { width: 'max-content' } },\\n            content: server.hostname,\\n            style: { color: createColorForString(ns, server.hostname) },\\n          },\\n          {\\n            column: {\\n              name: 'Hack Chance',\\n              style: { textAlign: 'right', color: hackColor },\\n            },\\n            content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Hack Time',\\n              style: { textAlign: 'center', color: hackColor },\\n            },\\n            content: formatTime(ns, ns.getHackTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Available Money',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatMoney(\\n              ns,\\n              ns.getServerMoneyAvailable(server.hostname)\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Max Money',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatMoney(ns, server.maxMoney),\\n          },\\n          {\\n            column: {\\n              name: 'Grow Time',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatTime(ns, ns.getGrowTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Current Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(\\n              ns.getServerSecurityLevel(server.hostname)\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Min Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(server.minSecurity, 0),\\n          },\\n          {\\n            column: {\\n              name: 'Base Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(server.baseSecurity, 0),\\n          },\\n          {\\n            column: {\\n              name: 'Weaken Time',\\n              style: { textAlign: 'center', color: weakenColor },\\n            },\\n            content: formatTime(ns, ns.getWeakenTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Scripts',\\n              style: { width: 'max-content' },\\n            },\\n            content: scripts.length === 0 ? '-' : createReactElement(scripts),\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n\\n    ns.clearLog();\\n    printTable(ns, table);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-hacking.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { CONTRACT_TYPE_TO_SOLVER_MAP, HOME_HOSTNAME } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Manages contracts.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const servers = getServers(ns);\\n\\n  /** @type {Contract[]} */ const contracts = servers\\n    .map(server =>\\n      ns.ls(server.hostname, '.cct').map(\\n        fileName =>\\n          /** @type {Contract} */ ({\\n            fileName,\\n            type: ns.codingcontract.getContractType(fileName, server.hostname),\\n            server,\\n          })\\n      )\\n    )\\n    .flat();\\n  contracts.sort((a, b) => a.type.localeCompare(b.type));\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const contract of contracts) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Contract Type', style: {} },\\n          content: contract.type,\\n        },\\n        {\\n          column: { name: 'Status', style: {} },\\n          content: attemptContract(ns, contract),\\n        },\\n        {\\n          column: { name: 'Run Command', style: { maxWidth: '800px' } },\\n          content: getRunCommand(contract),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n/**\\n * @typedef Contract\\n * @property {string} fileName\\n * @property {string} type\\n * @property {Server} server\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {Contract} connect\\n * @returns {import('NetscriptDefinitions').ReactElement} message representing the status of attempting the contract\\n */\\nfunction attemptContract(ns, contract) {\\n  const theme = ns.ui.getTheme();\\n  if (\\n    !(contract.type in CONTRACT_TYPE_TO_SOLVER_MAP) ||\\n    CONTRACT_TYPE_TO_SOLVER_MAP[contract.type] === null\\n  ) {\\n    return createReactElement('No solver available', { color: theme.warning });\\n  }\\n\\n  const data = ns.codingcontract.getData(\\n    contract.fileName,\\n    contract.server.hostname\\n  );\\n  const solver = CONTRACT_TYPE_TO_SOLVER_MAP[contract.type];\\n  const answer = solver(data);\\n  const reward = ns.codingcontract.attempt(\\n    answer,\\n    contract.fileName,\\n    contract.server.hostname\\n  );\\n  return reward\\n    ? createReactElement(reward, { color: theme.success })\\n    : createReactElement('Attempt failed!', { color: theme.error });\\n}\\n\\n/**\\n * @param {Contract} contract\\n * @returns {string} run command\\n */\\nfunction getRunCommand(contract) {\\n  return [\\n    'home',\\n    ...contract.server.path.map(hostname => `connect ${hostname}`),\\n    `run ${contract.fileName}`,\\n  ].join('; ');\\n}\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"find-backdoors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Prints out a command to run backdoor on all unowned servers with root access.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const currentHackingLevel = ns.getHackingLevel();\\n  const servers = getServers(ns).filter(server => {\\n    const serverData = ns.getServer(server.hostname);\\n    return (\\n      ns.hasRootAccess(server.hostname) &&\\n      serverData.requiredHackingSkill <= currentHackingLevel &&\\n      !serverData.purchasedByPlayer &&\\n      !serverData.backdoorInstalled\\n    );\\n  });\\n  for (const server of servers) {\\n    const commands = [\\n      server.path.map(hostname => `connect ${hostname}`).join('; '),\\n      'backdoor',\\n      'home',\\n    ];\\n    await executeTerminalCommand(ns, ...commands);\\n  }\\n}\\n\",\"filename\":\"find-backdoors.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-iii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Permutation, Transaction } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 47,69,73,32,15,167,100,135,5,80,18,192,171,183,152\\n *\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderIII(stockPrices) {\\n  const permutations = [];\\n\\n  for (let buyDay1 = 0; buyDay1 < stockPrices.length; buyDay1++) {\\n    for (let sellDay1 = buyDay1; sellDay1 < stockPrices.length; sellDay1++) {\\n      const transaction1 = new Transaction(stockPrices, buyDay1, sellDay1);\\n      if (transaction1.profit > 0) {\\n        permutations.push(new Permutation(transaction1));\\n      }\\n\\n      for (let buyDay2 = sellDay1; buyDay2 < stockPrices.length; buyDay2++) {\\n        for (\\n          let sellDay2 = buyDay2;\\n          sellDay2 < stockPrices.length;\\n          sellDay2++\\n        ) {\\n          const transaction2 = new Transaction(stockPrices, buyDay2, sellDay2);\\n          const permutation = new Permutation(transaction1, transaction2);\\n          if (permutation.profit > 0) permutations.push(permutation);\\n        }\\n      }\\n    }\\n  }\\n\\n  return Math.max(...permutations.map(permutation => permutation.profit));\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-iii.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Transaction } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 35,172,130,31,111,79,19,41,125,183,11,39,153,11,19,126,130,22,139,134,54,47,169,138,75\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderI(stockPrices) {\\n  const transactions = [];\\n\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    for (let sellDay = buyDay; sellDay < stockPrices.length; sellDay++) {\\n      const transaction = new Transaction(stockPrices, buyDay, sellDay);\\n      if (transaction.profit >= 0) transactions.push(transaction);\\n    }\\n  }\\n\\n  return Math.max(...transactions.map(transaction => transaction.profit));\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-i.js\",\"server\":\"home\"}}],[\"generate-test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { createReactElement } from 'utils/dom';\\nimport { CONTRACT_TYPE_TO_SOLVER_MAP, HOME_HOSTNAME } from 'utils/constants';\\n\\nconst PADDING = '16px';\\n\\n/**\\n * Generates test contracts.\\n *\\n * Takes in a contract type as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const contractType = ns.args[0];\\n\\n  // Check if there is an existing test contract that we can run.\\n  let contractFileName = getDummyContract(ns, contractType);\\n  if (!contractFileName) {\\n    ns.codingcontract.createDummyContract(contractType);\\n    contractFileName = getDummyContract(ns, contractType);\\n  }\\n\\n  // Print out the contract into --tail logs.\\n  printContract(ns, contractFileName);\\n}\\n\\nexport function autocomplete() {\\n  return Object.keys(CONTRACT_TYPE_TO_SOLVER_MAP).map(\\n    contractType => `\\\"${contractType}\\\"`\\n  );\\n}\\n\\n/**\\n * Returns a dummy contract's file name if it exists and undefined if otherwise.\\n *\\n * @param {NS} ns\\n * @param {string} contractType\\n * @returns {string|undefined} contract file name\\n */\\nfunction getDummyContract(ns, contractType) {\\n  return ns\\n    .ls(HOME_HOSTNAME, '.cct')\\n    .find(\\n      contractFileName =>\\n        ns.codingcontract.getContractType(contractFileName) === contractType\\n    );\\n}\\n\\n/**\\n * Prints a contract to terminal given the contract file name.\\n *\\n * @param {NS} ns\\n * @param {string} contractFileName\\n */\\nfunction printContract(ns, contractFileName) {\\n  const color = ns.ui.getTheme().success;\\n\\n  // Print contract type.\\n  ns.tprintRaw(\\n    createReactElement(ns.codingcontract.getContractType(contractFileName), {\\n      color: color,\\n      fontWeight: 'bold',\\n      padding: PADDING,\\n    })\\n  );\\n\\n  // Print description.\\n  ns.tprintRaw(\\n    createReactElement(\\n      ns.codingcontract\\n        .getDescription(contractFileName)\\n        .replaceAll('&nbsp;', ' '),\\n      {\\n        padding: PADDING,\\n      }\\n    )\\n  );\\n\\n  // Print command to attempt.\\n  ns.tprintRaw(\\n    createReactElement(`home; run ${contractFileName}`, {\\n      color: color,\\n      padding: PADDING,\\n    })\\n  );\\n}\\n\",\"filename\":\"generate-test-contract.js\",\"server\":\"home\"}}],[\"utils/dom.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {Object.<string, (string|number)>} Style\\n */\\n\\nimport { ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * Creates a React element that can be appended to the terminal or --tail logs.\\n *\\n * @param {import(\\\"NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Style]} style optional CSS\\n * @param {[string]} tag to override <div>\\n * @returns {import(\\\"NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style, tag) {\\n  if (Array.isArray(content)) {\\n    return React.createElement(\\n      tag ?? 'div',\\n      { style: style ?? {} },\\n      ...content\\n    );\\n  } else {\\n    return React.createElement(tag ?? 'div', { style: style ?? {} }, content);\\n  }\\n}\\n\\n/**\\n * Executes terminal commands (e.g. `connect n00dles`) without RAM penalties.\\n *\\n * @param {NS} ns\\n * @param {...string} commands\\n */\\nexport async function executeTerminalCommand(ns, ...commands) {\\n  for (let command of commands) {\\n    let wasSuccessful = executeCommand(command);\\n    while (!wasSuccessful) {\\n      await ns.sleep(ONE_SECOND / 2);\\n      wasSuccessful = executeCommand(command);\\n    }\\n  }\\n}\\n\\n/**\\n * @param {string} command\\n * @returns {boolean} whether executing the event was successful\\n */\\nfunction executeCommand(command) {\\n  const input = getDocument().getElementById('terminal-input');\\n  if (input === null || input.hasAttribute('disabled')) return false;\\n  input.value = command;\\n  const handler = Object.keys(input)[1];\\n  input[handler].onChange({ target: input });\\n  input[handler].onKeyDown({\\n    key: 'Enter',\\n    code: 'Enter',\\n    which: 13,\\n    keyCode: 13,\\n    preventDefault: () => null,\\n  });\\n  return true;\\n}\\n\\n/**\\n * Returns DOM document without the RAM penalties.\\n *\\n * Note: Make sure to name the variable `doc` instead of `document` to avoid RAM\\n * penalties.\\n *\\n * @returns {Document}\\n */\\nconst getDocument = () => eval('document');\\n\",\"filename\":\"utils/dom.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * @param {number[]} stockPrices\\n *        where the i-th element represents the stock on day i\\n * @returns {number} max profit using at most 1 transaction\\n */\\nexport const algorithmicStockTraderI = stockPrices =>\\n  getMaxProfit(stockPrices, 1);\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * @param {number[]} stockPrices\\n *        where the i-th element represents the stock on day i\\n * @returns {number} max profit using as many transactions as you'd like\\n */\\nexport const algorithmicStockTraderII = stockPrices =>\\n  getMaxProfit(stockPrices, stockPrices.length);\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * @param {number[]} stockPrices\\n *        where the i-th element represents the stock on day i\\n * @returns {number} max profit using at most 2 transactions\\n */\\nexport const algorithmicStockTraderIII = stockPrices =>\\n  getMaxProfit(stockPrices, 2);\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * @param {(number, number[])[]} input [k, stockPrices]\\n * @returns {number} max profit using at most k transactions\\n */\\nexport function algorithmicStockTraderIV(input) {\\n  const [k, stockPrices] = input;\\n  return getMaxProfit(stockPrices, k);\\n}\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {number} maxTransactions\\n * @returns {number} max profit\\n */\\nfunction getMaxProfit(stockPrices, maxTransactions) {\\n  // Get all profitable transactions.\\n  const buyDayToProfitableTransactions = {};\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    buyDayToProfitableTransactions[buyDay] = getProfitableTransactions(\\n      buyDay,\\n      stockPrices\\n    );\\n  }\\n\\n  // If there aren't any profitable transactions, return 0.\\n  if (\\n    Object.values(buyDayToProfitableTransactions).filter(\\n      transactions => transactions.length > 0\\n    ).length === 0\\n  ) {\\n    return 0;\\n  }\\n\\n  /** @type {Permutation[]} */ const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {}\\n  console.log(buyDayToProfitableTransactions);\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderI([\\n    119, 161, 114, 148, 145, 155, 87, 85, 100, 1, 3, 79, 65, 31, 43, 98, 177,\\n    183, 65, 44,\\n  ])\\n);\\n\\n/**\\n * @typedef Transaction\\n * @property {number} buyDay\\n * @property {number} sellDay\\n * @property {number} profit\\n *\\n * @typedef {Transaction[]} Permutation\\n */\\n\\n/**\\n * @param {Transaction} transaction\\n * @param {number} maxTransactions\\n * @param {Object.<number, Transaction[]>} buyDayToProfitableTransactions\\n * @returns {Permutation[]}\\n *          all profitable permutations starting from the given transaction\\n */\\nfunction getProfitablePermutations(\\n  transaction,\\n  maxTransactions,\\n  buyDayToProfitableTransactions\\n) {\\n  const permutations = [[transaction]];\\n  if (maxTransactions === 1) return permutations;\\n\\n  const lastBuyDay = Math.max(...Object.keys(buyDayToProfitableTransactions));\\n  for (let buyDay = transaction.sellDay + 1; buyDay <= lastBuyDay; buyDay++) {\\n    const nextTransactions = buyDayToProfitableTransactions[buyDay];\\n    if (nextTransactions.length === 0) continue;\\n\\n    for (const nextTransaction of nextTransactions) {\\n      const nextPermutations = getProfitablePermutations();\\n    }\\n  }\\n\\n  return permutations;\\n}\\n\\n/**\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n * @returns {Transaction[]}\\n *          all transactions starting from given buy day that are profitable\\n */\\nfunction getProfitableTransactions(buyDay, stockPrices) {\\n  const transactions = [];\\n  const buyPrice = stockPrices[buyDay];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const sellPrice = stockPrices[sellDay];\\n    const profit = sellPrice - buyPrice;\\n    if (profit <= 0) continue;\\n    transactions.push(/** @type {Transaction} */ { buyDay, sellDay, profit });\\n  }\\n  return transactions;\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader.js\",\"server\":\"home\"}}],[\"contracts/Shortest-Path-in-a-Grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"contracts/Shortest-Path-in-a-Grid.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} input\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(input) {\\n  // Starting from bottom corner of grid, get all paths possible to bottom corner.\\n  const grid = new Grid(input);\\n  return getPaths(grid.endPosition, grid, '', [], new Map());\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')} Direction\\n */\\n\\nconst directionToOffsetMap = {\\n  D: { x: 0, y: -1 },\\n  R: { x: -1, y: 0 },\\n  U: { x: 0, y: 1 },\\n  L: { x: 1, y: 0 },\\n};\\n\\n/**\\n *\\n * @param {Position} position\\n * @param {Grid} grid\\n * @param {string} pathThusFar\\n * @param {Position[]} visitedPositions\\n * @param {Map<Position, string[]>} positionToPathsCacheMap\\n * @returns {string[]}\\n */\\nfunction getPaths(\\n  position,\\n  grid,\\n  pathThusFar,\\n  visitedPositions,\\n  positionToPathsCacheMap\\n) {\\n  console.log(`position: ${position}, ${pathThusFar}`);\\n\\n  const cacheKey = [...positionToPathsCacheMap.keys()].find(key =>\\n    key.equals(position)\\n  );\\n  if (cacheKey) {\\n    console.log('getting from cache', cacheKey);\\n    return positionToPathsCacheMap.get(cacheKey);\\n  }\\n\\n  if (position.equals(new Position(0, 0))) {\\n    console.log(`reached the end ${pathThusFar}`);\\n    return [pathThusFar];\\n  }\\n\\n  let paths = [];\\n  for (const direction in directionToOffsetMap) {\\n    const offset = directionToOffsetMap[direction];\\n    const nextPosition = new Position(\\n      position.x + offset.x,\\n      position.y + offset.y\\n    );\\n    if (\\n      !grid.isValidPosition(nextPosition) ||\\n      visitedPositions.find(visitedPosition =>\\n        visitedPosition.equals(nextPosition)\\n      )\\n    ) {\\n      continue;\\n    }\\n\\n    paths.push(\\n      ...getPaths(\\n        nextPosition,\\n        grid,\\n        pathThusFar + direction,\\n        [...visitedPositions, position],\\n        positionToPathsCacheMap\\n      )\\n    );\\n  }\\n\\n  positionToPathsCacheMap.set(position, paths);\\n  return paths;\\n}\\n\\nclass Position {\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   */\\n  constructor(x, y) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n\\n  equals(other) {\\n    return this.x === other.x && this.y === other.y;\\n  }\\n\\n  toString() {\\n    return `(${this.x}, ${this.y})`;\\n  }\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number[][]} grid\\n   */\\n  constructor(grid) {\\n    this.grid = grid;\\n    this.endPosition = new Position(grid[0].length - 1, grid.length - 1);\\n  }\\n\\n  /**\\n   * @param {Position} position\\n   * @returns {boolean} is valid\\n   */\\n  isValidPosition(position) {\\n    const [x, y] = [position.x, position.y];\\n    return (\\n      x >= 0 &&\\n      y >= 0 &&\\n      y < this.grid.length &&\\n      x < this.grid[y].length &&\\n      this.grid[y][x] === 0\\n    );\\n  }\\n}\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 1, 0, 0, 0],\\n    [0, 0, 0, 1, 0],\\n  ])\\n);\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 1],\\n    [1, 0],\\n  ])\\n);\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1],\\n    [0, 0, 0, 1, 0, 0],\\n    [0, 0, 1, 1, 1, 0],\\n    [0, 0, 0, 0, 0, 0],\\n    [1, 1, 0, 0, 0, 0],\\n    [0, 1, 0, 0, 0, 1],\\n    [1, 1, 0, 0, 0, 0],\\n  ])\\n); // DDDDRRDDDRRR\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 1, 0, 1],\\n//     [1, 0, 0, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 1, 0, 0, 0, 0],\\n//     [1, 0, 0, 1, 1, 0, 0, 0],\\n//     [0, 0, 1, 0, 0, 0, 0, 0],\\n//     [0, 0, 1, 1, 0, 0, 0, 0],\\n//   ])\\n// );\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.js\",\"server\":\"home\"}}],[\"test-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, CONTRACT_TYPE_TO_SOLVER_MAP } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { tprintTable } from 'utils/table';\\n\\nconst NUM_CONTRACTS_TO_GENERATE = 5;\\n\\n/**\\n * Generates contracts to test a contract function again.\\n *\\n * Takes in a contract type as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const contractType = ns.args[0];\\n\\n  ns.tprintf(`Testing ${contractType}`);\\n\\n  // Generate contracts.\\n  for (let i = 0; i < NUM_CONTRACTS_TO_GENERATE; i++) {\\n    ns.codingcontract.createDummyContract(contractType);\\n  }\\n\\n  // Get generated contract file names.\\n  const contractFileNames = ns\\n    .ls(HOME_HOSTNAME, '.cct')\\n    .filter(\\n      contractFileName =>\\n        ns.codingcontract.getContractType(contractFileName) === contractType\\n    );\\n\\n  // Get contract solver.\\n  const solver = CONTRACT_TYPE_TO_SOLVER_MAP[contractType];\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const contractFileName of contractFileNames) {\\n    // Try to solve the contract.\\n    const input = ns.codingcontract.getData(contractFileName);\\n    const startTimestamp = new Date().getUTCMilliseconds();\\n    const output = solver(input);\\n    const endTimestamp = new Date().getUTCMilliseconds();\\n    const wasSuccessful =\\n      ns.codingcontract.attempt(output, contractFileName).length > 0;\\n    await ns.sleep(1);\\n\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Contract Name', style: {} },\\n          content: contractFileName,\\n        },\\n        {\\n          column: { name: 'Input', style: { maxWidth: '200px' } },\\n          content: `${input}`,\\n        },\\n        {\\n          column: { name: 'Output', style: {} },\\n          content: `${output}`,\\n        },\\n        {\\n          column: { name: 'Success?', style: {} },\\n          content: createReactElement(\\n            wasSuccessful ? 'Success!' : 'Failed 😭',\\n            {\\n              color: wasSuccessful\\n                ? ns.ui.getTheme().success\\n                : ns.ui.getTheme().error,\\n            }\\n          ),\\n        },\\n        {\\n          column: { name: 'Time', style: { textAlign: 'center' } },\\n          content: `${endTimestamp - startTimestamp}ms`,\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\\nexport function autocomplete() {\\n  return Object.keys(CONTRACT_TYPE_TO_SOLVER_MAP)\\n    .filter(contractType => CONTRACT_TYPE_TO_SOLVER_MAP[contractType] !== null)\\n    .map(contractType => `\\\"${contractType}\\\"`);\\n}\\n\",\"filename\":\"test-contracts.js\",\"server\":\"home\"}}],[\"contracts/compression-ii-lz-decompression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression II: LZ Decompression\\n *\\n * Lempel-Ziv (LZ) compression is a data compression technique which encodes\\n * data using references to earlier parts of the data. In this variant of LZ,\\n * data is encoded in two types of chunk. Each chunk begins with a length L,\\n * encoded as a single ASCII digit from 1 to 9, followed by the chunk data,\\n * which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data. To do this, the\\n *    length is followed by a second ASCII digit X: each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends immediately,\\n * and the next character is the start of a new chunk. The two chunk types\\n * alternate, starting with type 1, and the final chunk may be of either type.\\n *\\n * You are given the following LZ-encoded string:\\n *     65JFyHC910796NwIZRo6117911y997Qh8e5aQ77902YQHLfWe2378BaqXHi3432AA\\n *\\n * Decode it and output the original string.\\n *\\n * Example: decoding '5aaabb450723abb' chunk-by-chunk\\n *     5aaabb           ->  aaabb\\n *     5aaabb45         ->  aaabbaaab\\n *     5aaabb450        ->  aaabbaaab\\n *     5aaabb45072      ->  aaabbaaababababa\\n *     5aaabb450723abb  ->  aaabbaaababababaabb\\n *\\n * @param {string} encoded message\\n * @returns {string} uncompressed message\\n */\\nexport default function compressionIILZDecompression(encoded) {\\n  let uncompressed = '';\\n\\n  let index = 0;\\n  let chunkType = 1;\\n  while (index < encoded.length) {\\n    const l = parseInt(encoded.charAt(index));\\n    if (l === 0) {\\n      // Chunk ends.\\n      index++;\\n      chunkType = chunkType === 1 ? 2 : 1;\\n      continue;\\n    }\\n\\n    switch (chunkType) {\\n      case 1:\\n        // Copy the next L characters to the uncompressed message.\\n        uncompressed += encoded.substring(index + 1, index + 1 + l);\\n        index = index + 1 + l;\\n        chunkType = 2;\\n        break;\\n      case 2:\\n        const x = parseInt(encoded.charAt(index + 1));\\n        const chunk = uncompressed.substring(\\n          uncompressed.length - x,\\n          uncompressed.length - x + l\\n        );\\n        for (let i = 0; i < l; i++) {\\n          uncompressed += chunk.charAt(i % chunk.length);\\n        }\\n        index += 2;\\n        chunkType = 1;\\n        break;\\n    }\\n  }\\n\\n  return uncompressed;\\n}\\n\",\"filename\":\"contracts/compression-ii-lz-decompression.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-ii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Transaction, Permutation } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 103,150,154,3,98,150,182,97,41,96,99,1,1,28,66,19,51,4,172,22,199,40,93,33,185,96,158,123,47,76,18,93,103,126,120,92,194,126,97,124,34,86,29,22,73,156,27,18\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderII(stockPrices) {\\n  const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    permutations.push(...getAllPermutations(buyDay, stockPrices, {}));\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  return permutations.length === 0 ? 0 : permutations[0].profit;\\n}\\n\\n/**\\n * Returns all permutations given a buy day.\\n *\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n */\\nfunction getAllPermutations(buyDay, stockPrices, buyDayToPermutationsMap) {\\n  if (buyDay === stockPrices.length - 1) return [];\\n  if (buyDay in buyDayToPermutationsMap) {\\n    return buyDayToPermutationsMap[buyDay];\\n  }\\n\\n  const permutations = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const transaction = new Transaction(stockPrices, buyDay, sellDay);\\n    if (transaction.profit <= 0) continue;\\n    permutations.push(new Permutation(transaction));\\n\\n    for (\\n      let nextBuyDay = sellDay + 1;\\n      nextBuyDay < stockPrices.length;\\n      nextBuyDay++\\n    ) {\\n      const nextBuyDayPermutations = getAllPermutations(\\n        nextBuyDay,\\n        stockPrices,\\n        buyDayToPermutationsMap\\n      );\\n      nextBuyDayPermutations.sort((a, b) => b.profit - a.profit);\\n      if (nextBuyDayPermutations.length > 0) {\\n        const permutation = new Permutation(\\n          transaction,\\n          ...nextBuyDayPermutations[0].transactions\\n        );\\n        if (permutation.profit > 0) permutations.push(permutation);\\n      }\\n    }\\n  }\\n  buyDayToPermutationsMap[buyDay] = permutations;\\n  return permutations;\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-ii.js\",\"server\":\"home\"}}],[\"contracts/hamming-codes-integer-to-encoded-binary.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * HammingCodes: Integer to Encoded Binary\\n *\\n * You are given the following decimal Value:\\n * 223500403664\\n *\\n * Convert it to a binary representation and encode it as an 'extended Hamming\\n * code'. Eg: Value 8 is expressed in binary as '1000', which will be encoded\\n * with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The\\n * encoding of 8 is 11110000. As another example, '10101' (Value 21) will result\\n * into (pppdpdddpd) '1001101011'.\\n *\\n * The answer should be given as a string containing only 1s and 0s.\\n *\\n * NOTE: the endianness of the data bits is reversed in relation to the\\n *       endianness of the parity bits.\\n *\\n * NOTE: The bit at index zero is the overall parity bit, this should be set\\n *       last.\\n *\\n * NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which\\n *         explains the 'rule' of encoding, including the first index parity bit\\n *         mentioned in the previous note.\\n *\\n * Extra rule for encoding:\\n * There should be no leading zeros in the 'data bit' section\\n */\\n\",\"filename\":\"contracts/hamming-codes-integer-to-encoded-binary.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-iv.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader IV\\n *\\n * You are given the following array with two elements:\\n *\\n * [9, [164,113,142,36,159,53,111,154,6,61,134,22,195,142,7,39,190,28,112,140,17,156,88,78,88]]\\n *\\n * The first element is an integer k. The second element is an array of stock\\n * prices (which are numbers) where the i-th element represents the stock price\\n * on day i.\\n *\\n * Determine the maximum possible profit you can earn using at most k\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you can buy it again.\\n *\\n * If no profit can be made, then the answer should be 0.\\n */\\n\",\"filename\":\"contracts/algorithmic-stock-trader-iv.js\",\"server\":\"home\"}}],[\"manage-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\n/**\\n * Manages buying/selling stocks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const stocks = getStocks(ns);\\n  const servers = getServers(ns);\\n  const hostnameToServerMap = {};\\n  for (const server of servers) {\\n    hostnameToServerMap[server.hostname] = server;\\n  }\\n  const commission = ns.stock.getConstants().StockMarketCommission;\\n\\n  while (true) {\\n    logStocks(ns, stocks);\\n\\n    for (const stock of stocks) {\\n      const position = getPosition(ns, stock.symbol);\\n      const askPrice = ns.stock.getAskPrice(stock.symbol);\\n\\n      // Sell longs.\\n      if (\\n        position.longs > 0 &&\\n        askPrice * position.longs >\\n          position.longPrice * position.longs + commission\\n      ) {\\n        ns.stock.sellStock(stock.symbol, position.longs);\\n      }\\n\\n      // Buy longs.\\n      if (stock.server) {\\n        const serverMoneyAvailable = ns.getServerMoneyAvailable(stock.server);\\n        const serverMaxMoney = hostnameToServerMap[stock.server].maxMoney;\\n        if (serverMoneyAvailable < serverMaxMoney / 2) buyLongs(ns, stock);\\n      }\\n      if (\\n        ns.stock.has4SDataTIXAPI() &&\\n        ns.stock.getForecast(stock.symbol) > 0.5\\n      ) {\\n        buyLongs(ns, stock);\\n      }\\n    }\\n\\n    await ns.stock.nextUpdate();\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/stocks').Stock} stock\\n */\\nfunction buyLongs(ns, stock) {\\n  const sharesToBuy = Math.min(\\n    stock.maxShares - getPosition(ns, stock.symbol).longs,\\n    Math.floor(\\n      (ns.getServerMoneyAvailable(HOME_HOSTNAME) / 2 -\\n        ns.stock.getConstants().StockMarketCommission) /\\n        ns.stock.getAskPrice(stock.symbol)\\n    )\\n  );\\n  ns.stock.buyStock(stock.symbol, sharesToBuy);\\n}\\n\\n/**\\n * @typedef Position\\n * @property {number} longs\\n * @property {number} longPrice\\n * @property {number} shorts\\n * @property {number} shortPrice\\n *\\n * @param {NS} ns\\n * @param {string} symbol\\n * @returns {Position}\\n */\\nfunction getPosition(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  return {\\n    longs: position[0],\\n    longPrice: position[1],\\n    shorts: position[2],\\n    shortPrice: position[3],\\n  };\\n}\\n\\n/**\\n * Logs stock data to --tail.\\n *\\n * @param {NS} ns\\n * @param {import('database/stocks').Stock[]} stocks\\n */\\nfunction logStocks(ns, stocks) {\\n  ns.clearLog();\\n\\n  stocks.sort(\\n    (stock1, stock2) =>\\n      getPosition(ns, stock2.symbol).longs -\\n      getPosition(ns, stock1.symbol).longs\\n  );\\n\\n  const table = { rows: [] };\\n  for (const stock of stocks) {\\n    const position = getPosition(ns, stock.symbol);\\n    const row = {\\n      cells: [\\n        {\\n          column: { name: 'Symbol', style: {} },\\n          content: stock.symbol,\\n        },\\n        {\\n          column: { name: 'Organization', style: {} },\\n          content: stock.organization,\\n        },\\n        {\\n          column: { name: 'Server', style: {} },\\n          content: stock.server,\\n        },\\n        {\\n          column: { name: 'Longs', style: { textAlign: 'right' } },\\n          content:\\n            position.longs === 0 ? '-' : ns.formatNumber(position.longs, 0),\\n        },\\n        {\\n          column: { name: 'Avg. Long Price', style: { textAlign: 'right' } },\\n          content:\\n            position.longs === 0 ? '-' : formatMoney(ns, position.longPrice),\\n        },\\n        {\\n          column: { name: 'Ask Price', style: { textAlign: 'right' } },\\n          content: formatMoney(ns, ns.stock.getAskPrice(stock.symbol)),\\n        },\\n        {\\n          column: { name: 'Shorts', style: { textAlign: 'right' } },\\n          content:\\n            position.shorts === 0 ? '-' : ns.formatNumber(position.shorts, 0),\\n        },\\n        {\\n          column: { name: 'Avg. Short Price', style: { textAlign: 'right' } },\\n          content:\\n            position.shorts === 0 ? '-' : formatMoney(ns, position.shortPrice),\\n        },\\n        {\\n          column: { name: 'Max Shares', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(stock.maxShares, 0),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-stocks.js\",\"server\":\"home\"}}],[\"database/stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\n\\nconst STOCKS_FILENAME = 'database/stocks.txt';\\n\\n/**\\n * @typedef Stock\\n * @property {string} symbol\\n * @property {string} organization\\n * @property {string} server\\n * @property {number} maxShares\\n */\\n\\n/**\\n * Writes all stock symbols to file.\\n *\\n * @param {NS} ns\\n */\\nexport function writeStocks(ns) {\\n  const servers = getServers(ns);\\n  const organizationToServerMap = {};\\n  for (const server of servers) {\\n    organizationToServerMap[server.organization] = server.hostname;\\n  }\\n\\n  const stocks = ns.stock.getSymbols().map(symbol => {\\n    const organization = ns.stock.getOrganization(symbol);\\n    return {\\n      symbol: symbol,\\n      organization: organization,\\n      server: organizationToServerMap[organization],\\n      maxShares: ns.stock.getMaxShares(symbol),\\n    };\\n  });\\n  ns.write(STOCKS_FILENAME, JSON.stringify(stocks), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Stock[]}\\n */\\nexport function getStocks(ns) {\\n  return JSON.parse(ns.read(STOCKS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/stocks.js\",\"server\":\"home\"}}],[\"get-net-worth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\n/**\\n * Get net worth including stocks.\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const commission = ns.stock.getConstants().StockMarketCommission;\\n  const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n  const moneyInStocks = getStocks(ns)\\n    .map(\\n      stock =>\\n        ns.stock.getAskPrice(stock.symbol) *\\n          ns.stock.getPosition(stock.symbol)[0] -\\n        commission\\n    )\\n    .reduce((a, b) => a + b);\\n  ns.tprintf(`Total ${formatMoney(ns, moneyAvailable + moneyInStocks)}`);\\n  ns.tprintf(`Cash: ${formatMoney(ns, moneyAvailable)}`);\\n  ns.tprintf(`Stocks: ${formatMoney(ns, moneyInStocks)}`);\\n}\\n\",\"filename\":\"get-net-worth.js\",\"server\":\"home\"}}],[\"sell-all-stock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Sell all stock.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.scriptKill('manage-stocks.js', HOME_HOSTNAME);\\n\\n  const symbols = getStocks(ns).map(stock => stock.symbol);\\n\\n  for (const symbol of symbols) {\\n    const position = ns.stock.getPosition(symbol);\\n\\n    // Sell longs.\\n    ns.stock.sellStock(symbol, position[0]);\\n\\n    // Sell shorts.\\n    try {\\n      ns.stock.sellShort(symbol, position[2]);\\n    } catch (_) {}\\n  }\\n}\\n\",\"filename\":\"sell-all-stock.js\",\"server\":\"home\"}}],[\"utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\\n/**\\n * @typedef {@type string[]} Path\\n *\\n * Gets a list of all paths to hosts.\\n *\\n * @param {NS} ns\\n * @param {string} rootHostname\\n * @param {[Path]} path\\n * @returns {Path[]} all paths including home as the first server\\n */\\nexport function getAllPaths(ns, rootHostname, path) {\\n  path = path ?? [];\\n\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== path[path.length - 1]);\\n  if (childrenHostnames.length === 0) return [];\\n\\n  const allPaths = [];\\n  for (const childHostname of childrenHostnames) {\\n    allPaths.push([...path, rootHostname, childHostname]);\\n    allPaths.push(...getAllPaths(ns, childHostname, [...path, rootHostname]));\\n  }\\n  return allPaths;\\n}\\n\",\"filename\":\"utils/servers.js\",\"server\":\"home\"}}],[\"contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order:\\n *\\n *     [\\n *         [25,20,16, 5,39,24,15,41,12,13,27,10]\\n *         [44,26,34,22,19,39,20,28,37,34,43,24]\\n *         [34, 1, 7,36,43,37,44,44, 5,36,49, 7]\\n *         [ 7,24,41,41, 3,44,20,50,31, 6, 9,15]\\n *         [36,13,47,41, 7,41,23, 2, 4,45,40,12]\\n *         [31,43,21,14,30,47,14, 6,43,49,25,12]\\n *         [47,40,25,46,13,39,41,48,46,45,34,25]\\n *         [22,26,29,24,24,38,40,30,13,38,34,46]\\n *         [47,34,17,16,36,16,24,27,16,50,13, 9]\\n *         [10,10,13,26,14,17,36,14,49,50,25,11]\\n *         [11,49, 7,25,43, 9, 2,42, 7,12,25,25]\\n *         [25,16,24,17,31,31,45,22, 9, 7,35,39]\\n *     ]\\n *\\n * Here is an example of what spiral order should be:\\n *\\n *     [\\n *         [1, 2, 3]\\n *         [4, 5, 6]\\n *         [7, 8, 9]\\n *     ]\\n *\\n * Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\n *\\n * Note that the matrix will not always be square:\\n *\\n *     [\\n *         [1,  2,  3,  4]\\n *         [5,  6,  7,  8]\\n *         [9, 10, 11, 12]\\n *     ]\\n *\\n * Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\n *\\n * @param {number[][]} matrix\\n * @returns {number[]}\\n */\\nexport default function spiralizeMatrix(matrix) {\\n  const elements = [];\\n  const totalElementCount = matrix.length * matrix[0].length;\\n\\n  let [x, y] = [0, 0];\\n  let direction = Direction.Right;\\n  do {\\n    if (isValidPosition(x, y, matrix)) {\\n      elements.push(matrix[y][x]);\\n      matrix[y][x] = null;\\n    }\\n\\n    switch (direction) {\\n      case Direction.Right:\\n        if (isValidPosition(x + 1, y, matrix)) {\\n          x++;\\n        } else {\\n          direction = Direction.Down;\\n        }\\n        break;\\n      case Direction.Down:\\n        if (isValidPosition(x, y + 1, matrix)) {\\n          y++;\\n        } else {\\n          direction = Direction.Left;\\n        }\\n        break;\\n      case Direction.Left:\\n        if (isValidPosition(x - 1, y, matrix)) {\\n          x--;\\n        } else {\\n          direction = Direction.Up;\\n        }\\n        break;\\n      case Direction.Up:\\n        if (isValidPosition(x, y - 1, matrix)) {\\n          y--;\\n        } else {\\n          direction = Direction.Right;\\n        }\\n        break;\\n    }\\n  } while (elements.length < totalElementCount);\\n\\n  return elements;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} matrix\\n * @returns\\n */\\nfunction isValidPosition(x, y, matrix) {\\n  return (\\n    x >= 0 &&\\n    y >= 0 &&\\n    y < matrix.length &&\\n    x < matrix[y].length &&\\n    matrix[y][x] !== null\\n  );\\n}\\n\\nconst Direction = Object.freeze({\\n  Right: Symbol('Right'),\\n  Down: Symbol('Down'),\\n  Left: Symbol('Left'),\\n  Up: Symbol('Up'),\\n});\\n\",\"filename\":\"contracts/spiralize-matrix.js\",\"server\":\"home\"}}],[\"utils/colors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"class HSLA {\\n  /**\\n   * @param {number} h hue [0, 360]\\n   * @param {number} s saturation [0, 100]\\n   * @param {number} l luminosity [0, 100]\\n   * @param {[number]} a alpha [0.0, 1.0]\\n   */\\n  constructor(h, s, l, a) {\\n    this.h = h;\\n    this.s = s;\\n    this.l = l;\\n    this.a = a ?? 1;\\n  }\\n\\n  toString() {\\n    return `hsla(${this.h}, ${this.s}%, ${this.l}%, ${this.a})`;\\n  }\\n}\\n\\nclass RGBA {\\n  /**\\n   * @param {number} r [0, 255]\\n   * @param {number} g [0, 255]\\n   * @param {number} b [0, 255]\\n   * @param {[number]} a alpha [0.0, 1.0]\\n   */\\n  constructor(r, g, b, a) {\\n    this.r = r;\\n    this.g = g;\\n    this.b = b;\\n    this.a = a ?? 1;\\n  }\\n\\n  toString() {\\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\\n  }\\n}\\n\\n/**\\n * Creates a random color based on the UI theme and a given string (such as a\\n * server name).\\n *\\n * @param {NS} ns\\n * @param {string} str\\n * @returns {string} color that can be used in CSS\\n */\\nexport function createColorForString(ns, str) {\\n  const primaryHsla = hexToHsla(ns.ui.getTheme().primary);\\n  const seed =\\n    str\\n      .split('')\\n      .map(character => character.charCodeAt(0))\\n      .reduce((a, b) => a + b) *\\n    (str.match(/\\\\d/g) ?? [str.length])\\n      .map(number => parseInt(number))\\n      .reduce((a, b) => a + b);\\n\\n  // Generate hue.\\n  const hue = seed % 360;\\n\\n  // Generate saturation.\\n  const minSaturation = Math.max(0, primaryHsla.s - 50);\\n  const maxSaturation = Math.min(100, primaryHsla.s + 50);\\n  const saturation =\\n    ((seed % 100) / 100) * (maxSaturation - minSaturation) + minSaturation;\\n\\n  // Generate luminosity.\\n  const minLuminosity = Math.max(0, primaryHsla.l - 10);\\n  const maxLuminosity = Math.min(100, primaryHsla.l + 10);\\n  const luminosity =\\n    ((seed % 100) / 100) * (maxLuminosity - minLuminosity) + minLuminosity;\\n\\n  return new HSLA(hue, saturation, luminosity);\\n}\\n\\n/**\\n * @param {string} hex (e.g. #000000 or with alpha #FFFFFF33)\\n * @returns {RGBA}\\n */\\nfunction hexToRgba(hex) {\\n  hex = hex.replace('#', '');\\n\\n  // Expand any shorted hex values (e.g. 000 or with alpha FFF3).\\n  if (hex.length <= 4) {\\n    hex = hex\\n      .split('')\\n      .map(part => part + part)\\n      .join('');\\n  }\\n\\n  // Add alpha if it doesn't exist.\\n  if (hex.length === 6) hex += 'FF';\\n\\n  return new RGBA(\\n    parseInt(hex.substring(0, 2), 16),\\n    parseInt(hex.substring(2, 4), 16),\\n    parseInt(hex.substring(4, 6), 16),\\n    Math.round((parseInt(hex.substring(6, 8), 16) / 255) * 100) / 100\\n  );\\n}\\n\\n/**\\n * @param {string} hex (e.g. #000000 or with alpha #FFFFFF33)\\n * @returns {HSLA}\\n */\\nfunction hexToHsla(hex) {\\n  return rgbaToHsla(hexToRgba(hex));\\n}\\n\\n/**\\n * @param {RGBA} rgba\\n * @returns {HSLA}\\n */\\nfunction rgbaToHsla(rgba) {\\n  // Make r, g, and b fractions of 1.\\n  const [r, g, b] = [rgba.r, rgba.g, rgba.b].map(part => part / 255);\\n\\n  // Find greatest and smallest channel values.\\n  const [cmin, cmax] = [Math.min, Math.max].map(fn => fn(r, g, b));\\n  const delta = cmax - cmin;\\n\\n  // Calculate hue.\\n  let h;\\n  if (delta === 0) h = 0;\\n  else if (cmax == r) h = ((g - b) / delta) % 6;\\n  else if (cmax == g) h = (b - r) / delta + 2;\\n  else h = (r - g) / delta + 4;\\n  h = Math.round(h * 60);\\n  if (h < 0) h += 360;\\n\\n  // Calculate lightness.\\n  let l = (cmax + cmin) / 2;\\n\\n  // Calculate saturation.\\n  let s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\\n\\n  // Multiply l and s by 100.\\n  s = Math.round(s * 100);\\n  l = Math.round(l * 100);\\n\\n  return new HSLA(h, s, l, rgba.a);\\n}\\n\\n/**\\n * @param {string} hexString (e.g. #FFFFFF)\\n * @returns {string} translucent hex string (e.g. #FFFFFF33)\\n */\\nexport function getDimmedColor(hexString) {\\n  return hexString + '33';\\n}\\n\",\"filename\":\"utils/colors.js\",\"server\":\"home\"}}],[\"contracts/encryption-i-caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Encryption I: Caesar Cipher\\n *\\n * Caesar cipher is one of the simplest encryption technique. It is a type of\\n * substitution cipher in which each letter in the plaintext is replaced by a\\n * letter some fixed number of positions down the alphabet. For example, with a\\n * left shift of 3, D would be replaced by A, E would become B, and A would\\n * become X (because of rotation).\\n *\\n * You are given an array with two elements:\\n *   [\\\"ENTER MOUSE TRASH PASTE DEBUG\\\", 1]\\n * The first element is the plaintext, the second element is the left shift value.\\n *\\n * Return the ciphertext as uppercase string. Spaces remains the same.\\n *\\n * @param {(string | number)[]} input [plain text, left shift value]\\n * @returns {string} cipher\\n */\\nexport default function encryptionICaesarCipher(input) {\\n  const [plainText, leftShift] = input;\\n  const charCodeForA = 'A'.charCodeAt(0);\\n  const charCodeForZ = 'Z'.charCodeAt(0);\\n\\n  // Convert every character in plain text to a char code and shift it by left\\n  // shift value.\\n  /** @type {number[]} */ const shiftedCharCodes = [];\\n  for (let i = 0; i < plainText.length; i++) {\\n    const charCode = plainText.charCodeAt(i);\\n\\n    // Ignore characters that are outside of [A, Z].\\n    if (charCode < charCodeForA || charCode > charCodeForZ) {\\n      shiftedCharCodes.push(charCode);\\n      continue;\\n    }\\n\\n    let shiftedCharCode;\\n    if (charCode - leftShift < charCodeForA) {\\n      shiftedCharCode =\\n        charCodeForZ - (leftShift - (charCode - charCodeForA)) + 1;\\n    } else {\\n      shiftedCharCode = charCode - leftShift;\\n    }\\n    shiftedCharCodes.push(shiftedCharCode);\\n  }\\n\\n  return shiftedCharCodes\\n    .map(charCode => String.fromCharCode(charCode))\\n    .join('');\\n}\\n\",\"filename\":\"contracts/encryption-i-caesar-cipher.js\",\"server\":\"home\"}}],[\"contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of arrays of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * [[7,12],[25,35],[9,15],[22,24],[18,23],[8,17],[11,21],[16,24],[9,10],[4,8]]\\n *\\n * Example:\\n *\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n *\\n * would merge into [[1, 6], [8, 16]].\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @typedef {[number, number]} Interval\\n *\\n * @param {Interval[]} input\\n */\\nexport default function mergeOverlappingIntervals(input) {\\n  const intervals = [...input];\\n\\n  // Sort intervals by first number.\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  let i = 0;\\n  while (i < intervals.length - 1) {\\n    const a = intervals[i];\\n    const b = intervals[i + 1];\\n    if (isOverlapping(a, b)) {\\n      intervals.splice(i, 2, mergeIntervals(a, b));\\n      i = 0;\\n    } else {\\n      i++;\\n    }\\n  }\\n  return intervals;\\n}\\n\\n/**\\n * @param {Interval} a\\n * @param {Interval} b\\n * @returns {boolean} whether the intervals are overlapping\\n */\\nfunction isOverlapping(a, b) {\\n  // If 'a' is inside 'b'.\\n  if (b[0] <= a[0] && a[1] <= b[1]) return true;\\n\\n  // If 'b' is inside 'a'.\\n  if (a[0] <= b[0] && b[1] <= a[1]) return true;\\n\\n  // If 'a' is before 'b'.\\n  if (b[0] <= a[1]) return true;\\n\\n  return false;\\n}\\n\\n/**\\n * @param {Interval} a\\n * @param {Interval} b\\n * @returns {Interval} merged interval\\n */\\nfunction mergeIntervals(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\",\"filename\":\"contracts/merge-overlapping-intervals.js\",\"server\":\"home\"}}],[\"contracts/encryption-ii-vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Encryption II: Vigenère Cipher\\n *\\n * Vigenère cipher is a type of polyalphabetic substitution. It uses the\\n * Vigenère square to encrypt and decrypt plaintext with a keyword.\\n *\\n *   Vigenère square:\\n *          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *        +----------------------------------------------------\\n *      A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *      B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\\n *      C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\n *      D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\n *      E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\n *                 ...\\n *      Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\n *      Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\n *\\n * For encryption each letter of the plaintext is paired with the corresponding\\n * letter of a repeating keyword. For example, the plaintext DASHBOARD is\\n * encrypted with the keyword LINUX:\\n *    Plaintext: DASHBOARD\\n *    Keyword:   LINUXLINU\\n * So, the first letter D is paired with the first letter of the key L.\\n * Therefore, row D and column L of the Vigenère square are used to get the\\n * first cipher letter O. This must be repeated for the whole ciphertext.\\n *\\n * You are given an array with two elements:\\n *   [\\\"POPUPENTERMOUSEINBOXMACRO\\\", \\\"BLOGGER\\\"]\\n * The first element is the plaintext, the second element is the keyword.\\n *\\n * Return the ciphertext as uppercase string.\\n *\\n * @param {[string, string]} input\\n */\\nexport default function encryptionIIVigenereCipher(input) {\\n  const cipher = createCipher();\\n\\n  // Make the keyword match the length of the plain text.\\n  const plainText = input[0];\\n  let keyword = input[1];\\n  while (keyword.length < plainText.length) {\\n    keyword += keyword;\\n  }\\n  keyword = keyword.substring(0, plainText.length);\\n\\n  // Encrypt.\\n  let encryptedMessage = '';\\n  for (let i = 0; i < plainText.length; i++) {\\n    encryptedMessage += cipher[plainText[i]][keyword[i]];\\n  }\\n  return encryptedMessage;\\n}\\n\\n/**\\n * @typedef {Object.<string, Object<string, string>} Cipher\\n *\\n * @returns {Cipher} cipher\\n */\\nfunction createCipher() {\\n  const charCodeAtA = 'A'.charCodeAt(0);\\n  const charCodeAtZ = 'Z'.charCodeAt(0);\\n\\n  const alphabet = [];\\n  for (let i = charCodeAtA; i <= charCodeAtZ; i++) {\\n    alphabet.push(String.fromCharCode(i));\\n  }\\n\\n  const cipher = {};\\n  for (let i = 0; i < alphabet.length; i++) {\\n    cipher[alphabet[i]] = {};\\n    const offsetAlphabet = [...alphabet.slice(i), ...alphabet.slice(0, i)];\\n    for (let j = 0; j < alphabet.length; j++) {\\n      cipher[alphabet[i]][alphabet[j]] = offsetAlphabet[j];\\n    }\\n  }\\n  return cipher;\\n}\\n\",\"filename\":\"contracts/encryption-ii-vigenere-cipher.js\",\"server\":\"home\"}}],[\"contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * 9,-10,-5,3,-1,7,-3,8,5,9,5,-6,-5,-7,4,3,-4,-6,3,-7,10,-6,3,3,1,1,10,0,-8,2,3,-2,1\\n *\\n * @param {number[]} array\\n * @returns {number} sum\\n */\\nexport default function subarrayWithMaximumSum(array) {\\n  let maxSum;\\n  for (let startIndex = 0; startIndex < array.length; startIndex++) {\\n    for (let endIndex = array.length; endIndex > startIndex; endIndex--) {\\n      const subarray = array.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b, 0);\\n      if (!maxSum || sum > maxSum) maxSum = sum;\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"contracts/subarray-with-maximum-sum.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum-ii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum II\\n *\\n * How many different distinct ways can the number 174 be written as a sum of integers contained in the set:\\n *\\n * [1,2,3,4,5,7,8,9,10,13]?\\n *\\n * You may use each integer in the set zero or more times.\\n *\\n */\\nexport default function totalWaysToSumII() {\\n  const integers = [1, 2, 3, 4, 5, 7, 8, 9, 10, 13];\\n  const sum = 174;\\n\\n  const integerToMaxMultiplier = Object.fromEntries(\\n    integers.map(integer => [integer, Math.floor(sum / integer)])\\n  );\\n\\n  for (let i = 0; i < integers.length; i++) {\\n    for ()\\n  }\\n\\n  console.log(integerToMaxMultiplier);\\n}\\n\\ntotalWaysToSumII();\\n\",\"filename\":\"contracts/total-ways-to-sum-ii.js\",\"server\":\"home\"}}],[\"connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Connects to a server given in the argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const server = getServers(ns).find(server => server.hostname === ns.args[0]);\\n  const commands = [\\n    server.path.map(hostname => `connect ${hostname}`).join('; '),\\n  ];\\n  await executeTerminalCommand(ns, ...commands);\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"connect.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGangTasks } from 'database/gang-tasks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\nconst POTENTIAL_GANG_MEMBER_NAMES = [\\n  'Abyss',\\n  'Beast',\\n  'Bullet',\\n  'Catalyst',\\n  'Cipher',\\n  'Cobra',\\n  'Echo',\\n  'Eclipse',\\n  'Enigma',\\n  'Frost',\\n  'Ghost',\\n  'Havoc',\\n  'Haze',\\n  'Inferno',\\n  'Obsidian',\\n  'Omega',\\n  'Phantom',\\n  'Phoenix',\\n  'Razor',\\n  'Renegade',\\n  'Riptide',\\n  'Scorpion',\\n  'Shadow',\\n  'Spike',\\n  'Storm',\\n  'Tempest',\\n  'Thunder',\\n  'Venom',\\n  'Viper',\\n  'Vortex',\\n];\\n\\nconst EQUIPMENT_NAMES = [\\n  'Baseball Bat',\\n  'Katana',\\n  'Glock 18C',\\n  'P90C',\\n  'Steyr AUG',\\n  'AK-47',\\n  'M15A10 Assault Rifle',\\n  'AWM Sniper Rifle',\\n  'Bulletproof Vest',\\n  'Full Body Armor',\\n  'Liquid Body Armor',\\n  'Graphene Plating Armor',\\n  'Ford Flex V20',\\n  'ATX1070 Superbike',\\n  'Mercedes-Benz S9001',\\n  'White Ferrari',\\n  'NUKE Rootkit',\\n  'Soulstealer Rootkit',\\n  'Demon Rootkit',\\n  'Hmap Node',\\n  'Jack the Ripper',\\n  'Bionic Arms',\\n  'Bionic Legs',\\n  'Bionic Spine',\\n  'BrachiBlades',\\n  'Nanofiber Weave',\\n  'Synthetic Heart',\\n  'Synfibril Muscle',\\n  'BitWire',\\n  'Neuralstimulator',\\n  'DataJack',\\n  'Graphene Bone Lacings',\\n];\\n\\nconst WANTED_PENALTY_THRESHOLD = 0.99;\\n\\n/**\\n * Manages gang members.\\n *\\n * Use arg[0] to override amount of money to spend (e.g. run manage-gang.js 0)\\n * will not spend any money on equipment.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const gangTasks = getGangTasks(ns);\\n\\n  // Get profitable tasks sorted from least difficult to most difficult.\\n  const profitableTasks = gangTasks.filter(task => task.baseMoney > 0);\\n  profitableTasks.sort((task1, task2) => task1.difficulty - task2.difficulty);\\n  const profitableTaskNames = profitableTasks.map(task => task.name);\\n\\n  // Get vigilante justice task which decreases wanted level.\\n  const vigilanteJusticeTask = gangTasks.find(task => task.baseWanted < 0);\\n\\n  const gangMembers = getGangMembers(ns);\\n\\n  while (true) {\\n    log(ns, gangMembers);\\n    let gangInfo = ns.gang.getGangInformation();\\n\\n    // Only engage in territory warfare if wanted penalty is below threshold and\\n    // territory is less than threshold and we have enough power.\\n    const otherGangInfo = ns.gang.getOtherGangInformation();\\n    let maxClashWinChance = 1;\\n    for (const gangName in otherGangInfo) {\\n      if (otherGangInfo[gangName].territory === 0) continue;\\n      const clashChance = ns.gang.getChanceToWinClash(gangName);\\n      maxClashWinChance = Math.max(maxClashWinChance, clashChance);\\n    }\\n    ns.gang.setTerritoryWarfare(\\n      (gangInfo.wantedPenalty >= WANTED_PENALTY_THRESHOLD &&\\n        gangInfo.territory < 0.5 &&\\n        maxClashWinChance > 0.5) ||\\n        (gangInfo.territory < 1 && maxClashWinChance > 0.9)\\n    );\\n\\n    // Recruit if possible.\\n    const recruit = recruitGangMember(ns);\\n    if (recruit) gangMembers.push(recruit);\\n\\n    gangInfo = ns.gang.getGangInformation();\\n    for (const gangMember of gangMembers) {\\n      // Ascend if possible.\\n      const potentialAscensionResult = ns.gang.getAscensionResult(\\n        gangMember.name\\n      );\\n      if (potentialAscensionResult) {\\n        // Only ascend if any stat multiplier is >= 2.\\n        if (\\n          [\\n            potentialAscensionResult.agi,\\n            potentialAscensionResult.cha,\\n            potentialAscensionResult.def,\\n            potentialAscensionResult.dex,\\n            potentialAscensionResult.hack,\\n            potentialAscensionResult.str,\\n          ].filter(multiplier => multiplier >= 2).length > 0\\n        ) {\\n          const ascended = ns.gang.ascendMember(gangMember.name);\\n          if (ascended) ns.toast(`${gangMember.name} has ascended in gang`);\\n        }\\n      }\\n\\n      // Upgrade equipment.\\n      if (ns.args.length === 0 || ns.args[0] !== 0) {\\n        for (const equipmentName of EQUIPMENT_NAMES) {\\n          const moneyAvailable =\\n            ns.args[0] || ns.getServerMoneyAvailable(HOME_HOSTNAME) / 4;\\n          if (ns.gang.getEquipmentCost(equipmentName) < moneyAvailable) {\\n            ns.gang.purchaseEquipment(gangMember.name, equipmentName);\\n          }\\n        }\\n      }\\n\\n      if (gangInfo.territoryClashChance > 0) {\\n        ns.gang.setMemberTask(gangMember.name, 'Territory Warfare');\\n        continue;\\n      }\\n\\n      // If wanted level is too high, then vigilante justice.\\n      if (\\n        gangInfo.wantedLevel > 1 &&\\n        (gangInfo.wantedPenalty < WANTED_PENALTY_THRESHOLD ||\\n          (gangMember.task === vigilanteJusticeTask.name &&\\n            gangInfo.wantedPenalty < 0))\\n      ) {\\n        ns.gang.setMemberTask(gangMember.name, vigilanteJusticeTask.name);\\n        continue;\\n      }\\n\\n      // Upgrade to most profitable task.\\n      const taskNameToMoneyGainMap = {};\\n      for (const taskName of profitableTaskNames) {\\n        ns.gang.setMemberTask(gangMember.name, taskName);\\n        taskNameToMoneyGainMap[taskName] = ns.gang.getMemberInformation(\\n          gangMember.name\\n        ).moneyGain;\\n      }\\n      const mostProfitableTask = Object.entries(taskNameToMoneyGainMap).sort(\\n        (a, b) => b[1] - a[1]\\n      )[0];\\n      if (mostProfitableTask[1] < 1000) {\\n        // No profitable tasks will gain enough money, so go back to training.\\n        ns.gang.setMemberTask(gangMember.name, 'Train Combat');\\n      } else {\\n        ns.gang.setMemberTask(gangMember.name, mostProfitableTask[0]);\\n      }\\n    }\\n\\n    // If we're not engaging in territory warfare, have the member with the\\n    // least profit work on Territory Warfare.\\n    if (gangInfo.territoryClashChance === 0) {\\n      let gangMemberWithLeastProfit, leastProfit;\\n      for (const gangMember of gangMembers) {\\n        const profit = ns.gang.getMemberInformation(gangMember.name).moneyGain;\\n        if (profit === 0) continue;\\n        if (!leastProfit || profit < leastProfit) {\\n          gangMemberWithLeastProfit = gangMember;\\n          leastProfit = profit;\\n        }\\n      }\\n      if (gangMemberWithLeastProfit) {\\n        ns.gang.setMemberTask(\\n          gangMemberWithLeastProfit.name,\\n          'Territory Warfare'\\n        );\\n      }\\n    }\\n\\n    await ns.gang.nextUpdate();\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {GangMember[]} gangMembers\\n */\\nfunction log(ns, gangMembers) {\\n  ns.clearLog();\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const gangMember of gangMembers) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Name', style: {} },\\n          content: gangMember.name,\\n        },\\n        {\\n          column: { name: 'Task', style: {} },\\n          content: gangMember.task,\\n        },\\n        {\\n          column: { name: 'Hack', style: { textAlign: 'right' } },\\n          content: gangMember.hack,\\n        },\\n        {\\n          column: { name: 'Str', style: { textAlign: 'right' } },\\n          content: gangMember.str,\\n        },\\n        {\\n          column: { name: 'Def', style: { textAlign: 'right' } },\\n          content: gangMember.def,\\n        },\\n        {\\n          column: { name: 'Dex', style: { textAlign: 'right' } },\\n          content: gangMember.dex,\\n        },\\n        {\\n          column: { name: 'Agi', style: { textAlign: 'right' } },\\n          content: gangMember.agi,\\n        },\\n        {\\n          column: { name: 'Cha', style: { textAlign: 'right' } },\\n          content: gangMember.cha,\\n        },\\n        {\\n          column: { name: 'Money Gain', style: { textAlign: 'right' } },\\n          content: formatMoney(ns, gangMember.moneyGain),\\n        },\\n        {\\n          column: { name: 'Wanted Level Gain', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(gangMember.wantedLevelGain),\\n        },\\n        {\\n          column: { name: 'Respect Gain', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(gangMember.respectGain),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  printTable(ns, table);\\n}\\n\\n/**\\n * @typedef GangMember\\n * @property {string} name\\n * @property {string} task\\n * @property {number} earnedRespect\\n * @property {number} hack\\n * @property {number} str\\n * @property {number} def\\n * @property {number} dex\\n * @property {number} agi\\n * @property {number} cha\\n * @property {number} hack_exp\\n * @property {number} str_exp\\n * @property {number} def_exp\\n * @property {number} dex_exp\\n * @property {number} agi_exp\\n * @property {number} cha_exp\\n * @property {number} hack_mult\\n * @property {number} str_mult\\n * @property {number} def_mult\\n * @property {number} dex_mult\\n * @property {number} agi_mult\\n * @property {number} cha_mult\\n * @property {number} hack_asc_mult\\n * @property {number} str_asc_mult\\n * @property {number} def_asc_mult\\n * @property {number} dex_asc_mult\\n * @property {number} agi_asc_mult\\n * @property {number} cha_asc_mult\\n * @property {number} hack_asc_points\\n * @property {number} str_asc_points\\n * @property {number} def_asc_points\\n * @property {number} dex_asc_points\\n * @property {number} agi_asc_points\\n * @property {number} cha_asc_points\\n * @property {string[]} upgrades\\n * @property {string[]} augmentations\\n * @property {number} respectGain\\n * @property {number} wantedLevelGain\\n * @property {number} moneyGain\\n *\\n * @param {NS} ns\\n * @returns {GangMember[]} member information for all gang members\\n */\\nfunction getGangMembers(ns) {\\n  const gangMembers = [];\\n  for (const name of POTENTIAL_GANG_MEMBER_NAMES) {\\n    try {\\n      gangMembers.push(ns.gang.getMemberInformation(name));\\n    } catch (_) {}\\n  }\\n  return gangMembers;\\n}\\n\\n/**\\n * Recruits a gang member and give it a random unassigned name.\\n *\\n * @param {NS} ns\\n * @param {GangMember|null} null if cannot recruit\\n */\\nfunction recruitGangMember(ns) {\\n  if (!ns.gang.canRecruitMember()) return null;\\n\\n  let potentialNameIndex = Math.floor(\\n    Math.random() * POTENTIAL_GANG_MEMBER_NAMES.length\\n  );\\n  while (true) {\\n    const potentialName = POTENTIAL_GANG_MEMBER_NAMES[potentialNameIndex];\\n    const wasSuccessful = ns.gang.recruitMember(potentialName);\\n    if (wasSuccessful) {\\n      ns.toast(`Recruited ${potentialName} to gang`);\\n      return ns.gang.getMemberInformation(potentialName);\\n    }\\n    potentialNameIndex =\\n      (potentialNameIndex + 1) % POTENTIAL_GANG_MEMBER_NAMES.length;\\n  }\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"database/gang-tasks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing gang-tasks.txt */\\n\\nconst GANG_TASKS = [\\n  'Unassigned',\\n  'Mug People',\\n  'Deal Drugs',\\n  'Strongarm Civilians',\\n  'Run a Con',\\n  'Armed Robbery',\\n  'Traffick Illegal Arms',\\n  'Threaten & Blackmail',\\n  'Human Trafficking',\\n  'Terrorism',\\n  'Vigilante Justice',\\n  'Train Combat',\\n  'Train Hacking',\\n  'Train Charisma',\\n  'Territory Warfare',\\n];\\n\\nconst GANG_TASKS_FILENAME = 'database/gang-tasks.txt';\\n\\n/**\\n * @param {NS} ns\\n */\\nexport function writeGangTasks(ns) {\\n  const gangTasks = GANG_TASKS.map(task => ns.gang.getTaskStats(task));\\n  ns.write(GANG_TASKS_FILENAME, JSON.stringify(gangTasks), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {import(\\\"../../NetscriptDefinitions\\\").GangTaskStats[]}\\n */\\nexport function getGangTasks(ns) {\\n  return JSON.parse(ns.read(GANG_TASKS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/gang-tasks.js\",\"server\":\"home\"}}],[\"contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the string:\\n *\\n * 101168721\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * Examples:\\n *\\n * 25525511135 -> [\\\"255.255.11.135\\\", \\\"255.255.111.35\\\"]\\n * 1938718066 -> [\\\"193.87.180.66\\\"]\\n *\\n * @param {string} digits\\n */\\nexport default function generateIPAddresses(digits) {\\n  // IP Address consists of [A, B, C, D] where each part >=0 && <= 255.\\n  const ipAddresses = [];\\n\\n  const possibleAs = getValidParts(digits.substring(0, 3));\\n\\n  for (const a of possibleAs) {\\n    const possibleBs = getValidParts(digits.substring(a.length, a.length + 3));\\n\\n    for (const b of possibleBs) {\\n      const possibleCs = getValidParts(\\n        digits.substring(a.length + b.length, a.length + b.length + 3)\\n      );\\n\\n      for (const c of possibleCs) {\\n        const d = digits.substring(a.length + b.length + c.length);\\n        if (d.length > 3) continue;\\n        if (d.startsWith('0') && d.length > 1) continue;\\n        if (parseInt(d) > 255) continue;\\n\\n        ipAddresses.push([a, b, c, d].join('.'));\\n      }\\n    }\\n  }\\n\\n  return ipAddresses;\\n}\\n\\n/**\\n *\\n * @param {string} digits with length <= 3\\n * @returns {string[]} parts\\n */\\nfunction getValidParts(digits) {\\n  if (digits.startsWith('0')) return ['0'];\\n  const parts = [digits.substring(0, 1), digits.substring(0, 2)];\\n  if (digits.length === 3 && parseInt(digits) <= 255) parts.push(digits);\\n  return parts;\\n}\\n\",\"filename\":\"contracts/generate-ip-addresses.js\",\"server\":\"home\"}}],[\"contracts/compression-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\nCompression I: RLE Compression\\nYou are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n\\n\\nRun-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\n\\nYou are given the following input string:\\n    4oo55555555555mTTmmWWWWWOOlxWWggHHOll55O880000000000000kkkkkkkkkJJJJJ\\nEncode it using run-length encoding with the minimum possible output length.\\n\\nExamples:\\n    aaaaabccc            ->  5a1b3c\\n    aAaAaA               ->  1a1A1a1A1a1A\\n    111112333            ->  511233\\n    zzzzzzzzzzzzzzzzzzz  ->  9z9z1z  (or 9z8z2z, etc.)\\n\",\"filename\":\"contracts/compression-i.js\",\"server\":\"home\"}}],[\"contracts/compression-i-rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression I: RLE Compression\\n *\\n * Run-length encoding (RLE) is a data compression technique which encodes data\\n * as a series of runs of a repeated single character. Runs are encoded as a\\n * length, followed by the character itself. Lengths are encoded as a single\\n * ASCII digit; runs of 10 characters or more are encoded by splitting them into\\n * multiple runs.\\n *\\n * You are given the following input string:\\n *     4oo55555555555mTTmmWWWWWOOlxWWggHHOll55O880000000000000kkkkkkkkkJJJJJ\\n * Encode it using run-length encoding with the minimum possible output length.\\n *\\n * Examples:\\n *     aaaaabccc            ->  5a1b3c\\n *     aAaAaA               ->  1a1A1a1A1a1A\\n *     111112333            ->  511233\\n *     zzzzzzzzzzzzzzzzzzz  ->  9z9z1z  (or 9z8z2z, etc.)\\n *\\n * @param {string} input\\n */\\nexport default function compressionIRLECompression(input) {\\n  let compressed = '';\\n  let currentLetter, currentCount;\\n  for (let i = 0; i < input.length; i++) {\\n    const letter = input.charAt(i);\\n\\n    if (i === 0) {\\n      currentLetter = letter;\\n      currentCount = 1;\\n      continue;\\n    }\\n\\n    if (currentLetter !== letter || currentCount === 9) {\\n      compressed += `${currentCount}${currentLetter}`;\\n      currentLetter = letter;\\n      currentCount = 1;\\n      continue;\\n    }\\n\\n    currentCount++;\\n  }\\n  compressed += `${currentCount}${currentLetter}`;\\n  return compressed;\\n}\\n\",\"filename\":\"contracts/compression-i-rle-compression.js\",\"server\":\"home\"}}],[\"contracts/compression-iii-lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression III: LZ Compression\\n *\\n * Lempel-Ziv (LZ) compression is a data compression technique which encodes\\n * data using references to earlier parts of the data. In this variant of LZ,\\n * data is encoded in two types of chunk. Each chunk begins with a length L,\\n * encoded as a single ASCII digit from 1 to 9, followed by the chunk data,\\n * which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n *\\n * 2. A reference to an earlier part of the uncompressed data. To do this, the\\n *    length is followed by a second ASCII digit X: each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends immediately,\\n * and the next character is the start of a new chunk. The two chunk types\\n * alternate, starting with type 1, and the final chunk may be of either type.\\n *\\n * You are given the following input string:\\n *     s7UqDon67cXj6htLxf121v7q21v7q21v7fvflZ5W1fQufQufQuufQuu\\n * Encode it using Lempel-Ziv encoding with the minimum possible output length.\\n *\\n * Examples (some have other possible encodings of minimal length):\\n *     abracadabra     ->  7abracad47\\n *     mississippi     ->  4miss433ppi\\n *     aAAaAAaAaAA     ->  3aAA53035\\n *     2718281828      ->  627182844\\n *     abcdefghijk     ->  9abcdefghi02jk\\n *     aaaaaaaaaaaa    ->  3aaa91\\n *     aaaaaaaaaaaaa   ->  1a91031\\n *     aaaaaaaaaaaaaa  ->  1a91041\\n *\\n * @param {string} input\\n */\\nexport default function compressionIIILZCompression(input) {}\\n\",\"filename\":\"contracts/compression-iii-lz-compression.js\",\"server\":\"home\"}}],[\"list-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\nimport {\\n  getRamToReserve,\\n  getScriptsCountedTowardsRAMToReserve,\\n} from 'utils/scripts';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Lists all scripts on the home server along with their memory.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const scripts = ns.ls(HOME_HOSTNAME, '.js');\\n  scripts.sort((a, b) => ns.getScriptRam(b) - ns.getScriptRam(a));\\n  const scriptsCountedTowardsRAMToReserve =\\n    getScriptsCountedTowardsRAMToReserve(ns);\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const script of scripts) {\\n    const countedTowardsRAMToReserve =\\n      scriptsCountedTowardsRAMToReserve.includes(script);\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Script Name', style: {} },\\n          content: script,\\n        },\\n        {\\n          column: { name: 'RAM', style: { textAlign: 'right' } },\\n          content: ns.formatRam(ns.getScriptRam(script)),\\n        },\\n        {\\n          column: { name: 'Count towards RAM to reserve', style: {} },\\n          content: countedTowardsRAMToReserve ? 'true' : 'false',\\n        },\\n      ],\\n      style: {\\n        color: countedTowardsRAMToReserve\\n          ? ns.ui.getTheme().success\\n          : ns.ui.getTheme().error,\\n      },\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  tprintTable(ns, table);\\n}\\n\",\"filename\":\"list-scripts.js\",\"server\":\"home\"}}],[\"utils/scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\nexport const HACK_JS = 'hack.js';\\nexport const GROW_JS = 'grow.js';\\nexport const WEAKEN_JS = 'weaken.js';\\nconst UTILS_JS = 'utils.js';\\nconst INIT_JS = 'init.js';\\n\\n/**\\n * @param {NS} ns\\n * @returns {string[]} list of scripts to count towards how much RAM to reserve\\n *          so we can run any script\\n */\\nexport function getScriptsCountedTowardsRAMToReserve(ns) {\\n  const runningScripts = ns.ps(HOME_HOSTNAME).map(process => process.filename);\\n  const scripts = ns\\n    .ls(HOME_HOSTNAME, '.js')\\n    .filter(\\n      script =>\\n        ![HACK_JS, GROW_JS, WEAKEN_JS, UTILS_JS, INIT_JS].includes(script)\\n    )\\n    .filter(script => !script.includes('/'))\\n    .filter(script => !runningScripts.includes(script));\\n  return scripts;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {number} amount of RAM to reserve so that we can run any script\\n */\\nexport function getRamToReserve(ns) {\\n  return Math.max(\\n    ...getScriptsCountedTowardsRAMToReserve(ns).map(script =>\\n      ns.getScriptRam(script)\\n    )\\n  );\\n}\\n\",\"filename\":\"utils/scripts.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.old.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.old-copy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.old-copy.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid..js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid..js\",\"server\":\"home\"}}],[\"contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n *\\n * You are given data, representing a graph. Note that “graph”, as used here,\\n * refers to the field of graph theory, and has no relation to statistics or\\n * plotting.\\n *\\n * The first element of the data represents the number of vertices in the graph.\\n * Each vertex is a unique number between 0 and ${data[0] - 1}. The next element\\n * of the data represents the edges of the graph.\\n *\\n * Two vertices u,v in a graph are said to be adjacent if there exists an edge\\n * [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does\\n * not matter.\\n *\\n * You must construct a 2-coloring of the graph, meaning that you have to assign\\n * each vertex in the graph a “color”, either 0 or 1, such that no two adjacent\\n * vertices have the same color. Submit your answer in the form of an array,\\n * where element i represents the color of vertex i. If it is impossible to\\n * construct a 2-coloring of the given graph, instead submit an empty array.\\n *\\n * Examples:\\n *\\n * Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\n * Output: [0, 0, 1, 1]\\n *\\n * Input: [3, [[0, 1], [0, 2], [1, 2]]]\\n * Output: []\\n *\\n * @typedef {[number, number]} Edge\\n *\\n * @param {[number, Edge[]]} input\\n */\\nexport default function proper2ColoringOfAGraph(input) {\\n  const [vertexCount, edges] = input;\\n  const vertices = Array.from({ length: vertexCount }, (_, i) => new Vertex(i));\\n  for (const edge of edges) {\\n    vertices[edge[0]].adjacentVertexIds.add(edge[1]);\\n    vertices[edge[1]].adjacentVertexIds.add(edge[0]);\\n  }\\n\\n  let wasSuccessful;\\n  do {\\n    const index = vertices.find(vertex => vertex.color === undefined).id;\\n    vertices[index].color = 0;\\n    wasSuccessful = setColors(index, vertices);\\n  } while (\\n    wasSuccessful &&\\n    vertices.find(vertex => vertex.color === undefined)\\n  );\\n\\n  return wasSuccessful ? vertices.map(vertex => vertex.color) : [];\\n}\\n\\n/**\\n * @param {number} currentVertexId\\n * @param {Vertex[]} vertices\\n * @returns {boolean} whether successfully colored all vertices\\n */\\nfunction setColors(currentVertexId, vertices) {\\n  const currentVertex = vertices[currentVertexId];\\n  for (const adjacentVertexId of currentVertex.adjacentVertexIds) {\\n    const adjacentVertex = vertices[adjacentVertexId];\\n    if (adjacentVertex.color === currentVertex.color) return false; // No possible construction.\\n    if (adjacentVertex.color === undefined) {\\n      adjacentVertex.color = currentVertex.color === 0 ? 1 : 0;\\n      if (!setColors(adjacentVertexId, vertices)) return false; // No possible construction.\\n    }\\n  }\\n  return true;\\n}\\n\\nclass Vertex {\\n  /** @param {number} id */\\n  constructor(id) {\\n    this.id = id;\\n    /** @type {Set<number>} */ this.adjacentVertexIds = new Set();\\n    /** @type {(0|1|undefined)} */ this.color = undefined;\\n  }\\n}\\n\",\"filename\":\"contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"home\"}}],[\"contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find All Valid Math Expressions\\n *\\n * You are given a string which contains only digits between 0 and 9 as well as\\n * a target number. Return all possible ways you can add the +, -, and *\\n * operators to the string of digits such that it evaluates to the target number.\\n *\\n * The answer should be provided as an array of strings containing the valid\\n * expressions.\\n *\\n * NOTE: Numbers in an expression cannot have leading 0’s\\n * NOTE: The order of evaluation expects script operator precedence\\n *\\n * Examples:\\n * Input: digits = “123”, target = 6\\n * Output: [1+2+3, 1*2*3]\\n *\\n * Input: digits = “105”, target = 5\\n * Output: [1*0+5, 10-5]\\n *\\n * @param {[string, number]} input\\n * @returns {string[]} valid expressions\\n */\\nexport default function findAllValidMathExpressions(input) {\\n  const [digits, target] = input;\\n  return getExpressions(digits, target, '');\\n}\\n\\nconst operators = ['+', '-', '*'];\\n\\n/**\\n * Gets all possible expressions.\\n *\\n * @param {string} digits\\n * @param {number} target\\n * @param {string} expressionThusFar\\n * @returns {string[]} expressions\\n */\\nfunction getExpressions(digits, target, expressionThusFar) {\\n  if (digits.length === 0) {\\n    return eval(expressionThusFar) === target ? [expressionThusFar] : [];\\n  }\\n  const expressions = [];\\n  for (let i = 1; i <= digits.length; i++) {\\n    const number = digits.substring(0, i);\\n    if (number.length > 1 && number.startsWith(0)) continue;\\n    if (expressionThusFar.length === 0) {\\n      expressions.push(...getExpressions(digits.substring(i), target, number));\\n    } else {\\n      for (const operator of operators) {\\n        expressions.push(\\n          ...getExpressions(\\n            digits.substring(i),\\n            target,\\n            expressionThusFar + operator + number\\n          )\\n        );\\n      }\\n    }\\n  }\\n  return expressions;\\n}\\n\",\"filename\":\"contracts/find-all-valid-math-expressions.js\",\"server\":\"home\"}}],[\"terminal-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Runs the weaken command on the given hostname in the terminal until the\\n * script is stopped.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  // Connect to server.\\n  const server = getServers(ns).find(server => server.hostname === ns.args[0]);\\n  const commands = [\\n    server.path.map(hostname => `connect ${hostname}`).join('; '),\\n  ];\\n\\n  await executeTerminalCommand(ns, ...commands);\\n\\n  while (true) {\\n    // Weaken server.\\n    await executeTerminalCommand(ns, 'weaken');\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"terminal-weaken.js\",\"server\":\"home\"}}],[\"contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *         [4],\\n *        [6,2],\\n *       [8,9,1],\\n *      [5,3,8,6],\\n *     [3,3,6,6,6],\\n *    [1,8,9,3,2,4],\\n *   [9,4,3,3,9,5,2]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} triangle\\n */\\nexport default function minimumPathSumInATriangle(triangle) {\\n  return getMinimumSum(triangle);\\n}\\n\\n/**\\n *\\n * @param {number[][]} triangle\\n * @param {[number]} index\\n * @param {[number]} sumThusFar\\n * @returns {number} minimum sum\\n */\\nfunction getMinimumSum(triangle, index, sumThusFar) {\\n  if (!triangle || triangle.length === 0) return sumThusFar;\\n\\n  const row = triangle[0];\\n  if (row.length === 1) {\\n    return getMinimumSum(triangle.slice(1), 0, row[0]);\\n  }\\n\\n  const sumA = getMinimumSum(triangle.slice(1), index, sumThusFar + row[index]);\\n  const sumB = getMinimumSum(\\n    triangle.slice(1),\\n    index + 1,\\n    sumThusFar + row[index + 1]\\n  );\\n  return Math.min(sumA, sumB);\\n}\\n\",\"filename\":\"contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"home\"}}],[\"monitor-net-worth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\n/**\\n * Monitors net worth.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.moveTail(1000, 200);\\n\\n  while (true) {\\n    ns.clearLog();\\n    const commission = ns.stock.getConstants().StockMarketCommission;\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n    const moneyInStocks = getStocks(ns)\\n      .map(\\n        stock =>\\n          ns.stock.getAskPrice(stock.symbol) *\\n            ns.stock.getPosition(stock.symbol)[0] -\\n          commission\\n      )\\n      .reduce((a, b) => a + b);\\n    ns.tprintf(`Total ${formatMoney(ns, moneyAvailable + moneyInStocks)}`);\\n    ns.tprintf(`Cash: ${formatMoney(ns, moneyAvailable)}`);\\n    ns.tprintf(`Stocks: ${formatMoney(ns, moneyInStocks)}`);\\n    ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-net-worth.js\",\"server\":\"home\"}}],[\"get-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Get karma.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.tprint(ns.heart.break());\\n}\\n\",\"filename\":\"get-karma.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const [rows, columns] = input;\\n  return getPaths(0, 0, new Grid(rows, columns));\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n * 0,1,0,0,0,\\n * 0,0,0,0,0,\\n * 0,0,0,0,1,\\n * 1,0,0,0,0,\\n * 0,0,0,0,0,\\n * 0,0,0,1,0,\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {number[][]} input\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridII(input) {\\n  const rows = input.length;\\n  const columns = input[0].length;\\n  return getPaths(0, 0, new Grid(rows, columns, input));\\n}\\n\\n/**\\n * Gets all possible (can have duplicates) paths from the given position to the\\n * bottom-right corner ({x: columns, y: rows}).\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {Grid} grid\\n * @returns {number} number of paths\\n */\\nfunction getPaths(x, y, grid) {\\n  if (x === grid.columns - 1 && y === grid.rows - 1) return 1;\\n\\n  let paths = 0;\\n\\n  const rightPosition = { x: x + 1, y: y };\\n  if (grid.isValidPosition(rightPosition.x, rightPosition.y)) {\\n    paths += getPaths(rightPosition.x, rightPosition.y, grid);\\n  }\\n\\n  const downPosition = { x: x, y: y + 1 };\\n  if (grid.isValidPosition(downPosition.x, downPosition.y)) {\\n    paths += getPaths(downPosition.x, downPosition.y, grid);\\n  }\\n\\n  return paths;\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number} rows\\n   * @param {number} columns\\n   * @param {[number[][]]} obstacles\\n   */\\n  constructor(rows, columns, obstacles) {\\n    this.rows = rows;\\n    this.columns = columns;\\n    this.obstacles = obstacles;\\n  }\\n\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   * @returns {boolean} whether the position is valid\\n   */\\n  isValidPosition(x, y) {\\n    return (\\n      x >= 0 &&\\n      y >= 0 &&\\n      x < this.columns &&\\n      y < this.rows &&\\n      (this.obstacles ? this.obstacles[y][x] === 0 : true)\\n    );\\n  }\\n}\\n\",\"filename\":\"contracts/unique-paths-in-a-grid.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader.old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Transaction {\\n  constructor(buyDay, sellDay, stockPrices) {\\n    this.buyDay = buyDay;\\n    this.buyPrice = stockPrices[buyDay];\\n\\n    this.sellDay = sellDay;\\n    this.sellPrice = stockPrices[sellDay];\\n\\n    this.profit = this.sellPrice - this.buyPrice;\\n  }\\n\\n  toString() {\\n    return [\\n      `buy day ${this.buyDay} ($${this.buyPrice})`,\\n      `sell day ${this.sellDay} ($${this.sellPrice})`,\\n      `profit $${this.profit}`,\\n    ].join(', ');\\n  }\\n}\\n\\nexport class Permutation {\\n  /**\\n   * @param  {...Transaction} transactions\\n   */\\n  constructor(...transactions) {\\n    this.transactions = transactions;\\n    this.profit = transactions\\n      .map(transaction => transaction.profit)\\n      .reduce((a, b) => a + b);\\n  }\\n\\n  toString() {\\n    return [\\n      '\\\\n{',\\n      `  ${this.transactions.length} transactions, total profit $${this.profit}`,\\n      ...this.transactions.map(transaction => `  ${transaction}`),\\n      '}',\\n    ].join('\\\\n');\\n  }\\n}\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 35,172,130,31,111,79,19,41,125,183,11,39,153,11,19,126,130,22,139,134,54,47,169,138,75\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderI(stockPrices) {\\n  return getMaxProfit(stockPrices, 1);\\n}\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 103,150,154,3,98,150,182,97,41,96,99,1,1,28,66,19,51,4,172,22,199,40,93,33,185,96,158,123,47,76,18,93,103,126,120,92,194,126,97,124,34,86,29,22,73,156,27,18\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  return getMaxProfit(stockPrices);\\n}\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 47,69,73,32,15,167,100,135,5,80,18,192,171,183,152\\n *\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderIII(stockPrices) {\\n  return getMaxProfit(stockPrices, 2);\\n}\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * You are given the following array with two elements:\\n *\\n * [9, [164,113,142,36,159,53,111,154,6,61,134,22,195,142,7,39,190,28,112,140,17,156,88,78,88]]\\n *\\n * The first element is an integer k. The second element is an array of stock\\n * prices (which are numbers) where the i-th element represents the stock price\\n * on day i.\\n *\\n * Determine the maximum possible profit you can earn using at most k\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you can buy it again.\\n *\\n * If no profit can be made, then the answer should be 0.\\n *\\n * @param {(number, number[])[]} input [k, stockPrices]\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderIV(input) {\\n  const [maxTransactions, stockPrices] = input;\\n  return getMaxProfit(stockPrices, maxTransactions);\\n}\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {[number]} maxTransactions\\n */\\nfunction getMaxProfit(stockPrices, maxTransactions) {\\n  const buyDayToPermutationMap = {};\\n  const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    permutations.push(\\n      ...getProfitablePermutation(\\n        buyDay,\\n        stockPrices,\\n        buyDayToPermutationMap,\\n        maxTransactions\\n      )\\n    );\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  console.log(`${permutations[0]}`);\\n  return permutations[0].profit;\\n}\\n\\n/**\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n * @param {Object.<number, Permutation[]>} buyDayToPermutationMap\\n * @param {number} maxTransactions\\n * @returns {Permutation} profitable permutations\\n */\\nfunction getProfitablePermutation(\\n  buyDay,\\n  stockPrices,\\n  buyDayToPermutationMap,\\n  maxTransactions\\n) {\\n  if (buyDay in buyDayToPermutationMap) return buyDayToPermutationMap[buyDay];\\n\\n  const permutations = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const transaction = new Transaction(buyDay, sellDay, stockPrices);\\n    if (transaction.profit <= 0) continue;\\n    permutations.push(new Permutation(transaction));\\n    if (maxTransactions === 1) continue;\\n\\n    for (\\n      let nextBuyDay = sellDay + 1;\\n      nextBuyDay < stockPrices.length - 1;\\n      nextBuyDay++\\n    ) {\\n      const nextBuyDayPermutations = getProfitablePermutation(\\n        nextBuyDay,\\n        stockPrices,\\n        buyDayToPermutationMap,\\n        maxTransactions ? maxTransactions - 1 : maxTransactions\\n      );\\n      if (nextBuyDayPermutations.length === 0) continue;\\n      nextBuyDayPermutations.sort((a, b) => b.profit - a.profit);\\n\\n      // for (const permutation of nextBuyDayPermutations) {\\n      //   permutations.push(\\n      //     new Permutation(transaction, ...permutation.transactions)\\n      //   );\\n      // }\\n\\n      permutations.push(\\n        new Permutation(transaction, ...nextBuyDayPermutations[0].transactions)\\n      );\\n    }\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  buyDayToPermutationMap[buyDay] = permutations;\\n  return permutations;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderIII([\\n    177, 124, 184, 55, 108, 175, 3, 102, 77, 54, 170, 130, 141, 157,\\n  ])\\n);\\n\",\"filename\":\"contracts/algorithmic-stock-trader.old.js\",\"server\":\"home\"}}],[\"manage-corporation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Charter, getCharters } from 'corporation/charter';\\nimport {\\n  CharterMaterial,\\n  PRODUCTION_MATERIAL_NAMES,\\n} from 'corporation/charter-material';\\nimport { getPotentialProductName } from 'corporation/product-names';\\nimport { ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\nconst CITIES = [\\n  'Aevum',\\n  'Chongqing',\\n  'Sector-12',\\n  'New Tokyo',\\n  'Ishima',\\n  'Volhaven',\\n];\\n\\n/**\\n * Manages corporation.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    const charters = getCharters(ns);\\n\\n    manageUpgrades(ns);\\n    expandIndustries(ns);\\n    expandOffices(ns);\\n\\n    manageResearch(ns, charters);\\n    manageWarehouses(ns, charters);\\n    manageEmployees(ns, charters);\\n    hireAdverts(ns, charters);\\n\\n    // manageProductionMaterials(ns, charters);\\n    manageMaterials(ns, charters);\\n    manageProducts(ns, charters);\\n\\n    await ns.corporation.nextUpdate();\\n  }\\n}\\n\\n/**  @param {NS} ns */\\nfunction manageUpgrades(ns) {\\n  const upgradeNames = ns.corporation.getConstants().upgradeNames;\\n  for (const upgradeName of upgradeNames) {\\n    try {\\n      ns.corporation.levelUpgrade(upgradeName);\\n    } catch (_) {}\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction expandIndustries(ns) {\\n  const industryNames = ns.corporation.getConstants().industryNames;\\n  const divisionNames = ns.corporation.getCorporation().divisions;\\n  for (const industryName of industryNames) {\\n    const divisionName = `${industryName} Division`;\\n    if (divisionNames.includes(divisionName)) continue;\\n    try {\\n      ns.corporation.expandIndustry(industryName, divisionName);\\n    } catch (_) {}\\n  }\\n}\\n\\n/** @param {NS} ns */\\nfunction expandOffices(ns) {\\n  const divisionNames = ns.corporation.getCorporation().divisions;\\n  for (const divisionName of divisionNames) {\\n    for (const city of CITIES) {\\n      try {\\n        ns.corporation.expandCity(divisionName, city);\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction hireAdverts(ns, charters) {\\n  for (const charter of charters) {\\n    if (!charter.hasWarehouse) continue;\\n    ns.corporation.hireAdVert(charter.division.name);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageResearch(ns, charters) {\\n  for (const charter of charters) {\\n    if (charter.lockedResearchNames.length === 0) continue;\\n\\n    for (const researchName of charter.lockedResearchNames) {\\n      try {\\n        ns.corporation.research(charter.divisionName, researchName);\\n        ns.toast(`Researched ${researchName} in ${charter}`);\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageWarehouses(ns, charters) {\\n  for (const charter of charters) {\\n    const divisionName = charter.divisionName;\\n    const city = charter.city;\\n    if (charter.warehouse) {\\n      if (charter.warehouse.sizeUsed < charter.warehouse.size * 0.99) continue;\\n      const upgradeCost = ns.corporation.getUpgradeWarehouseCost(\\n        divisionName,\\n        city\\n      );\\n      ns.corporation.upgradeWarehouse(divisionName, city);\\n      const newWarehouse = ns.corporation.getWarehouse(divisionName, city);\\n      if (newWarehouse.size > charter.warehouse.size) {\\n        ns.toast(\\n          `Upgraded warehouse from ${ns.formatNumber(\\n            charter.warehouse.size\\n          )} to ${ns.formatNumber(newWarehouse.size)} for ${formatMoney(\\n            ns,\\n            upgradeCost\\n          )} in ${charter}`,\\n          'success',\\n          ONE_SECOND * 10\\n        );\\n      }\\n    } else {\\n      ns.corporation.purchaseWarehouse(divisionName, city);\\n      if (ns.corporation.hasWarehouse(divisionName, city)) {\\n        ns.toast(\\n          `Purchased warehouse in ${charter}`,\\n          'success',\\n          ONE_SECOND * 10\\n        );\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageEmployees(ns, charters) {\\n  for (const charter of charters) {\\n    const divisionName = charter.divisionName;\\n    const city = charter.city;\\n\\n    // Try to upgrade office size.\\n    ns.corporation.upgradeOfficeSize(divisionName, city, 1);\\n\\n    // Try to hire a new employee.\\n    ns.corporation.hireEmployee(divisionName, city);\\n\\n    // Get necessary job titles sorted from least production to most production.\\n    const necessaryJobTitles = [\\n      ...new Set([\\n        ...(charter.needsResearchers ? ['Research & Development'] : []),\\n        ...(charter.hasWarehouse\\n          ? ['Operations', 'Engineer', 'Business', 'Management']\\n          : ['Research & Development']),\\n      ]),\\n    ];\\n    const employeeProductionByJob = charter.office.employeeProductionByJob;\\n    necessaryJobTitles.sort(\\n      (jobTitle1, jobTitle2) =>\\n        employeeProductionByJob[jobTitle1] - employeeProductionByJob[jobTitle2]\\n    );\\n\\n    // Remove all employees in unnecessary jobs.\\n    const employeeJobs = { ...charter.office.employeeJobs };\\n    for (const jobTitle in employeeJobs) {\\n      if (necessaryJobTitles.includes(jobTitle)) continue;\\n      if (jobTitle === 'Intern' && charter.needsInterns) continue;\\n      if (jobTitle === 'Unassigned') continue;\\n      employeeJobs[jobTitle] = 0;\\n    }\\n\\n    // Assign all unassigned employees.\\n    const jobTitleWithLeastProduction = necessaryJobTitles[0];\\n    employeeJobs[jobTitleWithLeastProduction] += employeeJobs.Unassigned;\\n    employeeJobs.Unassigned = 0;\\n\\n    // Move an employee from the most production job to the least production\\n    // job.\\n    const jobTitleWithMostProduction = necessaryJobTitles.slice(-1)[0];\\n    if (employeeJobs[jobTitleWithMostProduction] > 0) {\\n      employeeJobs[jobTitleWithMostProduction]--;\\n      employeeJobs[jobTitleWithLeastProduction]++;\\n    }\\n\\n    // Move interns around so we don't have too many interns, but enough interns\\n    // to max out energy and morale.\\n    if (charter.needsInterns) {\\n      if (employeeJobs.Intern > charter.office.numEmployees / 3) {\\n        const employeesToMove =\\n          employeeJobs.Intern - Math.floor(charter.office.numEmployees / 3);\\n        employeeJobs.Intern -= employeesToMove;\\n        employeeJobs[jobTitleWithLeastProduction] += employeesToMove;\\n      } else if (\\n        charter.office.avgMorale < charter.office.maxMorale ||\\n        charter.office.avgEnergy < charter.office.maxEnergy\\n      ) {\\n        employeeJobs.Intern++;\\n        for (let i = necessaryJobTitles.length - 1; i >= 0; i--) {\\n          if (employeeJobs[necessaryJobTitles[i]] > 0) {\\n            employeeJobs[necessaryJobTitles[i]]--;\\n            break;\\n          }\\n        }\\n      } else {\\n        employeeJobs.Intern = 0;\\n      }\\n    }\\n\\n    // Assign jobs.\\n    const entries = Object.entries(employeeJobs);\\n    entries.sort((entry1, entry2) => {\\n      const [jobTitle1, employeeCount1] = entry1;\\n      const [jobTitle2, employeeCount2] = entry2;\\n      const oldEmployeeJobs = charter.office.employeeJobs;\\n      const oldEmployeeCount1 = oldEmployeeJobs[jobTitle1];\\n      const oldEmployeeCount2 = oldEmployeeJobs[jobTitle2];\\n      const delta1 = employeeCount1 - oldEmployeeCount1;\\n      const delta2 = employeeCount2 - oldEmployeeCount2;\\n      return delta1 - delta2;\\n    });\\n    for (const entry of entries) {\\n      ns.corporation.setAutoJobAssignment(\\n        divisionName,\\n        city,\\n        entry[0],\\n        entry[1]\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageProductionMaterials(ns, charters) {\\n  const chartersWithWarehouses = charters.filter(\\n    charter => charter.hasWarehouse\\n  );\\n  for (const charter of chartersWithWarehouses) {\\n    const allocatedMaterialStorage = charter.warehouse.size / 2;\\n\\n    // Remove excess production material.\\n    for (const materialName of PRODUCTION_MATERIAL_NAMES) {\\n      const charterMaterial = charter.getCharterMaterial(materialName);\\n\\n      const materialStored = charterMaterial.material.stored;\\n      if (materialStored === 0) continue;\\n\\n      if (materialName !== charter.mostEffectiveProductionMaterialName) {\\n        // Remove all materials that are not the most effective production\\n        // material.\\n        sellMaterial(\\n          ns,\\n          materialName,\\n          materialStored,\\n          charter,\\n          chartersWithWarehouses\\n        );\\n\\n        // Do not continue to buy this material.\\n        ns.corporation.buyMaterial(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          0\\n        );\\n\\n        // Cancel any imports of this material.\\n        cancelImports(ns, materialName, charter, chartersWithWarehouses);\\n        continue;\\n      }\\n\\n      // Remove materials of this type until it only takes up half the warehouse\\n      // space.\\n      if (charterMaterial.spaceTakenUp > allocatedMaterialStorage) {\\n        const amountToSell =\\n          (charterMaterial.spaceTakenUp - allocatedMaterialStorage) /\\n          charterMaterial.materialData.size;\\n        sellMaterial(\\n          ns,\\n          materialName,\\n          amountToSell,\\n          charter,\\n          chartersWithWarehouses\\n        );\\n      }\\n    }\\n\\n    // Add most effective production material.\\n    const materialName = charter.mostEffectiveProductionMaterialName;\\n    const charterMaterial = charter.getCharterMaterial(materialName);\\n    if (charterMaterial.spaceTakenUp < allocatedMaterialStorage) {\\n      const amountToBuy =\\n        (allocatedMaterialStorage - charterMaterial.spaceTakenUp) /\\n        charterMaterial.materialData.size;\\n      buyMaterial(\\n        ns,\\n        materialName,\\n        amountToBuy,\\n        charter,\\n        chartersWithWarehouses,\\n        true\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * Sells material at the most profitable charter.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountToSell\\n * @param {Charter} sourceCharter\\n * @param {Charter[]} charters\\n */\\nfunction sellMaterial(ns, materialName, amountToSell, sourceCharter, charters) {\\n  // Get only the charters that can sell the material to sell sorted from\\n  // highest market price to lowest market price.\\n  const chartersWithMaterial = charters.filter(charter =>\\n    charter.hasCharterMaterial(materialName)\\n  );\\n  chartersWithMaterial.sort((charter1, charter2) => {\\n    const getMarketPrice = (/** @type {Charter} */ charter) =>\\n      charter.getCharterMaterial(materialName).material.marketPrice;\\n    return getMarketPrice(charter2) - getMarketPrice(charter1);\\n  });\\n\\n  // Sell material from the highest market price to lowest market price based on\\n  // the target city's actual sell amount.\\n  for (const targetCharter of chartersWithMaterial) {\\n    if (amountToSell <= 0) break;\\n\\n    const material = targetCharter.getCharterMaterial(materialName).material;\\n\\n    let actualSellAmount = material.actualSellAmount;\\n    if (actualSellAmount === 0) {\\n      // If the actual sell amount is 0, then that might mean that this charter\\n      // has never sold this item before, so sell the max and this will readjust\\n      // in the next tick.\\n      actualSellAmount = amountToSell;\\n    }\\n    if (targetCharter !== sourceCharter) {\\n      // Export only the amount that the target charter can sell.\\n      exportMaterial(\\n        ns,\\n        materialName,\\n        actualSellAmount,\\n        sourceCharter,\\n        targetCharter\\n      );\\n    }\\n\\n    // Set market TA I and II if they're not already set.\\n    try {\\n      ns.corporation.setMaterialMarketTA1(\\n        targetCharter.division.name,\\n        targetCharter.office.city,\\n        materialName,\\n        true\\n      );\\n      ns.corporation.setMaterialMarketTA2(\\n        targetCharter.division.name,\\n        targetCharter.office.city,\\n        materialName,\\n        true\\n      );\\n    } catch (e) {}\\n\\n    // Sell only the amount that the target charter can sell.\\n    ns.corporation.sellMaterial(\\n      targetCharter.division.name,\\n      targetCharter.office.city,\\n      materialName,\\n      actualSellAmount,\\n      'MP'\\n    );\\n\\n    amountToSell -= actualSellAmount;\\n  }\\n}\\n\\n/**\\n * Buys material at the cheapest charter.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountToBuy\\n * @param {Charter} sourceCharter\\n * @param {Charter[]} charters\\n * @param {boolean} [inBulk]\\n *        if set to true, buy one time in bulk. Otherwise, continuously buy\\n */\\nfunction buyMaterial(\\n  ns,\\n  materialName,\\n  amountToBuy,\\n  sourceCharter,\\n  charters,\\n  inBulk\\n) {\\n  const chartersWithMaterial = charters.filter(charter =>\\n    charter.hasCharterMaterial(materialName)\\n  );\\n  const lowestMarketPrice = Math.min(\\n    ...chartersWithMaterial.map(\\n      charter => charter.getCharterMaterial(materialName).material.marketPrice\\n    )\\n  );\\n  const targetCharter = chartersWithMaterial.find(\\n    charter =>\\n      charter.getCharterMaterial(materialName).material.marketPrice ===\\n      lowestMarketPrice\\n  );\\n\\n  // Buy from target charter.\\n  if (inBulk) {\\n    // Only buy the amount that we don't have in the target charter warehouse.\\n    const charterMaterial = targetCharter.getCharterMaterial(materialName);\\n    let actualAmountToBuy = amountToBuy - charterMaterial.material.stored;\\n\\n    // Only buy the amount that we can fit in the warehouse.\\n    const availableSpace =\\n      targetCharter.warehouse.size - targetCharter.warehouse.sizeUsed;\\n    const materialSize = charterMaterial.materialData.size;\\n    actualAmountToBuy = Math.min(\\n      actualAmountToBuy,\\n      availableSpace / materialSize\\n    );\\n\\n    try {\\n      ns.corporation.bulkPurchase(\\n        targetCharter.division.name,\\n        targetCharter.office.city,\\n        materialName,\\n        actualAmountToBuy\\n      );\\n    } catch (e) {\\n      // Probably couldn't afford this.\\n    }\\n  } else {\\n    ns.corporation.buyMaterial(\\n      targetCharter.division.name,\\n      targetCharter.office.city,\\n      materialName,\\n      amountToBuy\\n    );\\n  }\\n\\n  if (targetCharter !== sourceCharter) {\\n    // Export to source charter.\\n    exportMaterial(ns, materialName, amountToBuy, targetCharter, sourceCharter);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountToExport\\n * @param {Charter} sourceCharter charter to export from\\n * @param {Charter} targetCharter charter to import to\\n */\\nfunction exportMaterial(\\n  ns,\\n  materialName,\\n  amountToExport,\\n  sourceCharter,\\n  targetCharter\\n) {\\n  const targetDivision = targetCharter.division.name;\\n  const targetCity = targetCharter.office.city;\\n  const sourceDivision = sourceCharter.division.name;\\n  const sourceCity = sourceCharter.office.city;\\n  ns.corporation.cancelExportMaterial(\\n    sourceDivision,\\n    sourceCity,\\n    targetDivision,\\n    targetCity,\\n    materialName\\n  );\\n  ns.corporation.exportMaterial(\\n    sourceDivision,\\n    sourceCity,\\n    targetDivision,\\n    targetCity,\\n    materialName,\\n    amountToExport\\n  );\\n}\\n\\n/**\\n * Cancel any exports of a material to a city.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {Charter} importCharter charter to cancel exports to\\n * @param {Charter[]} charters\\n */\\nfunction cancelImports(ns, materialName, importCharter, charters) {\\n  for (const charter of charters) {\\n    if (!charter.hasCharterMaterial(materialName)) continue;\\n\\n    const charterMaterial = charter.getCharterMaterial(materialName);\\n    for (const exportOrder of charterMaterial.material.exports) {\\n      if (exportOrder.division !== importCharter.division.name) continue;\\n      if (exportOrder.city !== importCharter.office.city) continue;\\n      ns.corporation.cancelExportMaterial(\\n        charter.division.name,\\n        charter.office.city,\\n        importCharter.division.name,\\n        importCharter.office.city,\\n        materialName\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageMaterials(ns, charters) {\\n  for (const charter of charters) {\\n    if (!charter.warehouse) continue;\\n\\n    const producedCharterMaterials = (\\n      charter.industryData.producedMaterials ?? []\\n    ).map(materialName =>\\n      charter.charterMaterials.find(\\n        charterMaterial => charterMaterial.material.name === materialName\\n      )\\n    );\\n    const producedProducts = charter.division.products.map(productName =>\\n      ns.corporation.getProduct(charter.divisionName, charter.city, productName)\\n    );\\n    const maxProducedAmount = Math.max(\\n      ...[\\n        ...producedCharterMaterials.map(\\n          (/** @type {CharterMaterial} */ charterMaterial) =>\\n            charterMaterial.material.productionAmount\\n        ),\\n        ...producedProducts.map(product => product.productionAmount),\\n      ]\\n    );\\n    for (const materialName in charter.industryData.requiredMaterials ?? {}) {\\n      const amountNeeded =\\n        maxProducedAmount *\\n        charter.industryData.requiredMaterials[materialName];\\n      getMaterialSource(ns, materialName, amountNeeded, charter, charters);\\n    }\\n\\n    for (const materialName of charter.industryData.producedMaterials ?? []) {\\n      try {\\n        ns.corporation.sellMaterial(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          'MAX',\\n          'MP'\\n        );\\n        ns.corporation.setMaterialMarketTA1(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          true\\n        );\\n        ns.corporation.setMaterialMarketTA2(\\n          charter.division.name,\\n          charter.office.city,\\n          materialName,\\n          true\\n        );\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\\n/**\\n * Gets the cheapest but highest quality source of a material and creates\\n * export/import and buy connections.\\n *\\n * @param {NS} ns\\n * @param {import('../NetscriptDefinitions').CorpMaterialName} materialName\\n * @param {number} amountPerCycle\\n * @param {Charter} requestingCharter\\n * @param {Charter[]} charters\\n */\\nfunction getMaterialSource(\\n  ns,\\n  materialName,\\n  amountPerCycle,\\n  requestingCharter,\\n  charters\\n) {\\n  const chartersThatProduceMaterial = [];\\n  const chartersThatSellMaterial = [];\\n  for (const charter of charters) {\\n    if ((charter.industryData.producedMaterials ?? []).includes(materialName)) {\\n      chartersThatProduceMaterial.push(charter);\\n    }\\n    if (\\n      charter.charterMaterials.find(\\n        (/** @type {CharterMaterial} */ charterMaterial) =>\\n          charterMaterial.material.name === materialName\\n      )\\n    ) {\\n      chartersThatSellMaterial.push(charter);\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Charter[]} charters\\n */\\nfunction manageProducts(ns, charters) {\\n  for (const charter of charters) {\\n    if (!charter.industryData.makesProducts) continue;\\n\\n    // Make new products.\\n    const funds = ns.corporation.getCorporation().funds;\\n    const division = ns.corporation.getDivision(charter.divisionName);\\n    if (division.products.length < division.maxProducts) {\\n      const productName = getPotentialProductName(\\n        division.type,\\n        ...division.products\\n      );\\n      ns.corporation.makeProduct(\\n        charter.divisionName,\\n        charter.city,\\n        productName,\\n        Math.floor(funds / 2),\\n        Math.floor(funds / 2)\\n      );\\n    }\\n\\n    // Sell products.\\n    for (const productName of division.products) {\\n      ns.corporation.sellProduct(\\n        charter.divisionName,\\n        charter.city,\\n        productName,\\n        'MAX',\\n        'MP'\\n      );\\n      try {\\n        ns.corporation.setProductMarketTA1(\\n          charter.divisionName,\\n          productName,\\n          true\\n        );\\n        ns.corporation.setProductMarketTA2(\\n          charter.divisionName,\\n          productName,\\n          true\\n        );\\n      } catch (_) {}\\n    }\\n  }\\n}\\n\",\"filename\":\"manage-corporation.js\",\"server\":\"home\"}}],[\"corporation/charter.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  CharterMaterial,\\n  PRODUCTION_MATERIAL_NAMES,\\n} from 'corporation/charter-material';\\n\\n/**\\n * A Charter represents an office of a division (e.g. Aevum of the Agriculture\\n * Division).\\n */\\nexport class Charter {\\n  /**\\n   * @param {NS} ns\\n   * @param {import(\\\"../../NetscriptDefinitions\\\").Division} division\\n   * @param {import(\\\"../../NetscriptDefinitions\\\").Office} office\\n   */\\n  constructor(ns, division, office) {\\n    this.division = division;\\n    this.divisionName = division.name;\\n    this.office = office;\\n    this.city = office.city;\\n    this.industryData = ns.corporation.getIndustryData(division.type);\\n\\n    this.hasWarehouse = ns.corporation.hasWarehouse(\\n      this.divisionName,\\n      this.city\\n    );\\n    this.warehouse = this.hasWarehouse\\n      ? ns.corporation.getWarehouse(division.name, office.city)\\n      : null;\\n\\n    /** Name of all the research that we have no researched yet. */\\n    const constants = ns.corporation.getConstants();\\n    this.lockedResearchNames = (\\n      this.industryData.makesProducts\\n        ? constants.researchNames\\n        : constants.researchNamesBase\\n    ).filter(\\n      researchName => !ns.corporation.hasResearched(division.name, researchName)\\n    );\\n    this.needsResearchers = this.lockedResearchNames.length > 0;\\n    this.needsInterns =\\n      (this.lockedResearchNames.includes('AutoBrew') ||\\n        this.lockedResearchNames.includes('AutoPartyManager')) &&\\n      (office.avgMorale < 100 || office.avgEnergy < 100);\\n\\n    this.charterMaterials = this._getMaterials(ns);\\n    this.mostEffectiveProductionMaterialName =\\n      this._getMostEffectiveProductionMaterialName(ns);\\n  }\\n\\n  /**\\n   * @param {import('../../NetscriptDefinitions').CorpMaterialName} materialName\\n   * @returns {boolean} whether this charter can buy/sell this material.\\n   */\\n  hasCharterMaterial(materialName) {\\n    return (\\n      this.charterMaterials.filter(\\n        charterMaterial => charterMaterial.material.name === materialName\\n      ).length > 0\\n    );\\n  }\\n\\n  /**\\n   * @param {import('../../NetscriptDefinitions').CorpMaterialName} materialName\\n   * @returns {CharterMaterial} material to get\\n   */\\n  getCharterMaterial(materialName) {\\n    if (!this.hasCharterMaterial(materialName)) {\\n      throw `${this} does not have ${materialName}`;\\n    }\\n    return this.charterMaterials.find(\\n      charterMaterial => charterMaterial.material.name === materialName\\n    );\\n  }\\n\\n  /**\\n   * @param {NS} ns\\n   * @returns {CharterMaterial} all materials available to buy/sell\\n   */\\n  _getMaterials(ns) {\\n    if (!this.warehouse) {\\n      return [];\\n    }\\n    const materialNames = [\\n      ...Object.keys(this.industryData.requiredMaterials ?? {}),\\n      ...(this.industryData.producedMaterials || []),\\n      ...PRODUCTION_MATERIAL_NAMES,\\n    ];\\n    return materialNames.map(materialName => {\\n      const material = ns.corporation.getMaterial(\\n        this.divisionName,\\n        this.city,\\n        materialName\\n      );\\n      return new CharterMaterial(ns, material);\\n    });\\n  }\\n\\n  /**\\n   * @param {NS} ns\\n   * @returns {import('corporation/charter-material').ProductionMaterialName}\\n   *          name of the most effective production material\\n   */\\n  _getMostEffectiveProductionMaterialName(ns) {\\n    const materialNameToFactorMap = {\\n      Hardware: this.industryData.hardwareFactor,\\n      Robots: this.industryData.robotFactor,\\n      'AI Cores': this.industryData.aiCoreFactor,\\n      'Real Estate': this.industryData.realEstateFactor,\\n    };\\n    const highestFactor = Math.max(...Object.values(materialNameToFactorMap));\\n    const materialNamesWithHighestFactor = Object.keys(\\n      materialNameToFactorMap\\n    ).filter(\\n      materialName => materialNameToFactorMap[materialName] === highestFactor\\n    );\\n\\n    // If there is only one material, then return that material.\\n    if (materialNamesWithHighestFactor.length === 1) {\\n      return materialNamesWithHighestFactor[0];\\n    }\\n\\n    // Otherwise return the material with the lowest base cost.\\n    materialNamesWithHighestFactor.sort(\\n      (materialName1, materialName2) =>\\n        ns.corporation.getMaterialData(materialName1).baseCost -\\n        ns.corporation.getMaterialData(materialName2).baseCost\\n    );\\n    return materialNamesWithHighestFactor[0];\\n  }\\n\\n  toString() {\\n    return `${this.divisionName} - ${this.city}`;\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Charter[]} all existing charters\\n */\\nexport function getCharters(ns) {\\n  /** @type {Charter[]} */ const charters = [];\\n\\n  const divisions = ns.corporation\\n    .getCorporation()\\n    .divisions.map(divisionName => ns.corporation.getDivision(divisionName));\\n  for (const division of divisions) {\\n    const offices = division.cities.map(city =>\\n      ns.corporation.getOffice(division.name, city)\\n    );\\n    charters.push(...offices.map(office => new Charter(ns, division, office)));\\n  }\\n\\n  return charters;\\n}\\n\",\"filename\":\"corporation/charter.js\",\"server\":\"home\"}}],[\"corporation/charter-material.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {'Hardware' | 'Robots' | 'AI Cores' | 'Real Estate'} ProductionMaterialName\\n */\\n\\n/** @type {ProductionMaterialName} */\\nexport const PRODUCTION_MATERIAL_NAMES = [\\n  'Hardware',\\n  'Robots',\\n  'AI Cores',\\n  'Real Estate',\\n];\\n\\n/** Represents a Material in a Charter warehouse. */\\nexport class CharterMaterial {\\n  /**\\n   * @param {NS} ns\\n   * @param {import(\\\"../../NetscriptDefinitions\\\").Material} material\\n   */\\n  constructor(ns, material) {\\n    this.material = material;\\n    this.materialData = ns.corporation.getMaterialData(material.name);\\n\\n    /** Amount of space this material is taking up in the warehouse. */\\n    this.spaceTakenUp = material.stored * this.materialData.size;\\n  }\\n}\\n\",\"filename\":\"corporation/charter-material.js\",\"server\":\"home\"}}],[\"monitor-corporation-employees.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getCharters } from 'corporation/charter';\\nimport { getDimmedColor } from 'utils/colors';\\nimport { ONE_MINUTE, ONE_SECOND } from 'utils/constants';\\nimport { printTable } from 'utils/table';\\n\\n/**\\n * Monitors the employees in the corporation.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n  ns.tail();\\n\\n  while (true) {\\n    ns.clearLog();\\n    const charters = getCharters(ns);\\n\\n    /** @type {import(\\\"utils/table\\\").Table} */ const table = { rows: [] };\\n    for (const charter of charters) {\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Division', style: { whiteSpace: 'nowrap' } },\\n            content: charter.division.name,\\n          },\\n          {\\n            column: { name: 'City', style: {} },\\n            content: charter.office.city,\\n          },\\n        ],\\n      };\\n\\n      for (const job in charter.office.employeeJobs) {\\n        const employeeCount = charter.office.employeeJobs[job];\\n        const employeeProduction = ns.formatNumber(\\n          charter.office.employeeProductionByJob[job],\\n          2\\n        );\\n        row.cells.push({\\n          column: {\\n            name: job,\\n            style: { textAlign: 'center', whiteSpace: 'nowrap' },\\n          },\\n          content:\\n            employeeCount === 0\\n              ? '-'\\n              : `${employeeCount} (${employeeProduction})`,\\n          style: {\\n            ...(employeeCount === 0 && {\\n              color: getDimmedColor(ns.ui.getTheme().primary),\\n            }),\\n          },\\n        });\\n      }\\n\\n      row.cells.push({\\n        column: { name: '# Employees', style: { textAlign: 'center' } },\\n        content: `${charter.office.numEmployees} / ${charter.office.size}`,\\n      });\\n\\n      table.rows.push(row);\\n    }\\n    printTable(ns, table);\\n\\n    // await ns.corporation.nextUpdate();\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-corporation-employees.js\",\"server\":\"home\"}}],[\"buy-back-corporation-shares.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * Continuously buys back shares from the corporation.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n    const sharesToBuy = Math.min(\\n      Math.floor(\\n        moneyAvailable / (ns.corporation.getCorporation().sharePrice * 1.1)\\n      ),\\n      ns.corporation.getCorporation().totalShares -\\n        ns.corporation.getCorporation().numShares\\n    );\\n    try {\\n      ns.corporation.buyBackShares(sharesToBuy);\\n    } catch (e) {\\n      ns.toast(`${e}`, 'error', 30 * ONE_SECOND);\\n    }\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"buy-back-corporation-shares.js\",\"server\":\"home\"}}],[\"get-crime-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CRIME_TYPES } from 'utils/constants';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Prints out crime stats to the terminal.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  /** @type {import(\\\"utils/table\\\").Table} */ const table = { rows: [] };\\n  for (const crimeType of CRIME_TYPES) {\\n    const stats = ns.singularity.getCrimeStats(crimeType);\\n    const chance = ns.singularity.getCrimeChance(crimeType);\\n\\n    /** @type {import(\\\"utils/table\\\").Row} */ const row = {\\n      cells: [\\n        { column: { name: 'Crime', style: {} }, content: crimeType },\\n        {\\n          column: { name: 'Chance', style: { textAlign: 'center' } },\\n          content: ns.formatPercent(chance),\\n        },\\n        {\\n          column: { name: 'Money', style: { textAlign: 'center' } },\\n          content: formatMoney(ns, stats.money),\\n        },\\n        {\\n          column: { name: 'Time', style: { textAlign: 'center' } },\\n          content: formatTime(ns, stats.time),\\n        },\\n        {\\n          column: { name: 'Avg. Profit / s', style: { textAlign: 'center' } },\\n          content: formatMoney(\\n            ns,\\n            (stats.money * chance) / (stats.time / 1000)\\n          ),\\n        },\\n        {\\n          column: { name: 'Karma', style: { textAlign: 'center' } },\\n          content: stats.karma,\\n        },\\n        {\\n          column: { name: 'Avg. Karma / s', style: { textAlign: 'center' } },\\n          content: ns.formatNumber(\\n            (stats.karma * chance) / (stats.time / 1000)\\n          ),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\",\"filename\":\"get-crime-stats.js\",\"server\":\"home\"}}],[\"corporation/product-names.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const POTENTIAL_RESTAURANT_PRODUCT_NAMES = [\\n  'Savory Haven',\\n  'Urban Bites',\\n  'Gourmet Grove',\\n  'Culinary Canvas',\\n  'Fusion Flavors',\\n  'Taste Treasury',\\n  'Sizzle & Spice',\\n  'Palette Paradise',\\n  'Epicurean Elegance',\\n  'Gastronomy Junction',\\n];\\n\\nconst POTENTIAL_TOBACCO_PRODUCT_NAMES = [\\n  'Sparkle Stix Bliss Buds',\\n  'Fluff Cloud Puff Pods',\\n  'Rainbow Dream Wraps',\\n  'Bubblegum Cloud Ciglets',\\n  'Giggly Grove Tobacco Treats',\\n  'CottonCandy Cigarillos',\\n  'Moonbeam Shisha Swirls',\\n  'Wonder Leaf Whispers',\\n  'Marshmallow Mist Pipes',\\n  'Starry Skies Snuggle Sticks',\\n];\\n\\nconst POTENTIAL_PHARMACEUTICAL_PRODUCT_NAMES = [\\n  'Solivra',\\n  'Zyrron',\\n  'Vectralis',\\n  'Ecliptix',\\n  'Lunarisol',\\n  'Veridox',\\n  'Vortexa',\\n  'Exilith',\\n  'Nebulith',\\n  'Zenolyx',\\n];\\n\\nconst POTENTIAL_COMPUTER_HARDWARE_PRODUCT_NAMES = [\\n  'Quantum Core Processor',\\n  'Blaze Graph Graphics Card',\\n  'Nebula Link Motherboard',\\n  'Turbo Drive SSD',\\n  'Aero Cool Cooling System',\\n  'Titan Sync RAM Modules',\\n  'PhotonX Quantum Mouse',\\n  'Celestial Touch Keyboard',\\n  'Nova Stream Webcam',\\n  'Pulse Force Power Supply',\\n];\\n\\nconst POTENTIAL_ROBOTICS_PRODUCT_NAMES = [\\n  'Roomba Rover',\\n  'Toasty Tech Bot',\\n  'Blender Buddy',\\n  'Iron Innovator',\\n  'Dish Bot Pro',\\n  'Brew Master Bot',\\n  'Cleansweep Crafter',\\n  'Microwave Mate',\\n  'Chores Champion',\\n  'Sizzle-Serve Bot',\\n];\\n\\nconst POTENTIAL_SOFTWARE_PRODUCT_NAMES = [\\n  'Data-Craft Pro',\\n  'Data Forge',\\n  'Logic Loom',\\n  'Infusion Sheets',\\n  'iHarmony',\\n  'Infinity Desk',\\n  'Task Sync',\\n  'Focus Flow',\\n  'Agenda Mate',\\n  'DocHub',\\n];\\n\\nconst POTENTIAL_HEALTHCARE_PRODUCT_NAMES = [\\n  'Heal Tech Relief Patch',\\n  'Vita-Vista Wellness Monitor',\\n  'PulseCare Vitality Tonic',\\n  'NutriGuard Immune Boost',\\n  'BioBalance Energy Caps',\\n  'Revita-Calm Sleep-Aid',\\n  'Meditonic Heart Care',\\n  'Respira-EZ Lung Support',\\n  'Nourish Flow Wellness Fuel',\\n  'Aura Energy Essence',\\n];\\n\\nconst POTENTIAL_REAL_ESTATE_PRODUCT_NAMES = [\\n  'Maplewood Heights',\\n  'Harbor View Gardens',\\n  'Meadowbrook Village',\\n  'Sunflower Grove',\\n  'Riverbend Terrace',\\n  'Tranquil Pines Estates',\\n  'Serenity Springs',\\n  'Crescent Lakeside',\\n  'Willowbrook Commons',\\n  'Radiant Ridge District',\\n];\\n\\n/**\\n * @param {import(\\\"../../NetscriptDefinitions\\\").CorpIndustryName} industry\\n * @param  {...string} blocklist names to avoid\\n * @returns {string} product name\\n */\\nexport function getPotentialProductName(industry, ...blocklist) {\\n  const potentialProductNames = getPotentialProductNames(industry).filter(\\n    productName => !blocklist.includes(productName)\\n  );\\n  return potentialProductNames[\\n    Math.floor(Math.random() * potentialProductNames.length)\\n  ];\\n}\\n\\n/**\\n * @param {import(\\\"../../NetscriptDefinitions\\\").CorpIndustryName} industry\\n * @returns {string[]} list of potential product names\\n */\\nfunction getPotentialProductNames(industry) {\\n  switch (industry) {\\n    case 'Restaurant':\\n      return POTENTIAL_RESTAURANT_PRODUCT_NAMES;\\n    case 'Tobacco':\\n      return POTENTIAL_TOBACCO_PRODUCT_NAMES;\\n    case 'Pharmaceutical':\\n      return POTENTIAL_PHARMACEUTICAL_PRODUCT_NAMES;\\n    case 'Computer Hardware':\\n      return POTENTIAL_COMPUTER_HARDWARE_PRODUCT_NAMES;\\n    case 'Robotics':\\n      return POTENTIAL_ROBOTICS_PRODUCT_NAMES;\\n    case 'Software':\\n      return POTENTIAL_SOFTWARE_PRODUCT_NAMES;\\n    case 'Healthcare':\\n      return POTENTIAL_HEALTHCARE_PRODUCT_NAMES;\\n    case 'Real Estate':\\n      return POTENTIAL_REAL_ESTATE_PRODUCT_NAMES;\\n  }\\n}\\n\",\"filename\":\"corporation/product-names.js\",\"server\":\"home\"}}],[\"exploits/infiltration-helper.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Run this in the console.\\n */\\n\\nconst puzzleNames = ['Say something nice about the guard', 'Enter the Code!'];\\n\\nfunction infiltrationHelper() {\\n  const puzzleName = [...document.getElementsByTagName('h4')].find(h4 =>\\n    puzzleNames.includes(h4.innerText)\\n  );\\n  console.log(puzzleName);\\n  setTimeout(infiltrationHelper(), 1000);\\n}\\ninfiltrationHelper();\\n\",\"filename\":\"exploits/infiltration-helper.js\",\"server\":\"home\"}}],[\"manage-life.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\n\\nconst PROGRAM_NAMES = [\\n  'BruteSSH.exe',\\n  'FTPCrack.exe',\\n  'relaySMTP.exe',\\n  'HTTPWorm.exe',\\n  'SQLInject.exe',\\n];\\n\\n/**\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    // Buy programs from the dark web.\\n    const hasTor = ns.singularity.purchaseTor();\\n    if (hasTor) {\\n      for (const programName of PROGRAM_NAMES) {\\n        const purchaseSuccessful = ns.singularity.purchaseProgram(programName);\\n        if (\\n          purchaseSuccessful &&\\n          ns.scriptRunning('gain-access.js', HOME_HOSTNAME)\\n        ) {\\n          ns.exec('gain-access.js', HOME_HOSTNAME);\\n        }\\n      }\\n    }\\n\\n    // Upgrade home server.\\n    ns.singularity.upgradeHomeRam();\\n    ns.singularity.upgradeHomeCores();\\n\\n    // const crimeType = getMostProfitableCrimeType(ns);\\n    // const companyPosition = getMostProfitableCompanyPosition(ns);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {string} most profitable crime type\\n */\\nfunction getMostProfitableCrimeType(ns) {\\n  function getProfitability(crimeType) {\\n    const crimeStats = ns.singularity.getCrimeStats(crimeType);\\n    return (\\n      (crimeStats.money / crimeStats.time) *\\n      ns.singularity.getCrimeChance(crimeType)\\n    );\\n  }\\n  return CRIME_TYPES.sort(\\n    (crimeStats1, crimeStats2) =>\\n      getProfitability(crimeStats2) - getProfitability(crimeStats1)\\n  )[0];\\n}\\n\\n/**\\n * @typedef CompanyPosition\\n * @property {string} companyName\\n * @property {string} jobTitle\\n *\\n * @param {NS} ns\\n * @returns {CompanyPosition}\\n */\\nfunction getMostProfitableCompanyPosition(ns) {\\n  const eligiblePositions = [];\\n\\n  const skills = ns.getPlayer().skills;\\n  for (const companyName of COMPANY_NAMES) {\\n    const reputation = ns.singularity.getCompanyRep(companyName);\\n    const jobNames = ns.singularity.getCompanyPositions(companyName);\\n    for (const jobName of jobNames) {\\n      const positionInfo = ns.singularity.getCompanyPositionInfo(\\n        companyName,\\n        jobName\\n      );\\n      if (positionInfo.requiredReputation > reputation) continue;\\n      const requiredSkills = positionInfo.requiredSkills;\\n      let hasRequiredSkills = true;\\n      for (const skillName in requiredSkills) {\\n        if (requiredSkills[skillName] > skills[skillName]) {\\n          hasRequiredSkills = false;\\n          break;\\n        }\\n      }\\n      if (!hasRequiredSkills) continue;\\n      eligiblePositions.push({ companyName, positionInfo });\\n    }\\n  }\\n\\n  eligiblePositions.sort(\\n    (position1, position2) =>\\n      position2.positionInfo.salary - position1.positionInfo.salary\\n  );\\n  return {\\n    companyName: eligiblePositions[0].companyName,\\n    jobTitle: eligiblePositions[0].positionInfo.name,\\n  };\\n}\\n\",\"filename\":\"manage-life.js\",\"server\":\"home\"}}],[\"apply-to-all-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { COMPANY_NAMES } from 'utils/constants';\\n\\n/**\\n * Apply to all jobs in order to get the faction rumors.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  for (const companyName of COMPANY_NAMES) {\\n    const positionNames = ns.singularity.getCompanyPositions(companyName);\\n\\n    for (const positionName of positionNames) {\\n      const field = ns.singularity.getCompanyPositionInfo(\\n        companyName,\\n        positionName\\n      ).field;\\n      ns.singularity.applyToCompany(companyName, field);\\n    }\\n  }\\n}\\n\",\"filename\":\"apply-to-all-jobs.js\",\"server\":\"home\"}}],[\"get-company-position-stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { COMPANY_NAMES } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Prints out company position stats to the terminal.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const skills = ns.getPlayer().skills;\\n\\n  /** @type {CompanyPosition} */ const eligiblePositions = [];\\n  for (const companyName of COMPANY_NAMES) {\\n    const reputation = ns.singularity.getCompanyRep(companyName);\\n    const positionNames = ns.singularity.getCompanyPositions(companyName);\\n    for (const positionName of positionNames) {\\n      // Only include the positions that we are eligible for.\\n      const positionInfo = ns.singularity.getCompanyPositionInfo(\\n        companyName,\\n        positionName\\n      );\\n      if (positionInfo.requiredReputation > reputation) continue;\\n      let hasRequiredSkills = true;\\n      for (const skillName in positionInfo.requiredSkills) {\\n        ns.tprint(positionInfo.requiredSkills[skillName]);\\n        if (positionInfo.requiredSkills[skillName] > skills[skillName]) {\\n          hasRequiredSkills = false;\\n          break;\\n        }\\n      }\\n      if (!hasRequiredSkills) continue;\\n      eligiblePositions.push(new CompanyPosition(companyName, positionInfo));\\n    }\\n  }\\n\\n  eligiblePositions.sort(\\n    (position1, position2) =>\\n      position2.positionInfo.salary - position1.positionInfo.salary\\n  );\\n\\n  /** @type {import(\\\"utils/table\\\").Table} */ const table = { rows: [] };\\n  for (const position of eligiblePositions) {\\n    /** @type {import(\\\"utils/table\\\").Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Company', style: {} },\\n          content: position.companyName,\\n        },\\n        {\\n          column: { name: 'Position', style: {} },\\n          content: position.positionInfo.name,\\n        },\\n        {\\n          column: { name: 'Field', style: {} },\\n          content: position.positionInfo.field,\\n        },\\n        {\\n          column: { name: 'Salary / s', style: {} },\\n          content: formatMoney(ns, position.positionInfo.salary),\\n        },\\n        {\\n          column: { name: 'Required Rep', style: {} },\\n          content: ns.formatNumber(position.positionInfo.requiredReputation),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\\nclass CompanyPosition {\\n  /**\\n   * @param {string} companyName\\n   * @param {import('../NetscriptDefinitions').CompanyPositionInfo} positionInfo\\n   */\\n  constructor(companyName, positionInfo) {\\n    this.companyName = companyName;\\n    this.positionInfo = positionInfo;\\n  }\\n}\\n\",\"filename\":\"get-company-position-stats.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"database/servers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/servers.txt\",\"text\":\"[{\\\"hostname\\\":\\\"home\\\",\\\"path\\\":[],\\\"organization\\\":\\\"Home PC\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":512,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"n00dles\\\",\\\"path\\\":[\\\"n00dles\\\"],\\\"organization\\\":\\\"Noodle Bar\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":4,\\\"cpuCores\\\":1,\\\"maxMoney\\\":196875,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"zer0\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\"],\\\"organization\\\":\\\"ZER0 Nightclub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":21093750,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":75},{\\\"hostname\\\":\\\"omega-net\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\"],\\\"organization\\\":\\\"Omega Software\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":168948452.8125,\\\"minSecurity\\\":11,\\\"baseSecurity\\\":33,\\\"hackingLevel\\\":196},{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\"],\\\"organization\\\":\\\"NiteSec\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":210},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"zb-institute\\\"],\\\"organization\\\":\\\"ZB Institute of Technology\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":3051058885.3125,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":71,\\\"hackingLevel\\\":766},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\"],\\\"organization\\\":\\\"Nectar Nightclub Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":7734375,\\\"minSecurity\\\":7,\\\"baseSecurity\\\":20,\\\"hackingLevel\\\":20},{\\\"hostname\\\":\\\"neo-net\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"neo-net\\\"],\\\"organization\\\":\\\"Neo Nightclub Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":14062500,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":50},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\"],\\\"organization\\\":\\\"Johnson Orthopedics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":210807548.4375,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":44,\\\"hackingLevel\\\":288},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"rothman-uni\\\"],\\\"organization\\\":\\\"Rothman University\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":525345136.875,\\\"minSecurity\\\":18,\\\"baseSecurity\\\":53,\\\"hackingLevel\\\":389},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"organization\\\":\\\"Crush Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":156632782.5,\\\"minSecurity\\\":14,\\\"baseSecurity\\\":42,\\\"hackingLevel\\\":233},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"silver-helix\\\"],\\\"organization\\\":\\\"Silver Helix\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":126562500,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":150},{\\\"hostname\\\":\\\"computek\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"computek\\\"],\\\"organization\\\":\\\"CompuTek\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":656037959.0625,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":63,\\\"hackingLevel\\\":317},{\\\"hostname\\\":\\\"syscore\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"computek\\\",\\\"syscore\\\"],\\\"organization\\\":\\\"SysCore Securities\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1533457170,\\\"minSecurity\\\":25,\\\"baseSecurity\\\":74,\\\"hackingLevel\\\":588},{\\\"hostname\\\":\\\"netlink\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\"],\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":773437500,\\\"minSecurity\\\":20,\\\"baseSecurity\\\":60,\\\"hackingLevel\\\":395},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"summit-uni\\\"],\\\"organization\\\":\\\"Summit University\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":626407515,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":45,\\\"hackingLevel\\\":471},{\\\"hostname\\\":\\\"phantasy\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\"],\\\"organization\\\":\\\"Phantasy Club\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":67500000,\\\"minSecurity\\\":7,\\\"baseSecurity\\\":20,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"the-hub\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\"],\\\"organization\\\":\\\"The Hub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":521785383.75,\\\"minSecurity\\\":13,\\\"baseSecurity\\\":40,\\\"hackingLevel\\\":279},{\\\"hostname\\\":\\\"catalyst\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"catalyst\\\"],\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1158005972.8125,\\\"minSecurity\\\":20,\\\"baseSecurity\\\":60,\\\"hackingLevel\\\":417},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"catalyst\\\",\\\"aevum-police\\\"],\\\"organization\\\":\\\"Aevum Police Headquarters\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1120378007.8125,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":77,\\\"hackingLevel\\\":424},{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\"],\\\"organization\\\":\\\"I.I.I.I\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":364},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\"],\\\"organization\\\":\\\"LexoCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2166968913.75,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":63,\\\"hackingLevel\\\":745},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"galactic-cyber\\\"],\\\"organization\\\":\\\"Galactic Cybersystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2314938360.9375,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":64,\\\"hackingLevel\\\":872},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\"],\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4676373489.375,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":774},{\\\"hostname\\\":\\\"unitalife\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\"],\\\"organization\\\":\\\"UnitaLife Group\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":3028065702.1875,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":71,\\\"hackingLevel\\\":787},{\\\"hostname\\\":\\\"defcomm\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\"],\\\"organization\\\":\\\"DefComm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2443961337.1875,\\\"minSecurity\\\":31,\\\"baseSecurity\\\":93,\\\"hackingLevel\\\":899},{\\\"hostname\\\":\\\"nova-med\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\"],\\\"organization\\\":\\\"Nova Medical\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":3323070801.5625,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":66,\\\"hackingLevel\\\":809},{\\\"hostname\\\":\\\"microdyne\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\"],\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1861536540.9375,\\\"minSecurity\\\":25,\\\"baseSecurity\\\":75,\\\"hackingLevel\\\":807},{\\\"hostname\\\":\\\"helios\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\"],\\\"organization\\\":\\\"Helios Labs\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2073416214.375,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":85,\\\"hackingLevel\\\":834},{\\\"hostname\\\":\\\"omnitek\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\"],\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":42353097868.125,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":91,\\\"hackingLevel\\\":1100},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"b-and-a\\\"],\\\"organization\\\":\\\"Bachman & Associates\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":56727898692.1875,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":904},{\\\"hostname\\\":\\\"megacorp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"b-and-a\\\",\\\"megacorp\\\"],\\\"organization\\\":\\\"MegaCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":118565459637.1875,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1311},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"b-and-a\\\",\\\"fulcrumassets\\\"],\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2812500,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1452},{\\\"hostname\\\":\\\"nwo\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"nwo\\\"],\\\"organization\\\":\\\"NWO\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":84418840437.1875,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1034},{\\\"hostname\\\":\\\"ecorp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"ecorp\\\"],\\\"organization\\\":\\\"ECorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":164036250511.875,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1322},{\\\"hostname\\\":\\\"The-Cave\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"lexo-corp\\\",\\\"global-pharm\\\",\\\"unitalife\\\",\\\"defcomm\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"The-Cave\\\"],\\\"organization\\\":\\\"Helios\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":925},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\"],\\\"organization\\\":\\\"Rho Construction\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1888313670,\\\"minSecurity\\\":17,\\\"baseSecurity\\\":52,\\\"hackingLevel\\\":514},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\"],\\\"organization\\\":\\\"Snap Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1265625000,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":46,\\\"hackingLevel\\\":702},{\\\"hostname\\\":\\\"deltaone\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\"],\\\"organization\\\":\\\"DeltaOne\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4531282554.375,\\\"minSecurity\\\":25,\\\"baseSecurity\\\":75,\\\"hackingLevel\\\":857},{\\\"hostname\\\":\\\"icarus\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\"],\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2605501175.625,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":91,\\\"hackingLevel\\\":881},{\\\"hostname\\\":\\\"infocomm\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\"],\\\"organization\\\":\\\"InfoComm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2429118334.6875,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":90,\\\"hackingLevel\\\":909},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"titan-labs\\\"],\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2328783797.8125,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":71,\\\"hackingLevel\\\":867},{\\\"hostname\\\":\\\"stormtech\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"titan-labs\\\",\\\"stormtech\\\"],\\\"organization\\\":\\\"Storm Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":3269011021.875,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":88,\\\"hackingLevel\\\":913},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"applied-energetics\\\"],\\\"organization\\\":\\\"Applied Energetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2790676766.25,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":65,\\\"hackingLevel\\\":786},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"applied-energetics\\\",\\\"fulcrumtech\\\"],\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4540453042.5,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":84,\\\"hackingLevel\\\":1124},{\\\"hostname\\\":\\\"4sigma\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"applied-energetics\\\",\\\"fulcrumtech\\\",\\\"4sigma\\\"],\\\"organization\\\":\\\"Four Sigma\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":45305914142.8125,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":69,\\\"hackingLevel\\\":1178},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"applied-energetics\\\",\\\"fulcrumtech\\\",\\\"4sigma\\\",\\\"clarkinc\\\"],\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":55954646850.9375,\\\"minSecurity\\\":18,\\\"baseSecurity\\\":54,\\\"hackingLevel\\\":965},{\\\"hostname\\\":\\\"zb-def\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\"],\\\"organization\\\":\\\"ZB Defense Industries\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2889817124.0625,\\\"minSecurity\\\":19,\\\"baseSecurity\\\":57,\\\"hackingLevel\\\":795},{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"run4theh111z\\\"],\\\"organization\\\":\\\"The Runners\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":506},{\\\"hostname\\\":\\\"vitalife\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\"],\\\"organization\\\":\\\"VitaLife\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2092948081.875,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":84,\\\"hackingLevel\\\":850},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\"],\\\"organization\\\":\\\"KuaiGong International\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":65542716635.625,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":95,\\\"hackingLevel\\\":1288},{\\\"hostname\\\":\\\"blade\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"kuai-gong\\\",\\\"blade\\\"],\\\"organization\\\":\\\"Blade Industries\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":512,\\\"cpuCores\\\":1,\\\"maxMoney\\\":103012270171.875,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":95,\\\"hackingLevel\\\":1153},{\\\"hostname\\\":\\\".\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\".\\\"],\\\"organization\\\":\\\".\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":511},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\".\\\",\\\"powerhouse-fitness\\\"],\\\"organization\\\":\\\"Powerhouse Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2531250000,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":63,\\\"hackingLevel\\\":1075},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"zeus-med\\\"],\\\"organization\\\":\\\"Zeus Medical\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4006313853.75,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":87,\\\"hackingLevel\\\":814},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\"],\\\"organization\\\":\\\"Taiyang Digital\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2323022664.375,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":72,\\\"hackingLevel\\\":878},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"alpha-ent\\\"],\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1811521192.5,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":69,\\\"hackingLevel\\\":511},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\"],\\\"organization\\\":\\\"Millenium Fitness Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":703125000,\\\"minSecurity\\\":17,\\\"baseSecurity\\\":52,\\\"hackingLevel\\\":491},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"aerocorp\\\"],\\\"organization\\\":\\\"AeroCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":3195474103.125,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":86,\\\"hackingLevel\\\":864},{\\\"hostname\\\":\\\"omnia\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"aerocorp\\\",\\\"omnia\\\"],\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2589205682.8125,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":89,\\\"hackingLevel\\\":895},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"aerocorp\\\",\\\"omnia\\\",\\\"univ-energy\\\"],\\\"organization\\\":\\\"Universal Energy\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":3348290640.9375,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":82,\\\"hackingLevel\\\":879},{\\\"hostname\\\":\\\"solaris\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"nectar-net\\\",\\\"phantasy\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"millenium-fitness\\\",\\\"aerocorp\\\",\\\"omnia\\\",\\\"solaris\\\"],\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":2359382858.4375,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":810},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"path\\\":[\\\"foodnstuff\\\"],\\\"organization\\\":\\\"FoodNStuff\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":5625000,\\\"minSecurity\\\":3,\\\"baseSecurity\\\":10,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"CSEC\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\"],\\\"organization\\\":\\\"CyberSec\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":8,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":55},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"path\\\":[\\\"sigma-cosmetics\\\"],\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":6468750,\\\"minSecurity\\\":3,\\\"baseSecurity\\\":10,\\\"hackingLevel\\\":5},{\\\"hostname\\\":\\\"joesguns\\\",\\\"path\\\":[\\\"joesguns\\\"],\\\"organization\\\":\\\"Joe's Guns\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":7031250,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":10},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"path\\\":[\\\"hong-fang-tea\\\"],\\\"organization\\\":\\\"HongFang Teahouse\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":8437500,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":30},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"path\\\":[\\\"harakiri-sushi\\\"],\\\"organization\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":11250000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":40},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"path\\\":[\\\"iron-gym\\\"],\\\"organization\\\":\\\"Iron Gym Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":56250000,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"path\\\":[\\\"iron-gym\\\",\\\"max-hardware\\\"],\\\"organization\\\":\\\"Max Hardware Store\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":28125000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":80}]\"}}],[\"database/gang-tasks.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/gang-tasks.txt\",\"text\":\"[{\\\"name\\\":\\\"Unassigned\\\",\\\"desc\\\":\\\"This gang member is currently idle\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Mug People\\\",\\\"desc\\\":\\\"Assign this gang member to mug random people on the streets<br><br>Earns money - Slightly increases respect - Very slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00005,\\\"baseWanted\\\":0.00005,\\\"baseMoney\\\":3.6,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":10,\\\"chaWeight\\\":15,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Deal Drugs\\\",\\\"desc\\\":\\\"Assign this gang member to sell drugs<br><br>Earns money - Slightly increases respect - Slightly increases wanted level - Scales slightly with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00006,\\\"baseWanted\\\":0.002,\\\"baseMoney\\\":15,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":60,\\\"difficulty\\\":3.5,\\\"territory\\\":{\\\"money\\\":1.2,\\\"respect\\\":1,\\\"wanted\\\":1.15}},{\\\"name\\\":\\\"Strongarm Civilians\\\",\\\"desc\\\":\\\"Assign this gang member to extort civilians in your territory<br><br>Earns money - Slightly increases respect - Increases wanted - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00004,\\\"baseWanted\\\":0.02,\\\"baseMoney\\\":7.5,\\\"hackWeight\\\":10,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":10,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1.6,\\\"respect\\\":1.1,\\\"wanted\\\":1.5}},{\\\"name\\\":\\\"Run a Con\\\",\\\"desc\\\":\\\"Assign this gang member to run cons<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00012,\\\"baseWanted\\\":0.05,\\\"baseMoney\\\":45,\\\"hackWeight\\\":0,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":40,\\\"difficulty\\\":14,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Armed Robbery\\\",\\\"desc\\\":\\\"Assign this gang member to commit armed robbery on stores, banks and armored cars<br><br>Earns money - Increases respect - Increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.00014,\\\"baseWanted\\\":0.1,\\\"baseMoney\\\":114,\\\"hackWeight\\\":20,\\\"strWeight\\\":15,\\\"defWeight\\\":15,\\\"dexWeight\\\":20,\\\"agiWeight\\\":10,\\\"chaWeight\\\":20,\\\"difficulty\\\":20,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Traffick Illegal Arms\\\",\\\"desc\\\":\\\"Assign this gang member to traffick illegal arms<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.24,\\\"baseMoney\\\":174,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":32,\\\"territory\\\":{\\\"money\\\":1.4,\\\"respect\\\":1.3,\\\"wanted\\\":1.25}},{\\\"name\\\":\\\"Threaten & Blackmail\\\",\\\"desc\\\":\\\"Assign this gang member to threaten and blackmail high-profile targets<br><br>Earns money - Slightly increases respect - Slightly increases wanted level\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.0002,\\\"baseWanted\\\":0.125,\\\"baseMoney\\\":72,\\\"hackWeight\\\":25,\\\"strWeight\\\":25,\\\"defWeight\\\":0,\\\"dexWeight\\\":25,\\\"agiWeight\\\":0,\\\"chaWeight\\\":25,\\\"difficulty\\\":28,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Human Trafficking\\\",\\\"desc\\\":\\\"Assign this gang member to engage in human trafficking operations<br><br>Earns money - Increases respect - Increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.004,\\\"baseWanted\\\":1.25,\\\"baseMoney\\\":360,\\\"hackWeight\\\":30,\\\"strWeight\\\":5,\\\"defWeight\\\":5,\\\"dexWeight\\\":30,\\\"agiWeight\\\":0,\\\"chaWeight\\\":30,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1.5,\\\"respect\\\":1.5,\\\"wanted\\\":1.6}},{\\\"name\\\":\\\"Terrorism\\\",\\\"desc\\\":\\\"Assign this gang member to commit acts of terrorism<br><br>Greatly increases respect - Greatly increases wanted level - Scales heavily with territory\\\",\\\"isHacking\\\":false,\\\"isCombat\\\":true,\\\"baseRespect\\\":0.01,\\\"baseWanted\\\":6,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":0,\\\"chaWeight\\\":20,\\\"difficulty\\\":36,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":2,\\\"wanted\\\":2}},{\\\"name\\\":\\\"Vigilante Justice\\\",\\\"desc\\\":\\\"Assign this gang member to be a vigilante and protect the city from criminals<br><br>Decreases wanted level\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":-0.001,\\\"baseMoney\\\":0,\\\"hackWeight\\\":20,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":0,\\\"difficulty\\\":1,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":0.9}},{\\\"name\\\":\\\"Train Combat\\\",\\\"desc\\\":\\\"Assign this gang member to increase their combat stats (str, def, dex, agi)\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":25,\\\"defWeight\\\":25,\\\"dexWeight\\\":25,\\\"agiWeight\\\":25,\\\"chaWeight\\\":0,\\\"difficulty\\\":100,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Train Hacking\\\",\\\"desc\\\":\\\"Assign this gang member to train their hacking skills\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":100,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":0,\\\"difficulty\\\":45,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Train Charisma\\\",\\\"desc\\\":\\\"Assign this gang member to train their charisma\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":0,\\\"strWeight\\\":0,\\\"defWeight\\\":0,\\\"dexWeight\\\":0,\\\"agiWeight\\\":0,\\\"chaWeight\\\":100,\\\"difficulty\\\":8,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}},{\\\"name\\\":\\\"Territory Warfare\\\",\\\"desc\\\":\\\"Members assigned to this task increase your gang's power. They will also fight for territory if 'Territory Clashes' are enabled.<br /><br />Gang members performing this task can be killed during clashes.\\\",\\\"isHacking\\\":true,\\\"isCombat\\\":true,\\\"baseRespect\\\":0,\\\"baseWanted\\\":0,\\\"baseMoney\\\":0,\\\"hackWeight\\\":15,\\\"strWeight\\\":20,\\\"defWeight\\\":20,\\\"dexWeight\\\":20,\\\"agiWeight\\\":20,\\\"chaWeight\\\":5,\\\"difficulty\\\":5,\\\"territory\\\":{\\\"money\\\":1,\\\"respect\\\":1,\\\"wanted\\\":1}}]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-gang.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.01000000000116,\"ramUsage\":31.8,\"server\":\"home\",\"scriptKey\":\"manage-gang.js*[]\",\"title\":\"manage-gang.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-servers.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.01000000000116,\"ramUsage\":4.6,\"server\":\"home\",\"scriptKey\":\"manage-servers.js*[]\",\"title\":\"manage-servers.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.2100000000012,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"n00dles\\\"]\",\"title\":\"grow.js n00dles\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":122.2100000000012,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":254,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000008,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.21000000000008,\"ramUsage\":8.55,\"server\":\"home\",\"scriptKey\":\"manage-hacking.js*[0]\",\"title\":\"manage-hacking.js 0\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"88.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43743000136.5,\"moneyMax\":164036250511.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1322,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"59.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31617455903.25,\"moneyMax\":118565459637.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1311,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"36.6.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":15127439651.25,\"moneyMax\":56727898692.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":73,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"64.5.7.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":27469938712.5,\"moneyMax\":103012270171.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1153,\"serverGrowth\":67,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"70.0.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22511690783.25,\"moneyMax\":84418840437.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1034,\"serverGrowth\":93,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"66.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":14921239160.25,\"moneyMax\":55954646850.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":965,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"75.4.5.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":11294159431.5,\"moneyMax\":42353097868.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1100,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"61.9.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":12081577104.75,\"moneyMax\":45305914142.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1178,\"serverGrowth\":76,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"17.9.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":17478057769.5,\"moneyMax\":65542716635.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1288,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"30.8.2.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1210787478,\"moneyMax\":4540453042.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"60.1.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1452,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"14.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":871736272.5,\"moneyMax\":3269011021.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":79,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"97.6.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":651723023.25,\"moneyMax\":2443961337.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":55,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"62.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":647764889.25,\"moneyMax\":2429118334.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":45,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"88.7.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":552910990.5,\"moneyMax\":2073416214.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":77,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"90.9.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":558119488.5,\"moneyMax\":2092948081.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":65,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"53.4.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":694800313.5,\"moneyMax\":2605501175.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":881,\"serverGrowth\":86,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"97.1.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":892877504.25,\"moneyMax\":3348290640.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"81.6.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":621009012.75,\"moneyMax\":2328783797.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":69,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"3.5.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":496409744.25,\"moneyMax\":1861536540.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":76,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"57.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":619472710.5,\"moneyMax\":2323022664.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":878,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"59.6.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":617316896.25,\"moneyMax\":2314938360.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":87,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"65.0.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":852126427.5,\"moneyMax\":3195474103.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"90.3.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":690454848.75,\"moneyMax\":2589205682.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":69,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"38.3.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":770617899.75,\"moneyMax\":2889817124.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":795,\"serverGrowth\":75,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"9.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":744180471,\"moneyMax\":2790676766.25,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"43.5.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":629168762.25,\"moneyMax\":2359382858.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":70,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"45.9.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1208342014.5,\"moneyMax\":4531282554.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":55,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"61.4.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1247032930.5,\"moneyMax\":4676373489.375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":774,\"serverGrowth\":88,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"95.8.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":886152213.75,\"moneyMax\":3323070801.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":78,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"18.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1068350361,\"moneyMax\":4006313853.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":80,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"26.4.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":807484187.25,\"moneyMax\":3028065702.1875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":71,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"83.3.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":577858377,\"moneyMax\":2166968913.75,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":745,\"serverGrowth\":57,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"80.3.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":503550312,\"moneyMax\":1888313670,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":514,\"serverGrowth\":58,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"91.0.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":483072318,\"moneyMax\":1811521192.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"31.0.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":298767468.75,\"moneyMax\":1120378007.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":30,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"75.2.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":140092036.5,\"moneyMax\":525345136.875,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":389,\"serverGrowth\":38,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"39.8.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":813615702.75,\"moneyMax\":3051058885.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":766,\"serverGrowth\":85,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"89.8.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":167042004,\"moneyMax\":626407515,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":471,\"serverGrowth\":45,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"0.8.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":408921912,\"moneyMax\":1533457170,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":588,\"serverGrowth\":61,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"39.5.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":308801592.75,\"moneyMax\":1158005972.8125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":417,\"serverGrowth\":54,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"54.2.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":139142769,\"moneyMax\":521785383.75,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":279,\"serverGrowth\":50,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"12.0.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":174943455.75,\"moneyMax\":656037959.0625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":317,\"serverGrowth\":54,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"32.3.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":395,\"serverGrowth\":54,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"88.2.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":56215346.25,\"moneyMax\":210807548.4375,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":288,\"serverGrowth\":56,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"8.3.1.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":52500,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"grow.js*[\\\"n00dles\\\"]\",\"title\":\"grow.js n00dles\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"61.1.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1500000,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"9.6.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"60.7.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"41.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"71.9.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"grow.js*[\\\"n00dles\\\"]\",\"title\":\"grow.js n00dles\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":3,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"57.2.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"87.9.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"29.4.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"19.8.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":129.0100000000012,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"1.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"56.8.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"73.9.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":45052920.75,\"moneyMax\":168948452.8125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":196,\"serverGrowth\":38,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"8.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":41768742,\"moneyMax\":156632782.5,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":233,\"serverGrowth\":27,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"22.1.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"70.3.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":491,\"serverGrowth\":34,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"89.1.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1075,\"serverGrowth\":54,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"12.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":702,\"serverGrowth\":55,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"72.9.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"95.2.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":364,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"57.0.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":210,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"25.4.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"68.7.7.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"28.1.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"67.8.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"55.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":66.1516,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":19.7975,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":29.6823,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.2033,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":7.495,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":7.495,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":29.7431,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":10.8671,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":35.543,\"discovery\":\"known\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":17.3157,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":31.0588,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":25.2526,\"discovery\":\"known\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":25.2804,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":43.1207,\"discovery\":\"known\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":21.1944,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":26.8681,\"discovery\":\"known\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":18889.77655717394,\"lastPrice\":18918.21671529306,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":true,\"otlkMag\":19.449359619053162,\"otlkMagForecast\":68.90064841831445,\"cap\":296202027,\"spreadPerc\":0.2,\"shareTxForMovement\":77581,\"shareTxUntilMovement\":77581,\"totalShares\":128000000,\"maxShares\":25600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25829.974964888355,\"lastPrice\":25788.500913199226,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":18.428338565409483,\"otlkMagForecast\":69.03886056739103,\"cap\":367679800,\"spreadPerc\":0.5,\"shareTxForMovement\":58833,\"shareTxUntilMovement\":58833,\"totalShares\":94100000,\"maxShares\":18800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":19257.592794599073,\"lastPrice\":19310.309042980534,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":12.811815524299758,\"otlkMagForecast\":63.08254718515535,\"cap\":303424776,\"spreadPerc\":0.2,\"shareTxForMovement\":84045,\"shareTxUntilMovement\":84045,\"totalShares\":83700000,\"maxShares\":16700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":15975.513648325592,\"lastPrice\":16014.325618472074,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":11.777786988312869,\"otlkMagForecast\":62.117061368773435,\"cap\":150036927,\"spreadPerc\":0.3,\"shareTxForMovement\":69025,\"shareTxUntilMovement\":69025,\"totalShares\":100000000,\"maxShares\":20000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":40664.80871330381,\"lastPrice\":40578.720726797386,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.92541099286618,\"otlkMagForecast\":61.92255151449382,\"cap\":47327071,\"spreadPerc\":0.2,\"shareTxForMovement\":58925,\"shareTxUntilMovement\":58925,\"totalShares\":45600000,\"maxShares\":9100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":53924.06090845467,\"lastPrice\":53727.34852728801,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":true,\"otlkMag\":16.96583169357739,\"otlkMagForecast\":67.56588193180674,\"cap\":1258362539,\"spreadPerc\":0.3,\"shareTxForMovement\":89136,\"shareTxUntilMovement\":89136,\"totalShares\":38400000,\"maxShares\":7700000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":16613.9797980768,\"lastPrice\":16565.79791225585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":10.011043866338573,\"otlkMagForecast\":60.11436857187902,\"cap\":267705925,\"spreadPerc\":0.5,\"shareTxForMovement\":33539,\"shareTxUntilMovement\":33539,\"totalShares\":115500000,\"maxShares\":23100000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":31306.192435622695,\"lastPrice\":31442.238656006655,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":16.493580801792472,\"otlkMagForecast\":66.04274970110936,\"cap\":230117117,\"spreadPerc\":0.8,\"shareTxForMovement\":89639,\"shareTxUntilMovement\":89639,\"totalShares\":65700000,\"maxShares\":13100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":20856.509241566986,\"lastPrice\":20918.59805842677,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":7.234136286464525,\"otlkMagForecast\":57.106568579202246,\"cap\":192340780,\"spreadPerc\":0.6,\"shareTxForMovement\":50016,\"shareTxUntilMovement\":50016,\"totalShares\":56700000,\"maxShares\":11300000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11204.922520684266,\"lastPrice\":11227.927011107691,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":9.982927214051655,\"otlkMagForecast\":59.958456629138844,\"cap\":160794383,\"spreadPerc\":1,\"shareTxForMovement\":41803,\"shareTxUntilMovement\":41803,\"totalShares\":80800000,\"maxShares\":16200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11685.30568698515,\"lastPrice\":11663.355475390823,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":9.163798803201036,\"otlkMagForecast\":59.00622183775003,\"cap\":15317598,\"spreadPerc\":1,\"shareTxForMovement\":64846,\"shareTxUntilMovement\":64846,\"totalShares\":72000000,\"maxShares\":14400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":9223.664670401951,\"lastPrice\":9200.054226091825,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.880777713496764,\"otlkMagForecast\":57.13656474824424,\"cap\":96879868,\"spreadPerc\":1,\"shareTxForMovement\":48985,\"shareTxUntilMovement\":48985,\"totalShares\":108800000,\"maxShares\":21800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":14041.343767760956,\"lastPrice\":14071.613022682017,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.7999939684716475,\"otlkMagForecast\":57.45886205723977,\"cap\":304492873,\"spreadPerc\":0.3,\"shareTxForMovement\":73642,\"shareTxUntilMovement\":73642,\"totalShares\":58400000,\"maxShares\":11700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":25547.89553846796,\"lastPrice\":25504.260511421555,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":9.764611111065959,\"otlkMagForecast\":59.969373505404846,\"cap\":219387920,\"spreadPerc\":0.7,\"shareTxForMovement\":87545,\"shareTxUntilMovement\":87545,\"totalShares\":35100000,\"maxShares\":7000000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":14665.119169261483,\"lastPrice\":14693.22045123589,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":6.1429364535454685,\"otlkMagForecast\":55.93901878664143,\"cap\":19717253,\"spreadPerc\":0.7,\"shareTxForMovement\":105352,\"shareTxUntilMovement\":105352,\"totalShares\":43200000,\"maxShares\":8600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13540.783687049232,\"lastPrice\":13507.505461755052,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.137973370686776,\"otlkMagForecast\":55.245351467569975,\"cap\":47873519,\"spreadPerc\":0.4,\"shareTxForMovement\":50823,\"shareTxUntilMovement\":50823,\"totalShares\":44500000,\"maxShares\":8900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":19512.12880367498,\"lastPrice\":19459.525641738743,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":8.260593836377664,\"otlkMagForecast\":58.46431631697335,\"cap\":337041541,\"spreadPerc\":1.1,\"shareTxForMovement\":72394,\"shareTxUntilMovement\":72394,\"totalShares\":37400000,\"maxShares\":7500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":12506.440143886768,\"lastPrice\":12530.404967965118,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.406528386468137,\"otlkMagForecast\":60.29752581644794,\"cap\":262782167,\"spreadPerc\":0.8,\"shareTxForMovement\":85124,\"shareTxUntilMovement\":85124,\"totalShares\":55500000,\"maxShares\":11100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":26034.385120135717,\"lastPrice\":25966.85687158605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":3.8690410669072834,\"otlkMagForecast\":55.60214757107349,\"cap\":83525707,\"spreadPerc\":1,\"shareTxForMovement\":113263,\"shareTxUntilMovement\":113263,\"totalShares\":22500000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":5217.679875812256,\"lastPrice\":5171.844820584552,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.59,\"b\":true,\"otlkMag\":2.140612430198979,\"otlkMagForecast\":51.84237495014799,\"cap\":94289629,\"spreadPerc\":0.6,\"shareTxForMovement\":40243,\"shareTxUntilMovement\":40243,\"totalShares\":78000000,\"maxShares\":15600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5903.610831315068,\"lastPrice\":5878.266994557668,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":5.656337724203515,\"otlkMagForecast\":55.856721937272816,\"cap\":117431907,\"spreadPerc\":0.6,\"shareTxForMovement\":65003,\"shareTxUntilMovement\":65003,\"totalShares\":51700000,\"maxShares\":10300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5876.279770888339,\"lastPrice\":5862.438374994036,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":1.771622075206764,\"otlkMagForecast\":50.4340422624417,\"cap\":127332952,\"spreadPerc\":0.8,\"shareTxForMovement\":95794,\"shareTxUntilMovement\":95794,\"totalShares\":30500000,\"maxShares\":6100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6868.554460469292,\"lastPrice\":6911.329384158837,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.82,\"b\":true,\"otlkMag\":9.880012388303129,\"otlkMagForecast\":59.95324121222557,\"cap\":42235068,\"spreadPerc\":1.2,\"shareTxForMovement\":68223,\"shareTxUntilMovement\":68223,\"totalShares\":36700000,\"maxShares\":7300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":4555.810640985584,\"lastPrice\":4529.6167106477205,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.69,\"b\":true,\"otlkMag\":3.577676002523021,\"otlkMagForecast\":52.95928859093401,\"cap\":51420691,\"spreadPerc\":0.7,\"shareTxForMovement\":82878,\"shareTxUntilMovement\":82878,\"totalShares\":47000000,\"maxShares\":9400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5745.630498933288,\"lastPrice\":5729.554158632238,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":4.398330967099383,\"otlkMagForecast\":53.44183349253407,\"cap\":95292207,\"spreadPerc\":0.5,\"shareTxForMovement\":94279,\"shareTxUntilMovement\":94279,\"totalShares\":33000000,\"maxShares\":6600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3485.896185646571,\"lastPrice\":3524.78140548125,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.26,\"b\":true,\"otlkMag\":1.569286641401344,\"otlkMagForecast\":53.25991271611326,\"cap\":67395073,\"spreadPerc\":0.6,\"shareTxForMovement\":18179,\"shareTxUntilMovement\":18179,\"totalShares\":17800000,\"maxShares\":3600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":5531.271267356604,\"lastPrice\":5514.101332614405,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":true,\"otlkMag\":1.8457764563118606,\"otlkMagForecast\":51.09678346699001,\"cap\":14692723,\"spreadPerc\":0.7,\"shareTxForMovement\":84003,\"shareTxUntilMovement\":84003,\"totalShares\":11200000,\"maxShares\":2200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3417.1823375112954,\"lastPrice\":3425.835052166812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":2.411048060776528,\"otlkMagForecast\":49.49166973946315,\"cap\":11270483,\"spreadPerc\":0.9,\"shareTxForMovement\":135233,\"shareTxUntilMovement\":135233,\"totalShares\":12700000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2121.8476094938246,\"lastPrice\":2109.5043730088073,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.71,\"b\":false,\"otlkMag\":4.664276718712137,\"otlkMagForecast\":49.620547730825805,\"cap\":16154902,\"spreadPerc\":0.9,\"shareTxForMovement\":33520,\"shareTxUntilMovement\":33520,\"totalShares\":14900000,\"maxShares\":3000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1287.8802448864687,\"lastPrice\":1275.0531552372684,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.94,\"b\":false,\"otlkMag\":1.8984794161342156,\"otlkMagForecast\":50.57421115616381,\"cap\":26060383,\"spreadPerc\":1,\"shareTxForMovement\":33370,\"shareTxUntilMovement\":33370,\"totalShares\":37000000,\"maxShares\":7400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1272.6646858202196,\"lastPrice\":1278.84847745032,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.42,\"b\":true,\"otlkMag\":13.802171893810616,\"otlkMagForecast\":63.592283583570556,\"cap\":24128804,\"spreadPerc\":0.5,\"shareTxForMovement\":35509,\"shareTxUntilMovement\":35509,\"totalShares\":87500000,\"maxShares\":17500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":23407.23697199207,\"lastPrice\":23348.9136773463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.997744934695596,\"otlkMagForecast\":58.05120830665805,\"cap\":49910413,\"spreadPerc\":0.7,\"shareTxForMovement\":197957,\"shareTxUntilMovement\":197957,\"totalShares\":15400000,\"maxShares\":3100000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22266.15109189441,\"lastPrice\":22310.34126009896,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":10.954767426834563,\"otlkMagForecast\":61.0595844575008,\"cap\":520390788,\"spreadPerc\":1,\"shareTxForMovement\":143761,\"shareTxUntilMovement\":143761,\"totalShares\":19200000,\"maxShares\":3800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":11,\"lastUpdate\":1707756807692,\"ticksUntilCycle\":1}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"init.js\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":true,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"EnableHistorySearch\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#EA9062\",\"primary\":\"#DD7B4A\",\"primarydark\":\"#D3591C\",\"successlight\":\"#6ACF6A\",\"success\":\"#43BF43\",\"successdark\":\"#3E913E\",\"errorlight\":\"#C15757\",\"error\":\"#B34141\",\"errordark\":\"#752525\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E6E69D\",\"warning\":\"#DADA56\",\"warningdark\":\"#A1A106\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#AD84CF\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#76C6B7\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Operator Mono, agave Nerd Font mono, monospace\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"{\"Slum Snakes\":{\"power\":0.9473955546498366,\"territory\":0.14318713871390454},\"Tetrads\":{\"power\":1.8381148310916926,\"territory\":0.14170638046700942},\"The Syndicate\":{\"power\":1.8608090510286777,\"territory\":0.14228367547347884},\"The Dark Army\":{\"power\":2.0106903634229645,\"territory\":0.1432141958126259},\"Speakers for the Dead\":{\"power\":3.5021351689530285,\"territory\":0.14305505593426493},\"NiteSec\":{\"power\":1.452357773546169,\"territory\":0.14299054385639262},\"The Black Hand\":{\"power\":3.266094012557942,\"territory\":0.1435630097423237}}","LastExportBonus":"1707692982252","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}