{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":15,\"max\":15},\"skills\":{\"hacking\":259,\"strength\":51,\"defense\":56,\"dexterity\":119,\"agility\":119,\"charisma\":81,\"intelligence\":0},\"exp\":{\"hacking\":1747919.836978552,\"strength\":2092.3600000002243,\"defense\":2475.160000000072,\"dexterity\":21474.610000000976,\"agility\":21474.610000000976,\"charisma\":6052.25299999668,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"darkweb\",\"factions\":[\"Sector-12\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"CyberSec\",\"NiteSec\",\"Aevum\"]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":8297.851192418295,\"onlineTimeSeconds\":91170.59999950361,\"ram\":64,\"totalMoneyGenerated\":424123626.95084107,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":89818.7999994987,\"ram\":64,\"totalMoneyGenerated\":258439825.52268332,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":7424.393172163739,\"onlineTimeSeconds\":89000.59999949574,\"ram\":64,\"totalMoneyGenerated\":185519026.91032842,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":9,\"level\":200,\"moneyGainRatePerSecond\":6114.206141781902,\"onlineTimeSeconds\":88586.79999949546,\"ram\":64,\"totalMoneyGenerated\":94871363.91176632,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":87608.19999949726,\"ram\":64,\"totalMoneyGenerated\":74328333.2325006,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":86466.99999949554,\"ram\":64,\"totalMoneyGenerated\":43306058.46830279,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":86457.7999994955,\"ram\":64,\"totalMoneyGenerated\":41076621.81622985,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":86447.79999949547,\"ram\":64,\"totalMoneyGenerated\":37826595.58098025,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":86268.99999949482,\"ram\":64,\"totalMoneyGenerated\":37191037.13613771,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":82266.99999953514,\"ram\":64,\"totalMoneyGenerated\":36521288.08473422,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":78881.39999953558,\"ram\":64,\"totalMoneyGenerated\":35812521.53148276,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":76114.39999958662,\"ram\":64,\"totalMoneyGenerated\":35121548.176844224,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":73304.39999961441,\"ram\":64,\"totalMoneyGenerated\":34407558.271489084,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":68274.59999961646,\"ram\":64,\"totalMoneyGenerated\":32442519.511990532,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":62729.59999963561,\"ram\":64,\"totalMoneyGenerated\":31259761.610904187,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":55482.599999713806,\"ram\":64,\"totalMoneyGenerated\":30263034.813784678,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":4804.019111400065,\"onlineTimeSeconds\":46353.39999985483,\"ram\":64,\"totalMoneyGenerated\":28216116.143045977,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":1597.7673164019704,\"onlineTimeSeconds\":39038.19999998741,\"ram\":32,\"totalMoneyGenerated\":19227271.178874005,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":6550.935151909181,\"onlineTimeSeconds\":33148.80000007181,\"ram\":64,\"totalMoneyGenerated\":42258338.60487631,\"name\":\"hacknet-node-18\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"FoodNStuff\":\"Employee\",\"Joe's Guns\":\"Employee\",\"Alpha Enterprises\":\"Junior Software Engineer\",\"Central Intelligence Agency\":\"Software Engineering Intern\",\"LexoCorp\":\"Software Consultant\",\"Noodle Bar\":\"Waiter\",\"Carmichael Security\":\"Software Consultant\",\"Universal Energy\":\"Software Consultant\",\"National Security Agency\":\"Software Engineering Intern\"},\"karma\":-656.7249999999833,\"numPeopleKilled\":1,\"location\":\"Travel Agency\",\"money\":7864801.237126232,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-612720,\"codingcontract\":112500000,\"corporation\":0,\"crime\":230336000,\"gang\":0,\"hacking\":65132901.24439326,\"hacknet\":1522212447.4461105,\"hacknet_expenses\":-1351243337.332744,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":7863688.237126232,\"work\":9185565.09999934,\"servers\":-113685391.88581172,\"other\":-36190494.375161335,\"augmentations\":-429771281.97179985}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-612720,\"codingcontract\":112500000,\"corporation\":0,\"crime\":230336000,\"gang\":0,\"hacking\":65132901.24439326,\"hacknet\":1522212447.4461105,\"hacknet_expenses\":-1351243337.332744,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":7863688.237126232,\"work\":9185565.09999934,\"servers\":-113685391.88581172,\"other\":-36190494.375161335,\"augmentations\":-429771281.97179985}},\"playtimeSinceLastAug\":100408400,\"playtimeSinceLastBitnode\":100408400,\"lastAugReset\":-1,\"lastNodeReset\":-1,\"purchasedServers\":[\"lauren\",\"lauren-1\",\"lauren-0\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-14\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\"],\"scriptProdSinceLastAug\":65034820.42012994,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1704070135213},{\"ID\":\"FROZE\",\"unlockedOn\":1704070135222},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1704079402616},{\"ID\":\"WORKOUT\",\"unlockedOn\":1704081997256},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1704085310642},{\"ID\":\"TOR\",\"unlockedOn\":1704088636233},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1704091709650},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1704125258633},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1704144228234},{\"ID\":\"TRAVEL\",\"unlockedOn\":1704151357816},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1704169468544}],\"terminalCommandHistory\":[\"run manage-contracts.js \",\"clear\",\"run manage-contracts.js \",\"connect joesguns; connect CSEC; connect phantasy; run contract-997507-Sector12.cct\",\"home; \",\"clear\",\"run manage-contracts.js \",\"home; connect joesguns; connect CSEC; connect silver-helix; connect netlink; run contract-433874.cct\",\"home\",\"run manage-servers.js \",\"clear\",\"ls\",\"kill manage-hacking.js \",\"run manage-hacking.js \",\"run manage-hacknet.js \",\"run manage-hacking.js \",\"kill manage-hacking.js ; run manage-hacking.js \",\"clear\",\"ls\",\"kill manage-hacking.js \",\"run manage-hack\",\"run manage-hacking.js \",\"run manage-hacknet.js \",\"kill manage-hacking.js ; run manage-hacking.js \",\"kill gain-access.js \",\"kill manage-hacking.js ; run manage-hacking.js \",\"run gain-access.js \",\"kill manage-hacking.js ; run manage-hacking.js \",\"run stats-hacking.js \",\"kill manage-hacking.js ; run manage-hacking.js \",\"connect darkweb \",\"buy -l\",\"buy HTTPWorm.exe \",\"home\",\"run manage-contracts.js \",\"home; connect joesguns; connect CSEC; connect phantasy; connect computek; connect catalyst; run contract-931849-JoesGuns.cct\",\"home; connect hong-fang-tea; connect max-hardware; connect neo-net; connect crush-fitness; connect zb-institute; connect alpha-ent; connect global-pharm; run contract-655166-Netburners.cct\",\"home\",\"run stats-hacking.js \",\"clear\",\"run stats-hacking.js \",\"run manage-servers.js \",\"clear\",\"ls\",\"free\",\"mem manage-servers.js \",\"connect darkweb \",\"clear\",\"ls\",\"buy -l\"],\"lastUpdate\":1704170532942,\"lastSave\":1704170476543,\"totalPlaytime\":100408400,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":1331,\"crimeType\":\"Shoplift\",\"unitCompleted\":200}},\"focus\":false,\"entropy\":0,\"identifier\":\"113891341353c3\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"38.4.6.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/** One second in milliseconds. */\\nexport const ONE_SECOND = 1000;\\n\\n/** One minute in milliseconds. */\\nexport const ONE_MINUTE = ONE_SECOND * 60;\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {string} e.g. \\\"$123.45\\\"\\n */\\nexport function formatMoney(ns, amount) {\\n  return '$' + ns.formatNumber(amount, 2);\\n}\\n\\n/**\\n * @param {import(\\\"../NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Style]} style\\n * @returns {import(\\\"../NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\\n/**\\n * @typedef Style\\n * @property {[string]} background\\n * @property {[string]} color\\n * @property {['flex'|'grid']} display\\n * @property {['left'|'center'|'right']} textAlign\\n */\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"manage-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND } from 'utils';\\n\\n/**\\n * Manages purchasing and upgrading Hacknet nodes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    // Attempt to purchase a new node.\\n    if (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n      ns.hacknet.purchaseNode();\\n    }\\n\\n    const nodeCount = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodeCount; i++) {\\n      // Upgrade level.\\n      upgrade(() => ns.hacknet.upgradeLevel(i));\\n\\n      // Upgrade RAM.\\n      upgrade(() => ns.hacknet.upgradeRam(i));\\n\\n      // Upgrade cores.\\n      upgrade(() => ns.hacknet.upgradeCore(i));\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Upgrades using the given upgrade function until it is no longer possible.\\n *\\n * @param {function():boolean} upgradeFunction\\n */\\nfunction upgrade(upgradeFunction) {\\n  let canUpgrade;\\n  do {\\n    canUpgrade = upgradeFunction();\\n  } while (canUpgrade);\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"server\":\"home\"}}],[\"manage-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers, updateServers } from 'database/servers';\\nimport { HOME_HOSTNAME, ONE_MINUTE } from 'utils';\\n\\nconst MAX_RAM_POWER = 20;\\n\\n/**\\n * Manages purchasing and upgrading servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const purchasedHostnames = getServers(ns)\\n    .filter(server => server.isPurchased)\\n    .map(server => server.hostname);\\n\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n\\n    for (let power = MAX_RAM_POWER; power > 1; power--) {\\n      // Attempt to purchase a server.\\n      const ram = Math.pow(2, power);\\n      if (ns.getPurchasedServerCost(ram) <= moneyAvailable) {\\n        const hostname = ns.purchaseServer('lauren', ram);\\n        if (hostname.length > 0) {\\n          purchasedHostnames.push(hostname);\\n          updateServers(ns, {\\n            hostname: hostname,\\n            isPurchased: true,\\n            maxRam: ram,\\n            maxMoney: 0,\\n            minSecurity: 0,\\n            baseSecurity: 0,\\n            hackingLevel: 0,\\n          });\\n          ns.scriptKill('manage-hacking.js', HOME_HOSTNAME);\\n          ns.run('manage-hacking.js');\\n        }\\n      }\\n\\n      // Attempt to upgrade an existing server.\\n      // for (const hostname of purchasedHostnames) {\\n\\n      // }\\n    }\\n\\n    await ns.sleep(ONE_MINUTE);\\n  }\\n}\\n\",\"filename\":\"manage-servers.js\",\"server\":\"home\"}}],[\"stats-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, getAllHostnames, createReactElement } from 'utils';\\n\\n/** @type {Style} */ const CELL_STYLING = {\\n  padding: '2px 8px',\\n  borderWidth: '.5px',\\n  borderStyle: 'solid',\\n};\\n\\n/**\\n * @typedef Column\\n * @property {string} name\\n * @property {import('utils').Style} style\\n * @property {'⏶'|'⏷'} sortSymbol\\n * @property {function(NS, string string):number} sortFunction\\n */\\n\\n/** @type {Column} */ const HOSTNAME_COLUMN = {\\n  name: 'Hostname',\\n  style: {},\\n  sortSymbol: '⏷',\\n  sortFunction: (_, hostname1, hostname2) => hostname1.localeCompare(hostname2),\\n};\\n\\n/** @type {Column} */ const AVAILABLE_MONEY_COLUMN = {\\n  name: 'Available Money',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏷',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerMoneyAvailable(hostname2) -\\n      ns.getServerMoneyAvailable(hostname1)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const MAX_MONEY_COLUMN = {\\n  name: 'Max Money',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏷',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return ns.getServerMaxMoney(hostname2) - ns.getServerMaxMoney(hostname1);\\n  },\\n};\\n\\n/** @type {Column} */ const CURRENT_SECURITY_COLUMN = {\\n  name: 'Current Security',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerSecurityLevel(hostname1) -\\n      ns.getServerSecurityLevel(hostname2)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const MIN_SECURITY_COLUMN = {\\n  name: 'Min Security',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerMinSecurityLevel(hostname1) -\\n      ns.getServerMinSecurityLevel(hostname2)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const BASE_SECURITY_COLUMN = {\\n  name: 'Base Security',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerBaseSecurityLevel(hostname1) -\\n      ns.getServerBaseSecurityLevel(hostname2)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const HACKING_LEVEL_COLUMN = {\\n  name: 'Hacking Level',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerRequiredHackingLevel(hostname1) -\\n      ns.getServerRequiredHackingLevel(hostname2)\\n    );\\n  },\\n};\\n\\nconst COLUMNS = [\\n  HOSTNAME_COLUMN,\\n  AVAILABLE_MONEY_COLUMN,\\n  MAX_MONEY_COLUMN,\\n  CURRENT_SECURITY_COLUMN,\\n  MIN_SECURITY_COLUMN,\\n  BASE_SECURITY_COLUMN,\\n  HACKING_LEVEL_COLUMN,\\n];\\n\\n/**\\n * List out the stats of all servers.\\n *\\n * Add an argument without spaces for sorting by that column. For example, to\\n * sort by hacking level, run: `run server-stats.js hackinglevel`\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  let primaryColor = ns.ui.getTheme().primary.substring(1);\\n  if (primaryColor.length === 3) {\\n    const colors = primaryColor.split('');\\n    primaryColor =\\n      colors[0] + colors[0] + colors[1] + colors[1] + colors[2] + colors[2];\\n  }\\n  CELL_STYLING.borderColor = `#${primaryColor}33`;\\n\\n  const hostnames = getAllHostnames(ns);\\n\\n  // Sort hostnames.\\n  let sortByColumn = HOSTNAME_COLUMN;\\n  if (ns.args[0]) {\\n    const column = COLUMNS.find(\\n      column =>\\n        column.name.replaceAll(' ', '').toLowerCase() ===\\n        ns.args[0].toLowerCase()\\n    );\\n    if (column) sortByColumn = column;\\n  }\\n  hostnames.sort((hostname1, hostname2) =>\\n    sortByColumn.sortFunction(ns, hostname1, hostname2)\\n  );\\n\\n  const serverStats = hostnames.map(hostname => getServerStats(ns, hostname));\\n\\n  // Add in a row for the header.\\n  const cells = Object.keys(serverStats[0]).map(columnName => {\\n    const column = COLUMNS.find(column => column.name === columnName);\\n    return createReactElement(\\n      columnName + (column === sortByColumn ? ' ' + column.sortSymbol : ''),\\n      {\\n        ...column.style,\\n        ...CELL_STYLING,\\n        fontWeight: 'bold',\\n      }\\n    );\\n  });\\n\\n  // Add in a row for each server.\\n  for (const stats of serverStats) {\\n    cells.push(...Object.values(stats));\\n  }\\n\\n  ns.tprintRaw(\\n    React.createElement(\\n      'div',\\n      {\\n        style: {\\n          border: `.5px ${CELL_STYLING.borderColor} solid`,\\n          display: 'grid',\\n          gridTemplateColumns: Object.keys(serverStats[0])\\n            .map(_ => '1fr')\\n            .join(' '),\\n        },\\n      },\\n      ...cells\\n    )\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n * @returns {Object.<string, import('../NetscriptDefinitions').ReactElement>} stats\\n */\\nfunction getServerStats(ns, hostname) {\\n  const stats = {};\\n\\n  /**\\n   * @param {Column} column\\n   * @param {import('../NetscriptDefinitions').ReactNode} content\\n   * @param {import('utils').Style} style additional styling\\n   */\\n  const addStat = (column, content, style) => {\\n    stats[column.name] = createReactElement(content, {\\n      ...CELL_STYLING,\\n      ...column.style,\\n    });\\n  };\\n\\n  addStat(HOSTNAME_COLUMN, hostname);\\n\\n  // Money stats.\\n  const maxMoneyAmount = ns.getServerMaxMoney(hostname);\\n  addStat(\\n    AVAILABLE_MONEY_COLUMN,\\n    maxMoneyAmount === 0\\n      ? '-'\\n      : formatMoney(ns, ns.getServerMoneyAvailable(hostname))\\n  );\\n  addStat(\\n    MAX_MONEY_COLUMN,\\n    maxMoneyAmount === 0 ? '-' : formatMoney(ns, maxMoneyAmount)\\n  );\\n\\n  // Security stats.\\n  addStat(\\n    CURRENT_SECURITY_COLUMN,\\n    ns.formatNumber(ns.getServerSecurityLevel(hostname), 2)\\n  );\\n  addStat(MIN_SECURITY_COLUMN, ns.getServerMinSecurityLevel(hostname));\\n  addStat(BASE_SECURITY_COLUMN, ns.getServerBaseSecurityLevel(hostname));\\n\\n  // Hacking stats.\\n  addStat(HACKING_LEVEL_COLUMN, ns.getServerRequiredHackingLevel(hostname));\\n\\n  return stats;\\n}\\n\",\"filename\":\"stats-hacking.js\",\"server\":\"home\"}}],[\"database/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing servers.txt */\\n\\n/**\\n * @typedef Server\\n * @property {string} hostname\\n * @property {[boolean]} isPurchased\\n * @property {[number]} maxRam maximum RAM the server has\\n * @property {[number]} maxMoney\\n * @property {[number]} minSecurity\\n * @property {[number]} baseSecurity\\n * @property {[number]} hackingLevel required hacking level\\n */\\n\\nconst SERVERS_FILENAME = 'database/servers.txt';\\n\\n/**\\n * Updates any existing servers in the database and adds any new servers to the\\n * database.\\n *\\n * @param {NS} ns\\n * @param  {...Server} serversToUpdate\\n */\\nexport function updateServers(ns, ...serversToUpdate) {\\n  const databaseServers = getServers(ns);\\n\\n  for (const server of serversToUpdate) {\\n    const databaseServer = databaseServers.find(\\n      databaseServer => databaseServer.hostname === server.hostname\\n    );\\n    if (!databaseServer) {\\n      databaseServers.push(server);\\n    } else {\\n      Object.keys(server).forEach(key => (databaseServer[key] = server[key]));\\n    }\\n  }\\n\\n  ns.write(SERVERS_FILENAME, JSON.stringify(databaseServers), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Server[]} all servers in file\\n */\\nexport function getServers(ns) {\\n  return JSON.parse(ns.read(SERVERS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/servers.js\",\"server\":\"home\"}}],[\"manage-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils';\\n\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Manages hacking in all servers, reserving enough RAM in Home server to run\\n * all other scripts.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  // Get all servers from database.\\n  const allServers = getServers(ns);\\n\\n  while (true) {\\n    // Get amount of RAM to resolve based on the combination of all scripts in\\n    // the Home server.\\n    const ramToReserveInHome = ns\\n      .ls(HOME_HOSTNAME, '.js')\\n      .filter(filename => !ns.isRunning(filename, HOME_HOSTNAME))\\n      .map(filename => ns.getScriptRam(filename))\\n      .reduce((a, b) => Math.max(a, b));\\n\\n    // Get servers to hack, grow, and weaken.\\n    const serversToHack = getServersToHack(ns, allServers);\\n    const serversToGrow = getServersToGrow(ns, allServers);\\n    const serversToWeaken = getServersToWeaken(ns, allServers);\\n\\n    // Get all servers that can run scripts.\\n    const runnableServers = allServers.filter(\\n      server => ns.hasRootAccess(server.hostname) && server.maxRam > 0\\n    );\\n\\n    for (const runnableServer of runnableServers) {\\n      // Hack.\\n      if (serversToHack.length > 0) {\\n        const serverToHack = serversToHack.shift();\\n        serverToHack.threadsNeeded -= runScript(\\n          ns,\\n          'hack.js',\\n          runnableServer,\\n          serverToHack.hostname,\\n          serverToHack.threadsNeeded,\\n          ramToReserveInHome\\n        );\\n        if (serverToHack.threadsNeeded > 0) serversToHack.unshift(serverToHack);\\n      }\\n\\n      // Grow.\\n      if (serversToGrow.length > 0) {\\n        const serverToGrow = serversToGrow.shift();\\n        serverToGrow.threadsNeeded -= runScript(\\n          ns,\\n          'grow.js',\\n          runnableServer,\\n          serverToGrow.hostname,\\n          serverToGrow.threadsNeeded,\\n          ramToReserveInHome\\n        );\\n        if (serverToGrow.threadsNeeded > 0) serversToGrow.unshift(serverToGrow);\\n      }\\n\\n      // Weaken.\\n      if (serversToWeaken.length > 0) {\\n        const serverToWeaken = serversToWeaken.shift();\\n        serverToWeaken.threadsNeeded -= runScript(\\n          ns,\\n          'weaken.js',\\n          runnableServer,\\n          serverToWeaken.hostname,\\n          serverToWeaken.threadsNeeded,\\n          ramToReserveInHome\\n        );\\n        if (serverToWeaken.threadsNeeded > 0) {\\n          serversToWeaken.unshift(serverToWeaken);\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND * 10);\\n  }\\n}\\n\\n/**\\n * Runs a script on a server with the targetHostname passed as an argument.\\n *\\n * @param {NS} ns\\n * @param {string} scriptName\\n * @param {import('database/servers').Server} server\\n * @param {string} targetHostname\\n * @param {number} maxThreads maximum number of threads to run\\n * @param {number} ramToReserveinHome\\n * @returns {number} number of threads used\\n */\\nfunction runScript(\\n  ns,\\n  scriptName,\\n  server,\\n  targetHostname,\\n  maxThreads,\\n  ramToReserveinHome\\n) {\\n  const threadsAvailable = Math.floor(\\n    (server.maxRam - ns.getServerUsedRam(server.hostname)) /\\n      ns.getScriptRam(scriptName, server.hostname) -\\n      (server.hostname === HOME_HOSTNAME ? ramToReserveinHome : 0)\\n  );\\n  if (threadsAvailable <= 0) return 0;\\n  const threads = Math.min(threadsAvailable, maxThreads);\\n  const pid = ns.exec(scriptName, server.hostname, threads, targetHostname);\\n  return pid === 0 ? 0 : threads;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} allServers\\n * @returns {import('database/servers').Server[]}\\n *          servers that can be hacked sorted from least time to hack to most\\n *          adding in a `threadsNeeded` field to indicate the number of threads\\n *          needed to hack half the available money\\n */\\nfunction getServersToHack(ns, allServers) {\\n  const servers = allServers\\n    .filter(\\n      server =>\\n        ns.hasRootAccess(server.hostname) &&\\n        server.hackingLevel <= ns.getHackingLevel() &&\\n        server.maxMoney > 0 &&\\n        ns.getServerMoneyAvailable(server.hostname) >\\n          Math.min(server.maxMoney / 2, MIN_MONEY_AMOUNT) &&\\n        ns.getServerSecurityLevel(server.hostname) < server.baseSecurity\\n    )\\n    .map(server => {\\n      server.threadsNeeded = Math.floor(\\n        ns.hackAnalyzeThreads(\\n          server.hostname,\\n          ns.getServerMoneyAvailable(server.hostname) / 2\\n        )\\n      );\\n      return server;\\n    });\\n  servers.sort((server1, server2) => {\\n    ns.getHackTime(server1.hostname) - ns.getHackTime(server2.hostname);\\n  });\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} allServers\\n * @returns {import('database/servers').Server[]}\\n *          servers that can be grown\\n */\\nfunction getServersToGrow(ns, allServers) {\\n  const servers = allServers\\n    .filter(\\n      server =>\\n        ns.hasRootAccess(server.hostname) &&\\n        server.hackingLevel <= ns.getHackingLevel() &&\\n        server.maxMoney > 0 &&\\n        ns.getServerMoneyAvailable(server.hostname) < server.maxMoney\\n    )\\n    .map(server => {\\n      server.threadsNeeded = Math.floor(\\n        ns.growthAnalyze(\\n          server.hostname,\\n          Math.floor(\\n            server.maxMoney / ns.getServerMoneyAvailable(server.hostname)\\n          )\\n        )\\n      );\\n      return server;\\n    });\\n  servers.sort((server1, server2) => {\\n    ns.getGrowTime(server1.hostname) - ns.getGrowTime(server2.hostname);\\n  });\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} allServers\\n * @returns {import('database/servers').Server[]}\\n *          servers that can be weakened\\n */\\nfunction getServersToWeaken(ns, allServers) {\\n  const servers = allServers\\n    .filter(\\n      server =>\\n        ns.hasRootAccess(server.hostname) &&\\n        server.hackingLevel <= ns.getHackingLevel() &&\\n        server.maxMoney > 0 &&\\n        ns.getServerSecurityLevel(server.hostname) > server.minSecurity\\n    )\\n    .map(server => {\\n      const securityToDecrease =\\n        ns.getServerSecurityLevel(server.hostname) - server.minSecurity;\\n      let threads = 0;\\n      do {\\n        threads++;\\n      } while (ns.weakenAnalyze(threads) < securityToDecrease);\\n      server.threadsNeeded = threads;\\n      return server;\\n    });\\n  servers.sort((server1, server2) => {\\n    ns.getWeakenTime(server1.hostname) - ns.getWeakenTime(server2.hostname);\\n  });\\n  return servers;\\n}\\n\",\"filename\":\"manage-hacking.js\",\"server\":\"home\"}}],[\"gain-access.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { ONE_MINUTE } from 'utils';\\n\\n/**\\n * Attempts to gain root access to servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  let servers = getServers(ns);\\n\\n  do {\\n    const serversToRemove = [];\\n    for (const server of servers) {\\n      const hostname = server.hostname;\\n\\n      // Attempt to run programs to open ports and nuke to gain root access.\\n      runProgram(() => ns.brutessh(hostname));\\n      runProgram(() => ns.ftpcrack(hostname));\\n      runProgram(() => ns.httpworm(hostname));\\n      runProgram(() => ns.relaysmtp(hostname));\\n      runProgram(() => ns.sqlinject(hostname));\\n      runProgram(() => ns.nuke(hostname));\\n\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over scripts to faciliate hacking, weakening, and growing.\\n        ns.scp(['hack.js', 'grow.js', 'weaken.js'], hostname);\\n\\n        serversToRemove.push(server);\\n      }\\n    }\\n    servers = servers.filter(server => !serversToRemove.includes(server));\\n\\n    await ns.sleep(ONE_MINUTE);\\n  } while (servers.length > 0);\\n}\\n\\n/** @param {function()} programFunction */\\nfunction runProgram(programFunction) {\\n  try {\\n    programFunction();\\n  } catch (_) {}\\n}\\n\",\"filename\":\"gain-access.js\",\"server\":\"home\"}}],[\"setup.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Run this script at the beginning\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n}\\n\",\"filename\":\"setup.js\",\"server\":\"home\"}}],[\"init.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateServers } from 'database/servers';\\nimport { getAllHostnames } from 'utils';\\n\\n/**\\n * Run this script at the beginning of every session.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  // Optionally clean up files in all servers if there is enough RAM to do so.\\n  ns.run('cleanup-files.js');\\n\\n  // Reset database files.\\n  const allHostnames = getAllHostnames(ns);\\n  const purchasedHostnames = ns.getPurchasedServers();\\n  updateServers(\\n    ns,\\n    ...allHostnames.map(hostname =>\\n      getServerData(ns, hostname, purchasedHostnames)\\n    )\\n  );\\n\\n  // Start scripts.\\n  // ns.tprint(ns.run('gain-access.js'));\\n  // ns.tprint(ns.run('manage-hacking.js'));\\n  // ns.run('manage-hacknet.js');\\n}\\n\\n/**\\n * Get stats of a server to save to the database.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {string[]} purchasedHostnames\\n * @returns {import('database/servers').Server} server\\n */\\nexport function getServerData(ns, hostname, purchasedHostnames) {\\n  return {\\n    hostname: hostname,\\n    isPurchased: purchasedHostnames.includes(hostname),\\n    maxRam: ns.getServerMaxRam(hostname),\\n    maxMoney: ns.getServerMaxMoney(hostname),\\n    minSecurity: ns.getServerMinSecurityLevel(hostname),\\n    baseSecurity: ns.getServerBaseSecurityLevel(hostname),\\n    hackingLevel: ns.getServerRequiredHackingLevel(hostname),\\n  };\\n}\\n\",\"filename\":\"init.js\",\"server\":\"home\"}}],[\"cleanup-files.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, getAllHostnames } from 'utils';\\n\\n/**\\n * Stops all scripts and removes JS files from every server except the home\\n * server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const allHostnames = getAllHostnames(ns);\\n  for (const hostname of allHostnames) {\\n    // Kill all scripts.\\n    ns.killall(hostname);\\n\\n    if (hostname === HOME_HOSTNAME) continue;\\n\\n    // Remove files.\\n    const filenames = ns.ls(hostname, '.js');\\n    for (const filename of filenames) ns.rm(filename, hostname);\\n  }\\n}\\n\",\"filename\":\"cleanup-files.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"manage-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { HOME_HOSTNAME } from 'utils';\\n\\n/**\\n * Manages contracts.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const servers = getServers(ns);\\n  for (const server of servers) {\\n    const contracts = ns.ls(server.hostname, '.cct');\\n    for (const contract of contracts) {\\n      ns.tprintf(\\n        'home; ' +\\n          getPath(ns, server.hostname)\\n            .map(hostname => `connect ${hostname};`)\\n            .join(' ') +\\n          ` run ${contract}`\\n      );\\n    }\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} targetHostname to connect to\\n * @param {[string[]]} pathThusFar\\n * @returns {string[]} array of hostnames starting from the one closest to home\\n */\\nfunction getPath(ns, targetHostname, pathThusFar) {\\n  pathThusFar = pathThusFar ?? [];\\n  if (targetHostname === HOME_HOSTNAME) return pathThusFar;\\n\\n  const adjacentHostnames = ns\\n    .scan(targetHostname)\\n    .filter(adjacentHostname => adjacentHostname !== pathThusFar[0]);\\n  if (adjacentHostnames.length === 0) return [];\\n\\n  for (const adjacentHostname of adjacentHostnames) {\\n    const path = getPath(ns, adjacentHostname, [\\n      targetHostname,\\n      ...pathThusFar,\\n    ]);\\n    if (path.length > 0) return path;\\n  }\\n  return []; // Should not reach here.\\n}\\n\",\"filename\":\"manage-contracts.js\",\"server\":\"home\"}}],[\"connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Prints out a command to connect to a server.\\n */\\n\",\"filename\":\"connect.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *     3 + 1\\n *     2 + 2\\n *     2 + 1 + 1\\n *     1 + 1 + 1 + 1\\n *\\n * How many different distinct ways can the number 46 be written as a sum of at\\n * least two positive integers?\\n *\\n * @param {number} input\\n */\\nfunction solve(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\\nconsole.log(solve(4)); // 4\\nconsole.log(solve(46)); // 105557\\n\",\"filename\":\"contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"tests/total-ways-to-sum-test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"tests/total-ways-to-sum-test.js\",\"server\":\"home\"}}],[\"contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * You are given the following array of integers:\\n *\\n * 3,7,10,5,0,5,6,0,0\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} input\\n */\\nfunction solve(input) {\\n  // for (const maxJump )\\n}\\n\\nconsole.log(solve([3, 7, 10, 5, 0, 5, 6, 0, 0]));\\n\",\"filename\":\"contracts/array-jumping-game.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"lauren\",\"lauren-1\",\"lauren-0\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-14\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"database/servers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/servers.txt\",\"text\":\"[{\\\"hostname\\\":\\\"n00dles\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":4,\\\"maxMoney\\\":1750000,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":50000000,\\\"minSecurity\\\":3,\\\"baseSecurity\\\":10,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":57500000,\\\"minSecurity\\\":3,\\\"baseSecurity\\\":10,\\\"hackingLevel\\\":5},{\\\"hostname\\\":\\\"joesguns\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":62500000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":10},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":75000000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":30},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":100000000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":40},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":500000000,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"darkweb\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-1\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-0\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":512,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-2\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-3\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-4\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-5\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-6\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-7\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"home\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"CSEC\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":59},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":1125000000,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":150},{\\\"hostname\\\":\\\"phantasy\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":600000000,\\\"minSecurity\\\":7,\\\"baseSecurity\\\":20,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"the-hub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":4538355050,\\\"minSecurity\\\":12,\\\"baseSecurity\\\":35,\\\"hackingLevel\\\":325},{\\\"hostname\\\":\\\"netlink\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":6875000000,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":69,\\\"hackingLevel\\\":418},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":7578318250,\\\"minSecurity\\\":17,\\\"baseSecurity\\\":51,\\\"hackingLevel\\\":464},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":17613998050,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":63,\\\"hackingLevel\\\":732},{\\\"hostname\\\":\\\"syscore\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":12016650075,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":71,\\\"hackingLevel\\\":625},{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":355},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"maxMoney\\\":6250000000,\\\"minSecurity\\\":17,\\\"baseSecurity\\\":52,\\\"hackingLevel\\\":515},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":26910574700,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":897},{\\\"hostname\\\":\\\"computek\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":5789441325,\\\"minSecurity\\\":19,\\\"baseSecurity\\\":58,\\\"hackingLevel\\\":312},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":2109197100,\\\"minSecurity\\\":18,\\\"baseSecurity\\\":55,\\\"hackingLevel\\\":287},{\\\"hostname\\\":\\\"catalyst\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":9796752500,\\\"minSecurity\\\":21,\\\"baseSecurity\\\":64,\\\"hackingLevel\\\":409},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":8857326450,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":77,\\\"hackingLevel\\\":449},{\\\"hostname\\\":\\\"zer0\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":187500000,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":75},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":68750000,\\\"minSecurity\\\":7,\\\"baseSecurity\\\":20,\\\"hackingLevel\\\":20},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":250000000,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":80},{\\\"hostname\\\":\\\"omega-net\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":1739677775,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":219},{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":219},{\\\"hostname\\\":\\\"neo-net\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":125000000,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":25,\\\"hackingLevel\\\":50},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":1368431025,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":44,\\\"hackingLevel\\\":229},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":5370810275,\\\"minSecurity\\\":16,\\\"baseSecurity\\\":48,\\\"hackingLevel\\\":430},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"maxMoney\\\":20846529175,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":70,\\\"hackingLevel\\\":755},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":13481237650,\\\"minSecurity\\\":19,\\\"baseSecurity\\\":57,\\\"hackingLevel\\\":519},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":20644865875,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":65,\\\"hackingLevel\\\":834},{\\\"hostname\\\":\\\"omnia\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":22911438750,\\\"minSecurity\\\":31,\\\"baseSecurity\\\":94,\\\"hackingLevel\\\":935},{\\\"hostname\\\":\\\"defcomm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":21366888700,\\\"minSecurity\\\":31,\\\"baseSecurity\\\":92,\\\"hackingLevel\\\":978},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":34253008600,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":89,\\\"hackingLevel\\\":841},{\\\"hostname\\\":\\\"infocomm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":15577744225,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":89,\\\"hackingLevel\\\":943},{\\\"hostname\\\":\\\"nova-med\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":31203094150,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":70,\\\"hackingLevel\\\":796},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":18745522150,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":65,\\\"hackingLevel\\\":782},{\\\"hostname\\\":\\\"helios\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":17189673350,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":91,\\\"hackingLevel\\\":877},{\\\"hostname\\\":\\\"omnitek\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"maxMoney\\\":367967611850,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":976},{\\\"hostname\\\":\\\".\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":520},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":447868430500,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":81,\\\"hackingLevel\\\":935},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":22500000000,\\\"minSecurity\\\":20,\\\"baseSecurity\\\":59,\\\"hackingLevel\\\":976},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":20390807900,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":78,\\\"hackingLevel\\\":803},{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":533},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":2048,\\\"maxMoney\\\":42507216100,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":87,\\\"hackingLevel\\\":1023},{\\\"hostname\\\":\\\"vitalife\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"maxMoney\\\":19361177000,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":89,\\\"hackingLevel\\\":811},{\\\"hostname\\\":\\\"4sigma\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":537267177450,\\\"minSecurity\\\":18,\\\"baseSecurity\\\":55,\\\"hackingLevel\\\":921},{\\\"hostname\\\":\\\"blade\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"maxMoney\\\":867140118450,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":95,\\\"hackingLevel\\\":1198},{\\\"hostname\\\":\\\"nwo\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":776857421475,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1048},{\\\"hostname\\\":\\\"megacorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":1077481225550,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1204},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":25000000,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1406},{\\\"hostname\\\":\\\"ecorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":951172729825,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1119},{\\\"hostname\\\":\\\"stormtech\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":28068640975,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":91,\\\"hackingLevel\\\":1006},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":553013486325,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":95,\\\"hackingLevel\\\":1219},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":542064152675,\\\"minSecurity\\\":18,\\\"baseSecurity\\\":53,\\\"hackingLevel\\\":1058},{\\\"hostname\\\":\\\"The-Cave\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":925},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":21345119225,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":71,\\\"hackingLevel\\\":919},{\\\"hostname\\\":\\\"zb-def\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":24710895000,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":65,\\\"hackingLevel\\\":815},{\\\"hostname\\\":\\\"microdyne\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":17259145425,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":68,\\\"hackingLevel\\\":802},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":17425530050,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":70,\\\"hackingLevel\\\":531},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":8,\\\"maxMoney\\\":39321776525,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":78,\\\"hackingLevel\\\":782},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":11250000000,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":46,\\\"hackingLevel\\\":782},{\\\"hostname\\\":\\\"deltaone\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":34521876625,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":83,\\\"hackingLevel\\\":845},{\\\"hostname\\\":\\\"unitalife\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"maxMoney\\\":26884793100,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":80,\\\"hackingLevel\\\":816},{\\\"hostname\\\":\\\"icarus\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"maxMoney\\\":24241118525,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":90,\\\"hackingLevel\\\":868},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":28578988500,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":84,\\\"hackingLevel\\\":858},{\\\"hostname\\\":\\\"solaris\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"maxMoney\\\":18358160575,\\\"minSecurity\\\":23,\\\"baseSecurity\\\":70,\\\"hackingLevel\\\":767},{\\\"hostname\\\":\\\"lauren-8\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":64,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-9\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-10\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-11\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-12\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-13\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-14\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-15\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-16\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-17\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-18\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":8,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-19\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-20\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-21\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-22\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":16,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0},{\\\"hostname\\\":\\\"lauren-23\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32,\\\"maxMoney\\\":0,\\\"minSecurity\\\":0,\\\"baseSecurity\\\":0,\\\"hackingLevel\\\":0}]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1921,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11526,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,549,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3294,\"onlineMoneyMade\":0,\"onlineRunningTime\":2405.010000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,120,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":720,\"onlineMoneyMade\":0,\"onlineRunningTime\":2385.010000000022,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,104,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":624,\"onlineMoneyMade\":0,\"onlineRunningTime\":2054.8100000003224,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,902,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5412,\"onlineMoneyMade\":0,\"onlineRunningTime\":1633.6100000002345,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":22,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,111,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":666,\"onlineMoneyMade\":0,\"onlineRunningTime\":1470.6100000001975,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,111,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":666,\"onlineMoneyMade\":0,\"onlineRunningTime\":1460.6100000001952,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,108,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":648,\"onlineMoneyMade\":0,\"onlineRunningTime\":1420.6100000001861,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"gain-access.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1679.810000000245,\"ramUsage\":2.55,\"server\":\"home\",\"scriptKey\":\"gain-access.js*[]\",\"title\":\"gain-access.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1173.2100000001299,\"ramUsage\":6.8,\"server\":\"home\",\"scriptKey\":\"manage-hacking.js*[]\",\"title\":\"manage-hacking.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-servers.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"ramUsage\":6.2,\"server\":\"home\",\"scriptKey\":\"manage-servers.js*[]\",\"title\":\"manage-servers.js \",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"2.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38046909193,\"moneyMax\":951172729825,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1119,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"6.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43099249022,\"moneyMax\":1077481225550,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1204,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"9.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":17914737220,\"moneyMax\":447868430500,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":935,\"serverGrowth\":80,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-618416.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[2,23,38,14,28,7,17],[44,29,26,2,16,15,14],[33,38,42,43,26,16,41],[6,4,14,22,21,13,21],[47,8,43,5,13,5,21],[20,22,37,25,12,37,12],[43,12,47,23,12,16,14],[38,26,27,42,12,47,9],[50,19,15,38,19,40,3],[3,16,45,36,24,7,36],[18,21,40,19,32,28,18],[26,26,25,20,16,2,27],[2,15,9,9,7,40,39],[3,19,33,3,45,15,42]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"25.8.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":34685604738,\"moneyMax\":867140118450,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1198,\"serverGrowth\":67,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"12.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31074296859,\"moneyMax\":776857421475,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1048,\"serverGrowth\":81,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-386067.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"QQQQQQbb5555555HH2222222aay888866nnnnnnnnnnaaVVVVYYJJJJMMMMMWWsshhrrrrrrrrrrC4xz66z\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"6.0.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":21682566107,\"moneyMax\":542064152675,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1058,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"79.4.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":14718704474,\"moneyMax\":367967611850,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":976,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"18.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":21490687098,\"moneyMax\":537267177450,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":921,\"serverGrowth\":80,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-228493.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7eb7fTnd343Y4E187tXC5S5U662z4332rX747EL4Fxza973D7c339M6TBB8vBP04KOMA373E3J247HxdGOSn\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"8.4.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":22120539453,\"moneyMax\":553013486325,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1219,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"9.9.6.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1700288644,\"moneyMax\":42507216100,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1023,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"19.2.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1406,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"30.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1122745639,\"moneyMax\":28068640975,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1006,\"serverGrowth\":70,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"45.6.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":854675548,\"moneyMax\":21366888700,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":978,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"29.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":623109769,\"moneyMax\":15577744225,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":943,\"serverGrowth\":36,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"40.2.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":687586934,\"moneyMax\":17189673350,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":877,\"serverGrowth\":72,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"10.0.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":774447080,\"moneyMax\":19361177000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":811,\"serverGrowth\":71,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"95.8.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":969644741,\"moneyMax\":24241118525,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":868,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"61.2.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1143159540,\"moneyMax\":28578988500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":858,\"serverGrowth\":88,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[977620.1385205898,74,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1554,\"onlineMoneyMade\":977620.1385205898,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"univ-energy\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":37,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"92.8.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":815632316,\"moneyMax\":20390807900,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":75,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"61.2.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":690365817,\"moneyMax\":17259145425,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":802,\"serverGrowth\":83,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"69.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":853804769,\"moneyMax\":21345119225,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":919,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"46.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":825794635,\"moneyMax\":20644865875,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":834,\"serverGrowth\":86,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"70.0.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1076422988,\"moneyMax\":26910574700,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":897,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"95.5.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":916457550,\"moneyMax\":22911438750,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":935,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"72.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"zb-def\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"zb-def\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":988435800,\"moneyMax\":24710895000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":815,\"serverGrowth\":66,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512832.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC FRAME ENTER MACRO PRINT\",1],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"93.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"applied-energetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"applied-energetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":749820886,\"moneyMax\":18745522150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"78.0.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":734326423,\"moneyMax\":18358160575,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":767,\"serverGrowth\":76,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"46.9.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1380875065,\"moneyMax\":34521876625,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":845,\"serverGrowth\":50,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655166-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,-5,4,4,5,-4,7,6,-9,4,4,4,-9,7,10,9,8,7,2,-7,-10,2,-7,1,9,7,-8,7,4,-7,-4,-10,9,8,7],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"86.4.0.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1572871061,\"moneyMax\":39321776525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":81,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[201145.123515258,20,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":276,\"onlineMoneyMade\":201145.123515258,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"global-pharm\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":4,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"12.9.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"nova-med\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"nova-med\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1248123766,\"moneyMax\":31203094150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":796,\"serverGrowth\":72,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"40.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1370120344,\"moneyMax\":34253008600,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":841,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"12.4.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1075391724,\"moneyMax\":26884793100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":816,\"serverGrowth\":73,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[301816.3677001124,27,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":459,\"onlineMoneyMade\":301816.3677001124,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"unitalife\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":9,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965946-JoesGuns.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100010110010011\",\"reward\":{\"type\":2,\"name\":\"Joe's Guns\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862174.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11000001000111111011011000000001\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"7.1.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":704559922,\"moneyMax\":17613998050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":732,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[547543.4834050571,45,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":621,\"onlineMoneyMade\":547543.4834050571,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":9,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"16.7.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":539249506,\"moneyMax\":13481237650,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":519,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"18.8.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":697021202,\"moneyMax\":17425530050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":531,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[423130.4857481218,37,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1221,\"onlineMoneyMade\":423130.4857481218,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":37,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"3.5.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":354293058,\"moneyMax\":8857326450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":449,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[2610428.5526260165,222,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2886,\"onlineMoneyMade\":2610428.5526260165,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"aevum-police\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":37,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"66.3.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":214832411,\"moneyMax\":5370810275,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":430,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"82.7.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":833861167,\"moneyMax\":20846529175,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":755,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578963-AlphaEnterprises.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"QUEUEMOUSEMODEMTRASHMACRO\",\"RESTORE\"],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-945075.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,0,5,0,7,9,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"98.0.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":303132730,\"moneyMax\":7578318250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":464,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,4068,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24408,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":36,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"62.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"syscore\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"syscore\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":480666003,\"moneyMax\":12016650075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":625,\"serverGrowth\":60,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-931849-JoesGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[198,[1,2,3,5,6,10,12,14,15,18,19]],\"reward\":{\"type\":2,\"name\":\"Joe's Guns\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-849955-CentralIntelligenceAgency.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":580354051,\"reward\":{\"type\":2,\"name\":\"Central Intelligence Agency\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"19.1.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"computek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":391870100,\"moneyMax\":9796752500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":33,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"93.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35.048,\"minDifficulty\":12,\"moneyAvailable\":182432304.68444204,\"moneyMax\":4538355050,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":325,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"99.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"computek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"computek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":231577653,\"moneyMax\":5789441325,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":312,\"serverGrowth\":64,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433874.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1571427257\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"73.7.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":418,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"36.1.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"johnson-ortho\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"johnson-ortho\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":84367884,\"moneyMax\":2109197100,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":287,\"serverGrowth\":44,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"48.8.8.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":36.1700000000003,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"58.0.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":927936.7827567671,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"48.0.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":11.023999999999692,\"minDifficulty\":3,\"moneyAvailable\":151403.11786630485,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"36.2.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.505999999999757,\"minDifficulty\":5,\"moneyAvailable\":316192.0873468041,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"39.2.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.966000000000083,\"minDifficulty\":8,\"moneyAvailable\":957412.0341376512,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537093-Netburners.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000000101000011101100011111001100010100101010101101110011110100\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"54.0.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20.134000000000167,\"minDifficulty\":7,\"moneyAvailable\":561198.1221891643,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"9.3.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.989999999999995,\"minDifficulty\":8,\"moneyAvailable\":857329.8024716387,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"36.5.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":28.848,\"minDifficulty\":10,\"moneyAvailable\":44333333.333333336,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,4068,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24408,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"82.7.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.113999999999924,\"minDifficulty\":5,\"moneyAvailable\":552206.7487934458,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"89.7.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15.035999999999975,\"minDifficulty\":5,\"moneyAvailable\":673417.4113464766,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"67.1.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":19.760000000000012,\"minDifficulty\":7,\"moneyAvailable\":17765432.613996625,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"36.0.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.635999999999909,\"minDifficulty\":5,\"moneyAvailable\":840526.2789883448,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-535404.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,6,9,10,1,0,7,7,4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"77.7.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.447999999999997,\"minDifficulty\":8,\"moneyAvailable\":69888208.63308874,\"moneyMax\":1739677775,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":219,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"5.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"crush-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"crush-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":54737241,\"moneyMax\":1368431025,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":229,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"92.7.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30.988000000000053,\"minDifficulty\":10,\"moneyAvailable\":3696095.731915528,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"30.4.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":515,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,8249,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49494,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":73,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"38.0.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":976,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"74.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"snap-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"snap-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":46,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"41.5.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1220077.6105371558,108,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1404,\"onlineMoneyMade\":1220077.6105371558,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":18,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"11.8.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":355,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938251.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY MACRO QUEUE ENTER EMAIL\",6],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"70.1.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":219,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318372.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[52,9,67,87,3,78,140,84,125,184,182,27,190,152,122,14,48,47,5,31,27,182],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"75.0.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[496484.15128051693,36,0,0]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":540,\"onlineMoneyMade\":496484.15128051693,\"onlineRunningTime\":1073.010000000107,\"ramUsage\":1.7,\"server\":\".\",\"scriptKey\":\"hack.js*[\\\"iron-gym\\\"]\",\"title\":\"hack.js iron-gym\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"6.1.4.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":59,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"36.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"55.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"16.2.2.2\",\"isConnectedTo\":true,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":false,\"ip\":\"31.1.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"lauren-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-1\",\"httpPortOpen\":false,\"ip\":\"87.7.6.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-1\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,16498,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":98988,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":146,\"temporary\":false}}]}},\"lauren-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-0\",\"httpPortOpen\":false,\"ip\":\"78.5.5.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,32996,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197976,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":292,\"temporary\":false}}]}},\"lauren-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-2\",\"httpPortOpen\":false,\"ip\":\"22.3.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-2\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,8249,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49494,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":73,\"temporary\":false}}]}},\"lauren-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-3\",\"httpPortOpen\":false,\"ip\":\"1.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-3\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"lauren-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-4\",\"httpPortOpen\":false,\"ip\":\"84.5.5.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-4\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-5\",\"httpPortOpen\":false,\"ip\":\"15.1.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-5\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"lauren-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-6\",\"httpPortOpen\":false,\"ip\":\"90.5.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-6\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"lauren-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-7\",\"httpPortOpen\":false,\"ip\":\"82.5.6.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-7\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-7\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4530.209999998071,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-8\",\"httpPortOpen\":false,\"ip\":\"81.1.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-8\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-8\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,4068,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24408,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":36,\"temporary\":false}}]}},\"lauren-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-9\",\"httpPortOpen\":false,\"ip\":\"36.8.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-9\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-9\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"lauren-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-10\",\"httpPortOpen\":false,\"ip\":\"84.9.3.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-10\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-11\",\"httpPortOpen\":false,\"ip\":\"85.0.6.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-11\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-12\",\"httpPortOpen\":false,\"ip\":\"59.4.1.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-12\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"lauren-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-13\",\"httpPortOpen\":false,\"ip\":\"61.7.0.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-13\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-13\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"lauren-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-14\",\"httpPortOpen\":false,\"ip\":\"66.2.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-14\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-14\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"lauren-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-15\",\"httpPortOpen\":false,\"ip\":\"58.6.6.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-15\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-15\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-15\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-16\",\"httpPortOpen\":false,\"ip\":\"65.9.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-16\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-16\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-16\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"lauren-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-17\",\"httpPortOpen\":false,\"ip\":\"4.6.1.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-17\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-17\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-18\",\"httpPortOpen\":false,\"ip\":\"82.9.6.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-18\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-18\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,452,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2712,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-18\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":4,\"temporary\":false}}]}},\"lauren-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-19\",\"httpPortOpen\":false,\"ip\":\"9.5.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-19\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-19\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"lauren-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-20\",\"httpPortOpen\":false,\"ip\":\"92.0.9.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-20\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-20\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,226,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":2,\"temporary\":false}}]}},\"lauren-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-21\",\"httpPortOpen\":false,\"ip\":\"56.2.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-21\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-21\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}},\"lauren-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-22\",\"httpPortOpen\":false,\"ip\":\"29.7.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-22\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-22\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,1017,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6102,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-22\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}}]}},\"lauren-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-23\",\"httpPortOpen\":false,\"ip\":\"18.3.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.hack(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-23\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.grow(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-23\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    try {\\n      await ns.weaken(ns.args[0]);\\n    } catch (_) {\\n      return;\\n    }\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,2034,0]},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12204,\"onlineMoneyMade\":0,\"onlineRunningTime\":4520.00999999808,\"ramUsage\":1.75,\"server\":\"lauren-23\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":18,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":254.1487179487185}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":444.9642276923311}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":44.993880000000075}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":9.919384615384613}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":21019.78655692151}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":28.622564102564194}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":28.4758358974364}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":29.68447179487218}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":8.482051282051273}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":7559.452589744387}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":1073.5845513843408}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":10527.235354862923}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":790.4666666665047}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#EA9062\",\"primary\":\"#DD7B4A\",\"primarydark\":\"#D3591C\",\"successlight\":\"#6ACF6A\",\"success\":\"#43BF43\",\"successdark\":\"#3E913E\",\"errorlight\":\"#C15757\",\"error\":\"#B34141\",\"errordark\":\"#752525\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E6E69D\",\"warning\":\"#DADA56\",\"warningdark\":\"#A1A106\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#AD84CF\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#76C6B7\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Operator Mono, Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1704148411551","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}