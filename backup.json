{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":23,\"max\":23},\"skills\":{\"hacking\":545,\"strength\":133,\"defense\":131,\"dexterity\":188,\"agility\":175,\"charisma\":215,\"intelligence\":0},\"exp\":{\"hacking\":55487170.11651188,\"strength\":11146.730847243354,\"defense\":10679.43803520154,\"dexterity\":23208.171515705133,\"agility\":21033.462659664412,\"charisma\":20249.883800251428,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.3615757926625969,\"hacking_speed\":1.4164472971068995,\"hacking_money\":1.3615757926625969,\"hacking_grow\":1.3615757926625969,\"hacking\":1.5011373114105133,\"hacking_exp\":1.4977333719288568,\"strength\":1.3615757926625969,\"strength_exp\":1.7972800463146281,\"defense\":1.3615757926625969,\"defense_exp\":1.7972800463146281,\"dexterity\":1.5726200405252997,\"dexterity_exp\":1.7972800463146281,\"agility\":1.5011373114105133,\"agility_exp\":1.7972800463146281,\"charisma\":1.8571893811917823,\"charisma_exp\":1.4977333719288568,\"hacknet_node_money\":2.7472174374605056,\"hacknet_node_purchase_cost\":0.561848439963833,\"hacknet_node_ram_cost\":0.7344424051814812,\"hacknet_node_core_cost\":0.7344424051814812,\"hacknet_node_level_cost\":0.624276044404259,\"company_rep\":2.2735592585880045,\"faction_rep\":1.7223933777181852,\"work_money\":1.4977333719288568,\"crime_success\":1.68835398290162,\"crime_money\":1.8571893811917823,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":16,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"SoA - Might of Ares\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"SoA - Flood of Poseidon\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"SoA - Knowledge of Apollo\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Combat Rib I\"}],\"city\":\"Sector-12\",\"bitNodeN\":12,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"The Syndicate\",\"MegaCorp\"]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":23525.285334637763,\"onlineTimeSeconds\":60540.99999975675,\"ram\":64,\"totalMoneyGenerated\":936419647.6934366,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":10,\"level\":200,\"moneyGainRatePerSecond\":17643.96400097832,\"onlineTimeSeconds\":60512.99999975678,\"ram\":64,\"totalMoneyGenerated\":372738788.4064946,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":7,\"level\":200,\"moneyGainRatePerSecond\":14115.171200782657,\"onlineTimeSeconds\":60511.99999975678,\"ram\":64,\"totalMoneyGenerated\":92257332.49744909,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":186,\"moneyGainRatePerSecond\":956.0475975506781,\"onlineTimeSeconds\":60494.7999997568,\"ram\":8,\"totalMoneyGenerated\":49423016.66306917,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":177,\"moneyGainRatePerSecond\":909.7872299272582,\"onlineTimeSeconds\":60490.7999997568,\"ram\":8,\"totalMoneyGenerated\":43259717.68836366,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":176,\"moneyGainRatePerSecond\":904.6471890802114,\"onlineTimeSeconds\":60473.79999975681,\"ram\":8,\"totalMoneyGenerated\":43382788.103374556,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":175,\"moneyGainRatePerSecond\":899.5071482331648,\"onlineTimeSeconds\":60470.7999997568,\"ram\":8,\"totalMoneyGenerated\":42525422.05929048,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":175,\"moneyGainRatePerSecond\":899.5071482331648,\"onlineTimeSeconds\":60467.79999975678,\"ram\":8,\"totalMoneyGenerated\":41884972.08083163,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":175,\"moneyGainRatePerSecond\":899.5071482331648,\"onlineTimeSeconds\":60463.799999756775,\"ram\":8,\"totalMoneyGenerated\":40650363.03151433,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":174,\"moneyGainRatePerSecond\":894.3671073861182,\"onlineTimeSeconds\":60456.79999975678,\"ram\":8,\"totalMoneyGenerated\":39766154.34229649,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":173,\"moneyGainRatePerSecond\":889.2270665390714,\"onlineTimeSeconds\":60437.7999997568,\"ram\":8,\"totalMoneyGenerated\":36979993.590304,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":173,\"moneyGainRatePerSecond\":889.2270665390714,\"onlineTimeSeconds\":60407.79999975679,\"ram\":8,\"totalMoneyGenerated\":36931479.23666008,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":1028.008169409331,\"onlineTimeSeconds\":59674.399999757065,\"ram\":8,\"totalMoneyGenerated\":38818695.48170937,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":1028.008169409331,\"onlineTimeSeconds\":58218.199999757606,\"ram\":8,\"totalMoneyGenerated\":41844421.72944946,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":183,\"moneyGainRatePerSecond\":940.6274750095381,\"onlineTimeSeconds\":58128.799999757626,\"ram\":8,\"totalMoneyGenerated\":51697887.322818406,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":172,\"moneyGainRatePerSecond\":884.0870256920249,\"onlineTimeSeconds\":54598.59999975678,\"ram\":8,\"totalMoneyGenerated\":38619982.89715455,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":189,\"moneyGainRatePerSecond\":971.4677200918181,\"onlineTimeSeconds\":54597.79999975677,\"ram\":8,\"totalMoneyGenerated\":47520847.710446715,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":132,\"moneyGainRatePerSecond\":551.9483033909621,\"onlineTimeSeconds\":4770.199999997863,\"ram\":2,\"totalMoneyGenerated\":2448642.0410272535,\"name\":\"hacknet-node-17\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"MegaCorp\":\"Software Engineering Intern\"},\"karma\":-26367.325000000026,\"numPeopleKilled\":45,\"location\":\"MegaCorp\",\"money\":320627.6376587989,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-636960,\"codingcontract\":588235294.117647,\"corporation\":0,\"crime\":869836495.9680065,\"gang\":0,\"hacking\":23926915812.948112,\"hacknet\":1997170152.5679636,\"hacknet_expenses\":-475765608.2323612,\"hospitalization\":-884978.0487097896,\"infiltration\":24141523.251380414,\"sleeves\":0,\"stock\":-7634695393.3548155,\"total\":319514.6376587971,\"work\":26325606.617213808,\"servers\":-5327572935.57681,\"other\":-287099526.14873844,\"augmentations\":-13705649969.468151}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-3274848,\"codingcontract\":5551470588.235293,\"corporation\":0,\"crime\":3228004114.0279984,\"gang\":0,\"hacking\":26714671599.4612,\"hacknet\":6557941876.423718,\"hacknet_expenses\":-1876823961.687132,\"hospitalization\":-23374651.69091824,\"infiltration\":86608893.60418747,\"sleeves\":0,\"stock\":-8877739246.821543,\"total\":523838442.62603533,\"work\":38733064.651948534,\"servers\":-11912099369.680609,\"other\":-971497707.5600042,\"augmentations\":-17988781908.449802}},\"playtimeSinceLastAug\":60635400,\"playtimeSinceLastBitnode\":360519000,\"lastAugReset\":1705633987289,\"lastNodeReset\":1705334103366,\"purchasedServers\":[\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-14\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\"],\"scriptProdSinceLastAug\":22247853788.15411,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1],[2,1]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1704070135213},{\"ID\":\"FROZE\",\"unlockedOn\":1704070135222},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1704079402616},{\"ID\":\"WORKOUT\",\"unlockedOn\":1704081997256},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1704085310642},{\"ID\":\"TOR\",\"unlockedOn\":1704088636233},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1704091709650},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1704125258633},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1704144228234},{\"ID\":\"TRAVEL\",\"unlockedOn\":1704151357816},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1704169468544},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1704170548545},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1704228378452},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1704238095961},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1704241395954},{\"ID\":\"NITESEC\",\"unlockedOn\":1704242995955},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1704331510388},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1704337810388},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1704343390388},{\"ID\":\"4S\",\"unlockedOn\":1704343870389},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1704404274170},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1704651907253},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1704661239445},{\"ID\":\"DONATION\",\"unlockedOn\":1704671467161},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1704684346576},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1704729001977},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1704729001980},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1704743986025},{\"ID\":\"SF1.1\",\"unlockedOn\":1704756093389},{\"ID\":\"N00DLES\",\"unlockedOn\":1704761514401},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1704761574401},{\"ID\":\"GANG\",\"unlockedOn\":1704764062582},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1704900063536},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1704900843531},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1705270991356},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1705275675262},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1705297415024},{\"ID\":\"SF2.1\",\"unlockedOn\":1705334104216}],\"terminalCommandHistory\":[\"run find-backdoors.js \",\"free\",\"top\",\"run get-net-worth.js \",\"free\",\"top\",\"run get-net-worth.js \",\"free\",\"top\",\"run sell-all-stock.js \",\"kill manage-hacking.js 6; run manage-hacking.js 10\",\"free\",\"top\",\"kill manage-stocks.js \",\"run sell-all-stock.js \",\"free\",\"top\",\"free\",\"run manage-servers.js \",\"free\",\"top\",\"run manage-hacknet.js \",\"free\",\"top\",\"kill manage-hacknet.js \",\"kill manage-servers.js \",\"kill manage-hacking.js 10\",\"free\",\"top\",\"run find-contracts.js \",\"run find-backdoors.js \",\"connect n00dles; connect max-hardware; connect silver-helix; connect netlink; connect zb-institute; connect millenium-fitness; connect global-pharm; connect omnia; connect zeus-med; connect taiyang-digital; connect titan-labs; connect stormtech; connect .\",\"backdoor\",\"home\",\"free\",\"top\",\"run manage-stocks.js \",\"run manage-hacking.js 0\",\"free\",\"top\",\"kill manage-hacking.js 0; run manage-hacking.js 10\",\"free\",\"top\",\"free\",\"top\",\"run find-contracts.js \",\"run find-backdoors.js \",\"free\",\"top\",\"run get-net-worth.js \"],\"lastUpdate\":1705694622620,\"lastSave\":1705694622326,\"totalPlaytime\":1624493200,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":21941,\"crimeType\":\"Heist\",\"unitCompleted\":188200}},\"focus\":false,\"entropy\":0,\"identifier\":\"113891341353c3\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"38.4.6.6\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * @param {import(\\\"../NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Object.<string, string|number>]} style\\n * @returns {import(\\\"../NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"manage-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND, HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Manages purchasing and upgrading Hacknet nodes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME) / 2;\\n\\n    // Attempt to purchase a new node.\\n    if (\\n      ns.hacknet.numNodes() < ns.hacknet.maxNumNodes() &&\\n      ns.hacknet.getPurchaseNodeCost() < moneyAvailable\\n    ) {\\n      ns.hacknet.purchaseNode();\\n    }\\n\\n    const nodeCount = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodeCount; i++) {\\n      // Upgrade level.\\n      upgrade(\\n        () => ns.hacknet.getLevelUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeLevel(i)\\n      );\\n\\n      // Upgrade RAM.\\n      upgrade(\\n        () => ns.hacknet.getRamUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeRam(i)\\n      );\\n\\n      // Upgrade cores.\\n      upgrade(\\n        () => ns.hacknet.getCoreUpgradeCost(i) < moneyAvailable,\\n        () => ns.hacknet.upgradeCore(i)\\n      );\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Upgrades using the given upgrade function until it is no longer possible.\\n *\\n * @param {function():boolean} canUpgradeFunction\\n * @param {function():boolean} upgradeFunction\\n */\\nfunction upgrade(canUpgradeFunction, upgradeFunction) {\\n  let canUpgrade;\\n  do {\\n    canUpgrade = canUpgradeFunction();\\n    canUpgrade = upgradeFunction();\\n  } while (canUpgrade);\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"server\":\"home\"}}],[\"manage-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers, updateServers } from 'database/servers';\\nimport {\\n  HOME_HOSTNAME,\\n  MAX_PURCHASED_SERVER_COUNT,\\n  ONE_SECOND,\\n} from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\nconst MAX_RAM_POWER = 20;\\n\\n/**\\n * Manages purchasing and upgrading servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const purchasedHostnames = getServers(ns)\\n    .filter(server => server.isPurchased)\\n    .map(server => server.hostname);\\n\\n  while (true) {\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n\\n    for (let power = MAX_RAM_POWER; power > 1; power--) {\\n      const ram = Math.pow(2, power);\\n\\n      // Attempt to purchase a server.\\n      if (purchasedHostnames.length < MAX_PURCHASED_SERVER_COUNT) {\\n        const cost = ns.getPurchasedServerCost(ram);\\n        if (cost <= moneyAvailable) {\\n          const hostname = ns.purchaseServer('lauren', ram);\\n          if (hostname.length > 0) {\\n            purchasedHostnames.push(hostname);\\n            updateServers(ns, {\\n              hostname: hostname,\\n              organization: '',\\n              path: [hostname],\\n              isPurchased: true,\\n              maxRam: ram,\\n              maxMoney: 0,\\n              minSecurity: 0,\\n              baseSecurity: 0,\\n              hackingLevel: 0,\\n            });\\n            ns.toast(\\n              `Purchased ${hostname} (${ns.formatRam(\\n                ram,\\n                0\\n              )}) for ${formatMoney(ns, cost)}`\\n            );\\n          }\\n        }\\n      }\\n\\n      // Attempt to upgrade an existing server.\\n      for (const hostname of purchasedHostnames) {\\n        const currentRam = ns.getServerMaxRam(hostname);\\n        if (ram <= currentRam) continue;\\n        const cost = ns.getPurchasedServerUpgradeCost(hostname, ram);\\n        const upgradeSuccessful = ns.upgradePurchasedServer(hostname, ram);\\n        if (upgradeSuccessful) {\\n          updateServers(ns, {\\n            hostname: hostname,\\n            maxRam: ram,\\n          });\\n          ns.toast(\\n            `Upgraded ${hostname} from ${ns.formatRam(\\n              currentRam,\\n              0\\n            )} to ${ns.formatRam(ram, 0)} for ${formatMoney(ns, cost)}`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"manage-servers.js\",\"server\":\"home\"}}],[\"database/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing servers.txt */\\n\\n/**\\n * @typedef Server\\n * @property {string} hostname\\n * @property {string} organization\\n * @property {string[]} path\\n *           path from home to the hostname not including home but including the\\n *           hostname (e.g. ['foodnstuff', 'CSEC'] for 'CSEC' server)\\n * @property {[boolean]} isPurchased\\n * @property {[number]} maxRam maximum RAM the server has\\n * @property {[cpuCores]} cpuCores\\n * @property {[number]} maxMoney\\n * @property {[number]} minSecurity\\n * @property {[number]} baseSecurity\\n * @property {[number]} hackingLevel required hacking level\\n */\\n\\nconst SERVERS_FILENAME = 'database/servers.txt';\\n\\n/**\\n * Updates any existing servers in the database and adds any new servers to the\\n * database.\\n *\\n * @param {NS} ns\\n * @param  {...Server} serversToUpdate\\n */\\nexport function updateServers(ns, ...serversToUpdate) {\\n  const databaseServers = getServers(ns);\\n\\n  for (const server of serversToUpdate) {\\n    const databaseServer = databaseServers.find(\\n      databaseServer => databaseServer.hostname === server.hostname\\n    );\\n    if (!databaseServer) {\\n      databaseServers.push(server);\\n    } else {\\n      Object.keys(server).forEach(key => (databaseServer[key] = server[key]));\\n    }\\n  }\\n\\n  ns.write(SERVERS_FILENAME, JSON.stringify(databaseServers), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Server[]} all servers in file\\n */\\nexport function getServers(ns) {\\n  return JSON.parse(ns.read(SERVERS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/servers.js\",\"server\":\"home\"}}],[\"manage-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { createColorForString } from 'utils/colors';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { GROW_JS, HACK_JS, WEAKEN_JS, getRamToReserve } from 'utils/scripts';\\nimport { printTable } from 'utils/table';\\n\\n/** Minimum amount of money on a server to allow hacking that server. */\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/** Minimum percentage of max money on a server to allow hacking that server. */\\nconst MIN_MONEY_PERCENT = 0.5;\\n\\nconst MIN_HACK_CHANCE = 0.5;\\n\\n/**\\n * Manages hacking in all servers, reserving enough RAM in Home server to run\\n * all other scripts.\\n *\\n * Override the RAM to reserve by passing as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const hackWeakenGrowScripts = [HACK_JS, WEAKEN_JS, GROW_JS];\\n  const minRamNecessaryToRunHackWeakenGrow = Math.min(\\n    ...hackWeakenGrowScripts.map(script => ns.getScriptRam(script))\\n  );\\n\\n  while (true) {\\n    const serversWithRootAccess = getServers(ns).filter(server =>\\n      ns.hasRootAccess(server.hostname)\\n    );\\n\\n    // Get servers to hack, weaken, and grow.\\n    const hackableServers = serversWithRootAccess.filter(\\n      server => server.maxMoney > 0\\n    );\\n\\n    // Get servers to hack.\\n    const serversToHack = getServersToHack(ns, hackableServers);\\n    const hostnameToHackToThreadCountMap = Object.fromEntries(\\n      serversToHack\\n        .map(server => [server.hostname, getHackThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToHackToRunningThreadCountMap = {};\\n\\n    // Get servers to weaken.\\n    const serversToWeaken = getServersToWeaken(ns, hackableServers);\\n    const hostnameToWeakenToThreadCountMap = Object.fromEntries(\\n      serversToWeaken\\n        .map(server => [server.hostname, getWeakenThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToWeakenToRunningThreadCountMap = {};\\n\\n    // Get servers to grow.\\n    const serversToGrow = getServersToGrow(ns, hackableServers);\\n    const hostnameToGrowToThreadCountMap = Object.fromEntries(\\n      serversToGrow\\n        .map(server => [server.hostname, getGrowThreadCount(ns, server)])\\n        .filter(entry => entry[1] > 0) // Make sure thread count > 0\\n    );\\n    const hostnameToGrowToRunningThreadCountMap = {};\\n\\n    // Get runnable servers.\\n    const ramToReserveInHome = ns.args[0] ?? getRamToReserve(ns);\\n    const runnableServers = getRunnableServers(\\n      ns,\\n      serversWithRootAccess,\\n      minRamNecessaryToRunHackWeakenGrow,\\n      ramToReserveInHome\\n    );\\n\\n    const scriptToThreadCountMapMap = {\\n      [HACK_JS]: hostnameToHackToThreadCountMap,\\n      [WEAKEN_JS]: hostnameToWeakenToThreadCountMap,\\n      [GROW_JS]: hostnameToGrowToThreadCountMap,\\n    };\\n    const scriptToRunningThreadCountMapMap = {\\n      [HACK_JS]: hostnameToHackToRunningThreadCountMap,\\n      [WEAKEN_JS]: hostnameToWeakenToRunningThreadCountMap,\\n      [GROW_JS]: hostnameToGrowToRunningThreadCountMap,\\n    };\\n\\n    // Subtract threads that are already running.\\n    for (const runnableServer of runnableServers) {\\n      const processes = ns\\n        .ps(runnableServer.hostname)\\n        .filter(process => hackWeakenGrowScripts.includes(process.filename));\\n      for (const process of processes) {\\n        const threadCountMap = scriptToThreadCountMapMap[process.filename];\\n        const runningThreadCountMap =\\n          scriptToRunningThreadCountMapMap[process.filename];\\n        const targetHostname = process.args[0];\\n\\n        // Add to running thread count map.\\n        if (!(targetHostname in runningThreadCountMap)) {\\n          runningThreadCountMap[targetHostname] = 0;\\n        }\\n        runningThreadCountMap[targetHostname] += process.threads;\\n\\n        // Subtract from thread count map.\\n        if (!(targetHostname in threadCountMap)) continue;\\n        threadCountMap[targetHostname] -= process.threads;\\n        if (threadCountMap[targetHostname] <= 0) {\\n          delete threadCountMap[targetHostname];\\n        }\\n      }\\n    }\\n\\n    // Determine order of hack, weaken, and grow based on the least amount of\\n    // time.\\n    const getMinTime = (hostnameToThreadCountMap, getTimeFn) => {\\n      const hostname = Object.keys(hostnameToThreadCountMap)[0];\\n      return hostname ? getTimeFn(hostname) : Infinity;\\n    };\\n    const scriptToMinTimeMap = {\\n      [HACK_JS]: getMinTime(hostnameToHackToThreadCountMap, ns.getHackTime),\\n      [WEAKEN_JS]: getMinTime(\\n        hostnameToWeakenToThreadCountMap,\\n        ns.getWeakenTime\\n      ),\\n      [GROW_JS]: getMinTime(hostnameToGrowToThreadCountMap, ns.getGrowTime),\\n    };\\n    const scriptsInOrder = Object.keys(scriptToMinTimeMap)\\n      .filter(script => scriptToMinTimeMap[script] < Infinity)\\n      .sort((a, b) => scriptToMinTimeMap[a] - scriptToMinTimeMap[b]);\\n\\n    // Execute hack, weaken, and grow on runnable servers.\\n    for (const runnableServer of runnableServers) {\\n      for (const scriptName of scriptsInOrder) {\\n        const hostnameToThreadCountMap = scriptToThreadCountMapMap[scriptName];\\n        const hostnameToRunningThreadCountMap =\\n          scriptToRunningThreadCountMapMap[scriptName];\\n        for (const hostname in hostnameToThreadCountMap) {\\n          const threadsNeeded = hostnameToThreadCountMap[hostname];\\n\\n          // Modify threads needed based on runnable server's CPU cores.\\n          const targetServer = hackableServers.find(\\n            server => server.hostname === hostname\\n          );\\n          let adjustedThreadsNeeded = threadsNeeded;\\n          if (scriptName === WEAKEN_JS) {\\n            adjustedThreadsNeeded = getWeakenThreadCount(\\n              ns,\\n              targetServer,\\n              runnableServer.cpuCores\\n            );\\n          }\\n          if (scriptName === GROW_JS) {\\n            adjustedThreadsNeeded = getGrowThreadCount(\\n              ns,\\n              targetServer,\\n              runnableServer.cpuCores\\n            );\\n          }\\n\\n          const threadsUsed = runScript(\\n            ns,\\n            scriptName,\\n            runnableServer,\\n            hostname,\\n            threadsNeeded,\\n            ramToReserveInHome\\n          );\\n          if (threadsUsed > 0) {\\n            hostnameToThreadCountMap[hostname] -=\\n              threadsUsed === adjustedThreadsNeeded\\n                ? threadsNeeded\\n                : threadsUsed;\\n            if (hostnameToThreadCountMap[hostname] <= 0) {\\n              delete hostnameToThreadCountMap[hostname];\\n            }\\n            if (!(hostname in hostnameToRunningThreadCountMap)) {\\n              hostnameToRunningThreadCountMap[hostname] = 0;\\n            }\\n            hostnameToRunningThreadCountMap[hostname] += threadsUsed;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Use any unused RAM on runnable servers to weaken the server with the\\n    // lowest weak time even if it doesn't need weakening to gain hacking exp.\\n    hackableServers.sort(\\n      (a, b) => ns.getWeakenTime(a.hostname) - ns.getWeakenTime(b.hostname)\\n    );\\n    const serverWithLowestWeakTime = hackableServers[0];\\n    if (ns.getWeakenTime(serverWithLowestWeakTime.hostname) < ONE_SECOND) {\\n      const weakenScriptRam = ns.getScriptRam(WEAKEN_JS);\\n      for (const runnableServer of runnableServers) {\\n        const availableRam = getAvailableRam(\\n          ns,\\n          runnableServer,\\n          ramToReserveInHome\\n        );\\n        const threadCount = Math.floor(availableRam / weakenScriptRam);\\n        runScript(\\n          ns,\\n          WEAKEN_JS,\\n          runnableServer,\\n          serverWithLowestWeakTime.hostname,\\n          threadCount,\\n          ramToReserveInHome\\n        );\\n      }\\n    }\\n\\n    // Log hack, weaken, and grow.\\n    ns.clearLog();\\n    for (const script of scriptsInOrder) {\\n      switch (script) {\\n        case HACK_JS:\\n          logServersToHack(\\n            ns,\\n            hackableServers,\\n            hostnameToHackToThreadCountMap,\\n            hostnameToHackToRunningThreadCountMap\\n          );\\n          break;\\n        case WEAKEN_JS:\\n          logServersToWeaken(\\n            ns,\\n            hackableServers,\\n            hostnameToWeakenToThreadCountMap,\\n            hostnameToWeakenToRunningThreadCountMap\\n          );\\n          break;\\n        case GROW_JS:\\n          logServersToGrow(\\n            ns,\\n            hackableServers,\\n            hostnameToGrowToThreadCountMap,\\n            hostnameToGrowToRunningThreadCountMap\\n          );\\n          break;\\n      }\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Runs a script on a server with the targetHostname passed as an argument.\\n *\\n * @param {NS} ns\\n * @param {string} scriptName\\n * @param {Server} server\\n * @param {string} targetHostname\\n * @param {number} threadsNeeded number of threads needed\\n * @param {number} ramToReserveinHome\\n * @returns {number} number of threads used\\n */\\nfunction runScript(\\n  ns,\\n  scriptName,\\n  server,\\n  targetHostname,\\n  threadsNeeded,\\n  ramToReserveinHome\\n) {\\n  // If script file doesn't exist, then copy it over to that server.\\n  if (!ns.fileExists(scriptName, server.hostname)) {\\n    ns.scp(scriptName, server.hostname);\\n  }\\n\\n  // Get threads to use.\\n  const availableRam = getAvailableRam(ns, server, ramToReserveinHome);\\n  const threadsAvailable = Math.floor(\\n    availableRam / ns.getScriptRam(scriptName)\\n  );\\n  const threadsToUse = Math.min(threadsAvailable, threadsNeeded);\\n  if (threadsToUse <= 0) return 0;\\n\\n  // Execute script.\\n  const pid = ns.exec(\\n    scriptName,\\n    server.hostname,\\n    threadsToUse,\\n    targetHostname\\n  );\\n  return pid === 0 ? 0 : threadsToUse;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {number} ramToReserveInHome\\n * @returns {number} available RAM\\n */\\nfunction getAvailableRam(ns, server, ramToReserveInHome) {\\n  let availableRam = server.maxRam - ns.getServerUsedRam(server.hostname);\\n  if (server.hostname === HOME_HOSTNAME) availableRam -= ramToReserveInHome;\\n  return availableRam;\\n}\\n\\n/**\\n * Get all servers that have enough RAM available to run a hack, weaken, or grow\\n * script.\\n *\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} serversWithRootAccess\\n * @param {number} minRamNecessaryToRunHackWeakenGrow\\n * @param {number} ramToReserveInHome\\n * @returns {import('database/servers').Server[]} runnable servers\\n */\\nfunction getRunnableServers(\\n  ns,\\n  serversWithRootAccess,\\n  minRamNecessaryToRunHackWeakenGrow,\\n  ramToReserveInHome\\n) {\\n  return serversWithRootAccess.filter(server => {\\n    if (server.maxRam <= 0) return false;\\n\\n    let availableRam = getAvailableRam(ns, server, ramToReserveInHome);\\n    if (availableRam < minRamNecessaryToRunHackWeakenGrow) return false;\\n\\n    return true;\\n  });\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to hack sorted by hack time\\n */\\nfunction getServersToHack(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerMoneyAvailable(server.hostname) >\\n        Math.min(server.maxMoney * MIN_MONEY_PERCENT, MIN_MONEY_AMOUNT) &&\\n      ns.hackAnalyzeChance(server.hostname) > MIN_HACK_CHANCE\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getHackTime(a.hostname) * getHackThreadCount(ns, a) -\\n      ns.getHackTime(b.hostname) * getHackThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @returns {number} number of threads needed to hack the given server\\n */\\nfunction getHackThreadCount(ns, server) {\\n  const moneyToHack =\\n    ns.getServerMoneyAvailable(server.hostname) -\\n    Math.min(server.maxMoney * MIN_MONEY_PERCENT, MIN_MONEY_AMOUNT);\\n  return Math.floor(ns.hackAnalyzeThreads(server.hostname, moneyToHack));\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to weaken sorted by weaken time\\n */\\nfunction getServersToWeaken(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerSecurityLevel(server.hostname) > server.minSecurity &&\\n      ns.hackAnalyzeChance(server.hostname) <= MIN_HACK_CHANCE\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getWeakenTime(a.hostname) * getWeakenThreadCount(ns, a) -\\n      ns.getWeakenTime(b.hostname) * getWeakenThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {[number]} cpuCores\\n * @returns {number} number of threads needed to weaken the given server\\n */\\nfunction getWeakenThreadCount(ns, server, cpuCores) {\\n  const securityToDecrease =\\n    ns.getServerSecurityLevel(server.hostname) - server.minSecurity;\\n  let threadCount = 0;\\n  do {\\n    threadCount++;\\n  } while (ns.weakenAnalyze(threadCount, cpuCores) < securityToDecrease);\\n  return threadCount;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} hackableServers\\n * @returns {import('database/servers').Server[]}\\n *          servers to grow sorted by grow time\\n */\\nfunction getServersToGrow(ns, hackableServers) {\\n  const servers = hackableServers.filter(\\n    server =>\\n      ns.getServerMoneyAvailable(server.hostname) <\\n      server.maxMoney * MIN_MONEY_PERCENT\\n  );\\n  servers.sort(\\n    (a, b) =>\\n      ns.getGrowTime(a.hostname) * getGrowThreadCount(ns, a) -\\n      ns.getGrowTime(b.hostname) * getGrowThreadCount(ns, b)\\n  );\\n  return servers;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server} server\\n * @param {[number]} cpuCores\\n * @returns {number} number of threads needed to grow the given server\\n */\\nfunction getGrowThreadCount(ns, server, cpuCores) {\\n  const growMultiplier = Math.floor(\\n    server.maxMoney / (ns.getServerMoneyAvailable(server.hostname) || 1)\\n  );\\n  return Math.floor(\\n    ns.growthAnalyze(server.hostname, growMultiplier, cpuCores)\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToHack(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to hack',\\n    ns.ui.getTheme().error,\\n    server => ({\\n      column: { name: 'Available Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, ns.getServerMoneyAvailable(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Chance', style: { textAlign: 'right' } },\\n      content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getHackTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToWeaken(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to weaken',\\n    ns.ui.getTheme().warning,\\n    server => ({\\n      column: { name: 'Min Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(server.minSecurity, 0),\\n    }),\\n    server => ({\\n      column: { name: 'Current Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(ns.getServerSecurityLevel(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Base Security', style: { textAlign: 'right' } },\\n      content: ns.formatNumber(server.baseSecurity, 0),\\n    }),\\n    server => ({\\n      column: { name: 'Hack Chance', style: { textAlign: 'right' } },\\n      content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Weaken Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getWeakenTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n */\\nfunction logServersToGrow(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap\\n) {\\n  logServers(\\n    ns,\\n    servers,\\n    hostnameToThreadCountMap,\\n    hostnameToRunningThreadCountMap,\\n    'Servers to grow',\\n    ns.ui.getTheme().success,\\n    server => ({\\n      column: { name: 'Available Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, ns.getServerMoneyAvailable(server.hostname)),\\n    }),\\n    server => ({\\n      column: { name: 'Max Money', style: { textAlign: 'right' } },\\n      content: formatMoney(ns, server.maxMoney),\\n    }),\\n    server => ({\\n      column: { name: 'Grow Time', style: { textAlign: 'center' } },\\n      content: formatTime(ns, ns.getGrowTime(server.hostname)),\\n    })\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/servers').Server[]} servers\\n * @param {Object.<string, number>} hostnameToThreadCountMap\\n * @param {Object.<string, number>} hostnameToRunningThreadCountMap\\n * @param {string} header\\n * @param {string} color\\n * @param {...function(import('database/servers').Server): import('utils/table').Cell} additionalCells\\n */\\nfunction logServers(\\n  ns,\\n  servers,\\n  hostnameToThreadCountMap,\\n  hostnameToRunningThreadCountMap,\\n  header,\\n  color,\\n  ...additionalCells\\n) {\\n  servers = servers.filter(\\n    server =>\\n      server.hostname in hostnameToThreadCountMap ||\\n      server.hostname in hostnameToRunningThreadCountMap\\n  );\\n  if (servers.length === 0) return;\\n\\n  const borderColor = `${color}33`;\\n  /** @type {import('utils/table').Table} */ const table = {\\n    rows: [],\\n    style: { color: color, borderColor: borderColor },\\n  };\\n  for (const server of servers) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: {\\n            name: 'Hostname',\\n            style: { borderColor: borderColor, width: 'max-content' },\\n          },\\n          content: createReactElement(server.hostname, {\\n            color: createColorForString(ns, server.hostname),\\n          }),\\n        },\\n        ...additionalCells.map(fn => {\\n          const cell = fn(server);\\n          cell.column.style.borderColor = borderColor;\\n          return cell;\\n        }),\\n        {\\n          column: {\\n            name: 'Threads Needed',\\n            style: {\\n              borderColor: borderColor,\\n              textAlign: 'right',\\n              width: 'min-content',\\n            },\\n          },\\n          content:\\n            server.hostname in hostnameToThreadCountMap\\n              ? ns.formatNumber(hostnameToThreadCountMap[server.hostname], 0)\\n              : '-',\\n        },\\n        {\\n          column: {\\n            name: 'Threads Running',\\n            style: {\\n              borderColor: borderColor,\\n              textAlign: 'right',\\n              width: 'min-content',\\n            },\\n          },\\n          content:\\n            server.hostname in hostnameToRunningThreadCountMap\\n              ? ns.formatNumber(\\n                  hostnameToRunningThreadCountMap[server.hostname],\\n                  0\\n                )\\n              : '-',\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  ns.printRaw(\\n    createReactElement('\\\\n ' + header, { color: color, fontWeight: 'bold' })\\n  );\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-hacking.js\",\"server\":\"home\"}}],[\"gain-access.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { ONE_MINUTE } from 'utils/constants';\\n\\n/**\\n * Attempts to gain root access to servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  let hostnames = getServers(ns).map(server => server.hostname);\\n\\n  do {\\n    for (const hostname of hostnames) {\\n      runProgram(() => ns.brutessh(hostname));\\n      runProgram(() => ns.ftpcrack(hostname));\\n      runProgram(() => ns.httpworm(hostname));\\n      runProgram(() => ns.relaysmtp(hostname));\\n      runProgram(() => ns.sqlinject(hostname));\\n      runProgram(() => ns.nuke(hostname));\\n    }\\n    hostnames = hostnames.filter(hostname => !ns.hasRootAccess(hostname));\\n    if (hostnames.length > 0) await ns.sleep(ONE_MINUTE);\\n  } while (hostnames.length > 0);\\n}\\n\\n/** @param {function()} programFunction */\\nfunction runProgram(programFunction) {\\n  try {\\n    programFunction();\\n  } catch (_) {}\\n}\\n\",\"filename\":\"gain-access.js\",\"server\":\"home\"}}],[\"init.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { updateServers } from 'database/servers';\\nimport { writeStocks } from 'database/stocks';\\nimport { getAllPaths } from 'utils/servers';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { writeGangTasks } from 'database/gang-tasks';\\n\\n/**\\n * Run this script at the beginning of every session.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  // Optionally clean up files in all servers if there is enough RAM to do so.\\n  const cleanupFilesPid = ns.run('cleanup-files.js');\\n  while (ns.isRunning(cleanupFilesPid)) await ns.sleep(ONE_SECOND);\\n\\n  // Reset database files.\\n  const hostnameToPathMap = { [HOME_HOSTNAME]: [] };\\n  const allPaths = getAllPaths(ns, HOME_HOSTNAME);\\n  for (const path of allPaths) {\\n    hostnameToPathMap[path[path.length - 1]] = path.slice(1);\\n  }\\n  updateServers(\\n    ns,\\n    ...Object.keys(hostnameToPathMap).map(hostname =>\\n      getServerData(ns, hostname, hostnameToPathMap[hostname])\\n    )\\n  );\\n  if (ns.stock.hasWSEAccount() && ns.stock.hasTIXAPIAccess()) {\\n    writeStocks(ns);\\n    ns.run('manage-stocks.js', { preventDuplicates: true });\\n  }\\n  try {\\n    writeGangTasks(ns);\\n    if (ns.gang.inGang()) ns.run('manage-gang.js', { preventDuplicates: true });\\n  } catch (_) {}\\n\\n  // Start scripts.\\n  ns.run('gain-access.js', { preventDuplicates: true });\\n  ns.run('manage-hacking.js', { preventDuplicates: true });\\n  ns.run('manage-hacknet.js', { preventDuplicates: true });\\n  ns.run('manage-servers.js', { preventDuplicates: true });\\n}\\n\\n/**\\n * Get stats of a server to save to the database.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {string[]} path\\n * @returns {import('database/servers').Server} server\\n */\\nexport function getServerData(ns, hostname, path) {\\n  const serverData = ns.getServer(hostname);\\n  return {\\n    hostname: hostname,\\n    path: path,\\n    organization: serverData.organizationName,\\n    isPurchased: serverData.purchasedByPlayer,\\n    maxRam: serverData.maxRam,\\n    cpuCores: serverData.cpuCores,\\n    maxMoney: serverData.moneyMax,\\n    minSecurity: ns.getServerMinSecurityLevel(hostname),\\n    baseSecurity: ns.getServerBaseSecurityLevel(hostname),\\n    hackingLevel: ns.getServerRequiredHackingLevel(hostname),\\n  };\\n}\\n\",\"filename\":\"init.js\",\"server\":\"home\"}}],[\"cleanup-files.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils/servers';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Stops all scripts and removes JS files from every server except the home\\n * server. Also remove database files.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const allHostnames = getAllHostnames(ns);\\n  for (const hostname of allHostnames) {\\n    if (hostname === HOME_HOSTNAME) continue;\\n\\n    // Kill all scripts.\\n    ns.killall(hostname);\\n\\n    // Remove files.\\n    const filenames = ns.ls(hostname, '.js');\\n    for (const filename of filenames) ns.rm(filename, hostname);\\n  }\\n\\n  // Remove database files.\\n  const filenames = ns.ls(HOME_HOSTNAME, '.txt');\\n  for (const filename of filenames) ns.rm(filename);\\n}\\n\",\"filename\":\"cleanup-files.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *     3 + 1\\n *     2 + 2\\n *     2 + 1 + 1\\n *     1 + 1 + 1 + 1\\n *\\n * How many different distinct ways can the number 46 be written as a sum of at\\n * least two positive integers?\\n *\\n * @param {number} input\\n */\\nexport default function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"contracts/total-ways-to-sum.js\",\"server\":\"home\"}}],[\"contracts/array-jumping-game.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * You are given the following array of integers:\\n *\\n * 4,0,0,3,3,4,7,5,0,1,2,4,5,1\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} maxJumps\\n * @returns {0|1} representing whether able to reach the last index\\n */\\nexport default function arrayJumpingGame(maxJumps) {\\n  return canReachEnd(0, maxJumps) ? 1 : 0;\\n}\\n\\n/**\\n * @param {number} index\\n * @param {number[]} maxJumps\\n * @returns {boolean}\\n */\\nfunction canReachEnd(index, maxJumps) {\\n  if (index === maxJumps.length - 1) return true;\\n  if (index >= maxJumps.length) return false;\\n\\n  for (let jump = 1; jump <= maxJumps[index]; jump++) {\\n    if (canReachEnd(index + jump, maxJumps)) return true;\\n  }\\n  return false;\\n}\\n\\n// console.log(arrayJumpingGame([4, 0, 0, 3, 3, 4, 7, 5, 0, 1, 2, 4, 5, 1])); // 1\\n// console.log(\\n//   arrayJumpingGame([9, 1, 2, 0, 9, 1, 6, 7, 9, 4, 0, 0, 10, 0, 7, 1, 4, 2])\\n// ); // 1\\n\",\"filename\":\"contracts/array-jumping-game.js\",\"server\":\"home\"}}],[\"monitor-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { createReactElement } from 'utils/dom';\\nimport { formatTime } from 'utils/format';\\nimport { printTable } from 'utils/table';\\nimport { ONE_SECOND } from 'utils/constants';\\nimport { createColorForString } from 'utils/colors';\\n\\n/**\\n * Monitors all servers that can run scripts in the --tail.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(750, 1000);\\n  ns.moveTail(800, 50);\\n  ns.atExit(() => ns.closeTail());\\n\\n  while (true) {\\n    const allServers = getServers(ns);\\n    const hostnameToColor = {};\\n    for (const server of allServers) {\\n      hostnameToColor[server.hostname] = createColorForString(\\n        ns,\\n        server.hostname\\n      );\\n    }\\n\\n    const servers = allServers.filter(\\n      server => ns.hasRootAccess(server.hostname) && server.maxRam > 0\\n    );\\n    servers.sort(\\n      (server1, server2) =>\\n        ns.getServerUsedRam(server2.hostname) -\\n        ns.getServerUsedRam(server1.hostname)\\n    );\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const server of servers) {\\n      const usedRam = ns.getServerUsedRam(server.hostname);\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Hostname', style: { width: 'max-content' } },\\n            content: createReactElement(server.hostname, {\\n              color: hostnameToColor[server.hostname],\\n            }),\\n          },\\n          {\\n            column: {\\n              name: 'Used Ram',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatRam(usedRam, 0),\\n            style: { color: usedRam === 0 ? ns.ui.getTheme().error : '' },\\n          },\\n          {\\n            column: {\\n              name: 'Max Ram',\\n              style: { textAlign: 'right', width: 'max-content' },\\n            },\\n            content: ns.formatRam(server.maxRam, 0),\\n          },\\n          {\\n            column: { name: 'Running Scripts', style: {} },\\n            content: getRunningScripts(ns, server.hostname, hostnameToColor),\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n\\n    ns.clearLog();\\n    printTable(ns, table);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Returns a ReactElement showing the scripts that are running on a given\\n * hostname.\\n *\\n * @param {NS} ns\\n * @param {string} hostname\\n * @param {Object.<string, string>} hostnameToColor\\n * @returns {import('../NetscriptDefinitions').ReactElement}\\n */\\nfunction getRunningScripts(ns, hostname, hostnameToColor) {\\n  const elements = ns.ps(hostname).map(process => {\\n    const style = {};\\n    const message = [createReactElement(process.filename, {}, 'span')];\\n\\n    for (const args of process.args) {\\n      message.push(\\n        createReactElement(\\n          ` ${args}`,\\n          {\\n            color: args in hostnameToColor ? hostnameToColor[args] : 'inherit',\\n          },\\n          'span'\\n        )\\n      );\\n    }\\n\\n    message.push(\\n      createReactElement(` (${process.threads.toLocaleString()})`, {}, 'span')\\n    );\\n\\n    if (['hack.js', 'grow.js', 'weaken.js'].includes(process.filename)) {\\n      const script = ns.getRunningScript(process.pid, hostname);\\n      const totalTimeMessage = script.logs[0]\\n        .match(/ in .* \\\\(/)[0]\\n        .replace(' in ', '')\\n        .replace(' (', '');\\n      const totalSeconds = totalTimeMessage\\n        .match(/[0-9.]+ [a-z]+/g)\\n        .map(timePart => {\\n          const number = parseFloat(timePart.split(' ')[0]);\\n          if (timePart.includes('hour')) return number * 60 * 60;\\n          if (timePart.includes('minute')) return number * 60;\\n          if (timePart.includes('second')) return number;\\n          return number;\\n        })\\n        .reduce((a, b) => a + b);\\n      message.push(\\n        createReactElement(\\n          ` - ${formatTime(\\n            ns,\\n            (totalSeconds - script.onlineRunningTime) * 1000\\n          )} left`,\\n          {},\\n          'span'\\n        )\\n      );\\n      style.color = {\\n        'hack.js': ns.ui.getTheme().error,\\n        'grow.js': ns.ui.getTheme().success,\\n        'weaken.js': ns.ui.getTheme().warning,\\n      }[process.filename];\\n    }\\n\\n    return createReactElement(message, style);\\n  });\\n  return React.createElement('div', {}, ...elements);\\n}\\n\",\"filename\":\"monitor-servers.js\",\"server\":\"home\"}}],[\"utils/formatting.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting for printing to either --tail logs or to the terminal.\\n */\\n\\n/**\\n * @param {NS} ns\\n */\\nexport function printTable(ns) {}\\n\\nexport function tprintTable(ns) {}\\n\\nfunction getTableForPrinting() {}\\n\",\"filename\":\"utils/formatting.js\",\"server\":\"home\"}}],[\"utils/table.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting for printing tables to either --tail logs or to the\\n * terminal.\\n */\\n\\n/**\\n * @typedef Column\\n * @property {string} name\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Cell\\n * @property {Column} column\\n * @property {import('../../NetscriptDefinitions').ReactNode} content\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Row\\n * @property {Cell[]} cells\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * @typedef Table\\n * @property {Row[]} rows\\n * @property {[import('utils/dom').Style]} style\\n */\\n\\n/**\\n * Prints a table to --tail logs.\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n */\\nexport const printTable = (ns, table) =>\\n  ns.printRaw(getTableForPrinting(ns, table, true));\\n\\n/**\\n * Prints a table to the terminal.\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n */\\nexport const tprintTable = (ns, table) =>\\n  ns.tprintRaw(getTableForPrinting(ns, table));\\n\\n/**\\n * Gets a formatted table for printing\\n *\\n * @param {NS} ns\\n * @param {Table} table\\n * @param {[boolean]} fillWidth\\n *        whether the table should take up the full width of the window\\n * @returns {import('../../NetscriptDefinitions').ReactElement}\\n */\\nfunction getTableForPrinting(ns, table, fillWidth) {\\n  if (table.rows.length === 0) return createReactElement('Nothing to print!');\\n\\n  // Get border color.\\n  let primaryColor = ns.ui.getTheme().primary.substring(1);\\n  if (primaryColor.length === 3) {\\n    const colors = primaryColor.split('');\\n    primaryColor =\\n      colors[0] + colors[0] + colors[1] + colors[1] + colors[2] + colors[2];\\n  }\\n  const border = `.5px #${primaryColor}33 solid`;\\n\\n  // Build and return ReactElement for table.\\n  const cellStyling = {\\n    border: border,\\n    padding: '2px 8px',\\n  };\\n  const headerCellElements = table.rows[0].cells.map(cell =>\\n    createReactElement(cell.column.name, {\\n      ...cellStyling,\\n      ...cell.column.style,\\n      fontWeight: 'bold',\\n      width: 'auto',\\n    })\\n  );\\n  const cellElements = table.rows\\n    .map(row => {\\n      const rowStyle = row.style ?? {};\\n      return row.cells.map(cell =>\\n        createReactElement(cell.content, {\\n          ...cellStyling,\\n          ...cell.column.style,\\n          ...rowStyle,\\n          ...cell.style,\\n          width: 'auto',\\n        })\\n      );\\n    })\\n    .flat();\\n  const tableStyle = table.style ?? {};\\n  return createReactElement([...headerCellElements, ...cellElements], {\\n    border: border,\\n    display: 'grid',\\n    gridTemplateColumns: table.rows[0].cells\\n      .map(cell => {\\n        if (cell.column.style.width) return cell.column.style.width;\\n        return fillWidth ? '1fr' : 'max-content';\\n      })\\n      .join(' '),\\n    width: fillWidth ? '100%' : 'max-content',\\n    ...tableStyle,\\n  });\\n}\\n\\n/**\\n * Creates a <div> react element.\\n *\\n * @param {import('../../NetscriptDefinitions').ReactNode|import('../../NetscriptDefinitions').ReactNode[]} content\\n * @param {[import('utils/dom').Style]} style\\n * @returns {import('../../NetscriptDefinitions').ReactElement}\\n */\\nfunction createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\",\"filename\":\"utils/table.js\",\"server\":\"home\"}}],[\"contracts/hamming-codes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * HammingCodes: Encoded Binary to Integer\\n *\\n * You are given the following encoded binary string:\\n * '10100000000001101100000001110011'\\n *\\n * Treat it as an extended Hamming code with 1 'possible' error at a random\\n * index.\\n *\\n * Find the 'possible' wrong bit, fix it and extract the decimal value, which is\\n * hidden inside the string.\\n *\\n * Note: The length of the binary string is dynamic, but its encoding/decoding\\n * follows Hamming's 'rule'\\n *\\n * Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from\\n * 3Blue1Brown for more information\\n *\\n * Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an\\n * altered Bit 😉\\n *\\n * Note: The endianness of the encoded decimal value is reversed in relation to\\n * the endianness of the Hamming code. Where the Hamming code is expressed as\\n * little-endian (LSB at index 0), the decimal value encoded in it is expressed\\n * as big-endian (MSB at index 0).\\n *\\n * Extra note for automation: return the decimal value as a string\\n */\\n\",\"filename\":\"contracts/hamming-codes.js\",\"server\":\"home\"}}],[\"utils/format.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utils for formatting strings.\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {string} e.g. \\\"$123.45\\\"\\n */\\nexport function formatMoney(ns, amount) {\\n  return '$' + ns.formatNumber(amount, 2);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} milliseconds\\n * @returns {string} e.g. \\\"12m 34s\\\"\\n */\\nexport function formatTime(ns, milliseconds) {\\n  const totalSeconds = Math.ceil(milliseconds / 1000);\\n  if (totalSeconds < 60) return `${totalSeconds}s`;\\n\\n  const minutes = Math.floor(totalSeconds / 60);\\n  const seconds = totalSeconds - minutes * 60;\\n  return `${minutes}m ${seconds}s`;\\n}\\n\",\"filename\":\"utils/format.js\",\"server\":\"home\"}}],[\"utils/constants.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n} from 'contracts/algorithmic-stock-trader';\\nimport arrayJumpingGame from 'contracts/array-jumping-game';\\nimport compressionIRLECompression from 'contracts/compression-i-rle-compression';\\nimport compressionIILZDecompression from 'contracts/compression-ii-lz-decompression';\\nimport encryptionICaesarCipher from 'contracts/encryption-i-caesar-cipher';\\nimport encryptionIIVigenereCipher from 'contracts/encryption-ii-vigenere-cipher';\\nimport findAllValidMathExpressions from 'contracts/find-all-valid-math-expressions';\\nimport findLargestPrimeFactor from 'contracts/find-largest-prime-factor';\\nimport generateIPAddresses from 'contracts/generate-ip-addresses';\\nimport mergeOverlappingIntervals from 'contracts/merge-overlapping-intervals';\\nimport minimumPathSumInATriangle from 'contracts/minimum-path-sum-in-a-triangle';\\nimport proper2ColoringOfAGraph from 'contracts/proper-2-coloring-of-a-graph';\\nimport sanitizeParenthesesInExpression from 'contracts/sanitize-parentheses-in-expression';\\nimport spiralizeMatrix from 'contracts/spiralize-matrix';\\nimport subarrayWithMaximumSum from 'contracts/subarray-with-maximum-sum';\\nimport totalWaysToSum from 'contracts/total-ways-to-sum';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from 'contracts/unique-paths-in-a-grid';\\n\\nexport const HOME_HOSTNAME = 'home';\\n\\n/** Maximum number of servers that we can buy. */\\nexport const MAX_PURCHASED_SERVER_COUNT = 26;\\n\\n/** One second in milliseconds. */\\nexport const ONE_SECOND = 1000;\\n\\n/** One minute in milliseconds. */\\nexport const ONE_MINUTE = ONE_SECOND * 60;\\n\\nexport const CONTRACT_TYPE_TO_SOLVER_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  // 'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  // 'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game II': null,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Compression I: RLE Compression': compressionIRLECompression,\\n  'Compression II: LZ Decompression': compressionIILZDecompression,\\n  'Compression III: LZ Compression': null,\\n  'Encryption I: Caesar Cipher': encryptionICaesarCipher,\\n  'Encryption II: Vigenère Cipher': encryptionIIVigenereCipher,\\n  'Find All Valid Math Expressions': findAllValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIPAddresses,\\n  'HammingCodes: Encoded Binary to Integer': null,\\n  'HammingCodes: Integer to Encoded Binary': null,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Proper 2-Coloring of a Graph': proper2ColoringOfAGraph,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  // 'Shortest Path in a Grid': shortestPathInAGrid,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum II': null,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\",\"filename\":\"utils/constants.js\",\"server\":\"home\"}}],[\"contracts/santize.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} input\\n */\\nexport function sanitizeParenthesesInExpression(input) {}\\n\\n/**\\n * Checks if an expression is valid based on the parentheses pairs.\\n *\\n * @param {string} expression\\n */\\nfunction isValidExpression(expression) {\\n  const parentheses = [];\\n  const characters = expression.split('');\\n  for (const character of characters) {\\n    switch (character) {\\n      case '(':\\n        parentheses.push(1);\\n        break;\\n      case ')':\\n        if (parentheses.pop() === undefined) return false;\\n        break;\\n    }\\n  }\\n  return parentheses.length === 0;\\n}\\n\\nconsole.log(isValidExpression('(a)())()'));\\n\",\"filename\":\"contracts/santize.js\",\"server\":\"home\"}}],[\"contracts/santize-parentheses-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} input\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  // Input expression is already valid.\\n  if (isValidExpression(input)) return [input];\\n\\n  const validExpressions = [];\\n  for (let i = 0; i < input.length; i++) {\\n    const newExpression = input.slice(0, i) + input.slice(i + 1);\\n    console.log(newExpression);\\n  }\\n}\\n\\n/**\\n * Checks if an expression is valid based on the parentheses pairs.\\n *\\n * @param {string} expression\\n */\\nfunction isValidExpression(expression) {\\n  const parentheses = [];\\n  const characters = expression.split('');\\n  for (const character of characters) {\\n    switch (character) {\\n      case '(':\\n        parentheses.push(1);\\n        break;\\n      case ')':\\n        if (parentheses.pop() === undefined) return false;\\n        break;\\n    }\\n  }\\n  return parentheses.length === 0;\\n}\\n\\nconsole.log(sanitizeParenthesesInExpression);\\n\",\"filename\":\"contracts/santize-parentheses-in-expression.js\",\"server\":\"home\"}}],[\"contracts/sanitize-parentheses-in-expression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Given the following string:\\n *\\n * )))a())a)((\\n *\\n * remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses. Examples:\\n * \\\"()())()\\\" -> [\\\"()()()\\\", \\\"(())()\\\"]\\n * \\\"(a)())()\\\" -> [\\\"(a)()()\\\", \\\"(a())()\\\"]\\n * \\\")(\\\" -> [\\\"\\\"]\\n *\\n * @param {string} expression\\n * @returns {string[]} valid expressions\\n */\\nexport default function sanitizeParenthesesInExpression(expression) {\\n  let charactersToRemove = 0;\\n  let expressions = [expression];\\n  while (charactersToRemove < expression.length) {\\n    const validExpressions = new Set();\\n    for (const expression of expressions) {\\n      if (isValidExpression(expression)) validExpressions.add(expression);\\n    }\\n    if (validExpressions.size > 0) return [...validExpressions];\\n\\n    const shortenedExpressions = new Set();\\n    for (const expression of expressions) {\\n      for (let i = 0; i < expression.length; i++) {\\n        shortenedExpressions.add(\\n          expression.substring(0, i) + expression.substring(i + 1)\\n        );\\n      }\\n    }\\n    expressions = [...shortenedExpressions];\\n\\n    charactersToRemove++;\\n  }\\n  return [];\\n}\\n\\n/** @type {Object.<string, boolean>} */\\nconst expressionToIsValidMap = {};\\n\\n/**\\n * @param {string} expression\\n * @returns {boolean} is valid\\n */\\nfunction isValidExpression(expression) {\\n  if (expression in expressionToIsValidMap) {\\n    return expressionToIsValidMap[expression];\\n  }\\n\\n  let stack = 0;\\n  for (let i = 0; i < expression.length; i++) {\\n    const character = expression.charAt(i);\\n    if (character === '(') stack++;\\n    else if (character === ')') stack--;\\n    if (stack < 0) break;\\n  }\\n  expressionToIsValidMap[expression] = stack === 0;\\n  return expressionToIsValidMap[expression];\\n}\\n\",\"filename\":\"contracts/sanitize-parentheses-in-expression.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-on-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n */\\nexport default function uniquePathsInAGridI {}\\n\",\"filename\":\"contracts/unique-paths-on-a-grid.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-in-a-grid-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n */\\nexport default function uniquePathsInAGridI(input) {\\n  const [rows, columns] = input;\\n  return new Set(getPaths(0, 0, new Grid(rows, columns), [])).size;\\n}\\n\\n/**\\n * @typedef {('d'|'r')[]} Path\\n */\\n\\n/**\\n * Gets all possible (can have duplicates) paths from the given position to the\\n * bottom-right corner ({x: columns, y: rows}).\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {Grid} grid\\n * @param {Path[]} pathThusFar\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (x === grid.columns - 1 && y === grid.rows - 1) return [pathThusFar];\\n\\n  const paths = [];\\n\\n  const rightPosition = { x: x + 1, y: y };\\n  if (grid.isValidPosition(rightPosition.x, rightPosition.y)) {\\n    paths.push(\\n      ...getPaths(rightPosition.x, rightPosition.y, grid, [...pathThusFar, 'r'])\\n    );\\n  }\\n\\n  const downPosition = { x: x, y: y + 1 };\\n  if (grid.isValidPosition(downPosition.x, downPosition.y)) {\\n    paths.push(\\n      ...getPaths(downPosition.x, downPosition.y, grid, [...pathThusFar, 'd'])\\n    );\\n  }\\n\\n  return paths;\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number} rows\\n   * @param {number} columns\\n   */\\n  constructor(rows, columns) {\\n    this.rows = rows;\\n    this.columns = columns;\\n  }\\n\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   * @returns {boolean} whether the position is valid\\n   */\\n  isValidPosition(x, y) {\\n    return x >= 0 && y >= 0 && x < this.columns && y < this.rows;\\n  }\\n}\\n\",\"filename\":\"contracts/unique-paths-in-a-grid-i.js\",\"server\":\"home\"}}],[\"contracts/find-largest-prime-factor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime factor of 301829830?\\n *\\n * @param {number} input\\n */\\nexport default function findLargestPrimeFactor(input) {\\n  const squareRoot = Math.floor(Math.sqrt(input));\\n  let otherPrimeFactor;\\n  for (let i = 1; i <= squareRoot; i++) {\\n    if (input % i !== 0) continue; // Not a factor.\\n    if (isPrime(input / i)) return input / i;\\n    if (isPrime(i)) otherPrimeFactor = i;\\n  }\\n  return otherPrimeFactor;\\n}\\n\\n/** @type {Object.<number, boolean>}*/\\nconst numberToIsPrimeMap = {\\n  1: true,\\n  2: true,\\n  3: true,\\n  5: true,\\n  7: true,\\n  11: true,\\n  13: true,\\n  17: true,\\n  19: true,\\n  23: true,\\n  29: true,\\n  31: true,\\n  37: true,\\n  41: true,\\n  43: true,\\n  47: true,\\n  53: true,\\n  59: true,\\n  61: true,\\n  67: true,\\n  71: true,\\n  73: true,\\n  79: true,\\n  83: true,\\n  89: true,\\n  97: true,\\n};\\n\\n/**\\n * Checks whether a number is prime and records it into the `NUMBER_TO_IS_PRIME`\\n * map.\\n *\\n * @param {number} number\\n */\\nfunction isPrime(number) {\\n  if (number in numberToIsPrimeMap) return numberToIsPrimeMap[number];\\n\\n  let isPrime = true;\\n\\n  for (let i = 2; i < Math.sqrt(number); i++) {\\n    if (number % i === 0) {\\n      isPrime = false;\\n      break;\\n    }\\n  }\\n\\n  numberToIsPrimeMap[number] = isPrime;\\n  return isPrime;\\n}\\n\\nconsole.log(findLargestPrimeFactor(764191163));\\n// console.log(findLargestPrimeFactor(1000));\\n\",\"filename\":\"contracts/find-largest-prime-factor.js\",\"server\":\"home\"}}],[\"monitor-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { printTable } from 'utils/table';\\nimport { formatMoney, formatTime } from 'utils/format';\\nimport { ONE_SECOND } from 'utils/constants';\\nimport { createColorForString } from 'utils/colors';\\nimport { GROW_JS, HACK_JS, WEAKEN_JS } from 'utils/scripts';\\nimport { createReactElement } from 'utils/dom';\\n\\n/**\\n * Monitors all servers that can be hacked in the --tail.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.resizeTail(1300, 1000);\\n  ns.moveTail(50, 50);\\n  ns.atExit(() => ns.closeTail());\\n\\n  const allServers = getServers(ns).filter(server => server.maxMoney > 0);\\n  const hackColor = ns.ui.getTheme().error;\\n  const growColor = ns.ui.getTheme().success;\\n  const weakenColor = ns.ui.getTheme().warning;\\n\\n  while (true) {\\n    const servers = allServers.filter(\\n      server =>\\n        ns.hasRootAccess(server.hostname) &&\\n        ns.getHackingLevel() >= server.hackingLevel\\n    );\\n    servers.sort(\\n      (server1, server2) =>\\n        ns.hackAnalyzeChance(server2.hostname) -\\n        ns.hackAnalyzeChance(server1.hostname)\\n    );\\n\\n    const processes = getServers(ns)\\n      .map(server => ns.ps(server.name))\\n      .flat();\\n    const serverNameToHackThreadsMap = {};\\n    const serverNameToWeakenThreadsMap = {};\\n    const serverNameToGrowThreadsMap = {};\\n    for (const process of processes) {\\n      if (![HACK_JS, WEAKEN_JS, GROW_JS].includes(process.filename)) continue;\\n      const serverName = process.args[0];\\n      const threadCount = process.threads;\\n      const map = {\\n        [HACK_JS]: serverNameToHackThreadsMap,\\n        [WEAKEN_JS]: serverNameToWeakenThreadsMap,\\n        [GROW_JS]: serverNameToGrowThreadsMap,\\n      }[process.filename];\\n      if (!(serverName in map)) map[serverName] = 0;\\n      map[serverName] += threadCount;\\n    }\\n\\n    /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n    for (const server of servers) {\\n      const scripts = [];\\n      if (server.hostname in serverNameToHackThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToHackThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads hacking`, {\\n            color: hackColor,\\n          })\\n        );\\n      }\\n      if (server.hostname in serverNameToWeakenThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToWeakenThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads weakening`, {\\n            color: weakenColor,\\n          })\\n        );\\n      }\\n      if (server.hostname in serverNameToGrowThreadsMap) {\\n        const threadCount = ns.formatNumber(\\n          serverNameToGrowThreadsMap[server.hostname]\\n        );\\n        scripts.push(\\n          createReactElement(`${threadCount} threads growing`, {\\n            color: growColor,\\n          })\\n        );\\n      }\\n\\n      /** @type {import('utils/table').Row} */ const row = {\\n        cells: [\\n          {\\n            column: { name: 'Hostname', style: { width: 'max-content' } },\\n            content: server.hostname,\\n            style: { color: createColorForString(ns, server.hostname) },\\n          },\\n          {\\n            column: {\\n              name: 'Hack Chance',\\n              style: { textAlign: 'right', color: hackColor },\\n            },\\n            content: ns.formatPercent(ns.hackAnalyzeChance(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Hack Time',\\n              style: { textAlign: 'center', color: hackColor },\\n            },\\n            content: formatTime(ns, ns.getHackTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Available Money',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatMoney(\\n              ns,\\n              ns.getServerMoneyAvailable(server.hostname)\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Max Money',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatMoney(ns, server.maxMoney),\\n          },\\n          {\\n            column: {\\n              name: 'Grow Time',\\n              style: { textAlign: 'right', color: growColor },\\n            },\\n            content: formatTime(ns, ns.getGrowTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Current Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(\\n              ns.getServerSecurityLevel(server.hostname)\\n            ),\\n          },\\n          {\\n            column: {\\n              name: 'Min Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(server.minSecurity, 0),\\n          },\\n          {\\n            column: {\\n              name: 'Base Security',\\n              style: { textAlign: 'right', color: weakenColor },\\n            },\\n            content: ns.formatNumber(server.baseSecurity, 0),\\n          },\\n          {\\n            column: {\\n              name: 'Weaken Time',\\n              style: { textAlign: 'center', color: weakenColor },\\n            },\\n            content: formatTime(ns, ns.getWeakenTime(server.hostname)),\\n          },\\n          {\\n            column: {\\n              name: 'Scripts',\\n              style: { width: 'max-content' },\\n            },\\n            content: scripts.length === 0 ? '-' : createReactElement(scripts),\\n          },\\n        ],\\n      };\\n      table.rows.push(row);\\n    }\\n\\n    ns.clearLog();\\n    printTable(ns, table);\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-hacking.js\",\"server\":\"home\"}}],[\"find-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { CONTRACT_TYPE_TO_SOLVER_MAP, HOME_HOSTNAME } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Manages contracts.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const servers = getServers(ns);\\n\\n  /** @type {Contract[]} */ const contracts = servers\\n    .map(server =>\\n      ns.ls(server.hostname, '.cct').map(\\n        fileName =>\\n          /** @type {Contract} */ ({\\n            fileName,\\n            type: ns.codingcontract.getContractType(fileName, server.hostname),\\n            server,\\n          })\\n      )\\n    )\\n    .flat();\\n  contracts.sort((a, b) => a.type.localeCompare(b.type));\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const contract of contracts) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Contract Type', style: {} },\\n          content: contract.type,\\n        },\\n        {\\n          column: { name: 'Status', style: {} },\\n          content: attemptContract(ns, contract),\\n        },\\n        {\\n          column: { name: 'Run Command', style: { maxWidth: '800px' } },\\n          content: getRunCommand(contract),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n/**\\n * @typedef Contract\\n * @property {string} fileName\\n * @property {string} type\\n * @property {Server} server\\n */\\n\\n/**\\n * @param {NS} ns\\n * @param {Contract} connect\\n * @returns {import('NetscriptDefinitions').ReactElement} message representing the status of attempting the contract\\n */\\nfunction attemptContract(ns, contract) {\\n  const theme = ns.ui.getTheme();\\n  if (\\n    !(contract.type in CONTRACT_TYPE_TO_SOLVER_MAP) ||\\n    CONTRACT_TYPE_TO_SOLVER_MAP[contract.type] === null\\n  ) {\\n    return createReactElement('No solver available', { color: theme.warning });\\n  }\\n\\n  const data = ns.codingcontract.getData(\\n    contract.fileName,\\n    contract.server.hostname\\n  );\\n  const solver = CONTRACT_TYPE_TO_SOLVER_MAP[contract.type];\\n  const reward = ns.codingcontract.attempt(\\n    solver(data),\\n    contract.fileName,\\n    contract.server.hostname\\n  );\\n  return reward\\n    ? createReactElement(reward, { color: theme.success })\\n    : createReactElement('Attempt failed!', { color: theme.error });\\n}\\n\\n/**\\n * @param {Contract} contract\\n * @returns {string} run command\\n */\\nfunction getRunCommand(contract) {\\n  return [\\n    'home',\\n    ...contract.server.path.map(hostname => `connect ${hostname}`),\\n    `run ${contract.fileName}`,\\n  ].join('; ');\\n}\\n\",\"filename\":\"find-contracts.js\",\"server\":\"home\"}}],[\"find-backdoors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Prints out a command to run backdoor on all unowned servers with root access.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const currentHackingLevel = ns.getHackingLevel();\\n  const servers = getServers(ns).filter(server => {\\n    const serverData = ns.getServer(server.hostname);\\n    return (\\n      ns.hasRootAccess(server.hostname) &&\\n      serverData.requiredHackingSkill <= currentHackingLevel &&\\n      !serverData.purchasedByPlayer &&\\n      !serverData.backdoorInstalled\\n    );\\n  });\\n  for (const server of servers) {\\n    const commands = [\\n      server.path.map(hostname => `connect ${hostname}`).join('; '),\\n      'backdoor',\\n      'home',\\n    ];\\n    await executeTerminalCommand(ns, ...commands);\\n  }\\n}\\n\",\"filename\":\"find-backdoors.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-iii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Permutation, Transaction } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 47,69,73,32,15,167,100,135,5,80,18,192,171,183,152\\n *\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderIII(stockPrices) {\\n  const permutations = [];\\n\\n  for (let buyDay1 = 0; buyDay1 < stockPrices.length; buyDay1++) {\\n    for (let sellDay1 = buyDay1; sellDay1 < stockPrices.length; sellDay1++) {\\n      const transaction1 = new Transaction(stockPrices, buyDay1, sellDay1);\\n      if (transaction1.profit > 0) {\\n        permutations.push(new Permutation(transaction1));\\n      }\\n\\n      for (let buyDay2 = sellDay1; buyDay2 < stockPrices.length; buyDay2++) {\\n        for (\\n          let sellDay2 = buyDay2;\\n          sellDay2 < stockPrices.length;\\n          sellDay2++\\n        ) {\\n          const transaction2 = new Transaction(stockPrices, buyDay2, sellDay2);\\n          const permutation = new Permutation(transaction1, transaction2);\\n          if (permutation.profit > 0) permutations.push(permutation);\\n        }\\n      }\\n    }\\n  }\\n\\n  return Math.max(...permutations.map(permutation => permutation.profit));\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-iii.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Transaction } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 35,172,130,31,111,79,19,41,125,183,11,39,153,11,19,126,130,22,139,134,54,47,169,138,75\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderI(stockPrices) {\\n  const transactions = [];\\n\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    for (let sellDay = buyDay; sellDay < stockPrices.length; sellDay++) {\\n      const transaction = new Transaction(stockPrices, buyDay, sellDay);\\n      if (transaction.profit >= 0) transactions.push(transaction);\\n    }\\n  }\\n\\n  return Math.max(...transactions.map(transaction => transaction.profit));\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-i.js\",\"server\":\"home\"}}],[\"generate-test-contract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { createReactElement } from 'utils/dom';\\nimport { CONTRACT_TYPE_TO_SOLVER_MAP, HOME_HOSTNAME } from 'utils/constants';\\n\\nconst PADDING = '16px';\\n\\n/**\\n * Generates test contracts.\\n *\\n * Takes in a contract type as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const contractType = ns.args[0];\\n\\n  // Check if there is an existing test contract that we can run.\\n  let contractFileName = getDummyContract(ns, contractType);\\n  if (!contractFileName) {\\n    ns.codingcontract.createDummyContract(contractType);\\n    contractFileName = getDummyContract(ns, contractType);\\n  }\\n\\n  // Print out the contract into --tail logs.\\n  printContract(ns, contractFileName);\\n}\\n\\nexport function autocomplete() {\\n  return Object.keys(CONTRACT_TYPE_TO_SOLVER_MAP).map(\\n    contractType => `\\\"${contractType}\\\"`\\n  );\\n}\\n\\n/**\\n * Returns a dummy contract's file name if it exists and undefined if otherwise.\\n *\\n * @param {NS} ns\\n * @param {string} contractType\\n * @returns {string|undefined} contract file name\\n */\\nfunction getDummyContract(ns, contractType) {\\n  return ns\\n    .ls(HOME_HOSTNAME, '.cct')\\n    .find(\\n      contractFileName =>\\n        ns.codingcontract.getContractType(contractFileName) === contractType\\n    );\\n}\\n\\n/**\\n * Prints a contract to terminal given the contract file name.\\n *\\n * @param {NS} ns\\n * @param {string} contractFileName\\n */\\nfunction printContract(ns, contractFileName) {\\n  const color = ns.ui.getTheme().success;\\n\\n  // Print contract type.\\n  ns.tprintRaw(\\n    createReactElement(ns.codingcontract.getContractType(contractFileName), {\\n      color: color,\\n      fontWeight: 'bold',\\n      padding: PADDING,\\n    })\\n  );\\n\\n  // Print description.\\n  ns.tprintRaw(\\n    createReactElement(\\n      ns.codingcontract\\n        .getDescription(contractFileName)\\n        .replaceAll('&nbsp;', ' '),\\n      {\\n        padding: PADDING,\\n      }\\n    )\\n  );\\n\\n  // Print command to attempt.\\n  ns.tprintRaw(\\n    createReactElement(`home; run ${contractFileName}`, {\\n      color: color,\\n      padding: PADDING,\\n    })\\n  );\\n}\\n\",\"filename\":\"generate-test-contract.js\",\"server\":\"home\"}}],[\"utils/dom.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {Object.<string, (string|number)>} Style\\n */\\n\\nimport { ONE_SECOND } from 'utils/constants';\\n\\n/**\\n * Creates a React element that can be appended to the terminal or --tail logs.\\n *\\n * @param {import(\\\"NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Style]} style optional CSS\\n * @param {[string]} tag to override <div>\\n * @returns {import(\\\"NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style, tag) {\\n  if (Array.isArray(content)) {\\n    return React.createElement(\\n      tag ?? 'div',\\n      { style: style ?? {} },\\n      ...content\\n    );\\n  } else {\\n    return React.createElement(tag ?? 'div', { style: style ?? {} }, content);\\n  }\\n}\\n\\n/**\\n * Executes terminal commands (e.g. `connect n00dles`) without RAM penalties.\\n *\\n * @param {NS} ns\\n * @param {...string} commands\\n */\\nexport async function executeTerminalCommand(ns, ...commands) {\\n  for (let command of commands) {\\n    let wasSuccessful = executeCommand(command);\\n    while (!wasSuccessful) {\\n      await ns.sleep(ONE_SECOND / 2);\\n      wasSuccessful = executeCommand(command);\\n    }\\n  }\\n}\\n\\n/**\\n * @param {string} command\\n * @returns {boolean} whether executing the event was successful\\n */\\nfunction executeCommand(command) {\\n  const input = getDocument().getElementById('terminal-input');\\n  if (input === null || input.hasAttribute('disabled')) return false;\\n  input.value = command;\\n  const handler = Object.keys(input)[1];\\n  input[handler].onChange({ target: input });\\n  input[handler].onKeyDown({\\n    key: 'Enter',\\n    code: 'Enter',\\n    which: 13,\\n    keyCode: 13,\\n    preventDefault: () => null,\\n  });\\n  return true;\\n}\\n\\n/**\\n * Returns DOM document without the RAM penalties.\\n *\\n * Note: Make sure to name the variable `doc` instead of `document` to avoid RAM\\n * penalties.\\n *\\n * @returns {Document}\\n */\\nconst getDocument = () => eval('document');\\n\",\"filename\":\"utils/dom.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Transaction {\\n  constructor(buyDay, sellDay, stockPrices) {\\n    this.buyDay = buyDay;\\n    this.buyPrice = stockPrices[buyDay];\\n\\n    this.sellDay = sellDay;\\n    this.sellPrice = stockPrices[sellDay];\\n\\n    this.profit = this.sellPrice - this.buyPrice;\\n  }\\n\\n  toString() {\\n    return [\\n      `buy day ${this.buyDay} ($${this.buyPrice})`,\\n      `sell day ${this.sellDay} ($${this.sellPrice})`,\\n      `profit $${this.profit}`,\\n    ].join(', ');\\n  }\\n}\\n\\nexport class Permutation {\\n  /**\\n   * @param  {...Transaction} transactions\\n   */\\n  constructor(...transactions) {\\n    this.transactions = transactions;\\n    this.profit = transactions\\n      .map(transaction => transaction.profit)\\n      .reduce((a, b) => a + b);\\n  }\\n\\n  toString() {\\n    return [\\n      '\\\\n{',\\n      `  ${this.transactions.length} transactions, total profit $${this.profit}`,\\n      ...this.transactions.map(transaction => `  ${transaction}`),\\n      '}',\\n    ].join('\\\\n');\\n  }\\n}\\n\\n/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 35,172,130,31,111,79,19,41,125,183,11,39,153,11,19,126,130,22,139,134,54,47,169,138,75\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderI(stockPrices) {\\n  return getMaxProfit(stockPrices, 1);\\n}\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 103,150,154,3,98,150,182,97,41,96,99,1,1,28,66,19,51,4,172,22,199,40,93,33,185,96,158,123,47,76,18,93,103,126,120,92,194,126,97,124,34,86,29,22,73,156,27,18\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  return getMaxProfit(stockPrices);\\n}\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 47,69,73,32,15,167,100,135,5,80,18,192,171,183,152\\n *\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderIII(stockPrices) {\\n  return getMaxProfit(stockPrices, 2);\\n}\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * You are given the following array with two elements:\\n *\\n * [9, [164,113,142,36,159,53,111,154,6,61,134,22,195,142,7,39,190,28,112,140,17,156,88,78,88]]\\n *\\n * The first element is an integer k. The second element is an array of stock\\n * prices (which are numbers) where the i-th element represents the stock price\\n * on day i.\\n *\\n * Determine the maximum possible profit you can earn using at most k\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you can buy it again.\\n *\\n * If no profit can be made, then the answer should be 0.\\n *\\n * @param {(number, number[])[]} input [k, stockPrices]\\n * @returns {number} profit\\n */\\nexport function algorithmicStockTraderIV(input) {\\n  const [maxTransactions, stockPrices] = input;\\n  return getMaxProfit(stockPrices, maxTransactions);\\n}\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {[number]} maxTransactions\\n */\\nfunction getMaxProfit(stockPrices, maxTransactions) {\\n  const buyDayToPermutationMap = {};\\n  const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    permutations.push(\\n      ...getProfitablePermutation(\\n        buyDay,\\n        stockPrices,\\n        buyDayToPermutationMap,\\n        maxTransactions\\n      )\\n    );\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  console.log(`${permutations[0]}`);\\n  return permutations[0].profit;\\n}\\n\\n/**\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n * @param {Object.<number, Permutation[]>} buyDayToPermutationMap\\n * @param {number} maxTransactions\\n * @returns {Permutation} profitable permutations\\n */\\nfunction getProfitablePermutation(\\n  buyDay,\\n  stockPrices,\\n  buyDayToPermutationMap,\\n  maxTransactions\\n) {\\n  if (buyDay in buyDayToPermutationMap) return buyDayToPermutationMap[buyDay];\\n\\n  const permutations = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const transaction = new Transaction(buyDay, sellDay, stockPrices);\\n    if (transaction.profit <= 0) continue;\\n    permutations.push(new Permutation(transaction));\\n    if (maxTransactions === 1) continue;\\n\\n    for (\\n      let nextBuyDay = sellDay + 1;\\n      nextBuyDay < stockPrices.length - 1;\\n      nextBuyDay++\\n    ) {\\n      const nextBuyDayPermutations = getProfitablePermutation(\\n        nextBuyDay,\\n        stockPrices,\\n        buyDayToPermutationMap,\\n        maxTransactions ? maxTransactions - 1 : maxTransactions\\n      );\\n      if (nextBuyDayPermutations.length === 0) continue;\\n      nextBuyDayPermutations.sort((a, b) => b.profit - a.profit);\\n\\n      // for (const permutation of nextBuyDayPermutations) {\\n      //   permutations.push(\\n      //     new Permutation(transaction, ...permutation.transactions)\\n      //   );\\n      // }\\n\\n      permutations.push(\\n        new Permutation(transaction, ...nextBuyDayPermutations[0].transactions)\\n      );\\n    }\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  buyDayToPermutationMap[buyDay] = permutations;\\n  return permutations;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderIII([\\n    177, 124, 184, 55, 108, 175, 3, 102, 77, 54, 170, 130, 141, 157,\\n  ])\\n);\\n\",\"filename\":\"contracts/algorithmic-stock-trader.js\",\"server\":\"home\"}}],[\"contracts/Shortest-Path-in-a-Grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"contracts/Shortest-Path-in-a-Grid.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} input\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(input) {\\n  // Starting from bottom corner of grid, get all paths possible to bottom corner.\\n  const grid = new Grid(input);\\n  return getPaths(grid.endPosition, grid, '', [], new Map());\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')} Direction\\n */\\n\\nconst directionToOffsetMap = {\\n  D: { x: 0, y: -1 },\\n  R: { x: -1, y: 0 },\\n  U: { x: 0, y: 1 },\\n  L: { x: 1, y: 0 },\\n};\\n\\n/**\\n *\\n * @param {Position} position\\n * @param {Grid} grid\\n * @param {string} pathThusFar\\n * @param {Position[]} visitedPositions\\n * @param {Map<Position, string[]>} positionToPathsCacheMap\\n * @returns {string[]}\\n */\\nfunction getPaths(\\n  position,\\n  grid,\\n  pathThusFar,\\n  visitedPositions,\\n  positionToPathsCacheMap\\n) {\\n  console.log(`position: ${position}, ${pathThusFar}`);\\n\\n  const cacheKey = [...positionToPathsCacheMap.keys()].find(key =>\\n    key.equals(position)\\n  );\\n  if (cacheKey) {\\n    console.log('getting from cache', cacheKey);\\n    return positionToPathsCacheMap.get(cacheKey);\\n  }\\n\\n  if (position.equals(new Position(0, 0))) {\\n    console.log(`reached the end ${pathThusFar}`);\\n    return [pathThusFar];\\n  }\\n\\n  let paths = [];\\n  for (const direction in directionToOffsetMap) {\\n    const offset = directionToOffsetMap[direction];\\n    const nextPosition = new Position(\\n      position.x + offset.x,\\n      position.y + offset.y\\n    );\\n    if (\\n      !grid.isValidPosition(nextPosition) ||\\n      visitedPositions.find(visitedPosition =>\\n        visitedPosition.equals(nextPosition)\\n      )\\n    ) {\\n      continue;\\n    }\\n\\n    paths.push(\\n      ...getPaths(\\n        nextPosition,\\n        grid,\\n        pathThusFar + direction,\\n        [...visitedPositions, position],\\n        positionToPathsCacheMap\\n      )\\n    );\\n  }\\n\\n  positionToPathsCacheMap.set(position, paths);\\n  return paths;\\n}\\n\\nclass Position {\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   */\\n  constructor(x, y) {\\n    this.x = x;\\n    this.y = y;\\n  }\\n\\n  equals(other) {\\n    return this.x === other.x && this.y === other.y;\\n  }\\n\\n  toString() {\\n    return `(${this.x}, ${this.y})`;\\n  }\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number[][]} grid\\n   */\\n  constructor(grid) {\\n    this.grid = grid;\\n    this.endPosition = new Position(grid[0].length - 1, grid.length - 1);\\n  }\\n\\n  /**\\n   * @param {Position} position\\n   * @returns {boolean} is valid\\n   */\\n  isValidPosition(position) {\\n    const [x, y] = [position.x, position.y];\\n    return (\\n      x >= 0 &&\\n      y >= 0 &&\\n      y < this.grid.length &&\\n      x < this.grid[y].length &&\\n      this.grid[y][x] === 0\\n    );\\n  }\\n}\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 1, 0, 0, 0],\\n    [0, 0, 0, 1, 0],\\n  ])\\n);\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 1],\\n    [1, 0],\\n  ])\\n);\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1],\\n    [0, 0, 0, 1, 0, 0],\\n    [0, 0, 1, 1, 1, 0],\\n    [0, 0, 0, 0, 0, 0],\\n    [1, 1, 0, 0, 0, 0],\\n    [0, 1, 0, 0, 0, 1],\\n    [1, 1, 0, 0, 0, 0],\\n  ])\\n); // DDDDRRDDDRRR\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 1, 0, 1],\\n//     [1, 0, 0, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 1, 0, 0, 0, 0],\\n//     [1, 0, 0, 1, 1, 0, 0, 0],\\n//     [0, 0, 1, 0, 0, 0, 0, 0],\\n//     [0, 0, 1, 1, 0, 0, 0, 0],\\n//   ])\\n// );\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.js\",\"server\":\"home\"}}],[\"test-contracts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME, CONTRACT_TYPE_TO_SOLVER_MAP } from 'utils/constants';\\nimport { createReactElement } from 'utils/dom';\\nimport { tprintTable } from 'utils/table';\\n\\nconst NUM_CONTRACTS_TO_GENERATE = 5;\\n\\n/**\\n * Generates contracts to test a contract function again.\\n *\\n * Takes in a contract type as an argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const contractType = ns.args[0];\\n\\n  ns.tprintf(`Testing ${contractType}`);\\n\\n  // Generate contracts.\\n  for (let i = 0; i < NUM_CONTRACTS_TO_GENERATE; i++) {\\n    ns.codingcontract.createDummyContract(contractType);\\n  }\\n\\n  // Get generated contract file names.\\n  const contractFileNames = ns\\n    .ls(HOME_HOSTNAME, '.cct')\\n    .filter(\\n      contractFileName =>\\n        ns.codingcontract.getContractType(contractFileName) === contractType\\n    );\\n\\n  // Get contract solver.\\n  const solver = CONTRACT_TYPE_TO_SOLVER_MAP[contractType];\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const contractFileName of contractFileNames) {\\n    // Try to solve the contract.\\n    const input = ns.codingcontract.getData(contractFileName);\\n    const startTimestamp = new Date().getUTCMilliseconds();\\n    const output = solver(input);\\n    const endTimestamp = new Date().getUTCMilliseconds();\\n    const wasSuccessful =\\n      ns.codingcontract.attempt(output, contractFileName).length > 0;\\n    await ns.sleep(1);\\n\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Contract Name', style: {} },\\n          content: contractFileName,\\n        },\\n        {\\n          column: { name: 'Input', style: { maxWidth: '200px' } },\\n          content: `${input}`,\\n        },\\n        {\\n          column: { name: 'Output', style: {} },\\n          content: `${output}`,\\n        },\\n        {\\n          column: { name: 'Success?', style: {} },\\n          content: createReactElement(\\n            wasSuccessful ? 'Success!' : 'Failed 😭',\\n            {\\n              color: wasSuccessful\\n                ? ns.ui.getTheme().success\\n                : ns.ui.getTheme().error,\\n            }\\n          ),\\n        },\\n        {\\n          column: { name: 'Time', style: { textAlign: 'center' } },\\n          content: `${endTimestamp - startTimestamp}ms`,\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  tprintTable(ns, table);\\n}\\n\\nexport function autocomplete() {\\n  return Object.keys(CONTRACT_TYPE_TO_SOLVER_MAP)\\n    .filter(contractType => CONTRACT_TYPE_TO_SOLVER_MAP[contractType] !== null)\\n    .map(contractType => `\\\"${contractType}\\\"`);\\n}\\n\",\"filename\":\"test-contracts.js\",\"server\":\"home\"}}],[\"contracts/compression-ii-lz-decompression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression II: LZ Decompression\\n *\\n * Lempel-Ziv (LZ) compression is a data compression technique which encodes\\n * data using references to earlier parts of the data. In this variant of LZ,\\n * data is encoded in two types of chunk. Each chunk begins with a length L,\\n * encoded as a single ASCII digit from 1 to 9, followed by the chunk data,\\n * which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data. To do this, the\\n *    length is followed by a second ASCII digit X: each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends immediately,\\n * and the next character is the start of a new chunk. The two chunk types\\n * alternate, starting with type 1, and the final chunk may be of either type.\\n *\\n * You are given the following LZ-encoded string:\\n *     65JFyHC910796NwIZRo6117911y997Qh8e5aQ77902YQHLfWe2378BaqXHi3432AA\\n *\\n * Decode it and output the original string.\\n *\\n * Example: decoding '5aaabb450723abb' chunk-by-chunk\\n *     5aaabb           ->  aaabb\\n *     5aaabb45         ->  aaabbaaab\\n *     5aaabb450        ->  aaabbaaab\\n *     5aaabb45072      ->  aaabbaaababababa\\n *     5aaabb450723abb  ->  aaabbaaababababaabb\\n *\\n * @param {string} encoded message\\n * @returns {string} uncompressed message\\n */\\nexport default function compressionIILZDecompression(encoded) {\\n  let uncompressed = '';\\n\\n  let index = 0;\\n  let chunkType = 1;\\n  while (index < encoded.length) {\\n    const l = parseInt(encoded.charAt(index));\\n    if (l === 0) {\\n      // Chunk ends.\\n      index++;\\n      chunkType = chunkType === 1 ? 2 : 1;\\n      continue;\\n    }\\n\\n    switch (chunkType) {\\n      case 1:\\n        // Copy the next L characters to the uncompressed message.\\n        uncompressed += encoded.substring(index + 1, index + 1 + l);\\n        index = index + 1 + l;\\n        chunkType = 2;\\n        break;\\n      case 2:\\n        const x = parseInt(encoded.charAt(index + 1));\\n        const chunk = uncompressed.substring(\\n          uncompressed.length - x,\\n          uncompressed.length - x + l\\n        );\\n        for (let i = 0; i < l; i++) {\\n          uncompressed += chunk.charAt(i % chunk.length);\\n        }\\n        index += 2;\\n        chunkType = 1;\\n        break;\\n    }\\n  }\\n\\n  return uncompressed;\\n}\\n\",\"filename\":\"contracts/compression-ii-lz-decompression.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-ii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Transaction, Permutation } from 'contracts/algorithmic-stock-trader';\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 103,150,154,3,98,150,182,97,41,96,99,1,1,28,66,19,51,4,172,22,199,40,93,33,185,96,158,123,47,76,18,93,103,126,120,92,194,126,97,124,34,86,29,22,73,156,27,18\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {number[]} stockPrices\\n * @returns {number} profit\\n */\\nexport default function algorithmicStockTraderII(stockPrices) {\\n  const permutations = [];\\n  for (let buyDay = 0; buyDay < stockPrices.length - 1; buyDay++) {\\n    permutations.push(...getAllPermutations(buyDay, stockPrices, {}));\\n  }\\n  permutations.sort((a, b) => b.profit - a.profit);\\n  return permutations.length === 0 ? 0 : permutations[0].profit;\\n}\\n\\n/**\\n * Returns all permutations given a buy day.\\n *\\n * @param {number} buyDay\\n * @param {number[]} stockPrices\\n */\\nfunction getAllPermutations(buyDay, stockPrices, buyDayToPermutationsMap) {\\n  if (buyDay === stockPrices.length - 1) return [];\\n  if (buyDay in buyDayToPermutationsMap) {\\n    return buyDayToPermutationsMap[buyDay];\\n  }\\n\\n  const permutations = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const transaction = new Transaction(stockPrices, buyDay, sellDay);\\n    if (transaction.profit <= 0) continue;\\n    permutations.push(new Permutation(transaction));\\n\\n    for (\\n      let nextBuyDay = sellDay + 1;\\n      nextBuyDay < stockPrices.length;\\n      nextBuyDay++\\n    ) {\\n      const nextBuyDayPermutations = getAllPermutations(\\n        nextBuyDay,\\n        stockPrices,\\n        buyDayToPermutationsMap\\n      );\\n      nextBuyDayPermutations.sort((a, b) => b.profit - a.profit);\\n      if (nextBuyDayPermutations.length > 0) {\\n        const permutation = new Permutation(\\n          transaction,\\n          ...nextBuyDayPermutations[0].transactions\\n        );\\n        if (permutation.profit > 0) permutations.push(permutation);\\n      }\\n    }\\n  }\\n  buyDayToPermutationsMap[buyDay] = permutations;\\n  return permutations;\\n}\\n\",\"filename\":\"contracts/algorithmic-stock-trader-ii.js\",\"server\":\"home\"}}],[\"contracts/hamming-codes-integer-to-encoded-binary.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * HammingCodes: Integer to Encoded Binary\\n *\\n * You are given the following decimal Value:\\n * 223500403664\\n *\\n * Convert it to a binary representation and encode it as an 'extended Hamming\\n * code'. Eg: Value 8 is expressed in binary as '1000', which will be encoded\\n * with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The\\n * encoding of 8 is 11110000. As another example, '10101' (Value 21) will result\\n * into (pppdpdddpd) '1001101011'.\\n *\\n * The answer should be given as a string containing only 1s and 0s.\\n *\\n * NOTE: the endianness of the data bits is reversed in relation to the\\n *       endianness of the parity bits.\\n *\\n * NOTE: The bit at index zero is the overall parity bit, this should be set\\n *       last.\\n *\\n * NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which\\n *         explains the 'rule' of encoding, including the first index parity bit\\n *         mentioned in the previous note.\\n *\\n * Extra rule for encoding:\\n * There should be no leading zeros in the 'data bit' section\\n */\\n\",\"filename\":\"contracts/hamming-codes-integer-to-encoded-binary.js\",\"server\":\"home\"}}],[\"contracts/algorithmic-stock-trader-iv.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader IV\\n *\\n * You are given the following array with two elements:\\n *\\n * [9, [164,113,142,36,159,53,111,154,6,61,134,22,195,142,7,39,190,28,112,140,17,156,88,78,88]]\\n *\\n * The first element is an integer k. The second element is an array of stock\\n * prices (which are numbers) where the i-th element represents the stock price\\n * on day i.\\n *\\n * Determine the maximum possible profit you can earn using at most k\\n * transactions. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you can buy it again.\\n *\\n * If no profit can be made, then the answer should be 0.\\n */\\n\",\"filename\":\"contracts/algorithmic-stock-trader-iv.js\",\"server\":\"home\"}}],[\"manage-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\n/**\\n * Manages buying/selling stocks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const stocks = getStocks(ns);\\n  const servers = getServers(ns);\\n  const hostnameToServerMap = {};\\n  for (const server of servers) {\\n    hostnameToServerMap[server.hostname] = server;\\n  }\\n  const commission = ns.stock.getConstants().StockMarketCommission;\\n\\n  while (true) {\\n    logStocks(ns, stocks);\\n\\n    for (const stock of stocks) {\\n      const position = getPosition(ns, stock.symbol);\\n      const askPrice = ns.stock.getAskPrice(stock.symbol);\\n\\n      // Sell longs.\\n      if (\\n        position.longs > 0 &&\\n        askPrice * position.longs >\\n          position.longPrice * position.longs + commission\\n      ) {\\n        ns.stock.sellStock(stock.symbol, position.longs);\\n      }\\n\\n      // Buy longs.\\n      if (stock.server) {\\n        const serverMoneyAvailable = ns.getServerMoneyAvailable(stock.server);\\n        const serverMaxMoney = hostnameToServerMap[stock.server].maxMoney;\\n        if (serverMoneyAvailable < serverMaxMoney / 2) buyLongs(ns, stock);\\n      }\\n      if (\\n        ns.stock.has4SDataTIXAPI() &&\\n        ns.stock.getForecast(stock.symbol) > 0.5\\n      ) {\\n        buyLongs(ns, stock);\\n      }\\n    }\\n\\n    await ns.stock.nextUpdate();\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {import('database/stocks').Stock} stock\\n */\\nfunction buyLongs(ns, stock) {\\n  const sharesToBuy = Math.min(\\n    stock.maxShares - getPosition(ns, stock.symbol).longs,\\n    Math.floor(\\n      (ns.getServerMoneyAvailable(HOME_HOSTNAME) / 2 -\\n        ns.stock.getConstants().StockMarketCommission) /\\n        ns.stock.getAskPrice(stock.symbol)\\n    )\\n  );\\n  ns.stock.buyStock(stock.symbol, sharesToBuy);\\n}\\n\\n/**\\n * @typedef Position\\n * @property {number} longs\\n * @property {number} longPrice\\n * @property {number} shorts\\n * @property {number} shortPrice\\n *\\n * @param {NS} ns\\n * @param {string} symbol\\n * @returns {Position}\\n */\\nfunction getPosition(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  return {\\n    longs: position[0],\\n    longPrice: position[1],\\n    shorts: position[2],\\n    shortPrice: position[3],\\n  };\\n}\\n\\n/**\\n * Logs stock data to --tail.\\n *\\n * @param {NS} ns\\n * @param {import('database/stocks').Stock[]} stocks\\n */\\nfunction logStocks(ns, stocks) {\\n  ns.clearLog();\\n\\n  stocks.sort(\\n    (stock1, stock2) =>\\n      getPosition(ns, stock2.symbol).longs -\\n      getPosition(ns, stock1.symbol).longs\\n  );\\n\\n  const table = { rows: [] };\\n  for (const stock of stocks) {\\n    const position = getPosition(ns, stock.symbol);\\n    const row = {\\n      cells: [\\n        {\\n          column: { name: 'Symbol', style: {} },\\n          content: stock.symbol,\\n        },\\n        {\\n          column: { name: 'Organization', style: {} },\\n          content: stock.organization,\\n        },\\n        {\\n          column: { name: 'Server', style: {} },\\n          content: stock.server,\\n        },\\n        {\\n          column: { name: 'Longs', style: { textAlign: 'right' } },\\n          content:\\n            position.longs === 0 ? '-' : ns.formatNumber(position.longs, 0),\\n        },\\n        {\\n          column: { name: 'Avg. Long Price', style: { textAlign: 'right' } },\\n          content:\\n            position.longs === 0 ? '-' : formatMoney(ns, position.longPrice),\\n        },\\n        {\\n          column: { name: 'Ask Price', style: { textAlign: 'right' } },\\n          content: formatMoney(ns, ns.stock.getAskPrice(stock.symbol)),\\n        },\\n        {\\n          column: { name: 'Shorts', style: { textAlign: 'right' } },\\n          content:\\n            position.shorts === 0 ? '-' : ns.formatNumber(position.shorts, 0),\\n        },\\n        {\\n          column: { name: 'Avg. Short Price', style: { textAlign: 'right' } },\\n          content:\\n            position.shorts === 0 ? '-' : formatMoney(ns, position.shortPrice),\\n        },\\n        {\\n          column: { name: 'Max Shares', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(stock.maxShares, 0),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  printTable(ns, table);\\n}\\n\",\"filename\":\"manage-stocks.js\",\"server\":\"home\"}}],[\"database/stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\n\\nconst STOCKS_FILENAME = 'database/stocks.txt';\\n\\n/**\\n * @typedef Stock\\n * @property {string} symbol\\n * @property {string} organization\\n * @property {string} server\\n * @property {number} maxShares\\n */\\n\\n/**\\n * Writes all stock symbols to file.\\n *\\n * @param {NS} ns\\n */\\nexport function writeStocks(ns) {\\n  const servers = getServers(ns);\\n  const organizationToServerMap = {};\\n  for (const server of servers) {\\n    organizationToServerMap[server.organization] = server.hostname;\\n  }\\n\\n  const stocks = ns.stock.getSymbols().map(symbol => {\\n    const organization = ns.stock.getOrganization(symbol);\\n    return {\\n      symbol: symbol,\\n      organization: organization,\\n      server: organizationToServerMap[organization],\\n      maxShares: ns.stock.getMaxShares(symbol),\\n    };\\n  });\\n  ns.write(STOCKS_FILENAME, JSON.stringify(stocks), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Stock[]}\\n */\\nexport function getStocks(ns) {\\n  return JSON.parse(ns.read(STOCKS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/stocks.js\",\"server\":\"home\"}}],[\"get-net-worth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\n/**\\n * Get net worth including stocks.\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const commission = ns.stock.getConstants().StockMarketCommission;\\n  const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n  const moneyInStocks = getStocks(ns)\\n    .map(\\n      stock =>\\n        ns.stock.getAskPrice(stock.symbol) *\\n          ns.stock.getPosition(stock.symbol)[0] -\\n        commission\\n    )\\n    .reduce((a, b) => a + b);\\n  ns.tprintf(`Total ${formatMoney(ns, moneyAvailable + moneyInStocks)}`);\\n  ns.tprintf(`Cash: ${formatMoney(ns, moneyAvailable)}`);\\n  ns.tprintf(`Stocks: ${formatMoney(ns, moneyInStocks)}`);\\n}\\n\",\"filename\":\"get-net-worth.js\",\"server\":\"home\"}}],[\"sell-all-stock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Sell all stock.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.scriptKill('manage-stocks.js', HOME_HOSTNAME);\\n\\n  const symbols = getStocks(ns).map(stock => stock.symbol);\\n\\n  for (const symbol of symbols) {\\n    const position = ns.stock.getPosition(symbol);\\n\\n    // Sell longs.\\n    ns.stock.sellStock(symbol, position[0]);\\n\\n    // Sell shorts.\\n    try {\\n      ns.stock.sellShort(symbol, position[2]);\\n    } catch (_) {}\\n  }\\n}\\n\",\"filename\":\"sell-all-stock.js\",\"server\":\"home\"}}],[\"utils/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\\n/**\\n * @typedef {@type string[]} Path\\n *\\n * Gets a list of all paths to hosts.\\n *\\n * @param {NS} ns\\n * @param {string} rootHostname\\n * @param {[Path]} path\\n * @returns {Path[]} all paths including home as the first server\\n */\\nexport function getAllPaths(ns, rootHostname, path) {\\n  path = path ?? [];\\n\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== path[path.length - 1]);\\n  if (childrenHostnames.length === 0) return [];\\n\\n  const allPaths = [];\\n  for (const childHostname of childrenHostnames) {\\n    allPaths.push([...path, rootHostname, childHostname]);\\n    allPaths.push(...getAllPaths(ns, childHostname, [...path, rootHostname]));\\n  }\\n  return allPaths;\\n}\\n\",\"filename\":\"utils/servers.js\",\"server\":\"home\"}}],[\"contracts/spiralize-matrix.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order:\\n *\\n *     [\\n *         [25,20,16, 5,39,24,15,41,12,13,27,10]\\n *         [44,26,34,22,19,39,20,28,37,34,43,24]\\n *         [34, 1, 7,36,43,37,44,44, 5,36,49, 7]\\n *         [ 7,24,41,41, 3,44,20,50,31, 6, 9,15]\\n *         [36,13,47,41, 7,41,23, 2, 4,45,40,12]\\n *         [31,43,21,14,30,47,14, 6,43,49,25,12]\\n *         [47,40,25,46,13,39,41,48,46,45,34,25]\\n *         [22,26,29,24,24,38,40,30,13,38,34,46]\\n *         [47,34,17,16,36,16,24,27,16,50,13, 9]\\n *         [10,10,13,26,14,17,36,14,49,50,25,11]\\n *         [11,49, 7,25,43, 9, 2,42, 7,12,25,25]\\n *         [25,16,24,17,31,31,45,22, 9, 7,35,39]\\n *     ]\\n *\\n * Here is an example of what spiral order should be:\\n *\\n *     [\\n *         [1, 2, 3]\\n *         [4, 5, 6]\\n *         [7, 8, 9]\\n *     ]\\n *\\n * Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\n *\\n * Note that the matrix will not always be square:\\n *\\n *     [\\n *         [1,  2,  3,  4]\\n *         [5,  6,  7,  8]\\n *         [9, 10, 11, 12]\\n *     ]\\n *\\n * Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\n *\\n * @param {number[][]} matrix\\n * @returns {number[]}\\n */\\nexport default function spiralizeMatrix(matrix) {\\n  const elements = [];\\n  const totalElementCount = matrix.length * matrix[0].length;\\n\\n  let [x, y] = [0, 0];\\n  let direction = Direction.Right;\\n  do {\\n    if (isValidPosition(x, y, matrix)) {\\n      elements.push(matrix[y][x]);\\n      matrix[y][x] = null;\\n    }\\n\\n    switch (direction) {\\n      case Direction.Right:\\n        if (isValidPosition(x + 1, y, matrix)) {\\n          x++;\\n        } else {\\n          direction = Direction.Down;\\n        }\\n        break;\\n      case Direction.Down:\\n        if (isValidPosition(x, y + 1, matrix)) {\\n          y++;\\n        } else {\\n          direction = Direction.Left;\\n        }\\n        break;\\n      case Direction.Left:\\n        if (isValidPosition(x - 1, y, matrix)) {\\n          x--;\\n        } else {\\n          direction = Direction.Up;\\n        }\\n        break;\\n      case Direction.Up:\\n        if (isValidPosition(x, y - 1, matrix)) {\\n          y--;\\n        } else {\\n          direction = Direction.Right;\\n        }\\n        break;\\n    }\\n  } while (elements.length < totalElementCount);\\n\\n  return elements;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} matrix\\n * @returns\\n */\\nfunction isValidPosition(x, y, matrix) {\\n  return (\\n    x >= 0 &&\\n    y >= 0 &&\\n    y < matrix.length &&\\n    x < matrix[y].length &&\\n    matrix[y][x] !== null\\n  );\\n}\\n\\nconst Direction = Object.freeze({\\n  Right: Symbol('Right'),\\n  Down: Symbol('Down'),\\n  Left: Symbol('Left'),\\n  Up: Symbol('Up'),\\n});\\n\",\"filename\":\"contracts/spiralize-matrix.js\",\"server\":\"home\"}}],[\"utils/colors.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"class HSLA {\\n  /**\\n   * @param {number} h hue [0, 360]\\n   * @param {number} s saturation [0, 100]\\n   * @param {number} l luminosity [0, 100]\\n   * @param {[number]} a alpha [0.0, 1.0]\\n   */\\n  constructor(h, s, l, a) {\\n    this.h = h;\\n    this.s = s;\\n    this.l = l;\\n    this.a = a ?? 1;\\n  }\\n\\n  toString() {\\n    return `hsla(${this.h}, ${this.s}%, ${this.l}%, ${this.a})`;\\n  }\\n}\\n\\nclass RGBA {\\n  /**\\n   * @param {number} r [0, 255]\\n   * @param {number} g [0, 255]\\n   * @param {number} b [0, 255]\\n   * @param {[number]} a alpha [0.0, 1.0]\\n   */\\n  constructor(r, g, b, a) {\\n    this.r = r;\\n    this.g = g;\\n    this.b = b;\\n    this.a = a ?? 1;\\n  }\\n\\n  toString() {\\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\\n  }\\n}\\n\\n/**\\n * Creates a random color based on the UI theme and a given string (such as a\\n * server name).\\n *\\n * @param {NS} ns\\n * @param {string} str\\n * @returns {string} color that can be used in CSS\\n */\\nexport function createColorForString(ns, str) {\\n  const primaryHsla = hexToHsla(ns.ui.getTheme().primary);\\n  const seed =\\n    str\\n      .split('')\\n      .map(character => character.charCodeAt(0))\\n      .reduce((a, b) => a + b) *\\n    (str.match(/\\\\d/g) ?? [str.length])\\n      .map(number => parseInt(number))\\n      .reduce((a, b) => a + b);\\n\\n  // Generate hue.\\n  const hue = seed % 360;\\n\\n  // Generate saturation.\\n  const minSaturation = Math.max(0, primaryHsla.s - 50);\\n  const maxSaturation = Math.min(100, primaryHsla.s + 50);\\n  const saturation =\\n    ((seed % 100) / 100) * (maxSaturation - minSaturation) + minSaturation;\\n\\n  // Generate luminosity.\\n  const minLuminosity = Math.max(0, primaryHsla.l - 10);\\n  const maxLuminosity = Math.min(100, primaryHsla.l + 10);\\n  const luminosity =\\n    ((seed % 100) / 100) * (maxLuminosity - minLuminosity) + minLuminosity;\\n\\n  return new HSLA(hue, saturation, luminosity);\\n}\\n\\n/**\\n * @param {string} hex (e.g. #000000 or with alpha #FFFFFF33)\\n * @returns {RGBA}\\n */\\nfunction hexToRgba(hex) {\\n  hex = hex.replace('#', '');\\n\\n  // Expand any shorted hex values (e.g. 000 or with alpha FFF3).\\n  if (hex.length <= 4) {\\n    hex = hex\\n      .split('')\\n      .map(part => part + part)\\n      .join('');\\n  }\\n\\n  // Add alpha if it doesn't exist.\\n  if (hex.length === 6) hex += 'FF';\\n\\n  return new RGBA(\\n    parseInt(hex.substring(0, 2), 16),\\n    parseInt(hex.substring(2, 4), 16),\\n    parseInt(hex.substring(4, 6), 16),\\n    Math.round((parseInt(hex.substring(6, 8), 16) / 255) * 100) / 100\\n  );\\n}\\n\\n/**\\n * @param {string} hex (e.g. #000000 or with alpha #FFFFFF33)\\n * @returns {HSLA}\\n */\\nfunction hexToHsla(hex) {\\n  return rgbaToHsla(hexToRgba(hex));\\n}\\n\\n/**\\n * @param {RGBA} rgba\\n * @returns {HSLA}\\n */\\nfunction rgbaToHsla(rgba) {\\n  // Make r, g, and b fractions of 1.\\n  const [r, g, b] = [rgba.r, rgba.g, rgba.b].map(part => part / 255);\\n\\n  // Find greatest and smallest channel values.\\n  const [cmin, cmax] = [Math.min, Math.max].map(fn => fn(r, g, b));\\n  const delta = cmax - cmin;\\n\\n  // Calculate hue.\\n  let h;\\n  if (delta === 0) h = 0;\\n  else if (cmax == r) h = ((g - b) / delta) % 6;\\n  else if (cmax == g) h = (b - r) / delta + 2;\\n  else h = (r - g) / delta + 4;\\n  h = Math.round(h * 60);\\n  if (h < 0) h += 360;\\n\\n  // Calculate lightness.\\n  let l = (cmax + cmin) / 2;\\n\\n  // Calculate saturation.\\n  let s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\\n\\n  // Multiply l and s by 100.\\n  s = Math.round(s * 100);\\n  l = Math.round(l * 100);\\n\\n  return new HSLA(h, s, l, rgba.a);\\n}\\n\",\"filename\":\"utils/colors.js\",\"server\":\"home\"}}],[\"contracts/encryption-i-caesar-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Encryption I: Caesar Cipher\\n *\\n * Caesar cipher is one of the simplest encryption technique. It is a type of\\n * substitution cipher in which each letter in the plaintext is replaced by a\\n * letter some fixed number of positions down the alphabet. For example, with a\\n * left shift of 3, D would be replaced by A, E would become B, and A would\\n * become X (because of rotation).\\n *\\n * You are given an array with two elements:\\n *   [\\\"ENTER MOUSE TRASH PASTE DEBUG\\\", 1]\\n * The first element is the plaintext, the second element is the left shift value.\\n *\\n * Return the ciphertext as uppercase string. Spaces remains the same.\\n *\\n * @param {(string | number)[]} input [plain text, left shift value]\\n * @returns {string} cipher\\n */\\nexport default function encryptionICaesarCipher(input) {\\n  const [plainText, leftShift] = input;\\n  const charCodeForA = 'A'.charCodeAt(0);\\n  const charCodeForZ = 'Z'.charCodeAt(0);\\n\\n  // Convert every character in plain text to a char code and shift it by left\\n  // shift value.\\n  /** @type {number[]} */ const shiftedCharCodes = [];\\n  for (let i = 0; i < plainText.length; i++) {\\n    const charCode = plainText.charCodeAt(i);\\n\\n    // Ignore characters that are outside of [A, Z].\\n    if (charCode < charCodeForA || charCode > charCodeForZ) {\\n      shiftedCharCodes.push(charCode);\\n      continue;\\n    }\\n\\n    let shiftedCharCode;\\n    if (charCode - leftShift < charCodeForA) {\\n      shiftedCharCode =\\n        charCodeForZ - (leftShift - (charCode - charCodeForA)) + 1;\\n    } else {\\n      shiftedCharCode = charCode - leftShift;\\n    }\\n    shiftedCharCodes.push(shiftedCharCode);\\n  }\\n\\n  return shiftedCharCodes\\n    .map(charCode => String.fromCharCode(charCode))\\n    .join('');\\n}\\n\",\"filename\":\"contracts/encryption-i-caesar-cipher.js\",\"server\":\"home\"}}],[\"contracts/merge-overlapping-intervals.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of arrays of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * [[7,12],[25,35],[9,15],[22,24],[18,23],[8,17],[11,21],[16,24],[9,10],[4,8]]\\n *\\n * Example:\\n *\\n * [[1, 3], [8, 10], [2, 6], [10, 16]]\\n *\\n * would merge into [[1, 6], [8, 16]].\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @typedef {[number, number]} Interval\\n *\\n * @param {Interval[]} input\\n */\\nexport default function mergeOverlappingIntervals(input) {\\n  const intervals = [...input];\\n\\n  // Sort intervals by first number.\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  let i = 0;\\n  while (i < intervals.length - 1) {\\n    const a = intervals[i];\\n    const b = intervals[i + 1];\\n    if (isOverlapping(a, b)) {\\n      intervals.splice(i, 2, mergeIntervals(a, b));\\n      i = 0;\\n    } else {\\n      i++;\\n    }\\n  }\\n  return intervals;\\n}\\n\\n/**\\n * @param {Interval} a\\n * @param {Interval} b\\n * @returns {boolean} whether the intervals are overlapping\\n */\\nfunction isOverlapping(a, b) {\\n  // If 'a' is inside 'b'.\\n  if (b[0] <= a[0] && a[1] <= b[1]) return true;\\n\\n  // If 'b' is inside 'a'.\\n  if (a[0] <= b[0] && b[1] <= a[1]) return true;\\n\\n  // If 'a' is before 'b'.\\n  if (b[0] <= a[1]) return true;\\n\\n  return false;\\n}\\n\\n/**\\n * @param {Interval} a\\n * @param {Interval} b\\n * @returns {Interval} merged interval\\n */\\nfunction mergeIntervals(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\",\"filename\":\"contracts/merge-overlapping-intervals.js\",\"server\":\"home\"}}],[\"contracts/encryption-ii-vigenere-cipher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Encryption II: Vigenère Cipher\\n *\\n * Vigenère cipher is a type of polyalphabetic substitution. It uses the\\n * Vigenère square to encrypt and decrypt plaintext with a keyword.\\n *\\n *   Vigenère square:\\n *          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *        +----------------------------------------------------\\n *      A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *      B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\\n *      C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\n *      D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\n *      E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\n *                 ...\\n *      Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\n *      Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\n *\\n * For encryption each letter of the plaintext is paired with the corresponding\\n * letter of a repeating keyword. For example, the plaintext DASHBOARD is\\n * encrypted with the keyword LINUX:\\n *    Plaintext: DASHBOARD\\n *    Keyword:   LINUXLINU\\n * So, the first letter D is paired with the first letter of the key L.\\n * Therefore, row D and column L of the Vigenère square are used to get the\\n * first cipher letter O. This must be repeated for the whole ciphertext.\\n *\\n * You are given an array with two elements:\\n *   [\\\"POPUPENTERMOUSEINBOXMACRO\\\", \\\"BLOGGER\\\"]\\n * The first element is the plaintext, the second element is the keyword.\\n *\\n * Return the ciphertext as uppercase string.\\n *\\n * @param {[string, string]} input\\n */\\nexport default function encryptionIIVigenereCipher(input) {\\n  const cipher = createCipher();\\n\\n  // Make the keyword match the length of the plain text.\\n  const plainText = input[0];\\n  let keyword = input[1];\\n  while (keyword.length < plainText.length) {\\n    keyword += keyword;\\n  }\\n  keyword = keyword.substring(0, plainText.length);\\n\\n  // Encrypt.\\n  let encryptedMessage = '';\\n  for (let i = 0; i < plainText.length; i++) {\\n    encryptedMessage += cipher[plainText[i]][keyword[i]];\\n  }\\n  return encryptedMessage;\\n}\\n\\n/**\\n * @typedef {Object.<string, Object<string, string>} Cipher\\n *\\n * @returns {Cipher} cipher\\n */\\nfunction createCipher() {\\n  const charCodeAtA = 'A'.charCodeAt(0);\\n  const charCodeAtZ = 'Z'.charCodeAt(0);\\n\\n  const alphabet = [];\\n  for (let i = charCodeAtA; i <= charCodeAtZ; i++) {\\n    alphabet.push(String.fromCharCode(i));\\n  }\\n\\n  const cipher = {};\\n  for (let i = 0; i < alphabet.length; i++) {\\n    cipher[alphabet[i]] = {};\\n    const offsetAlphabet = [...alphabet.slice(i), ...alphabet.slice(0, i)];\\n    for (let j = 0; j < alphabet.length; j++) {\\n      cipher[alphabet[i]][alphabet[j]] = offsetAlphabet[j];\\n    }\\n  }\\n  return cipher;\\n}\\n\",\"filename\":\"contracts/encryption-ii-vigenere-cipher.js\",\"server\":\"home\"}}],[\"contracts/subarray-with-maximum-sum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * 9,-10,-5,3,-1,7,-3,8,5,9,5,-6,-5,-7,4,3,-4,-6,3,-7,10,-6,3,3,1,1,10,0,-8,2,3,-2,1\\n *\\n * @param {number[]} array\\n * @returns {number} sum\\n */\\nexport default function subarrayWithMaximumSum(array) {\\n  let maxSum;\\n  for (let startIndex = 0; startIndex < array.length; startIndex++) {\\n    for (let endIndex = array.length; endIndex > startIndex; endIndex--) {\\n      const subarray = array.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b, 0);\\n      if (!maxSum || sum > maxSum) maxSum = sum;\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"contracts/subarray-with-maximum-sum.js\",\"server\":\"home\"}}],[\"contracts/total-ways-to-sum-ii.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum II\\n *\\n * How many different distinct ways can the number 174 be written as a sum of integers contained in the set:\\n *\\n * [1,2,3,4,5,7,8,9,10,13]?\\n *\\n * You may use each integer in the set zero or more times.\\n *\\n */\\nexport default function totalWaysToSumII() {\\n  const integers = [1, 2, 3, 4, 5, 7, 8, 9, 10, 13];\\n  const sum = 174;\\n\\n  const integerToMaxMultiplier = Object.fromEntries(\\n    integers.map(integer => [integer, Math.floor(sum / integer)])\\n  );\\n\\n  for (let i = 0; i < integers.length; i++) {\\n    for ()\\n  }\\n\\n  console.log(integerToMaxMultiplier);\\n}\\n\\ntotalWaysToSumII();\\n\",\"filename\":\"contracts/total-ways-to-sum-ii.js\",\"server\":\"home\"}}],[\"connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Connects to a server given in the argument.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const server = getServers(ns).find(server => server.hostname === ns.args[0]);\\n  const commands = [\\n    server.path.map(hostname => `connect ${hostname}`).join('; '),\\n  ];\\n  await executeTerminalCommand(ns, ...commands);\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"connect.js\",\"server\":\"home\"}}],[\"manage-gang.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGangTasks } from 'database/gang-tasks';\\nimport { HOME_HOSTNAME } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\nimport { printTable } from 'utils/table';\\n\\nconst POTENTIAL_GANG_MEMBER_NAMES = [\\n  'Abyss',\\n  'Beast',\\n  'Bullet',\\n  'Catalyst',\\n  'Cipher',\\n  'Cobra',\\n  'Echo',\\n  'Eclipse',\\n  'Enigma',\\n  'Frost',\\n  'Ghost',\\n  'Havoc',\\n  'Haze',\\n  'Inferno',\\n  'Obsidian',\\n  'Omega',\\n  'Phantom',\\n  'Phoenix',\\n  'Razor',\\n  'Renegade',\\n  'Riptide',\\n  'Scorpion',\\n  'Shadow',\\n  'Spike',\\n  'Storm',\\n  'Tempest',\\n  'Thunder',\\n  'Venom',\\n  'Viper',\\n  'Vortex',\\n];\\n\\nconst EQUIPMENT_NAMES = [\\n  'Baseball Bat',\\n  'Katana',\\n  'Glock 18C',\\n  'P90C',\\n  'Steyr AUG',\\n  'AK-47',\\n  'M15A10 Assault Rifle',\\n  'AWM Sniper Rifle',\\n  'Bulletproof Vest',\\n  'Full Body Armor',\\n  'Liquid Body Armor',\\n  'Graphene Plating Armor',\\n  'Ford Flex V20',\\n  'ATX1070 Superbike',\\n  'Mercedes-Benz S9001',\\n  'White Ferrari',\\n  'NUKE Rootkit',\\n  'Soulstealer Rootkit',\\n  'Demon Rootkit',\\n  'Hmap Node',\\n  'Jack the Ripper',\\n  'Bionic Arms',\\n  'Bionic Legs',\\n  'Bionic Spine',\\n  'BrachiBlades',\\n  'Nanofiber Weave',\\n  'Synthetic Heart',\\n  'Synfibril Muscle',\\n  'BitWire',\\n  'Neuralstimulator',\\n  'DataJack',\\n  'Graphene Bone Lacings',\\n];\\n\\nconst WANTED_PENALTY_THRESHOLD = 0.99;\\n\\n/**\\n * Manages gang members.\\n *\\n * Use arg[0] to override amount of money to spend (e.g. run manage-gang.js 0)\\n * will not spend any money on equipment.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.atExit(() => ns.closeTail());\\n\\n  const gangTasks = getGangTasks(ns);\\n\\n  // Get profitable tasks sorted from least difficult to most difficult.\\n  const profitableTasks = gangTasks.filter(task => task.baseMoney > 0);\\n  profitableTasks.sort((task1, task2) => task1.difficulty - task2.difficulty);\\n  const profitableTaskNames = profitableTasks.map(task => task.name);\\n\\n  // Get vigilante justice task which decreases wanted level.\\n  const vigilanteJusticeTask = gangTasks.find(task => task.baseWanted < 0);\\n\\n  const gangMembers = getGangMembers(ns);\\n\\n  while (true) {\\n    log(ns, gangMembers);\\n    let gangInfo = ns.gang.getGangInformation();\\n\\n    // Only engage in territory warfare if wanted penalty is below threshold and\\n    // territory is less than threshold and we have enough power.\\n    const minPower = Math.max(\\n      ...Object.values(ns.gang.getOtherGangInformation())\\n        .filter(info => info.territory > 0)\\n        .map(info => info.power)\\n    );\\n    ns.gang.setTerritoryWarfare(\\n      gangInfo.wantedPenalty >= WANTED_PENALTY_THRESHOLD &&\\n        gangInfo.territory < 0.5 &&\\n        gangInfo.power > minPower\\n    );\\n\\n    // Recruit if possible.\\n    const recruit = recruitGangMember(ns);\\n    if (recruit) gangMembers.push(recruit);\\n\\n    gangInfo = ns.gang.getGangInformation();\\n    for (const gangMember of gangMembers) {\\n      // Ascend if possible.\\n      const potentialAscensionResult = ns.gang.getAscensionResult(\\n        gangMember.name\\n      );\\n      if (potentialAscensionResult) {\\n        // Only ascend if any stat multiplier is >= 2.\\n        if (\\n          [\\n            potentialAscensionResult.agi,\\n            potentialAscensionResult.cha,\\n            potentialAscensionResult.def,\\n            potentialAscensionResult.dex,\\n            potentialAscensionResult.hack,\\n            potentialAscensionResult.str,\\n          ].filter(multiplier => multiplier >= 2).length > 0\\n        ) {\\n          const ascended = ns.gang.ascendMember(gangMember.name);\\n          if (ascended) ns.toast(`${gangMember.name} has ascended in gang`);\\n        }\\n      }\\n\\n      // Upgrade equipment.\\n      if (ns.args.length === 0 || ns.args[0] !== 0) {\\n        for (const equipmentName of EQUIPMENT_NAMES) {\\n          const moneyAvailable =\\n            ns.args[0] || ns.getServerMoneyAvailable(HOME_HOSTNAME) / 4;\\n          if (ns.gang.getEquipmentCost(equipmentName) < moneyAvailable) {\\n            ns.gang.purchaseEquipment(gangMember.name, equipmentName);\\n          }\\n        }\\n      }\\n\\n      if (gangInfo.territoryClashChance > 0) {\\n        ns.gang.setMemberTask(gangMember.name, 'Territory Warfare');\\n        continue;\\n      }\\n\\n      // If wanted level is too high, then vigilante justice.\\n      if (\\n        gangInfo.wantedLevel > 1 &&\\n        (gangInfo.wantedPenalty < WANTED_PENALTY_THRESHOLD ||\\n          (gangMember.task === vigilanteJusticeTask.name &&\\n            gangInfo.wantedPenalty < 0))\\n      ) {\\n        ns.gang.setMemberTask(gangMember.name, vigilanteJusticeTask.name);\\n        continue;\\n      }\\n\\n      // Upgrade to most profitable task.\\n      const taskNameToMoneyGainMap = {};\\n      for (const taskName of profitableTaskNames) {\\n        ns.gang.setMemberTask(gangMember.name, taskName);\\n        taskNameToMoneyGainMap[taskName] = ns.gang.getMemberInformation(\\n          gangMember.name\\n        ).moneyGain;\\n      }\\n      const mostProfitableTask = Object.entries(taskNameToMoneyGainMap).sort(\\n        (a, b) => b[1] - a[1]\\n      )[0];\\n      if (mostProfitableTask[1] < 1000) {\\n        // No profitable tasks will gain enough money, so go back to training.\\n        ns.gang.setMemberTask(gangMember.name, 'Train Combat');\\n      } else {\\n        ns.gang.setMemberTask(gangMember.name, mostProfitableTask[0]);\\n      }\\n    }\\n\\n    // If we're not engaging in territory warfare, have the member with the\\n    // least profit work on Territory Warfare.\\n    // if (gangInfo.territoryClashChance === 0) {\\n    //   let gangMemberWithLeastProfit, leastProfit;\\n    //   for (const gangMember of gangMembers) {\\n    //     const profit = ns.gang.getMemberInformation(gangMember.name).moneyGain;\\n    //     if (profit === 0) continue;\\n    //     if (!leastProfit || profit < leastProfit) {\\n    //       gangMemberWithLeastProfit = gangMember;\\n    //       leastProfit = profit;\\n    //     }\\n    //   }\\n    //   if (gangMemberWithLeastProfit) {\\n    //     ns.gang.setMemberTask(\\n    //       gangMemberWithLeastProfit.name,\\n    //       'Territory Warfare'\\n    //     );\\n    //   }\\n    // }\\n\\n    await ns.gang.nextUpdate();\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {GangMember[]} gangMembers\\n */\\nfunction log(ns, gangMembers) {\\n  ns.clearLog();\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const gangMember of gangMembers) {\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Name', style: {} },\\n          content: gangMember.name,\\n        },\\n        {\\n          column: { name: 'Task', style: {} },\\n          content: gangMember.task,\\n        },\\n        {\\n          column: { name: 'Hack', style: { textAlign: 'right' } },\\n          content: gangMember.hack,\\n        },\\n        {\\n          column: { name: 'Str', style: { textAlign: 'right' } },\\n          content: gangMember.str,\\n        },\\n        {\\n          column: { name: 'Def', style: { textAlign: 'right' } },\\n          content: gangMember.def,\\n        },\\n        {\\n          column: { name: 'Dex', style: { textAlign: 'right' } },\\n          content: gangMember.dex,\\n        },\\n        {\\n          column: { name: 'Agi', style: { textAlign: 'right' } },\\n          content: gangMember.agi,\\n        },\\n        {\\n          column: { name: 'Cha', style: { textAlign: 'right' } },\\n          content: gangMember.cha,\\n        },\\n        {\\n          column: { name: 'Money Gain', style: { textAlign: 'right' } },\\n          content: formatMoney(ns, gangMember.moneyGain),\\n        },\\n        {\\n          column: { name: 'Wanted Level Gain', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(gangMember.wantedLevelGain),\\n        },\\n        {\\n          column: { name: 'Respect Gain', style: { textAlign: 'right' } },\\n          content: ns.formatNumber(gangMember.respectGain),\\n        },\\n      ],\\n    };\\n    table.rows.push(row);\\n  }\\n  printTable(ns, table);\\n}\\n\\n/**\\n * @typedef GangMember\\n * @property {string} name\\n * @property {string} task\\n * @property {number} earnedRespect\\n * @property {number} hack\\n * @property {number} str\\n * @property {number} def\\n * @property {number} dex\\n * @property {number} agi\\n * @property {number} cha\\n * @property {number} hack_exp\\n * @property {number} str_exp\\n * @property {number} def_exp\\n * @property {number} dex_exp\\n * @property {number} agi_exp\\n * @property {number} cha_exp\\n * @property {number} hack_mult\\n * @property {number} str_mult\\n * @property {number} def_mult\\n * @property {number} dex_mult\\n * @property {number} agi_mult\\n * @property {number} cha_mult\\n * @property {number} hack_asc_mult\\n * @property {number} str_asc_mult\\n * @property {number} def_asc_mult\\n * @property {number} dex_asc_mult\\n * @property {number} agi_asc_mult\\n * @property {number} cha_asc_mult\\n * @property {number} hack_asc_points\\n * @property {number} str_asc_points\\n * @property {number} def_asc_points\\n * @property {number} dex_asc_points\\n * @property {number} agi_asc_points\\n * @property {number} cha_asc_points\\n * @property {string[]} upgrades\\n * @property {string[]} augmentations\\n * @property {number} respectGain\\n * @property {number} wantedLevelGain\\n * @property {number} moneyGain\\n *\\n * @param {NS} ns\\n * @returns {GangMember[]} member information for all gang members\\n */\\nfunction getGangMembers(ns) {\\n  const gangMembers = [];\\n  for (const name of POTENTIAL_GANG_MEMBER_NAMES) {\\n    try {\\n      gangMembers.push(ns.gang.getMemberInformation(name));\\n    } catch (_) {}\\n  }\\n  return gangMembers;\\n}\\n\\n/**\\n * Recruits a gang member and give it a random unassigned name.\\n *\\n * @param {NS} ns\\n * @param {GangMember|null} null if cannot recruit\\n */\\nfunction recruitGangMember(ns) {\\n  if (!ns.gang.canRecruitMember()) return null;\\n\\n  let potentialNameIndex = Math.floor(\\n    Math.random() * POTENTIAL_GANG_MEMBER_NAMES.length\\n  );\\n  while (true) {\\n    const potentialName = POTENTIAL_GANG_MEMBER_NAMES[potentialNameIndex];\\n    const wasSuccessful = ns.gang.recruitMember(potentialName);\\n    if (wasSuccessful) {\\n      ns.toast(`Recruited ${potentialName} to gang`);\\n      return ns.gang.getMemberInformation(potentialName);\\n    }\\n    potentialNameIndex =\\n      (potentialNameIndex + 1) % POTENTIAL_GANG_MEMBER_NAMES.length;\\n  }\\n}\\n\",\"filename\":\"manage-gang.js\",\"server\":\"home\"}}],[\"database/gang-tasks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Util functions for managing gang-tasks.txt */\\n\\nconst GANG_TASKS = [\\n  'Unassigned',\\n  'Mug People',\\n  'Deal Drugs',\\n  'Strongarm Civilians',\\n  'Run a Con',\\n  'Armed Robbery',\\n  'Traffick Illegal Arms',\\n  'Threaten & Blackmail',\\n  'Human Trafficking',\\n  'Terrorism',\\n  'Vigilante Justice',\\n  'Train Combat',\\n  'Train Hacking',\\n  'Train Charisma',\\n  'Territory Warfare',\\n];\\n\\nconst GANG_TASKS_FILENAME = 'database/gang-tasks.txt';\\n\\n/**\\n * @param {NS} ns\\n */\\nexport function writeGangTasks(ns) {\\n  const gangTasks = GANG_TASKS.map(task => ns.gang.getTaskStats(task));\\n  ns.write(GANG_TASKS_FILENAME, JSON.stringify(gangTasks), 'w');\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {import(\\\"../../NetscriptDefinitions\\\").GangTaskStats[]}\\n */\\nexport function getGangTasks(ns) {\\n  return JSON.parse(ns.read(GANG_TASKS_FILENAME) || '[]');\\n}\\n\",\"filename\":\"database/gang-tasks.js\",\"server\":\"home\"}}],[\"contracts/generate-ip-addresses.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the string:\\n *\\n * 101168721\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * Examples:\\n *\\n * 25525511135 -> [\\\"255.255.11.135\\\", \\\"255.255.111.35\\\"]\\n * 1938718066 -> [\\\"193.87.180.66\\\"]\\n *\\n * @param {string} digits\\n */\\nexport default function generateIPAddresses(digits) {\\n  // IP Address consists of [A, B, C, D] where each part >=0 && <= 255.\\n  const ipAddresses = [];\\n\\n  const possibleAs = getValidParts(digits.substring(0, 3));\\n\\n  for (const a of possibleAs) {\\n    const possibleBs = getValidParts(digits.substring(a.length, a.length + 3));\\n\\n    for (const b of possibleBs) {\\n      const possibleCs = getValidParts(\\n        digits.substring(a.length + b.length, a.length + b.length + 3)\\n      );\\n\\n      for (const c of possibleCs) {\\n        const d = digits.substring(a.length + b.length + c.length);\\n        if (d.length > 3) continue;\\n        if (d.startsWith('0') && d.length > 1) continue;\\n        if (parseInt(d) > 255) continue;\\n\\n        ipAddresses.push([a, b, c, d].join('.'));\\n      }\\n    }\\n  }\\n\\n  return ipAddresses;\\n}\\n\\n/**\\n *\\n * @param {string} digits with length <= 3\\n * @returns {string[]} parts\\n */\\nfunction getValidParts(digits) {\\n  if (digits.startsWith('0')) return ['0'];\\n  const parts = [digits.substring(0, 1), digits.substring(0, 2)];\\n  if (digits.length === 3 && parseInt(digits) <= 255) parts.push(digits);\\n  return parts;\\n}\\n\",\"filename\":\"contracts/generate-ip-addresses.js\",\"server\":\"home\"}}],[\"contracts/compression-i.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\nCompression I: RLE Compression\\nYou are attempting to solve a Coding Contract. You have 10 tries remaining, after which the contract will self-destruct.\\n\\n\\nRun-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\n\\nYou are given the following input string:\\n    4oo55555555555mTTmmWWWWWOOlxWWggHHOll55O880000000000000kkkkkkkkkJJJJJ\\nEncode it using run-length encoding with the minimum possible output length.\\n\\nExamples:\\n    aaaaabccc            ->  5a1b3c\\n    aAaAaA               ->  1a1A1a1A1a1A\\n    111112333            ->  511233\\n    zzzzzzzzzzzzzzzzzzz  ->  9z9z1z  (or 9z8z2z, etc.)\\n\",\"filename\":\"contracts/compression-i.js\",\"server\":\"home\"}}],[\"contracts/compression-i-rle-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression I: RLE Compression\\n *\\n * Run-length encoding (RLE) is a data compression technique which encodes data\\n * as a series of runs of a repeated single character. Runs are encoded as a\\n * length, followed by the character itself. Lengths are encoded as a single\\n * ASCII digit; runs of 10 characters or more are encoded by splitting them into\\n * multiple runs.\\n *\\n * You are given the following input string:\\n *     4oo55555555555mTTmmWWWWWOOlxWWggHHOll55O880000000000000kkkkkkkkkJJJJJ\\n * Encode it using run-length encoding with the minimum possible output length.\\n *\\n * Examples:\\n *     aaaaabccc            ->  5a1b3c\\n *     aAaAaA               ->  1a1A1a1A1a1A\\n *     111112333            ->  511233\\n *     zzzzzzzzzzzzzzzzzzz  ->  9z9z1z  (or 9z8z2z, etc.)\\n *\\n * @param {string} input\\n */\\nexport default function compressionIRLECompression(input) {\\n  let compressed = '';\\n  let currentLetter, currentCount;\\n  for (let i = 0; i < input.length; i++) {\\n    const letter = input.charAt(i);\\n\\n    if (i === 0) {\\n      currentLetter = letter;\\n      currentCount = 1;\\n      continue;\\n    }\\n\\n    if (currentLetter !== letter || currentCount === 9) {\\n      compressed += `${currentCount}${currentLetter}`;\\n      currentLetter = letter;\\n      currentCount = 1;\\n      continue;\\n    }\\n\\n    currentCount++;\\n  }\\n  compressed += `${currentCount}${currentLetter}`;\\n  return compressed;\\n}\\n\",\"filename\":\"contracts/compression-i-rle-compression.js\",\"server\":\"home\"}}],[\"contracts/compression-iii-lz-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Compression III: LZ Compression\\n *\\n * Lempel-Ziv (LZ) compression is a data compression technique which encodes\\n * data using references to earlier parts of the data. In this variant of LZ,\\n * data is encoded in two types of chunk. Each chunk begins with a length L,\\n * encoded as a single ASCII digit from 1 to 9, followed by the chunk data,\\n * which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n *\\n * 2. A reference to an earlier part of the uncompressed data. To do this, the\\n *    length is followed by a second ASCII digit X: each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends immediately,\\n * and the next character is the start of a new chunk. The two chunk types\\n * alternate, starting with type 1, and the final chunk may be of either type.\\n *\\n * You are given the following input string:\\n *     s7UqDon67cXj6htLxf121v7q21v7q21v7fvflZ5W1fQufQufQuufQuu\\n * Encode it using Lempel-Ziv encoding with the minimum possible output length.\\n *\\n * Examples (some have other possible encodings of minimal length):\\n *     abracadabra     ->  7abracad47\\n *     mississippi     ->  4miss433ppi\\n *     aAAaAAaAaAA     ->  3aAA53035\\n *     2718281828      ->  627182844\\n *     abcdefghijk     ->  9abcdefghi02jk\\n *     aaaaaaaaaaaa    ->  3aaa91\\n *     aaaaaaaaaaaaa   ->  1a91031\\n *     aaaaaaaaaaaaaa  ->  1a91041\\n *\\n * @param {string} input\\n */\\nexport default function compressionIIILZCompression(input) {}\\n\",\"filename\":\"contracts/compression-iii-lz-compression.js\",\"server\":\"home\"}}],[\"list-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\nimport {\\n  getRamToReserve,\\n  getScriptsCountedTowardsRAMToReserve,\\n} from 'utils/scripts';\\nimport { tprintTable } from 'utils/table';\\n\\n/**\\n * Lists all scripts on the home server along with their memory.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const scripts = ns.ls(HOME_HOSTNAME, '.js');\\n  scripts.sort((a, b) => ns.getScriptRam(b) - ns.getScriptRam(a));\\n  const scriptsCountedTowardsRAMToReserve =\\n    getScriptsCountedTowardsRAMToReserve(ns);\\n\\n  /** @type {import('utils/table').Table} */ const table = { rows: [] };\\n  for (const script of scripts) {\\n    const countedTowardsRAMToReserve =\\n      scriptsCountedTowardsRAMToReserve.includes(script);\\n    /** @type {import('utils/table').Row} */ const row = {\\n      cells: [\\n        {\\n          column: { name: 'Script Name', style: {} },\\n          content: script,\\n        },\\n        {\\n          column: { name: 'RAM', style: { textAlign: 'right' } },\\n          content: ns.formatRam(ns.getScriptRam(script)),\\n        },\\n        {\\n          column: { name: 'Count towards RAM to reserve', style: {} },\\n          content: countedTowardsRAMToReserve ? 'true' : 'false',\\n        },\\n      ],\\n      style: {\\n        color: countedTowardsRAMToReserve\\n          ? ns.ui.getTheme().success\\n          : ns.ui.getTheme().error,\\n      },\\n    };\\n    table.rows.push(row);\\n  }\\n\\n  tprintTable(ns, table);\\n}\\n\",\"filename\":\"list-scripts.js\",\"server\":\"home\"}}],[\"utils/scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HOME_HOSTNAME } from 'utils/constants';\\n\\nexport const HACK_JS = 'hack.js';\\nexport const GROW_JS = 'grow.js';\\nexport const WEAKEN_JS = 'weaken.js';\\nconst UTILS_JS = 'utils.js';\\nconst INIT_JS = 'init.js';\\n\\n/**\\n * @param {NS} ns\\n * @returns {string[]} list of scripts to count towards how much RAM to reserve\\n *          so we can run any script\\n */\\nexport function getScriptsCountedTowardsRAMToReserve(ns) {\\n  const runningScripts = ns.ps(HOME_HOSTNAME).map(process => process.filename);\\n  const scripts = ns\\n    .ls(HOME_HOSTNAME, '.js')\\n    .filter(\\n      script =>\\n        ![HACK_JS, GROW_JS, WEAKEN_JS, UTILS_JS, INIT_JS].includes(script)\\n    )\\n    .filter(script => !script.includes('/'))\\n    .filter(script => !runningScripts.includes(script));\\n  return scripts;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {number} amount of RAM to reserve so that we can run any script\\n */\\nexport function getRamToReserve(ns) {\\n  return Math.max(\\n    ...getScriptsCountedTowardsRAMToReserve(ns).map(script =>\\n      ns.getScriptRam(script)\\n    )\\n  );\\n}\\n\",\"filename\":\"utils/scripts.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.old.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.old.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid.old-copy.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid.old-copy.js\",\"server\":\"home\"}}],[\"contracts/shortest-path-in-a-grid..js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Shortest Path in a Grid\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n *   [[0,0,0,0,0,0],\\n *    [0,0,0,0,0,1],\\n *    [0,0,0,1,0,0],\\n *    [0,0,1,1,1,0],\\n *    [0,0,0,0,0,0],\\n *    [1,1,0,0,0,0],\\n *    [0,1,0,0,0,1],\\n *    [1,1,0,0,0,0]]\\n *\\n * You are trying to find the shortest path to the bottom-right corner of the\\n * grid, but there are obstacles on the grid that you cannot move onto. These\\n * obstacles are denoted by '1', while empty spaces are denoted by 0.\\n *\\n * Determine the shortest path from start to finish, if one exists. The answer\\n * should be given as a string of UDLR characters, indicating the moves along\\n * the path\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer. If there is no path, the answer should be an empty string.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * Examples:\\n *\\n *     [[0,1,0,0,0],\\n *      [0,0,0,1,0]]\\n *\\n * Answer: 'DRRURRD'\\n *\\n *     [[0,1],\\n *      [1,0]]\\n *\\n * Answer: ''\\n *\\n * @param {number[][]} grid\\n * @returns {string} path\\n */\\nexport default function shortestPathInAGrid(grid) {\\n  const paths = getPaths(0, 0, grid, []);\\n  paths.sort((path1, path2) => path1.length - path2.length);\\n  return paths[0]?.join('') ?? '';\\n}\\n\\n/**\\n * @typedef {('U'|'L'|'D'|'R')[]} Path\\n */\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Path} pathThusFar\\n * @returns {Path[]} all possible paths from x,y to the bottom-right corner\\n */\\nfunction getPaths(x, y, grid, pathThusFar) {\\n  if (!isValidPosition(x, y, grid)) return [];\\n  if (y === grid.length - 1 && x === grid[y].length - 1) return [pathThusFar];\\n\\n  // Create a copy of the grid and mark the current position as an obstacle.\\n  const newGrid = [];\\n  for (let row of grid) {\\n    newGrid.push([...row]);\\n  }\\n  newGrid[y][x] = 1;\\n\\n  const paths = [\\n    { x: x, y: y - 1, direction: 'U' },\\n    { x: x - 1, y: y, direction: 'L' },\\n    { x: x, y: y + 1, direction: 'D' },\\n    { x: x + 1, y: y, direction: 'R' },\\n  ]\\n    .map(newPosition =>\\n      getPaths(newPosition.x, newPosition.y, newGrid, [\\n        ...pathThusFar,\\n        newPosition.direction,\\n      ])\\n    )\\n    .filter(paths => paths.length > 0)\\n    .flat();\\n\\n  return paths;\\n}\\n\\n/**\\n * Checks if a position is a valid empty space on the grid.\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n */\\nfunction isValidPosition(x, y, grid) {\\n  if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length) return false;\\n  return grid[y][x] === 0;\\n}\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1, 0, 0, 0],\\n//     [0, 0, 0, 1, 0],\\n//   ])\\n// );\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 1],\\n//     [1, 0],\\n//   ])\\n// );\\n\\n// console.log(\\n//   shortestPathInAGrid([\\n//     [0, 0, 0, 0, 0, 0],\\n//     [0, 0, 0, 0, 0, 1],\\n//     [0, 0, 0, 1, 0, 0],\\n//     [0, 0, 1, 1, 1, 0],\\n//     [0, 0, 0, 0, 0, 0],\\n//     [1, 1, 0, 0, 0, 0],\\n//     [0, 1, 0, 0, 0, 1],\\n//     [1, 1, 0, 0, 0, 0],\\n//   ])\\n// ); // DDDDRRDDDRRR\\n\\nconsole.log(\\n  shortestPathInAGrid([\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],\\n    [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\\n    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],\\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n    [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\\n  ])\\n);\\n\",\"filename\":\"contracts/shortest-path-in-a-grid..js\",\"server\":\"home\"}}],[\"contracts/proper-2-coloring-of-a-graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n *\\n * You are given data, representing a graph. Note that “graph”, as used here,\\n * refers to the field of graph theory, and has no relation to statistics or\\n * plotting.\\n *\\n * The first element of the data represents the number of vertices in the graph.\\n * Each vertex is a unique number between 0 and ${data[0] - 1}. The next element\\n * of the data represents the edges of the graph.\\n *\\n * Two vertices u,v in a graph are said to be adjacent if there exists an edge\\n * [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does\\n * not matter.\\n *\\n * You must construct a 2-coloring of the graph, meaning that you have to assign\\n * each vertex in the graph a “color”, either 0 or 1, such that no two adjacent\\n * vertices have the same color. Submit your answer in the form of an array,\\n * where element i represents the color of vertex i. If it is impossible to\\n * construct a 2-coloring of the given graph, instead submit an empty array.\\n *\\n * Examples:\\n *\\n * Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\n * Output: [0, 0, 1, 1]\\n *\\n * Input: [3, [[0, 1], [0, 2], [1, 2]]]\\n * Output: []\\n *\\n * @typedef {[number, number]} Edge\\n *\\n * @param {[number, Edge[]]} input\\n */\\nexport default function proper2ColoringOfAGraph(input) {\\n  const [vertexCount, edges] = input;\\n  const vertices = Array.from({ length: vertexCount }, (_, i) => new Vertex(i));\\n  for (const edge of edges) {\\n    vertices[edge[0]].adjacentVertexIds.add(edge[1]);\\n    vertices[edge[1]].adjacentVertexIds.add(edge[0]);\\n  }\\n\\n  let wasSuccessful;\\n  do {\\n    const index = vertices.find(vertex => vertex.color === undefined).id;\\n    vertices[index].color = 0;\\n    wasSuccessful = setColors(index, vertices);\\n  } while (\\n    wasSuccessful &&\\n    vertices.find(vertex => vertex.color === undefined)\\n  );\\n\\n  return wasSuccessful ? vertices.map(vertex => vertex.color) : [];\\n}\\n\\n/**\\n * @param {number} currentVertexId\\n * @param {Vertex[]} vertices\\n * @returns {boolean} whether successfully colored all vertices\\n */\\nfunction setColors(currentVertexId, vertices) {\\n  const currentVertex = vertices[currentVertexId];\\n  for (const adjacentVertexId of currentVertex.adjacentVertexIds) {\\n    const adjacentVertex = vertices[adjacentVertexId];\\n    if (adjacentVertex.color === currentVertex.color) return false; // No possible construction.\\n    if (adjacentVertex.color === undefined) {\\n      adjacentVertex.color = currentVertex.color === 0 ? 1 : 0;\\n      if (!setColors(adjacentVertexId, vertices)) return false; // No possible construction.\\n    }\\n  }\\n  return true;\\n}\\n\\nclass Vertex {\\n  /** @param {number} id */\\n  constructor(id) {\\n    this.id = id;\\n    /** @type {Set<number>} */ this.adjacentVertexIds = new Set();\\n    /** @type {(0|1|undefined)} */ this.color = undefined;\\n  }\\n}\\n\",\"filename\":\"contracts/proper-2-coloring-of-a-graph.js\",\"server\":\"home\"}}],[\"contracts/find-all-valid-math-expressions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find All Valid Math Expressions\\n *\\n * You are given a string which contains only digits between 0 and 9 as well as\\n * a target number. Return all possible ways you can add the +, -, and *\\n * operators to the string of digits such that it evaluates to the target number.\\n *\\n * The answer should be provided as an array of strings containing the valid\\n * expressions.\\n *\\n * NOTE: Numbers in an expression cannot have leading 0’s\\n * NOTE: The order of evaluation expects script operator precedence\\n *\\n * Examples:\\n * Input: digits = “123”, target = 6\\n * Output: [1+2+3, 1*2*3]\\n *\\n * Input: digits = “105”, target = 5\\n * Output: [1*0+5, 10-5]\\n *\\n * @param {[string, number]} input\\n * @returns {string[]} valid expressions\\n */\\nexport default function findAllValidMathExpressions(input) {\\n  const [digits, target] = input;\\n  return getExpressions(digits, target, '');\\n}\\n\\nconst operators = ['+', '-', '*'];\\n\\n/**\\n * Gets all possible expressions.\\n *\\n * @param {string} digits\\n * @param {number} target\\n * @param {string} expressionThusFar\\n * @returns {string[]} expressions\\n */\\nfunction getExpressions(digits, target, expressionThusFar) {\\n  if (digits.length === 0) {\\n    return eval(expressionThusFar) === target ? [expressionThusFar] : [];\\n  }\\n  const expressions = [];\\n  for (let i = 1; i <= digits.length; i++) {\\n    const number = digits.substring(0, i);\\n    if (number.length > 1 && number.startsWith(0)) continue;\\n    if (expressionThusFar.length === 0) {\\n      expressions.push(...getExpressions(digits.substring(i), target, number));\\n    } else {\\n      for (const operator of operators) {\\n        expressions.push(\\n          ...getExpressions(\\n            digits.substring(i),\\n            target,\\n            expressionThusFar + operator + number\\n          )\\n        );\\n      }\\n    }\\n  }\\n  return expressions;\\n}\\n\",\"filename\":\"contracts/find-all-valid-math-expressions.js\",\"server\":\"home\"}}],[\"terminal-weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServers } from 'database/servers';\\nimport { executeTerminalCommand } from 'utils/dom';\\n\\n/**\\n * Runs the weaken command on the given hostname in the terminal until the\\n * script is stopped.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  // Connect to server.\\n  const server = getServers(ns).find(server => server.hostname === ns.args[0]);\\n  const commands = [\\n    server.path.map(hostname => `connect ${hostname}`).join('; '),\\n  ];\\n\\n  await executeTerminalCommand(ns, ...commands);\\n\\n  while (true) {\\n    // Weaken server.\\n    await executeTerminalCommand(ns, 'weaken');\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"terminal-weaken.js\",\"server\":\"home\"}}],[\"contracts/minimum-path-sum-in-a-triangle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *         [4],\\n *        [6,2],\\n *       [8,9,1],\\n *      [5,3,8,6],\\n *     [3,3,6,6,6],\\n *    [1,8,9,3,2,4],\\n *   [9,4,3,3,9,5,2]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} triangle\\n */\\nexport default function minimumPathSumInATriangle(triangle) {\\n  return getMinimumSum(triangle);\\n}\\n\\n/**\\n *\\n * @param {number[][]} triangle\\n * @param {[number]} index\\n * @param {[number]} sumThusFar\\n * @returns {number} minimum sum\\n */\\nfunction getMinimumSum(triangle, index, sumThusFar) {\\n  if (!triangle || triangle.length === 0) return sumThusFar;\\n\\n  const row = triangle[0];\\n  if (row.length === 1) {\\n    return getMinimumSum(triangle.slice(1), 0, row[0]);\\n  }\\n\\n  const sumA = getMinimumSum(triangle.slice(1), index, sumThusFar + row[index]);\\n  const sumB = getMinimumSum(\\n    triangle.slice(1),\\n    index + 1,\\n    sumThusFar + row[index + 1]\\n  );\\n  return Math.min(sumA, sumB);\\n}\\n\",\"filename\":\"contracts/minimum-path-sum-in-a-triangle.js\",\"server\":\"home\"}}],[\"monitor-net-worth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getStocks } from 'database/stocks';\\nimport { HOME_HOSTNAME, ONE_SECOND } from 'utils/constants';\\nimport { formatMoney } from 'utils/format';\\n\\n/**\\n * Monitors net worth.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  ns.tail();\\n  ns.moveTail(1000, 200);\\n\\n  while (true) {\\n    ns.clearLog();\\n    const commission = ns.stock.getConstants().StockMarketCommission;\\n    const moneyAvailable = ns.getServerMoneyAvailable(HOME_HOSTNAME);\\n    const moneyInStocks = getStocks(ns)\\n      .map(\\n        stock =>\\n          ns.stock.getAskPrice(stock.symbol) *\\n            ns.stock.getPosition(stock.symbol)[0] -\\n          commission\\n      )\\n      .reduce((a, b) => a + b);\\n    ns.tprintf(`Total ${formatMoney(ns, moneyAvailable + moneyInStocks)}`);\\n    ns.tprintf(`Cash: ${formatMoney(ns, moneyAvailable)}`);\\n    ns.tprintf(`Stocks: ${formatMoney(ns, moneyInStocks)}`);\\n    ns.sleep(ONE_SECOND);\\n  }\\n}\\n\",\"filename\":\"monitor-net-worth.js\",\"server\":\"home\"}}],[\"get-karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Get karma.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.tprint(ns.heart.break());\\n}\\n\",\"filename\":\"get-karma.js\",\"server\":\"home\"}}],[\"contracts/unique-paths-in-a-grid.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with 6 rows and 2 columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns:\\n *\\n * [6, 2]\\n *\\n * @param {number[]} input\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const [rows, columns] = input;\\n  return getPaths(0, 0, new Grid(rows, columns));\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of the following grid:\\n *\\n * 0,1,0,0,0,\\n * 0,0,0,0,0,\\n * 0,0,0,0,1,\\n * 1,0,0,0,0,\\n * 0,0,0,0,0,\\n * 0,0,0,1,0,\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {number[][]} input\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridII(input) {\\n  const rows = input.length;\\n  const columns = input[0].length;\\n  return getPaths(0, 0, new Grid(rows, columns, input));\\n}\\n\\n/**\\n * Gets all possible (can have duplicates) paths from the given position to the\\n * bottom-right corner ({x: columns, y: rows}).\\n *\\n * @param {number} x\\n * @param {number} y\\n * @param {Grid} grid\\n * @returns {number} number of paths\\n */\\nfunction getPaths(x, y, grid) {\\n  if (x === grid.columns - 1 && y === grid.rows - 1) return 1;\\n\\n  let paths = 0;\\n\\n  const rightPosition = { x: x + 1, y: y };\\n  if (grid.isValidPosition(rightPosition.x, rightPosition.y)) {\\n    paths += getPaths(rightPosition.x, rightPosition.y, grid);\\n  }\\n\\n  const downPosition = { x: x, y: y + 1 };\\n  if (grid.isValidPosition(downPosition.x, downPosition.y)) {\\n    paths += getPaths(downPosition.x, downPosition.y, grid);\\n  }\\n\\n  return paths;\\n}\\n\\nclass Grid {\\n  /**\\n   * @param {number} rows\\n   * @param {number} columns\\n   * @param {[number[][]]} obstacles\\n   */\\n  constructor(rows, columns, obstacles) {\\n    this.rows = rows;\\n    this.columns = columns;\\n    this.obstacles = obstacles;\\n  }\\n\\n  /**\\n   * @param {number} x\\n   * @param {number} y\\n   * @returns {boolean} whether the position is valid\\n   */\\n  isValidPosition(x, y) {\\n    return (\\n      x >= 0 &&\\n      y >= 0 &&\\n      x < this.columns &&\\n      y < this.rows &&\\n      (this.obstacles ? this.obstacles[y][x] === 0 : true)\\n    );\\n  }\\n}\\n\",\"filename\":\"contracts/unique-paths-in-a-grid.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-14\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"database/servers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/servers.txt\",\"text\":\"[{\\\"hostname\\\":\\\"home\\\",\\\"path\\\":[],\\\"organization\\\":\\\"Home PC\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"n00dles\\\",\\\"path\\\":[\\\"n00dles\\\"],\\\"organization\\\":\\\"Noodle Bar\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":4,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1682045.3671664742,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1.5,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\"],\\\"organization\\\":\\\"Max Hardware Store\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":240292195.30949634,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":22.5,\\\"hackingLevel\\\":80},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\"],\\\"organization\\\":\\\"Silver Helix\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1081314878.8927336,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":45,\\\"hackingLevel\\\":150},{\\\"hostname\\\":\\\"netlink\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\"],\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":6608035371.011149,\\\"minSecurity\\\":38,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":380},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\"],\\\"organization\\\":\\\"ZB Institute of Technology\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24390803945.597847,\\\"minSecurity\\\":38,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":735},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"lexo-corp\\\"],\\\"organization\\\":\\\"LexoCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":18151451869.473278,\\\"minSecurity\\\":36,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":732},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\"],\\\"organization\\\":\\\"Millenium Fitness Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":6007304882.737409,\\\"minSecurity\\\":24,\\\"baseSecurity\\\":72,\\\"hackingLevel\\\":501},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\"],\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":39563385644.94425,\\\"minSecurity\\\":38,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":796},{\\\"hostname\\\":\\\"omnia\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\"],\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":23324527585.54402,\\\"minSecurity\\\":45,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":873},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\"],\\\"organization\\\":\\\"Zeus Medical\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":35599087322.18378,\\\"minSecurity\\\":36,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":804},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\"],\\\"organization\\\":\\\"Taiyang Digital\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":19279062091.503265,\\\"minSecurity\\\":36,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":863},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\"],\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":20329877811.418682,\\\"minSecurity\\\":38,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":845},{\\\"hostname\\\":\\\"stormtech\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\"],\\\"organization\\\":\\\"Storm Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":27978050869.857746,\\\"minSecurity\\\":44,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1015},{\\\"hostname\\\":\\\".\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\"],\\\"organization\\\":\\\".\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":542},{\\\"hostname\\\":\\\"blade\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\",\\\"blade\\\"],\\\"organization\\\":\\\"Blade Industries\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":433536037077.0857,\\\"minSecurity\\\":47,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1024},{\\\"hostname\\\":\\\"megacorp\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\",\\\"blade\\\",\\\"megacorp\\\"],\\\"organization\\\":\\\"MegaCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":995468672433.6793,\\\"minSecurity\\\":50,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1171},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"stormtech\\\",\\\".\\\",\\\"clarkinc\\\"],\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":519490182117.4548,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":90,\\\"hackingLevel\\\":1084},{\\\"hostname\\\":\\\"helios\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"taiyang-digital\\\",\\\"titan-labs\\\",\\\"helios\\\"],\\\"organization\\\":\\\"Helios Labs\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":15968727412.53364,\\\"minSecurity\\\":44,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":846},{\\\"hostname\\\":\\\"catalyst\\\",\\\"path\\\":[\\\"n00dles\\\",\\\"max-hardware\\\",\\\"silver-helix\\\",\\\"netlink\\\",\\\"catalyst\\\"],\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":9047668300.653595,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":94.5,\\\"hackingLevel\\\":434},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"path\\\":[\\\"foodnstuff\\\"],\\\"organization\\\":\\\"FoodNStuff\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":48058439.06189927,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"zer0\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\"],\\\"organization\\\":\\\"ZER0 Nightclub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":180219146.48212224,\\\"minSecurity\\\":13,\\\"baseSecurity\\\":37.5,\\\"hackingLevel\\\":75},{\\\"hostname\\\":\\\"neo-net\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\"],\\\"organization\\\":\\\"Neo Nightclub Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":120146097.65474817,\\\"minSecurity\\\":13,\\\"baseSecurity\\\":37.5,\\\"hackingLevel\\\":50},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\"],\\\"organization\\\":\\\"Johnson Orthopedics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1693008674.5482507,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":260},{\\\"hostname\\\":\\\"syscore\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\"],\\\"organization\\\":\\\"SysCore Securities\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":12475098159.361784,\\\"minSecurity\\\":39,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":578},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\"],\\\"organization\\\":\\\"Rho Construction\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":12270193507.304882,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":66,\\\"hackingLevel\\\":492},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\"],\\\"organization\\\":\\\"AeroCorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24956523428.48904,\\\"minSecurity\\\":41,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":873},{\\\"hostname\\\":\\\"unitalife\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\"],\\\"organization\\\":\\\"UnitaLife Group\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":26213514513.648594,\\\"minSecurity\\\":39,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":794},{\\\"hostname\\\":\\\"defcomm\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"defcomm\\\"],\\\"organization\\\":\\\"DefComm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":20111526456.170704,\\\"minSecurity\\\":47,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":961},{\\\"hostname\\\":\\\"icarus\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"icarus\\\"],\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":21963926398.500576,\\\"minSecurity\\\":47,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":919},{\\\"hostname\\\":\\\"infocomm\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"infocomm\\\"],\\\"organization\\\":\\\"InfoComm\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":15700556372.549019,\\\"minSecurity\\\":40,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":912},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"infocomm\\\",\\\"applied-energetics\\\"],\\\"organization\\\":\\\"Applied Energetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":17872170895.809303,\\\"minSecurity\\\":39,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":814},{\\\"hostname\\\":\\\"nova-med\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"nova-med\\\"],\\\"organization\\\":\\\"Nova Medical\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":29025643598.615913,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":803},{\\\"hostname\\\":\\\"microdyne\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"nova-med\\\",\\\"microdyne\\\"],\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":14744946318.723566,\\\"minSecurity\\\":38,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":807},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\"],\\\"organization\\\":\\\"Universal Energy\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":28563450547.866203,\\\"minSecurity\\\":42,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":813},{\\\"hostname\\\":\\\"zb-def\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\"],\\\"organization\\\":\\\"ZB Defense Industries\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":23914543324.68281,\\\"minSecurity\\\":30,\\\"baseSecurity\\\":88.5,\\\"hackingLevel\\\":821},{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\"],\\\"organization\\\":\\\"The Runners\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":512},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\"],\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":34400459294.50211,\\\"minSecurity\\\":44,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1073},{\\\"hostname\\\":\\\"4sigma\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"4sigma\\\"],\\\"organization\\\":\\\"Four Sigma\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":365800860246.0592,\\\"minSecurity\\\":33,\\\"baseSecurity\\\":99,\\\"hackingLevel\\\":1134},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\"],\\\"organization\\\":\\\"KuaiGong International\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":512936571006.3437,\\\"minSecurity\\\":48,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1023},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"b-and-a\\\"],\\\"organization\\\":\\\"Bachman & Associates\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":558149683342.945,\\\"minSecurity\\\":41,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":993},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\"],\\\"organization\\\":\\\"Powerhouse Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":21626297577.85467,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":1086},{\\\"hostname\\\":\\\"ecorp\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\",\\\"ecorp\\\"],\\\"organization\\\":\\\"ECorp\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1331333628147.8276,\\\"minSecurity\\\":50,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1144},{\\\"hostname\\\":\\\"The-Cave\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"kuai-gong\\\",\\\"powerhouse-fitness\\\",\\\"The-Cave\\\"],\\\"organization\\\":\\\"Helios\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":925},{\\\"hostname\\\":\\\"vitalife\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\"],\\\"organization\\\":\\\"VitaLife\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":17942135981.353325,\\\"minSecurity\\\":42,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":871},{\\\"hostname\\\":\\\"omnitek\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"omnitek\\\"],\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":347662002667.24335,\\\"minSecurity\\\":50,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":900},{\\\"hostname\\\":\\\"nwo\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"nwo\\\"],\\\"organization\\\":\\\"NWO\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":859921325764.1292,\\\"minSecurity\\\":50,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1198},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"aerocorp\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"vitalife\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"fulcrumassets\\\"],\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":24029219.530949634,\\\"minSecurity\\\":50,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":1140},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\"],\\\"organization\\\":\\\"Snap Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":10813148788.927336,\\\"minSecurity\\\":28,\\\"baseSecurity\\\":84,\\\"hackingLevel\\\":796},{\\\"hostname\\\":\\\"deltaone\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\"],\\\"organization\\\":\\\"DeltaOne\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":37418779387.73548,\\\"minSecurity\\\":39,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":838},{\\\"hostname\\\":\\\"solaris\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"rho-construction\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"solaris\\\"],\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":18515207948.865818,\\\"minSecurity\\\":37,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":753},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"alpha-ent\\\"],\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":17487114427.143406,\\\"minSecurity\\\":29,\\\"baseSecurity\\\":87,\\\"hackingLevel\\\":538},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"galactic-cyber\\\"],\\\"organization\\\":\\\"Galactic Cybersystems\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":19662581891.580162,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":849},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"crush-fitness\\\"],\\\"organization\\\":\\\"Crush Fitness\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1093022755.6708958,\\\"minSecurity\\\":22,\\\"baseSecurity\\\":64.5,\\\"hackingLevel\\\":233},{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\"],\\\"organization\\\":\\\"NiteSec\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":207},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\",\\\"summit-uni\\\"],\\\"organization\\\":\\\"Summit University\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":5597767661.476355,\\\"minSecurity\\\":27,\\\"baseSecurity\\\":79.5,\\\"hackingLevel\\\":445},{\\\"hostname\\\":\\\"phantasy\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"zer0\\\",\\\"phantasy\\\"],\\\"organization\\\":\\\"Phantasy Club\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":576701268.7427912,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"nectar-net\\\"],\\\"organization\\\":\\\"Nectar Nightclub Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":66080353.71011149,\\\"minSecurity\\\":10,\\\"baseSecurity\\\":30,\\\"hackingLevel\\\":20},{\\\"hostname\\\":\\\"CSEC\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\"],\\\"organization\\\":\\\"CyberSec\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":8,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":53},{\\\"hostname\\\":\\\"omega-net\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"omega-net\\\"],\\\"organization\\\":\\\"Omega Software\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":1617947808.5351787,\\\"minSecurity\\\":17,\\\"baseSecurity\\\":51,\\\"hackingLevel\\\":200},{\\\"hostname\\\":\\\"the-hub\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"omega-net\\\",\\\"the-hub\\\"],\\\"organization\\\":\\\"The Hub\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4749016532.103037,\\\"minSecurity\\\":19,\\\"baseSecurity\\\":57,\\\"hackingLevel\\\":307},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"omega-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\"],\\\"organization\\\":\\\"Rothman University\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":4873584751.057285,\\\"minSecurity\\\":26,\\\"baseSecurity\\\":78,\\\"hackingLevel\\\":409},{\\\"hostname\\\":\\\"computek\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"omega-net\\\",\\\"computek\\\"],\\\"organization\\\":\\\"CompuTek\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":5328716671.47251,\\\"minSecurity\\\":32,\\\"baseSecurity\\\":96,\\\"hackingLevel\\\":310},{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"omega-net\\\",\\\"computek\\\",\\\"I.I.I.I\\\"],\\\"organization\\\":\\\"I.I.I.I\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":351},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"path\\\":[\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"omega-net\\\",\\\"computek\\\",\\\"I.I.I.I\\\",\\\"aevum-police\\\"],\\\"organization\\\":\\\"Aevum Police Headquarters\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":64,\\\"cpuCores\\\":1,\\\"maxMoney\\\":5178211841.599384,\\\"minSecurity\\\":36,\\\"baseSecurity\\\":100,\\\"hackingLevel\\\":450},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"path\\\":[\\\"sigma-cosmetics\\\"],\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":55267204.92118416,\\\"minSecurity\\\":5,\\\"baseSecurity\\\":15,\\\"hackingLevel\\\":5},{\\\"hostname\\\":\\\"joesguns\\\",\\\"path\\\":[\\\"joesguns\\\"],\\\"organization\\\":\\\"Joe's Guns\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":60073048.827374086,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":22.5,\\\"hackingLevel\\\":10},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"path\\\":[\\\"hong-fang-tea\\\"],\\\"organization\\\":\\\"HongFang Teahouse\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":72087658.5928489,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":22.5,\\\"hackingLevel\\\":30},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"path\\\":[\\\"harakiri-sushi\\\"],\\\"organization\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":16,\\\"cpuCores\\\":1,\\\"maxMoney\\\":96116878.12379853,\\\"minSecurity\\\":8,\\\"baseSecurity\\\":22.5,\\\"hackingLevel\\\":40},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"path\\\":[\\\"iron-gym\\\"],\\\"organization\\\":\\\"Iron Gym Network\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":32,\\\"cpuCores\\\":1,\\\"maxMoney\\\":480584390.6189927,\\\"minSecurity\\\":15,\\\"baseSecurity\\\":45,\\\"hackingLevel\\\":100},{\\\"hostname\\\":\\\"lauren\\\",\\\"path\\\":[\\\"lauren\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32768,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-0\\\",\\\"path\\\":[\\\"lauren-0\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":32768,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-1\\\",\\\"path\\\":[\\\"lauren-1\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4096,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-2\\\",\\\"path\\\":[\\\"lauren-2\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":4096,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-3\\\",\\\"path\\\":[\\\"lauren-3\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-4\\\",\\\"path\\\":[\\\"lauren-4\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":1024,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-5\\\",\\\"path\\\":[\\\"lauren-5\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":512,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-6\\\",\\\"path\\\":[\\\"lauren-6\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-7\\\",\\\"path\\\":[\\\"lauren-7\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-8\\\",\\\"path\\\":[\\\"lauren-8\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-9\\\",\\\"path\\\":[\\\"lauren-9\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-10\\\",\\\"path\\\":[\\\"lauren-10\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-11\\\",\\\"path\\\":[\\\"lauren-11\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-12\\\",\\\"path\\\":[\\\"lauren-12\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-13\\\",\\\"path\\\":[\\\"lauren-13\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-14\\\",\\\"path\\\":[\\\"lauren-14\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-15\\\",\\\"path\\\":[\\\"lauren-15\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-16\\\",\\\"path\\\":[\\\"lauren-16\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-17\\\",\\\"path\\\":[\\\"lauren-17\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-18\\\",\\\"path\\\":[\\\"lauren-18\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-19\\\",\\\"path\\\":[\\\"lauren-19\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-20\\\",\\\"path\\\":[\\\"lauren-20\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-21\\\",\\\"path\\\":[\\\"lauren-21\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-22\\\",\\\"path\\\":[\\\"lauren-22\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":256,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"lauren-23\\\",\\\"path\\\":[\\\"lauren-23\\\"],\\\"organization\\\":\\\"\\\",\\\"isPurchased\\\":true,\\\"maxRam\\\":128,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1},{\\\"hostname\\\":\\\"darkweb\\\",\\\"path\\\":[\\\"darkweb\\\"],\\\"organization\\\":\\\"darkweb\\\",\\\"isPurchased\\\":false,\\\"maxRam\\\":0,\\\"cpuCores\\\":1,\\\"maxMoney\\\":0,\\\"minSecurity\\\":1,\\\"baseSecurity\\\":1,\\\"hackingLevel\\\":1}]\"}}],[\"database/stocks.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"database/stocks.txt\",\"text\":\"[{\\\"symbol\\\":\\\"ECP\\\",\\\"organization\\\":\\\"ECorp\\\",\\\"server\\\":\\\"ecorp\\\",\\\"maxShares\\\":22800000},{\\\"symbol\\\":\\\"MGCP\\\",\\\"organization\\\":\\\"MegaCorp\\\",\\\"server\\\":\\\"megacorp\\\",\\\"maxShares\\\":18800000},{\\\"symbol\\\":\\\"BLD\\\",\\\"organization\\\":\\\"Blade Industries\\\",\\\"server\\\":\\\"blade\\\",\\\"maxShares\\\":24400000},{\\\"symbol\\\":\\\"CLRK\\\",\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"server\\\":\\\"clarkinc\\\",\\\"maxShares\\\":14700000},{\\\"symbol\\\":\\\"OMTK\\\",\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"server\\\":\\\"omnitek\\\",\\\"maxShares\\\":9200000},{\\\"symbol\\\":\\\"FSIG\\\",\\\"organization\\\":\\\"Four Sigma\\\",\\\"server\\\":\\\"4sigma\\\",\\\"maxShares\\\":7300000},{\\\"symbol\\\":\\\"KGI\\\",\\\"organization\\\":\\\"KuaiGong International\\\",\\\"server\\\":\\\"kuai-gong\\\",\\\"maxShares\\\":17300000},{\\\"symbol\\\":\\\"FLCM\\\",\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"server\\\":\\\"fulcrumassets\\\",\\\"maxShares\\\":13200000},{\\\"symbol\\\":\\\"STM\\\",\\\"organization\\\":\\\"Storm Technologies\\\",\\\"server\\\":\\\"stormtech\\\",\\\"maxShares\\\":9700000},{\\\"symbol\\\":\\\"DCOMM\\\",\\\"organization\\\":\\\"DefComm\\\",\\\"server\\\":\\\"defcomm\\\",\\\"maxShares\\\":15400000},{\\\"symbol\\\":\\\"HLS\\\",\\\"organization\\\":\\\"Helios Labs\\\",\\\"server\\\":\\\"helios\\\",\\\"maxShares\\\":9500000},{\\\"symbol\\\":\\\"VITA\\\",\\\"organization\\\":\\\"VitaLife\\\",\\\"server\\\":\\\"vitalife\\\",\\\"maxShares\\\":16300000},{\\\"symbol\\\":\\\"ICRS\\\",\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"server\\\":\\\"icarus\\\",\\\"maxShares\\\":13100000},{\\\"symbol\\\":\\\"UNV\\\",\\\"organization\\\":\\\"Universal Energy\\\",\\\"server\\\":\\\"univ-energy\\\",\\\"maxShares\\\":6200000},{\\\"symbol\\\":\\\"AERO\\\",\\\"organization\\\":\\\"AeroCorp\\\",\\\"server\\\":\\\"aerocorp\\\",\\\"maxShares\\\":8700000},{\\\"symbol\\\":\\\"OMN\\\",\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"server\\\":\\\"omnia\\\",\\\"maxShares\\\":19900000},{\\\"symbol\\\":\\\"SLRS\\\",\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"server\\\":\\\"solaris\\\",\\\"maxShares\\\":5400000},{\\\"symbol\\\":\\\"GPH\\\",\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"server\\\":\\\"global-pharm\\\",\\\"maxShares\\\":5600000},{\\\"symbol\\\":\\\"NVMD\\\",\\\"organization\\\":\\\"Nova Medical\\\",\\\"server\\\":\\\"nova-med\\\",\\\"maxShares\\\":6500000},{\\\"symbol\\\":\\\"WDS\\\",\\\"organization\\\":\\\"Watchdog Security\\\",\\\"maxShares\\\":17900000},{\\\"symbol\\\":\\\"LXO\\\",\\\"organization\\\":\\\"LexoCorp\\\",\\\"server\\\":\\\"lexo-corp\\\",\\\"maxShares\\\":7600000},{\\\"symbol\\\":\\\"RHOC\\\",\\\"organization\\\":\\\"Rho Construction\\\",\\\"server\\\":\\\"rho-construction\\\",\\\"maxShares\\\":10600000},{\\\"symbol\\\":\\\"APHE\\\",\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"server\\\":\\\"alpha-ent\\\",\\\"maxShares\\\":6600000},{\\\"symbol\\\":\\\"SYSC\\\",\\\"organization\\\":\\\"SysCore Securities\\\",\\\"server\\\":\\\"syscore\\\",\\\"maxShares\\\":7000000},{\\\"symbol\\\":\\\"CTK\\\",\\\"organization\\\":\\\"CompuTek\\\",\\\"server\\\":\\\"computek\\\",\\\"maxShares\\\":8700000},{\\\"symbol\\\":\\\"NTLK\\\",\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"server\\\":\\\"netlink\\\",\\\"maxShares\\\":2300000},{\\\"symbol\\\":\\\"OMGA\\\",\\\"organization\\\":\\\"Omega Software\\\",\\\"server\\\":\\\"omega-net\\\",\\\"maxShares\\\":4500000},{\\\"symbol\\\":\\\"FNS\\\",\\\"organization\\\":\\\"FoodNStuff\\\",\\\"server\\\":\\\"foodnstuff\\\",\\\"maxShares\\\":2100000},{\\\"symbol\\\":\\\"JGN\\\",\\\"organization\\\":\\\"Joe's Guns\\\",\\\"server\\\":\\\"joesguns\\\",\\\"maxShares\\\":31000000},{\\\"symbol\\\":\\\"SGC\\\",\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"maxShares\\\":1800000},{\\\"symbol\\\":\\\"CTYS\\\",\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"server\\\":\\\"catalyst\\\",\\\"maxShares\\\":25200000},{\\\"symbol\\\":\\\"MDYN\\\",\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"server\\\":\\\"microdyne\\\",\\\"maxShares\\\":4100000},{\\\"symbol\\\":\\\"TITN\\\",\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"server\\\":\\\"titan-labs\\\",\\\"maxShares\\\":4100000}]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":144,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":443.2099999999834,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":441.0099999999835,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":59,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":440.00999999998356,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":438.80999999998363,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":437.8099999999837,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":406.2099999999855,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.40999999998655,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":385.2099999999867,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":382.00999999998686,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":22,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":368.20999999998764,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":277.2099999999928,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":69,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":276.2099999999929,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.6099999999934,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":66,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":265.6099999999935,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":255.00999999999405,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":254.0099999999941,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":250.8099999999943,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":40,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000084,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":94.2100000000008,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":92.21000000000078,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-stocks.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":-9283409.844623674,\"onlineRunningTime\":353.4099999999885,\"ramUsage\":14.25,\"server\":\"home\",\"scriptKey\":\"manage-stocks.js*[]\",\"title\":\"manage-stocks.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[10],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":599619.2073635259,\"onlineMoneyMade\":12102950.025388185,\"onlineRunningTime\":180.0099999999983,\"ramUsage\":8.55,\"server\":\"home\",\"scriptKey\":\"manage-hacking.js*[10]\",\"title\":\"manage-hacking.js 10\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":33,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":6,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"38.9.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":54318412028.43137,\"moneyMax\":1331333628147.8276,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1144,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"12.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":40615121835.29411,\"moneyMax\":995468672433.6793,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1171,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"37.9.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":22772507080.392155,\"moneyMax\":558149683342.945,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":993,\"serverGrowth\":73,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"43.2.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"blade\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"blade\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":17688270312.7451,\"moneyMax\":433536037077.0857,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1024,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"blade\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\"blade\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":26,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"18.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":35084790091.17647,\"moneyMax\":859921325764.1292,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1198,\"serverGrowth\":78,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"16.7.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":21195199430.392155,\"moneyMax\":519490182117.4548,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1084,\"serverGrowth\":50,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"84.5.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omnitek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omnitek\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":14184609708.823528,\"moneyMax\":347662002667.24335,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":96,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1960.6100000003069,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":37,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"58.9.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":14924675098.039215,\"moneyMax\":365800860246.0592,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1134,\"serverGrowth\":83,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"52.2.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":48,\"moneyAvailable\":20927812097.058823,\"moneyMax\":512936571006.3437,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1023,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"54.2.6.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"fulcrumtech\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"fulcrumtech\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":1403538739.2156863,\"moneyMax\":34400459294.50211,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1073,\"serverGrowth\":87,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1658.4100000002381,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"weaken.js*[\\\"zb-institute\\\"]\",\"title\":\"weaken.js zb-institute\",\"threads\":128,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":283,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.40999999998417,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.80999999998477,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":383.0099999999868,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":52,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":340.6099999999892,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":190.40999999999772,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":10,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"55.6.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":50,\"moneyAvailable\":980392.1568627451,\"moneyMax\":24029219.530949634,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1140,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"89.6.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":1141504475.490196,\"moneyMax\":27978050869.857746,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1015,\"serverGrowth\":72,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"50.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":820550279.4117646,\"moneyMax\":20111526456.170704,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":961,\"serverGrowth\":50,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"31.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":640582700,\"moneyMax\":15700556372.549019,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":59,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"99.1.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"helios\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"helios\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":44,\"moneyAvailable\":651524078.4313725,\"moneyMax\":15968727412.53364,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":78,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":443.2099999999834,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":442.00999999998345,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.80999999998375,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":28,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":388.4099999999865,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":387.40999999998655,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":1,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"56.9.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"vitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"vitalife\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":42,\"moneyAvailable\":732039148.0392157,\"moneyMax\":17942135981.353325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":76,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"vitalife\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":18,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"40.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":47,\"moneyAvailable\":896128197.0588235,\"moneyMax\":21963926398.500576,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":95,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"94.8.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":42,\"moneyAvailable\":1165388782.352941,\"moneyMax\":28563450547.866203,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":89,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"63.7.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"titan-labs\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"titan-labs\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":829459014.7058823,\"moneyMax\":20329877811.418682,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-398628-MegaCorp.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01100000001110010100000011111001\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"3.5.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"microdyne\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"microdyne\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":601593809.8039216,\"moneyMax\":14744946318.723566,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":74,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"microdyne\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"29.1.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":786585733.3333333,\"moneyMax\":19279062091.503265,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":74,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"53.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":802233341.1764705,\"moneyMax\":19662581891.580162,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":77,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"86.9.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":1018226155.882353,\"moneyMax\":24956523428.48904,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"48.1.7.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omnia\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omnia\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":45,\"moneyAvailable\":951640725.490196,\"moneyMax\":23324527585.54402,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"omnia\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":35,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\"omnia\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"70.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88.5,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":975713367.6470587,\"moneyMax\":23914543324.68281,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":73,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"31.5.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":729184572.5490196,\"moneyMax\":17872170895.809303,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"45.7.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"solaris\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"solaris\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":37,\"minDifficulty\":37,\"moneyAvailable\":755420484.3137255,\"moneyMax\":18515207948.865818,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":753,\"serverGrowth\":70,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"solaris\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"12.4.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":1526686199.0196078,\"moneyMax\":37418779387.73548,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":53,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"96.8.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":1614186134.3137255,\"moneyMax\":39563385644.94425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":796,\"serverGrowth\":87,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"65.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":1184246258.8235292,\"moneyMax\":29025643598.615913,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"64.5.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":1452442762.7450979,\"moneyMax\":35599087322.18378,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"14.7.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":39,\"moneyAvailable\":1069511392.1568627,\"moneyMax\":26213514513.648594,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"unitalife\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":18,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"5.9.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":36,\"minDifficulty\":36,\"moneyAvailable\":740579236.2745098,\"moneyMax\":18151451869.473278,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":732,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.6099999999934,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.21000000000079,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":7,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"0.1.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":66,\"hackDifficulty\":24.620000000000015,\"minDifficulty\":22,\"moneyAvailable\":4505419023.075353,\"moneyMax\":12270193507.304882,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":492,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"87.7.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":713474268.627451,\"moneyMax\":17487114427.143406,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":538,\"serverGrowth\":60,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":73,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"81.3.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":36,\"minDifficulty\":36,\"moneyAvailable\":211271043.1372549,\"moneyMax\":5178211841.599384,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":450,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":36,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"11.1.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":27.762235294117655,\"minDifficulty\":26,\"moneyAvailable\":547713.6698889288,\"moneyMax\":4873584751.057285,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":409,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":73,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"31.5.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"zb-institute\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"zb-institute\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":38,\"minDifficulty\":38,\"moneyAvailable\":995144800.9803921,\"moneyMax\":24390803945.597847,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":735,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":385.2099999999867,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":8,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"57.8.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":79.5,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":891211.6641530057,\"moneyMax\":5597767661.476355,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":445,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":13,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"5.2.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":39,\"minDifficulty\":39,\"moneyAvailable\":508984004.9019608,\"moneyMax\":12475098159.361784,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":578,\"serverGrowth\":63,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"79.7.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":94.5,\"hackDifficulty\":34.53799999999999,\"minDifficulty\":32,\"moneyAvailable\":33282232.75214972,\"moneyMax\":9047668300.653595,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":434,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":442.00999999998345,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"77.5.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":57,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":886027.6091177363,\"moneyMax\":4749016532.103037,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":307,\"serverGrowth\":49,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":9,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"51.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":96,\"hackDifficulty\":32,\"minDifficulty\":32,\"moneyAvailable\":398039.3272058315,\"moneyMax\":5328716671.47251,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":310,\"serverGrowth\":50,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"35.7.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":100,\"hackDifficulty\":38,\"minDifficulty\":38,\"moneyAvailable\":929032.3980052616,\"moneyMax\":6608035371.011149,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":380,\"serverGrowth\":66,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.21000000000079,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":15,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"71.2.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":96,\"hackDifficulty\":37.217999999999996,\"minDifficulty\":32,\"moneyAvailable\":549961.0155143128,\"moneyMax\":1693008674.5482507,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":260,\"serverGrowth\":53,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"30.6.9.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1.5,\"hackDifficulty\":1.7860000000000003,\"minDifficulty\":1,\"moneyAvailable\":843974.1620838557,\"moneyMax\":1682045.3671664742,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":265.6099999999935,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-777839-CyberSec.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"ECxUtIP2uuuuuuuuuucuucuucucuucYMa6rcuucYMaCMa44PrPrPrPrPrjNrPrPrPrti4yAM6f\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"45.1.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":27.204941176470584,\"minDifficulty\":5,\"moneyAvailable\":1110972.7564913805,\"moneyMax\":48058439.06189927,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":442.00999999998345,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"2.3.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":35.795999999999985,\"minDifficulty\":5,\"moneyAvailable\":970514.5002194066,\"moneyMax\":55267204.92118416,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"33.5.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":55.437686274510064,\"minDifficulty\":8,\"moneyAvailable\":50092.57133850448,\"moneyMax\":60073048.827374086,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"91.1.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":39.14000000000004,\"minDifficulty\":13,\"moneyAvailable\":830388.7592852002,\"moneyMax\":180219146.48212224,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"16.4.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":59.886000000000315,\"minDifficulty\":10,\"moneyAvailable\":971220.3181372331,\"moneyMax\":66080353.71011149,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"9.5.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37.5,\"hackDifficulty\":38.50600000000002,\"minDifficulty\":13,\"moneyAvailable\":1001384.7417153884,\"moneyMax\":120146097.65474817,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"24.9.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":49.986000000000004,\"minDifficulty\":15,\"moneyAvailable\":685433.0852707212,\"moneyMax\":1081314878.8927336,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651374.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[97,[3,5,6,8,10,11,12,13,16,18,20,21]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"65.5.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":45.282000000000046,\"minDifficulty\":8,\"moneyAvailable\":893855.1860907968,\"moneyMax\":72087658.5928489,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-733973-Netburners.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"eDDDDoevYNi5hgvYNi5hgv35Lh1wCJCh1wCJJJwCJJJwCPJJCPJJCPJJTrrr5yQ2NQVVQ2NQVVV\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"33.8.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":56.05000000000016,\"minDifficulty\":8,\"moneyAvailable\":981222.9878194921,\"moneyMax\":96116878.12379853,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"46.1.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":32.878000000000036,\"minDifficulty\":10,\"moneyAvailable\":418955.52625050367,\"moneyMax\":576701268.7427912,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"88.3.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":22.5,\"hackDifficulty\":29.204000000000015,\"minDifficulty\":8,\"moneyAvailable\":801946.1814864073,\"moneyMax\":240292195.30949634,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":265.6099999999935,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":254.0099999999941,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"40.0.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":194426.92824400926,\"moneyMax\":1617947808.5351787,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":200,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"80.4.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64.5,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":294115.75563150045,\"moneyMax\":1093022755.6708958,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":233,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"61.9.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":47.97399999999999,\"minDifficulty\":15,\"moneyAvailable\":978052.182982734,\"moneyMax\":480584390.6189927,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"35.1.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":72,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":245098039.21568626,\"moneyMax\":6007304882.737409,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":501,\"serverGrowth\":43,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":446.4099999999832,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":115,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":262.40999999999366,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":255.00999999999405,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":1,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"49.5.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":882352941.1764705,\"moneyMax\":21626297577.85467,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"74.9.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":441176470.58823526,\"moneyMax\":10813148788.927336,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":796,\"serverGrowth\":58,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"46.4.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":512,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"63.1.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"computek\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":351,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":36,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"52.7.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":207,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":36,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"78.8.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\".\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":542,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"2.5.1.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":53,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"72.0.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"11.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3060,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"90.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":true,\"ip\":\"54.1.3.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"omnitek\\\"]\",\"title\":\"weaken.js omnitek\",\"threads\":1020,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"weaken.js univ-energy\",\"threads\":1184,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":1143,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"omnia\\\"]\",\"title\":\"weaken.js omnia\",\"threads\":1122,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"unitalife\\\"]\",\"title\":\"weaken.js unitalife\",\"threads\":1245,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"icarus\\\"]\",\"title\":\"weaken.js icarus\",\"threads\":1082,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"weaken.js global-pharm\",\"threads\":1265,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"applied-energetics\\\"]\",\"title\":\"weaken.js applied-energetics\",\"threads\":1245,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"microdyne\\\"]\",\"title\":\"weaken.js microdyne\",\"threads\":1265,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"vitalife\\\"]\",\"title\":\"weaken.js vitalife\",\"threads\":1184,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":536,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":284,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1960.6100000003069,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":62,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1557.8100000002164,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":159,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000044,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":41,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3834.2099999987163,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"deltaone\\\"]\",\"title\":\"weaken.js deltaone\",\"threads\":105,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1557.8100000002164,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"deltaone\\\"]\",\"title\":\"weaken.js deltaone\",\"threads\":348,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000044,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"deltaone\\\"]\",\"title\":\"weaken.js deltaone\",\"threads\":792,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":448.4099999999831,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.60999999998404,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":111,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.40999999998417,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":421.00999999998464,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":393.6099999999862,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":139,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":385.2099999999867,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":269.80999999999324,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":388,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":190.40999999999772,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"weaken.js rho-construction\",\"threads\":54,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"weaken.js kuai-gong\",\"threads\":931,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000044,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"catalyst\\\"]\",\"title\":\"weaken.js catalyst\",\"threads\":52,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.81000000000044,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"weaken.js zeus-med\",\"threads\":65,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.81000000000043,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"weaken.js zeus-med\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.61000000000041,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"weaken.js zeus-med\",\"threads\":89,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.61000000000038,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"weaken.js zeus-med\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"hack.js sigma-cosmetics\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"hack.js sigma-cosmetics\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":552,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":301,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000005,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":128,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":90,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.610000000000003,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":58,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":355,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":1105,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"lauren\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"foodnstuff\\\"]\",\"title\":\"hack.js foodnstuff\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"lauren\",\"scriptKey\":\"hack.js*[\\\"foodnstuff\\\"]\",\"title\":\"hack.js foodnstuff\",\"threads\":1,\"temporary\":false}}]}},\"lauren-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-0\",\"httpPortOpen\":true,\"ip\":\"80.3.7.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"defcomm\\\"]\",\"title\":\"weaken.js defcomm\",\"threads\":546,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"deltaone\\\"]\",\"title\":\"weaken.js deltaone\",\"threads\":1245,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"zeus-med\\\"]\",\"title\":\"weaken.js zeus-med\",\"threads\":1306,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"aerocorp\\\"]\",\"title\":\"weaken.js aerocorp\",\"threads\":1204,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":380,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":193.40999999999755,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":149,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":190.40999999999772,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":737,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.21000000000053,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":381.0099999999869,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"rho-construction\\\"]\",\"title\":\"grow.js rho-construction\",\"threads\":722,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"weaken.js rho-construction\",\"threads\":54,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"catalyst\\\"]\",\"title\":\"weaken.js catalyst\",\"threads\":49,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":193.40999999999755,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"catalyst\\\"]\",\"title\":\"weaken.js catalyst\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"zb-institute\\\"]\",\"title\":\"weaken.js zb-institute\",\"threads\":1092,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"omnitek\\\"]\",\"title\":\"weaken.js omnitek\",\"threads\":1020,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"weaken.js lexo-corp\",\"threads\":1306,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"univ-energy\\\"]\",\"title\":\"weaken.js univ-energy\",\"threads\":1184,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"helios\\\"]\",\"title\":\"weaken.js helios\",\"threads\":1143,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"solaris\\\"]\",\"title\":\"weaken.js solaris\",\"threads\":1286,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"omnia\\\"]\",\"title\":\"weaken.js omnia\",\"threads\":1122,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"unitalife\\\"]\",\"title\":\"weaken.js unitalife\",\"threads\":1245,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"icarus\\\"]\",\"title\":\"weaken.js icarus\",\"threads\":545,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":190.40999999999772,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"titan-labs\\\"]\",\"title\":\"weaken.js titan-labs\",\"threads\":881,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.21000000000053,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"titan-labs\\\"]\",\"title\":\"weaken.js titan-labs\",\"threads\":384,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":75.21000000000053,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"weaken.js kuai-gong\",\"threads\":68,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"weaken.js kuai-gong\",\"threads\":62,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"weaken.js*[\\\"blade\\\"]\",\"title\":\"weaken.js blade\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.810000000000002,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"scriptKey\":\"grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"grow.js foodnstuff\",\"threads\":962,\"temporary\":false}}]}},\"lauren-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-1\",\"httpPortOpen\":true,\"ip\":\"78.2.5.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-1\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"weaken.js*[\\\"galactic-cyber\\\"]\",\"title\":\"weaken.js galactic-cyber\",\"threads\":926,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"weaken.js*[\\\"titan-labs\\\"]\",\"title\":\"weaken.js titan-labs\",\"threads\":1265,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"scriptKey\":\"weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"weaken.js kuai-gong\",\"threads\":149,\"temporary\":false}}]}},\"lauren-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-2\",\"httpPortOpen\":true,\"ip\":\"82.8.3.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-2\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"scriptKey\":\"weaken.js*[\\\"kuai-gong\\\"]\",\"title\":\"weaken.js kuai-gong\",\"threads\":912,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"scriptKey\":\"weaken.js*[\\\"blade\\\"]\",\"title\":\"weaken.js blade\",\"threads\":1082,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"scriptKey\":\"weaken.js*[\\\"infocomm\\\"]\",\"title\":\"weaken.js infocomm\",\"threads\":346,\"temporary\":false}}]}},\"lauren-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-3\",\"httpPortOpen\":true,\"ip\":\"90.3.4.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-3\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"scriptKey\":\"weaken.js*[\\\"infocomm\\\"]\",\"title\":\"weaken.js infocomm\",\"threads\":585,\"temporary\":false}}]}},\"lauren-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-4\",\"httpPortOpen\":true,\"ip\":\"85.2.0.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-4\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"scriptKey\":\"weaken.js*[\\\"infocomm\\\"]\",\"title\":\"weaken.js infocomm\",\"threads\":292,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":337.4099999999894,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"scriptKey\":\"weaken.js*[\\\"icarus\\\"]\",\"title\":\"weaken.js icarus\",\"threads\":293,\"temporary\":false}}]}},\"lauren-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-5\",\"httpPortOpen\":true,\"ip\":\"17.7.6.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-5\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"scriptKey\":\"weaken.js*[\\\"infocomm\\\"]\",\"title\":\"weaken.js infocomm\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":291,\"temporary\":false}}]}},\"lauren-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-6\",\"httpPortOpen\":true,\"ip\":\"87.9.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-6\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":146,\"temporary\":false}}]}},\"lauren-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-7\",\"httpPortOpen\":true,\"ip\":\"64.7.6.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-7\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-7\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":146,\"temporary\":false}}]}},\"lauren-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-8\",\"httpPortOpen\":true,\"ip\":\"96.1.3.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-8\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-8\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":146,\"temporary\":false}}]}},\"lauren-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-9\",\"httpPortOpen\":true,\"ip\":\"80.7.2.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-9\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-9\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":146,\"temporary\":false}}]}},\"lauren-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-10\",\"httpPortOpen\":true,\"ip\":\"57.6.4.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-10\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":146,\"temporary\":false}}]}},\"lauren-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-11\",\"httpPortOpen\":true,\"ip\":\"90.4.5.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-11\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":146,\"temporary\":false}}]}},\"lauren-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-12\",\"httpPortOpen\":true,\"ip\":\"99.7.7.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-12\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"scriptKey\":\"weaken.js*[\\\"taiyang-digital\\\"]\",\"title\":\"weaken.js taiyang-digital\",\"threads\":139,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":7,\"temporary\":false}}]}},\"lauren-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-13\",\"httpPortOpen\":true,\"ip\":\"7.1.1.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-13\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-13\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-14\",\"httpPortOpen\":true,\"ip\":\"59.2.5.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-14\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-14\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-15\",\"httpPortOpen\":true,\"ip\":\"94.8.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-15\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-15\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-15\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-16\",\"httpPortOpen\":true,\"ip\":\"78.3.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-16\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-16\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-16\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-17\",\"httpPortOpen\":true,\"ip\":\"83.8.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-17\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-17\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-18\",\"httpPortOpen\":true,\"ip\":\"53.2.2.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-18\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-18\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-18\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-19\",\"httpPortOpen\":true,\"ip\":\"94.0.1.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-19\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-19\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":146,\"temporary\":false}}]}},\"lauren-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-20\",\"httpPortOpen\":true,\"ip\":\"1.0.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-20\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-20\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"scriptKey\":\"weaken.js*[\\\"stormtech\\\"]\",\"title\":\"weaken.js stormtech\",\"threads\":114,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"scriptKey\":\"weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"weaken.js fulcrumassets\",\"threads\":32,\"temporary\":false}}]}},\"lauren-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-21\",\"httpPortOpen\":true,\"ip\":\"70.5.8.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-21\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-21\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"scriptKey\":\"weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"weaken.js fulcrumassets\",\"threads\":146,\"temporary\":false}}]}},\"lauren-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-22\",\"httpPortOpen\":true,\"ip\":\"53.1.5.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-22\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-22\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-22\",\"scriptKey\":\"weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"weaken.js fulcrumassets\",\"threads\":146,\"temporary\":false}}]}},\"lauren-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-23\",\"httpPortOpen\":true,\"ip\":\"5.6.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Grows a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.grow(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"grow.js\",\"server\":\"lauren-23\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Weakens a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.weaken(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"weaken.js\",\"server\":\"lauren-23\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Hacks a given server.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  try {\\n    await ns.hack(ns.args[0], { stock: true });\\n  } catch (_) {\\n    return;\\n  }\\n}\\n\\nexport const autocomplete = data => data.servers;\\n\",\"filename\":\"hack.js\",\"server\":\"lauren-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4749.209999997883,\"ramUsage\":1.75,\"server\":\"lauren-23\",\"scriptKey\":\"weaken.js*[\\\"fulcrumassets\\\"]\",\"title\":\"weaken.js fulcrumassets\",\"threads\":73,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":28.4651,\"playerReputation\":253957.64307297627}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.4681,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":21.4917,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0967,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":17.6321,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0048,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":2453.7083782425475}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":16.8632,\"discovery\":\"known\",\"playerReputation\":14514.637360575909}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":102.459,\"discovery\":\"known\",\"playerReputation\":86084.40387290504}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":33.4951,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":38.7698,\"discovery\":\"known\",\"playerReputation\":28824.80800885561}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":7.0765,\"discovery\":\"known\",\"playerReputation\":9316.277666099946}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":40.4737,\"discovery\":\"known\",\"playerReputation\":30592.19101990126}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":89.3455,\"discovery\":\"known\",\"playerReputation\":81659.35613940653}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":126.1985,\"discovery\":\"known\",\"playerReputation\":91930.34306273796}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":67.6599,\"discovery\":\"known\",\"playerReputation\":80171.00091970572}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":62.4086,\"discovery\":\"known\",\"playerReputation\":32613.64132784958}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":37995.02540338304,\"lastPrice\":38145.41902710731,\"playerShares\":146,\"playerAvgPx\":38620.26370649907,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":19.87187278100013,\"otlkMagForecast\":28.559902747278016,\"cap\":524529853,\"spreadPerc\":0.3,\"shareTxForMovement\":73294,\"shareTxUntilMovement\":18825,\"totalShares\":114100000,\"maxShares\":22800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":36583.10755451143,\"lastPrice\":36451.648289824414,\"playerShares\":513,\"playerAvgPx\":37430.025842077164,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":18.092869953872192,\"otlkMagForecast\":30.058178406590528,\"cap\":569856532,\"spreadPerc\":0.1,\"shareTxForMovement\":83393,\"shareTxUntilMovement\":64103,\"totalShares\":94200000,\"maxShares\":18800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":14125.580407204638,\"lastPrice\":14037.910411365503,\"playerShares\":4822,\"playerAvgPx\":15397.116673411447,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":18.570366741495338,\"otlkMagForecast\":33.855218224789326,\"cap\":144266589,\"spreadPerc\":0.5,\"shareTxForMovement\":75140,\"shareTxUntilMovement\":4058,\"totalShares\":122100000,\"maxShares\":24400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":68771.23427865382,\"lastPrice\":69224.92328229533,\"playerShares\":74,\"playerAvgPx\":71010.2834475681,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":11.405555337528714,\"otlkMagForecast\":40.2044297678778,\"cap\":39023156,\"spreadPerc\":0.1,\"shareTxForMovement\":46085,\"shareTxUntilMovement\":31682,\"totalShares\":73500000,\"maxShares\":14700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":66212.75008331174,\"lastPrice\":65830.57553732033,\"playerShares\":31,\"playerAvgPx\":66382.92067092106,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":13.78426242040665,\"otlkMagForecast\":37.85031670122681,\"cap\":67550157,\"spreadPerc\":0.6,\"shareTxForMovement\":41774,\"shareTxUntilMovement\":30377,\"totalShares\":46200000,\"maxShares\":9200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":94758.76988471378,\"lastPrice\":95642.2879832715,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":23.230302116167366,\"otlkMagForecast\":27.993582876266167,\"cap\":537128219,\"spreadPerc\":0.9,\"shareTxForMovement\":41433,\"shareTxUntilMovement\":26605,\"totalShares\":36300000,\"maxShares\":7300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":25436.515687679672,\"lastPrice\":25254.360976991193,\"playerShares\":285,\"playerAvgPx\":26047.312873220555,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":9.75644661553958,\"otlkMagForecast\":59.183586334625176,\"cap\":227411374,\"spreadPerc\":0.4,\"shareTxForMovement\":30481,\"shareTxUntilMovement\":17523,\"totalShares\":86600000,\"maxShares\":17300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":6314.824565634051,\"lastPrice\":6247.234465784278,\"playerShares\":721,\"playerAvgPx\":6588.192149301159,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.23,\"b\":true,\"otlkMag\":9.929722665664764,\"otlkMagForecast\":59.616584577826046,\"cap\":260702760,\"spreadPerc\":1,\"shareTxForMovement\":72628,\"shareTxUntilMovement\":57961,\"totalShares\":66200000,\"maxShares\":13200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":25486.98280685043,\"lastPrice\":25682.02467558866,\"playerShares\":1,\"playerAvgPx\":26400.161565355957,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":7.076385870254885,\"otlkMagForecast\":57.16352300395657,\"cap\":517298376,\"spreadPerc\":0.2,\"shareTxForMovement\":79393,\"shareTxUntilMovement\":49459,\"totalShares\":48400000,\"maxShares\":9700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":24564.557220173225,\"lastPrice\":24420.636951623594,\"playerShares\":11,\"playerAvgPx\":23681.252715256738,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":7.321453443271289,\"otlkMagForecast\":58.00737983814678,\"cap\":93403346,\"spreadPerc\":0.5,\"shareTxForMovement\":47826,\"shareTxUntilMovement\":25715,\"totalShares\":77000000,\"maxShares\":15400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":43065.86126893592,\"lastPrice\":42832.27195475586,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":8.671914567850834,\"otlkMagForecast\":40.55529818013702,\"cap\":67609478,\"spreadPerc\":0.2,\"shareTxForMovement\":64804,\"shareTxUntilMovement\":54978,\"totalShares\":47500000,\"maxShares\":9500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":9249.751348739232,\"lastPrice\":9191.539562214431,\"playerShares\":242,\"playerAvgPx\":9266.419329470853,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":5.657029371578757,\"otlkMagForecast\":56.97539870094492,\"cap\":219414681,\"spreadPerc\":1,\"shareTxForMovement\":48145,\"shareTxUntilMovement\":14994,\"totalShares\":81500000,\"maxShares\":16300000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":9607.887165851198,\"lastPrice\":9557.44621279723,\"playerShares\":1,\"playerAvgPx\":9778.66175305804,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":4.517006359181672,\"otlkMagForecast\":44.96677496168952,\"cap\":257800073,\"spreadPerc\":0.3,\"shareTxForMovement\":87540,\"shareTxUntilMovement\":84764,\"totalShares\":65300000,\"maxShares\":13100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":56424.80279381315,\"lastPrice\":56153.14202695091,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":8.305460058624421,\"otlkMagForecast\":59.0876374136865,\"cap\":105996246,\"spreadPerc\":0.4,\"shareTxForMovement\":51102,\"shareTxUntilMovement\":43147,\"totalShares\":31100000,\"maxShares\":6200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15538.237372473106,\"lastPrice\":15622.976426596522,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":8.14911445407817,\"otlkMagForecast\":41.3996037767065,\"cap\":14985805,\"spreadPerc\":0.6,\"shareTxForMovement\":95750,\"shareTxUntilMovement\":38506,\"totalShares\":43600000,\"maxShares\":8700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13956.075085389119,\"lastPrice\":13873.09527230258,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":6.242692210657398,\"otlkMagForecast\":55.38589878426017,\"cap\":27127962,\"spreadPerc\":1,\"shareTxForMovement\":50856,\"shareTxUntilMovement\":27380,\"totalShares\":99500000,\"maxShares\":19900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":41077.152143702246,\"lastPrice\":41358.980767558474,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":8.870809673877323,\"otlkMagForecast\":58.65683992668981,\"cap\":387445819,\"spreadPerc\":1.1,\"shareTxForMovement\":74233,\"shareTxUntilMovement\":68997,\"totalShares\":27000000,\"maxShares\":5400000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":162186.71723381375,\"lastPrice\":163099.74803391894,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":13.430240344128233,\"otlkMagForecast\":38.75100047749492,\"cap\":585399790,\"spreadPerc\":0.8,\"shareTxForMovement\":83783,\"shareTxUntilMovement\":83783,\"totalShares\":28100000,\"maxShares\":5600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":20336.799349609875,\"lastPrice\":20198.220205057154,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":9.17101998657719,\"otlkMagForecast\":58.81505219828656,\"cap\":48906822,\"spreadPerc\":1,\"shareTxForMovement\":123297,\"shareTxUntilMovement\":112002,\"totalShares\":32700000,\"maxShares\":6500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":41674.052535076546,\"lastPrice\":40791.39181194192,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.46,\"b\":true,\"otlkMag\":18.859851524273537,\"otlkMagForecast\":68.80639875696605,\"cap\":108624243,\"spreadPerc\":0.6,\"shareTxForMovement\":45995,\"shareTxUntilMovement\":45995,\"totalShares\":89400000,\"maxShares\":17900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5812.550350809823,\"lastPrice\":5748.335423742243,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":11.108333854770057,\"otlkMagForecast\":59.417846471797915,\"cap\":70518796,\"spreadPerc\":0.7,\"shareTxForMovement\":107259,\"shareTxUntilMovement\":86972,\"totalShares\":37800000,\"maxShares\":7600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2951.6739790166107,\"lastPrice\":2936.6917467002095,\"playerShares\":2245,\"playerAvgPx\":2973.7826742982465,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":0.967652303230241,\"otlkMagForecast\":53.05037246060943,\"cap\":52502550,\"spreadPerc\":0.4,\"shareTxForMovement\":112771,\"shareTxUntilMovement\":2749,\"totalShares\":53000000,\"maxShares\":10600000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":16890.93354703871,\"lastPrice\":17150.938650642358,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":true,\"otlkMag\":6.075406351563829,\"otlkMagForecast\":49.42415582632327,\"cap\":17838540,\"spreadPerc\":1.3,\"shareTxForMovement\":35297,\"shareTxUntilMovement\":20035,\"totalShares\":33100000,\"maxShares\":6600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5902.510980589553,\"lastPrice\":5989.215841440918,\"playerShares\":332,\"playerAvgPx\":6026.081921077005,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.67,\"b\":false,\"otlkMag\":5.700828515357738,\"otlkMagForecast\":43.54200618121025,\"cap\":130934496,\"spreadPerc\":0.9,\"shareTxForMovement\":36184,\"shareTxUntilMovement\":5549,\"totalShares\":34800000,\"maxShares\":7000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3286.9245215764795,\"lastPrice\":3263.386361215443,\"playerShares\":5305,\"playerAvgPx\":3336.3998425453,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":5.807127553083316,\"otlkMagForecast\":45.81694181814911,\"cap\":82974090,\"spreadPerc\":1.2,\"shareTxForMovement\":117260,\"shareTxUntilMovement\":11399,\"totalShares\":43500000,\"maxShares\":8700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":15874.625457605276,\"lastPrice\":16180.425663187647,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.19,\"b\":true,\"otlkMag\":8.618960634682605,\"otlkMagForecast\":57.271940529936465,\"cap\":105973029,\"spreadPerc\":2,\"shareTxForMovement\":52897,\"shareTxUntilMovement\":39360,\"totalShares\":11700000,\"maxShares\":2300000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2283.2646361284055,\"lastPrice\":2302.5451077952453,\"playerShares\":22309,\"playerAvgPx\":2474.601106839594,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":false,\"otlkMag\":5.84025730038865,\"otlkMagForecast\":43.903018893954794,\"cap\":38288524,\"spreadPerc\":1.2,\"shareTxForMovement\":37984,\"shareTxUntilMovement\":19722,\"totalShares\":22600000,\"maxShares\":4500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3917.6602702133664,\"lastPrice\":3893.685794778904,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.199136852103791,\"otlkMagForecast\":43.66133618535312,\"cap\":47271140,\"spreadPerc\":0.8,\"shareTxForMovement\":160029,\"shareTxUntilMovement\":77136,\"totalShares\":10600000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":855.4322424419743,\"lastPrice\":842.3910713204452,\"playerShares\":18780,\"playerAvgPx\":921.2825245788983,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":false,\"otlkMag\":5.66426128072096,\"otlkMagForecast\":45.989730830119086,\"cap\":9209795,\"spreadPerc\":1.1,\"shareTxForMovement\":61454,\"shareTxUntilMovement\":15520,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":841.4568075141945,\"lastPrice\":864.1795305278932,\"playerShares\":2526,\"playerAvgPx\":947.0756485848756,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.07,\"b\":false,\"otlkMag\":7.191798079591152,\"otlkMagForecast\":40.453215859336716,\"cap\":6722447,\"spreadPerc\":1.1,\"shareTxForMovement\":36380,\"shareTxUntilMovement\":7543,\"totalShares\":155000000,\"maxShares\":31000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1592.9179225835244,\"lastPrice\":1613.935121206174,\"playerShares\":1806,\"playerAvgPx\":1667.5493798689874,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.5,\"b\":false,\"otlkMag\":9.46478075293699,\"otlkMagForecast\":41.27591506393932,\"cap\":15386998,\"spreadPerc\":1.2,\"shareTxForMovement\":40948,\"shareTxUntilMovement\":1147,\"totalShares\":126100000,\"maxShares\":25200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":11186.625942113973,\"lastPrice\":11117.196479994394,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.488209434570517,\"otlkMagForecast\":56.58986335522312,\"cap\":367053711,\"spreadPerc\":0.3,\"shareTxForMovement\":148074,\"shareTxUntilMovement\":132355,\"totalShares\":20500000,\"maxShares\":4100000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":12871.142014987563,\"lastPrice\":12940.203686896039,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":9.718784648965668,\"otlkMagForecast\":60.16774244140956,\"cap\":439579423,\"spreadPerc\":1,\"shareTxForMovement\":117739,\"shareTxUntilMovement\":56198,\"totalShares\":20700000,\"maxShares\":4100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":100617,\"lastUpdate\":1705694621223,\"ticksUntilCycle\":57}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"init.js\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":true,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"EnableHistorySearch\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#EA9062\",\"primary\":\"#DD7B4A\",\"primarydark\":\"#D3591C\",\"successlight\":\"#6ACF6A\",\"success\":\"#43BF43\",\"successdark\":\"#3E913E\",\"errorlight\":\"#C15757\",\"error\":\"#B34141\",\"errordark\":\"#752525\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E6E69D\",\"warning\":\"#DADA56\",\"warningdark\":\"#A1A106\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#AD84CF\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#76C6B7\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Operator Mono, agave Nerd Font mono, monospace\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1705677049508","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}