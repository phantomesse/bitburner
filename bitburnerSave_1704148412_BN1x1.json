{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":14,\"max\":14},\"skills\":{\"hacking\":186,\"strength\":47,\"defense\":41,\"dexterity\":92,\"agility\":92,\"charisma\":79,\"intelligence\":0},\"exp\":{\"hacking\":177044.17197844308,\"strength\":1731.4000000001622,\"defense\":1378.200000000019,\"dexterity\":8860.449999999913,\"agility\":8860.449999999913,\"charisma\":5636.708999996752,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Slum Snakes\",\"Netburners\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"CyberSec\",\"NiteSec\"]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":7861.122182291017,\"onlineTimeSeconds\":69049.79999981748,\"ram\":64,\"totalMoneyGenerated\":242613634.90323505,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":6987.664162036459,\"onlineTimeSeconds\":67697.99999981257,\"ram\":64,\"totalMoneyGenerated\":90392267.24814841,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":9,\"level\":200,\"moneyGainRatePerSecond\":6114.206141781902,\"onlineTimeSeconds\":66879.7999998096,\"ram\":64,\"totalMoneyGenerated\":36103551.0494325,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":183,\"moneyGainRatePerSecond\":536.530463048379,\"onlineTimeSeconds\":66465.99999980933,\"ram\":16,\"totalMoneyGenerated\":16785943.574648544,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":179,\"moneyGainRatePerSecond\":524.8030212331139,\"onlineTimeSeconds\":65487.399999811125,\"ram\":16,\"totalMoneyGenerated\":16156611.054121824,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":179,\"moneyGainRatePerSecond\":524.8030212331139,\"onlineTimeSeconds\":64346.19999980941,\"ram\":16,\"totalMoneyGenerated\":15360999.437217943,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":179,\"moneyGainRatePerSecond\":524.8030212331139,\"onlineTimeSeconds\":64336.99999980937,\"ram\":16,\"totalMoneyGenerated\":15257730.354662653,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":179,\"moneyGainRatePerSecond\":524.8030212331139,\"onlineTimeSeconds\":64326.99999980934,\"ram\":16,\"totalMoneyGenerated\":15198672.471442848,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":64148.19999980868,\"ram\":16,\"totalMoneyGenerated\":15140007.107204223,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":60146.19999984901,\"ram\":16,\"totalMoneyGenerated\":14724522.856650433,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":56760.59999984945,\"ram\":16,\"totalMoneyGenerated\":14186033.1283655,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":53993.599999900485,\"ram\":16,\"totalMoneyGenerated\":13654952.669284454,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":51183.59999992828,\"ram\":16,\"totalMoneyGenerated\":13104078.00572684,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":46153.79999993032,\"ram\":16,\"totalMoneyGenerated\":11293392.406891232,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":40608.79999994948,\"ram\":16,\"totalMoneyGenerated\":10257487.101735204,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":33361.80000002767,\"ram\":16,\"totalMoneyGenerated\":9400551.495141855,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":178,\"moneyGainRatePerSecond\":521.8711607792976,\"onlineTimeSeconds\":24232.600000021812,\"ram\":16,\"totalMoneyGenerated\":7496113.717782677,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":176,\"moneyGainRatePerSecond\":335.8817253703753,\"onlineTimeSeconds\":16917.400000022997,\"ram\":8,\"totalMoneyGenerated\":4440872.385302133,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":176,\"moneyGainRatePerSecond\":335.8817253703753,\"onlineTimeSeconds\":11028.000000000271,\"ram\":8,\"totalMoneyGenerated\":3147394.0592132276,\"name\":\"hacknet-node-18\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"FoodNStuff\":\"Employee\",\"Joe's Guns\":\"Employee\",\"Alpha Enterprises\":\"Software Consultant\",\"Central Intelligence Agency\":\"Software Engineering Intern\"},\"karma\":-185.91499999999797,\"numPeopleKilled\":0,\"location\":\"FoodNStuff\",\"money\":1445887.2255506504,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-436080,\"codingcontract\":0,\"corporation\":0,\"crime\":84138000,\"gang\":0,\"hacking\":42189170.76459789,\"hacknet\":564714815.0290787,\"hacknet_expenses\":-677437546.1494302,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1444774.2255506807,\"work\":8949847.49999981,\"servers\":-14723432.915763203,\"other\":-5200000,\"augmentations\":-750000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-436080,\"codingcontract\":0,\"corporation\":0,\"crime\":84138000,\"gang\":0,\"hacking\":42189170.76459789,\"hacknet\":564714815.0290787,\"hacknet_expenses\":-677437546.1494302,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1444774.2255506807,\"work\":8949847.49999981,\"servers\":-14723432.915763203,\"other\":-5200000,\"augmentations\":-750000}},\"playtimeSinceLastAug\":78287200,\"playtimeSinceLastBitnode\":78287200,\"lastAugReset\":-1,\"lastNodeReset\":-1,\"purchasedServers\":[\"lauren\"],\"scriptProdSinceLastAug\":42121950.16280946,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1704070135213},{\"ID\":\"FROZE\",\"unlockedOn\":1704070135222},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1704079402616},{\"ID\":\"WORKOUT\",\"unlockedOn\":1704081997256},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1704085310642},{\"ID\":\"TOR\",\"unlockedOn\":1704088636233},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1704091709650},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1704125258633},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1704144228234}],\"terminalCommandHistory\":[\"run server-stats.js hackingLevel\",\"run server-stats.js\",\"run server-stats.js availablemoney\",\"run server-stats.js hackinglevel\",\"clear\",\"run server-stats.js hackinglevel\",\"ls\",\"clear\",\"ls\",\"rm server-stats.js \",\"clear\",\"ls\",\"ls 0a\",\"ls -a\",\"ls dir\",\"ls -g\",\"clear\",\"ls -l\",\"rm stats.js \",\"clear\",\"ls\",\"ls -l\",\"tor\",\"connect darkweb \",\"buy -l\",\"buy relaySMTP.exe \",\"clear\",\"home\",\"run hack.js \",\"clear\",\"ls\",\"run stats-hacking.js \",\"killall\",\"run stats-hacking.js \",\"run stats-hacking.js availablemoney\",\"run stats-hacking.js currentsecurity\",\"mem stats-hacking.js \",\"run hack.js \",\"clear\",\"ls\",\"killall\",\"run manage-hacknet.js \",\"run hack.js \",\"clear\",\"ls\",\" ldzf\",\"lz\",\"clear\",\"ls\",\"kill manage-hacknet.js \"],\"lastUpdate\":1704148411409,\"lastSave\":1704148351614,\"totalPlaytime\":78287200,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":1771,\"crimeType\":\"Mug\",\"unitCompleted\":2200}},\"focus\":false,\"entropy\":0,\"identifier\":\"113891341353c3\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"38.4.6.6\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/** One second in milliseconds. */\\nexport const ONE_SECOND = 1000;\\n\\n/** One minute in milliseconds. */\\nexport const ONE_MINUTE = ONE_SECOND * 60;\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {string} e.g. \\\"$123.45\\\"\\n */\\nexport function formatMoney(ns, amount) {\\n  return '$' + ns.formatNumber(amount, 2);\\n}\\n\\n/**\\n * @param {import(\\\"../NetscriptDefinitions\\\").ReactNode} content\\n * @param {[Style]} style\\n * @returns {import(\\\"../NetscriptDefinitions\\\").ReactElement}\\n */\\nexport function createReactElement(content, style) {\\n  return React.createElement('div', { style: style ?? {} }, content);\\n}\\n\\n/**\\n * @typedef Style\\n * @property {[string]} background\\n * @property {[string]} color\\n * @property {['flex'|'grid']} display\\n * @property {['left'|'center'|'right']} textAlign\\n */\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames, ONE_MINUTE } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  // Write all hostnames to servers file.\\n  ns.read('');\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      runProgram(() => ns.brutessh(hostname));\\n      runProgram(() => ns.nuke(hostname));\\n\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hack-server.js to the new server and have it hack itself.\\n        ns.scp('hack-server.js', hostname);\\n        const availableRam =\\n          ns.getServerMaxRam(hostname) - ns.getServerUsedRam(hostname);\\n        const hackServerRam = ns.getScriptRam('hack-server.js', hostname);\\n        const threads = Math.floor(availableRam / hackServerRam);\\n        if (threads > 0) ns.exec('hack-server.js', hostname, threads, hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      }\\n    }\\n\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n\\n    await ns.sleep(ONE_MINUTE);\\n  }\\n}\\n\\n/** @param {function()} programFunction */\\nfunction runProgram(programFunction) {\\n  try {\\n    programFunction();\\n  } catch (_) {}\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"home\"}}],[\"manage-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND } from 'utils';\\n\\n/**\\n * Manages purchasing and upgrading Hacknet nodes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    // Attempt to purchase a new node.\\n    if (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n      ns.hacknet.purchaseNode();\\n    }\\n\\n    const nodeCount = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodeCount; i++) {\\n      // Upgrade level.\\n      upgrade(() => ns.hacknet.upgradeLevel(i));\\n\\n      // Upgrade RAM.\\n      upgrade(() => ns.hacknet.upgradeRam(i));\\n\\n      // Upgrade cores.\\n      upgrade(() => ns.hacknet.upgradeCore(i));\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Upgrades using the given upgrade function until it is no longer possible.\\n *\\n * @param {function():boolean} upgradeFunction\\n */\\nfunction upgrade(upgradeFunction) {\\n  let canUpgrade;\\n  do {\\n    canUpgrade = upgradeFunction();\\n  } while (canUpgrade);\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"server\":\"home\"}}],[\"manage-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_MINUTE } from 'utils';\\n\\n/**\\n * Manages purchasing and upgrading servers.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    await ns.sleep(ONE_MINUTE);\\n  }\\n}\\n\",\"filename\":\"manage-servers.js\",\"server\":\"home\"}}],[\"stats-hacking.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, getAllHostnames, createReactElement } from 'utils';\\n\\n/** @type {Style} */ const CELL_STYLING = {\\n  padding: '2px 8px',\\n  borderWidth: '.5px',\\n  borderStyle: 'solid',\\n};\\n\\n/**\\n * @typedef Column\\n * @property {string} name\\n * @property {import('utils').Style} style\\n * @property {'⏶'|'⏷'} sortSymbol\\n * @property {function(NS, string string):number} sortFunction\\n */\\n\\n/** @type {Column} */ const HOSTNAME_COLUMN = {\\n  name: 'Hostname',\\n  style: {},\\n  sortSymbol: '⏷',\\n  sortFunction: (_, hostname1, hostname2) => hostname1.localeCompare(hostname2),\\n};\\n\\n/** @type {Column} */ const AVAILABLE_MONEY_COLUMN = {\\n  name: 'Available Money',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏷',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerMoneyAvailable(hostname2) -\\n      ns.getServerMoneyAvailable(hostname1)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const MAX_MONEY_COLUMN = {\\n  name: 'Max Money',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏷',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return ns.getServerMaxMoney(hostname2) - ns.getServerMaxMoney(hostname1);\\n  },\\n};\\n\\n/** @type {Column} */ const CURRENT_SECURITY_COLUMN = {\\n  name: 'Current Security',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerSecurityLevel(hostname1) -\\n      ns.getServerSecurityLevel(hostname2)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const MIN_SECURITY_COLUMN = {\\n  name: 'Min Security',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerMinSecurityLevel(hostname1) -\\n      ns.getServerMinSecurityLevel(hostname2)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const BASE_SECURITY_COLUMN = {\\n  name: 'Base Security',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerBaseSecurityLevel(hostname1) -\\n      ns.getServerBaseSecurityLevel(hostname2)\\n    );\\n  },\\n};\\n\\n/** @type {Column} */ const HACKING_LEVEL_COLUMN = {\\n  name: 'Hacking Level',\\n  style: { textAlign: 'right' },\\n  sortSymbol: '⏶',\\n  sortFunction: (ns, hostname1, hostname2) => {\\n    return (\\n      ns.getServerRequiredHackingLevel(hostname1) -\\n      ns.getServerRequiredHackingLevel(hostname2)\\n    );\\n  },\\n};\\n\\nconst COLUMNS = [\\n  HOSTNAME_COLUMN,\\n  AVAILABLE_MONEY_COLUMN,\\n  MAX_MONEY_COLUMN,\\n  CURRENT_SECURITY_COLUMN,\\n  MIN_SECURITY_COLUMN,\\n  BASE_SECURITY_COLUMN,\\n  HACKING_LEVEL_COLUMN,\\n];\\n\\n/**\\n * List out the stats of all servers.\\n *\\n * Add an argument without spaces for sorting by that column. For example, to\\n * sort by hacking level, run: `run server-stats.js hackinglevel`\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  let primaryColor = ns.ui.getTheme().primary.substring(1);\\n  if (primaryColor.length === 3) {\\n    const colors = primaryColor.split('');\\n    primaryColor =\\n      colors[0] + colors[0] + colors[1] + colors[1] + colors[2] + colors[2];\\n  }\\n  CELL_STYLING.borderColor = `#${primaryColor}33`;\\n\\n  const hostnames = getAllHostnames(ns);\\n\\n  // Sort hostnames.\\n  let sortByColumn = HOSTNAME_COLUMN;\\n  if (ns.args[0]) {\\n    const column = COLUMNS.find(\\n      column =>\\n        column.name.replaceAll(' ', '').toLowerCase() ===\\n        ns.args[0].toLowerCase()\\n    );\\n    if (column) sortByColumn = column;\\n  }\\n  hostnames.sort((hostname1, hostname2) =>\\n    sortByColumn.sortFunction(ns, hostname1, hostname2)\\n  );\\n\\n  const serverStats = hostnames.map(hostname => getServerStats(ns, hostname));\\n\\n  // Add in a row for the header.\\n  const cells = Object.keys(serverStats[0]).map(columnName => {\\n    const column = COLUMNS.find(column => column.name === columnName);\\n    return createReactElement(\\n      columnName + (column === sortByColumn ? ' ' + column.sortSymbol : ''),\\n      {\\n        ...column.style,\\n        ...CELL_STYLING,\\n        fontWeight: 'bold',\\n      }\\n    );\\n  });\\n\\n  // Add in a row for each server.\\n  for (const stats of serverStats) {\\n    cells.push(...Object.values(stats));\\n  }\\n\\n  ns.tprintRaw(\\n    React.createElement(\\n      'div',\\n      {\\n        style: {\\n          border: `.5px ${CELL_STYLING.borderColor} solid`,\\n          display: 'grid',\\n          gridTemplateColumns: Object.keys(serverStats[0])\\n            .map(_ => '1fr')\\n            .join(' '),\\n        },\\n      },\\n      ...cells\\n    )\\n  );\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} hostname\\n * @returns {Object.<string, import('../NetscriptDefinitions').ReactElement>} stats\\n */\\nfunction getServerStats(ns, hostname) {\\n  const stats = {};\\n\\n  /**\\n   * @param {Column} column\\n   * @param {import('../NetscriptDefinitions').ReactNode} content\\n   * @param {import('utils').Style} style additional styling\\n   */\\n  const addStat = (column, content, style) => {\\n    stats[column.name] = createReactElement(content, {\\n      ...CELL_STYLING,\\n      ...column.style,\\n    });\\n  };\\n\\n  addStat(HOSTNAME_COLUMN, hostname);\\n\\n  // Money stats.\\n  const maxMoneyAmount = ns.getServerMaxMoney(hostname);\\n  addStat(\\n    AVAILABLE_MONEY_COLUMN,\\n    maxMoneyAmount === 0\\n      ? '-'\\n      : formatMoney(ns, ns.getServerMoneyAvailable(hostname))\\n  );\\n  addStat(\\n    MAX_MONEY_COLUMN,\\n    maxMoneyAmount === 0 ? '-' : formatMoney(ns, maxMoneyAmount)\\n  );\\n\\n  // Security stats.\\n  addStat(\\n    CURRENT_SECURITY_COLUMN,\\n    ns.formatNumber(ns.getServerSecurityLevel(hostname), 2)\\n  );\\n  addStat(MIN_SECURITY_COLUMN, ns.getServerMinSecurityLevel(hostname));\\n  addStat(BASE_SECURITY_COLUMN, ns.getServerBaseSecurityLevel(hostname));\\n\\n  // Hacking stats.\\n  addStat(HACKING_LEVEL_COLUMN, ns.getServerRequiredHackingLevel(hostname));\\n\\n  return stats;\\n}\\n\",\"filename\":\"stats-hacking.js\",\"server\":\"home\"}}],[\"database/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Util functions for managing servers.txt\\n */\\n\\n/**\\n * @typedef Server\\n * @property {string} hostname\\n * @property {[boolean]} hasRootAccess\\n * @property {[boolean]} isHackable\\n */\\n\\nconst SERVERS_FILENAME = 'database/servers.txt';\\n\\n/**\\n * Updates any existing servers in the database and adds any new servers to the\\n * database.\\n *\\n * @param {NS} ns\\n * @param  {...Server} serversToUpdate\\n */\\nexport function updateServers(ns, ...serversToUpdate) {\\n  const databaseServers = readFile(ns);\\n\\n  for (const server of serversToUpdate) {\\n    databaseServers.find(\\n      databaseServer => databaseServer.hostname === server.hostname\\n    );\\n  }\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Server[]} servers in file\\n */\\nconst readFile = ns => JSON.parse(ns.read(SERVERS_FILENAME));\\n\\n/**\\n * @param {NS} ns\\n * @param {Server[]} servers\\n */\\nconst writeFile = (ns, servers) =>\\n  ns.write(SERVERS_FILENAME, JSON.stringify(servers), 'w');\\n\",\"filename\":\"database/servers.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"lauren\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.024,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":5.05,\"server\":\"home\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[115605.82119597898,29,1,28]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":192.22500000000014,\"onlineMoneyMade\":115605.82119597898,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"n00dles\\\"]\",\"title\":\"hack-server.js n00dles\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[7422.739449810433,2,39,3]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":264,\"onlineMoneyMade\":7422.739449810433,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"foodnstuff\\\"]\",\"title\":\"hack-server.js foodnstuff\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[10865.47473331166,3,32,3]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":228,\"onlineMoneyMade\":10865.47473331166,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"hack-server.js sigma-cosmetics\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[6758.87224947424,2,23,2]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":202.5,\"onlineMoneyMade\":6758.87224947424,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"joesguns\\\"]\",\"title\":\"hack-server.js joesguns\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[8928.867057535344,3,12,1]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120,\"onlineMoneyMade\":8928.867057535344,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"hack-server.js hong-fang-tea\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[8334.337143044451,3,9,1]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":99.375,\"onlineMoneyMade\":8334.337143044451,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"hack-server.js harakiri-sushi\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[70325.76891346958,4,0,0]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63,\"onlineMoneyMade\":70325.76891346958,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"iron-gym\\\"]\",\"title\":\"hack-server.js iron-gym\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lauren\"],\"dataMap\":{\"lauren\":[0,0,45,0]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":148.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"lauren\\\"]\",\"title\":\"hack-server.js lauren\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"home\"],\"dataMap\":{\"home\":[0,348,0,348]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1435.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":3032.4099999991454,\"ramUsage\":2.65,\"server\":\"home\",\"scriptKey\":\"hack-server.js*[\\\"home\\\"]\",\"title\":\"hack-server.js home\",\"threads\":12,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"2.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38046909193,\"moneyMax\":951172729825,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1119,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"6.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43099249022,\"moneyMax\":1077481225550,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1204,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"9.6.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":17914737220,\"moneyMax\":447868430500,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":935,\"serverGrowth\":80,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"25.8.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":34685604738,\"moneyMax\":867140118450,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1198,\"serverGrowth\":67,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"12.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31074296859,\"moneyMax\":776857421475,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1048,\"serverGrowth\":81,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-386067.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"QQQQQQbb5555555HH2222222aay888866nnnnnnnnnnaaVVVVYYJJJJMMMMMWWsshhrrrrrrrrrrC4xz66z\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"6.0.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":21682566107,\"moneyMax\":542064152675,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1058,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"79.4.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":14718704474,\"moneyMax\":367967611850,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":976,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"18.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":21490687098,\"moneyMax\":537267177450,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":921,\"serverGrowth\":80,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"8.4.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":22120539453,\"moneyMax\":553013486325,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1219,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"9.9.6.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1700288644,\"moneyMax\":42507216100,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1023,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"19.2.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1406,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"30.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1122745639,\"moneyMax\":28068640975,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1006,\"serverGrowth\":70,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"45.6.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":854675548,\"moneyMax\":21366888700,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":978,\"serverGrowth\":69,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"29.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":623109769,\"moneyMax\":15577744225,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":943,\"serverGrowth\":36,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"40.2.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":687586934,\"moneyMax\":17189673350,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":877,\"serverGrowth\":72,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"10.0.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":774447080,\"moneyMax\":19361177000,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":811,\"serverGrowth\":71,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"95.8.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":969644741,\"moneyMax\":24241118525,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":868,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"61.2.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1143159540,\"moneyMax\":28578988500,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":858,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"92.8.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":815632316,\"moneyMax\":20390807900,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":803,\"serverGrowth\":75,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"61.2.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":690365817,\"moneyMax\":17259145425,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":802,\"serverGrowth\":83,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"69.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":853804769,\"moneyMax\":21345119225,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":919,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"46.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":825794635,\"moneyMax\":20644865875,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":834,\"serverGrowth\":86,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"70.0.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1076422988,\"moneyMax\":26910574700,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":897,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"95.5.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":916457550,\"moneyMax\":22911438750,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":935,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"72.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":988435800,\"moneyMax\":24710895000,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":815,\"serverGrowth\":66,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"93.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":749820886,\"moneyMax\":18745522150,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":782,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"78.0.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":734326423,\"moneyMax\":18358160575,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":767,\"serverGrowth\":76,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"46.9.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1380875065,\"moneyMax\":34521876625,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":845,\"serverGrowth\":50,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655166-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,-5,4,4,5,-4,7,6,-9,4,4,4,-9,7,10,9,8,7,2,-7,-10,2,-7,1,9,7,-8,7,4,-7,-4,-10,9,8,7],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"86.4.0.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1572871061,\"moneyMax\":39321776525,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":782,\"serverGrowth\":81,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"12.9.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1248123766,\"moneyMax\":31203094150,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":796,\"serverGrowth\":72,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"40.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1370120344,\"moneyMax\":34253008600,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":841,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"12.4.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1075391724,\"moneyMax\":26884793100,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":816,\"serverGrowth\":73,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965946-JoesGuns.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100010110010011\",\"reward\":{\"type\":2,\"name\":\"Joe's Guns\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862174.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11000001000111111011011000000001\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"7.1.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":704559922,\"moneyMax\":17613998050,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":732,\"serverGrowth\":56,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"16.7.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":539249506,\"moneyMax\":13481237650,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":519,\"serverGrowth\":59,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"18.8.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":697021202,\"moneyMax\":17425530050,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":531,\"serverGrowth\":50,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"3.5.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":354293058,\"moneyMax\":8857326450,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":449,\"serverGrowth\":38,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"66.3.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":214832411,\"moneyMax\":5370810275,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":430,\"serverGrowth\":40,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"82.7.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":833861167,\"moneyMax\":20846529175,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":755,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578963-AlphaEnterprises.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"QUEUEMOUSEMODEMTRASHMACRO\",\"RESTORE\"],\"reward\":{\"type\":2,\"name\":\"Alpha Enterprises\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-945075.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,0,5,0,7,9,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"98.0.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":303132730,\"moneyMax\":7578318250,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":464,\"serverGrowth\":44,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"62.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":480666003,\"moneyMax\":12016650075,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":625,\"serverGrowth\":60,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-931849-JoesGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[198,[1,2,3,5,6,10,12,14,15,18,19]],\"reward\":{\"type\":2,\"name\":\"Joe's Guns\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"19.1.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":391870100,\"moneyMax\":9796752500,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":409,\"serverGrowth\":33,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"93.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":181534202,\"moneyMax\":4538355050,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":325,\"serverGrowth\":48,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"99.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":231577653,\"moneyMax\":5789441325,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":312,\"serverGrowth\":64,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"73.7.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":418,\"serverGrowth\":48,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"36.1.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":84367884,\"moneyMax\":2109197100,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":287,\"serverGrowth\":44,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"48.8.8.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":890567.3418887057,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1325339.207578202,298,5,299]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.06601079359384991,\"offlineMoneyMade\":33.75509161922507,\"offlineRunningTime\":2.195,\"onlineExpGained\":1989.074999999981,\"onlineMoneyMade\":1325339.207578202,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"n00dles\",\"scriptKey\":\"hack-server.js*[\\\"n00dles\\\"]\",\"title\":\"hack-server.js n00dles\",\"threads\":1,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"58.0.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hacking scripts to the new server to start running them in\\n        // the new server.\\n        ns.scp(['hack-server.js', 'hack.js', 'utils.js'], hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      } else {\\n        // Nuke if possible.\\n        try {\\n          ns.nuke(hostname);\\n        } catch (e) {}\\n      }\\n    }\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n    await ns.sleep(50000);\\n  }\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.907999999999735,\"minDifficulty\":3,\"moneyAvailable\":985000.822148229,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[436616.29115080077,114,2580,96]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.5570758122047532,\"offlineMoneyMade\":10.784286607916291,\"offlineRunningTime\":2.1959999999999997,\"onlineExpGained\":16758,\"onlineMoneyMade\":436616.29115080077,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"foodnstuff\",\"scriptKey\":\"hack-server.js*[\\\"foodnstuff\\\"]\",\"title\":\"hack-server.js foodnstuff\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"48.0.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hacking scripts to the new server to start running them in\\n        // the new server.\\n        ns.scp(['hack-server.js', 'hack.js', 'utils.js'], hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      } else {\\n        // Nuke if possible.\\n        try {\\n          ns.nuke(hostname);\\n        } catch (e) {}\\n      }\\n    }\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n    await ns.sleep(50000);\\n  }\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.723999999999757,\"minDifficulty\":3,\"moneyAvailable\":985585.1323468805,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1166508.8906876447,288,2130,90]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.5068236560786571,\"offlineMoneyMade\":31.51716226469543,\"offlineRunningTime\":2.1969999999999996,\"onlineExpGained\":15102,\"onlineMoneyMade\":1166508.8906876447,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack-server.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"hack-server.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"36.2.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hacking scripts to the new server to start running them in\\n        // the new server.\\n        ns.scp(['hack-server.js', 'hack.js', 'utils.js'], hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      } else {\\n        // Nuke if possible.\\n        try {\\n          ns.nuke(hostname);\\n        } catch (e) {}\\n      }\\n    }\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n    await ns.sleep(50000);\\n  }\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.951999999999803,\"minDifficulty\":5,\"moneyAvailable\":987176.990365512,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1473259.2715054834,366,1452,66]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.4809573611048512,\"offlineMoneyMade\":40.73247941885131,\"offlineRunningTime\":2.199,\"onlineExpGained\":14242.5,\"onlineMoneyMade\":1473259.2715054834,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"joesguns\",\"scriptKey\":\"hack-server.js*[\\\"joesguns\\\"]\",\"title\":\"hack-server.js joesguns\",\"threads\":6,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"39.2.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.40800000000006,\"minDifficulty\":8,\"moneyAvailable\":1651850.3403128951,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[5898703.058493201,876,0,48]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.3723031251472224,\"offlineMoneyMade\":154.5279685432367,\"offlineRunningTime\":2.199,\"onlineExpGained\":11560.5,\"onlineMoneyMade\":5898703.058493201,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"zer0\",\"scriptKey\":\"hack-server.js*[\\\"zer0\\\"]\",\"title\":\"hack-server.js zer0\",\"threads\":12,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537093-Netburners.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000000101000011101100011111001100010100101010101101110011110100\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"54.0.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hacking scripts to the new server to start running them in\\n        // the new server.\\n        ns.scp(['hack-server.js', 'hack.js', 'utils.js'], hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      } else {\\n        // Nuke if possible.\\n        try {\\n          ns.nuke(hostname);\\n        } catch (e) {}\\n      }\\n    }\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n    await ns.sleep(50000);\\n  }\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":19.846000000000124,\"minDifficulty\":7,\"moneyAvailable\":991531.4260360487,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[1734594.9811050433,408,756,36]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.3809025836811404,\"offlineMoneyMade\":49.716051170174566,\"offlineRunningTime\":2.1999999999999997,\"onlineExpGained\":11056.5,\"onlineMoneyMade\":1734594.9811050433,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"nectar-net\",\"scriptKey\":\"hack-server.js*[\\\"nectar-net\\\"]\",\"title\":\"hack-server.js nectar-net\",\"threads\":6,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"9.3.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.768000000000015,\"minDifficulty\":8,\"moneyAvailable\":976613.2539637451,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[4127297.1488446067,804,276,60]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.4796398696257315,\"offlineMoneyMade\":120.0429597462994,\"offlineRunningTime\":2.2009999999999996,\"onlineExpGained\":13545,\"onlineMoneyMade\":4127297.1488446067,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"neo-net\",\"scriptKey\":\"hack-server.js*[\\\"neo-net\\\"]\",\"title\":\"hack-server.js neo-net\",\"threads\":12,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"36.5.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"82.7.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hacking scripts to the new server to start running them in\\n        // the new server.\\n        ns.scp(['hack-server.js', 'hack.js', 'utils.js'], hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      } else {\\n        // Nuke if possible.\\n        try {\\n          ns.nuke(hostname);\\n        } catch (e) {}\\n      }\\n    }\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n    await ns.sleep(50000);\\n  }\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.861999999999934,\"minDifficulty\":5,\"moneyAvailable\":999934.5333584697,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[2036034.5897679706,456,648,36]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.30935950865035655,\"offlineMoneyMade\":58.59589097839449,\"offlineRunningTime\":2.202,\"onlineExpGained\":8898.75,\"onlineMoneyMade\":2036034.5897679706,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack-server.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"hack-server.js hong-fang-tea\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"89.7.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHostnames } from 'utils';\\n\\n/**\\n * Gains root access in servers and spawn hack-server.js for each server with\\n * root access.\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const hostnames = getAllHostnames(ns);\\n\\n  while (hostnames.length > 0) {\\n    const hostnamesWithRootAccess = [];\\n\\n    for (const hostname of hostnames) {\\n      if (ns.hasRootAccess(hostname)) {\\n        // Copy over hacking scripts to the new server to start running them in\\n        // the new server.\\n        ns.scp(['hack-server.js', 'hack.js', 'utils.js'], hostname);\\n\\n        // Spawn a script to hack the server.\\n        ns.run('hack-server.js', 1, hostname);\\n        hostnamesWithRootAccess.push(hostname);\\n      } else {\\n        // Nuke if possible.\\n        try {\\n          ns.nuke(hostname);\\n        } catch (e) {}\\n      }\\n    }\\n    for (const hostname of hostnamesWithRootAccess) {\\n      hostnames.splice(hostnames.indexOf(hostname), 1);\\n    }\\n    await ns.sleep(50000);\\n  }\\n}\\n\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.733999999999991,\"minDifficulty\":5,\"moneyAvailable\":993998.2051099846,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[3330896.259251069,654,378,30]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.30158727118147804,\"offlineMoneyMade\":95.65023162172835,\"offlineRunningTime\":2.203,\"onlineExpGained\":8606.25,\"onlineMoneyMade\":3330896.259251069,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack-server.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"hack-server.js harakiri-sushi\",\"threads\":6,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"67.1.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"36.0.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.989999999999904,\"minDifficulty\":5,\"moneyAvailable\":977664.6588412621,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[9043528.014503825,1332,60,60]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.4334767483745442,\"offlineMoneyMade\":258.2030901554592,\"offlineRunningTime\":2.203,\"onlineExpGained\":12465,\"onlineMoneyMade\":9043528.014503825,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"max-hardware\",\"scriptKey\":\"hack-server.js*[\\\"max-hardware\\\"]\",\"title\":\"hack-server.js max-hardware\",\"threads\":12,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-535404.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,6,9,10,1,0,7,7,4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"77.7.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":69587111,\"moneyMax\":1739677775,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":219,\"serverGrowth\":30,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"5.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":54737241,\"moneyMax\":1368431025,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":229,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"92.7.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":29.576000000000022,\"minDifficulty\":10,\"moneyAvailable\":12716074.915308898,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[7213599.315777635,384,0,24]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.2280089404457924,\"offlineMoneyMade\":179.59009765615497,\"offlineRunningTime\":2.2039999999999997,\"onlineExpGained\":6876,\"onlineMoneyMade\":7213599.315777635,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"iron-gym\",\"scriptKey\":\"hack-server.js*[\\\"iron-gym\\\"]\",\"title\":\"hack-server.js iron-gym\",\"threads\":12,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"30.4.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":515,\"serverGrowth\":30,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"38.0.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":976,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"74.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":782,\"serverGrowth\":46,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"41.5.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":533,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"11.8.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":355,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"70.1.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":219,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318372.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[52,9,67,87,3,78,140,84,125,184,182,27,190,152,122,14,48,47,5,31,27,182],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"75.0.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":520,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"6.1.4.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{\"CSEC\":[0,0,1095,3]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.12076029068054998,\"offlineMoneyMade\":0,\"offlineRunningTime\":2.2039999999999997,\"onlineExpGained\":3623.400000000022,\"onlineMoneyMade\":0,\"onlineRunningTime\":60016.60999984897,\"ramUsage\":2.65,\"server\":\"CSEC\",\"scriptKey\":\"hack-server.js*[\\\"CSEC\\\"]\",\"title\":\"hack-server.js CSEC\",\"threads\":3,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"36.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"55.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188497.cct\",\"type\":\"Total Ways to Sum\",\"data\":46,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"16.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":false,\"ip\":\"31.1.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"manage-hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ONE_SECOND } from 'utils';\\n\\n/**\\n * Manages purchasing and upgrading Hacknet nodes.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  while (true) {\\n    // Attempt to purchase a new node.\\n    if (ns.hacknet.numNodes() < ns.hacknet.maxNumNodes()) {\\n      ns.hacknet.purchaseNode();\\n    }\\n\\n    const nodeCount = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodeCount; i++) {\\n      // Upgrade level.\\n      upgrade(() => ns.hacknet.upgradeLevel(i));\\n\\n      // Upgrade RAM.\\n      upgrade(() => ns.hacknet.upgradeRam(i));\\n\\n      // Upgrade cores.\\n      upgrade(() => ns.hacknet.upgradeCore(i));\\n    }\\n\\n    await ns.sleep(ONE_SECOND);\\n  }\\n}\\n\\n/**\\n * Upgrades using the given upgrade function until it is no longer possible.\\n *\\n * @param {function():boolean} upgradeFunction\\n */\\nfunction upgrade(upgradeFunction) {\\n  let canUpgrade;\\n  do {\\n    canUpgrade = upgradeFunction();\\n  } while (canUpgrade);\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"server\":\"lauren\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export const HOME_HOSTNAME = 'home';\\n\\n/** One second in milliseconds. */\\nexport const ONE_SECOND = 1000;\\n\\n/** One minute in milliseconds. */\\nexport const ONE_MINUTE = ONE_SECOND * 60;\\n\\n/**\\n * Gets all hostnames available.\\n *\\n * @param {NS} ns\\n * @param {[string]} rootHostname\\n * @param {[string]} previousHostname\\n * @returns {string[]} all hostnames\\n */\\nexport function getAllHostnames(ns, rootHostname, previousHostname) {\\n  const childrenHostnames = ns\\n    .scan(rootHostname)\\n    .filter(hostname => hostname !== previousHostname);\\n  const allHostnames = [...childrenHostnames];\\n  for (const childHostname of childrenHostnames) {\\n    allHostnames.push(...getAllHostnames(ns, childHostname, rootHostname));\\n  }\\n  return [...new Set(allHostnames)];\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"lauren\"}}],[\"hack-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Percent of max money that is acceptable for hacking. */\\nconst MIN_MONEY_PERCENT = 0.5;\\nconst MIN_MONEY_AMOUNT = 1000000;\\n\\n/**\\n * Hacks a server defined in the argument, weakening and growing whenever\\n * necessary.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('getServerMoneyAvailable');\\n  ns.disableLog('getServerMaxMoney');\\n  ns.disableLog('getServerSecurityLevel');\\n  ns.disableLog('getServerMinSecurityLevel');\\n  ns.disableLog('getServerBaseSecurityLevel');\\n  ns.disableLog('getHackingLevel');\\n  ns.disableLog('getServerRequiredHackingLevel');\\n\\n  const hostname = ns.args[0];\\n\\n  while (true) {\\n    const availableMoneyAmount = ns.getServerMoneyAvailable(hostname);\\n    const moneyPercent = availableMoneyAmount / ns.getServerMaxMoney(hostname);\\n    const hasEnoughMoney =\\n      moneyPercent >= MIN_MONEY_PERCENT ||\\n      availableMoneyAmount >= MIN_MONEY_AMOUNT;\\n\\n    const currentSecurityLevel = ns.getServerSecurityLevel(hostname);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(hostname);\\n    const isWeakEnough =\\n      currentSecurityLevel <= ns.getServerBaseSecurityLevel(hostname);\\n\\n    const isHackable =\\n      ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(hostname);\\n\\n    if (isHackable && hasEnoughMoney && isWeakEnough) {\\n      await ns.hack(hostname);\\n    }\\n\\n    if (!hasEnoughMoney || (!isHackable && moneyPercent < 1)) {\\n      await ns.grow(hostname);\\n    }\\n\\n    if (\\n      !isWeakEnough ||\\n      (!isHackable && currentSecurityLevel > minSecurityLevel)\\n    ) {\\n      await ns.weaken(hostname);\\n    }\\n  }\\n}\\n\",\"filename\":\"hack-server.js\",\"server\":\"lauren\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lauren\"],\"dataMap\":{\"lauren\":[0,0,234,0]},\"filename\":\"hack-server.js\",\"offlineExpGained\":0.012072499999999996,\"offlineMoneyMade\":0,\"offlineRunningTime\":2.2049999999999996,\"onlineExpGained\":772.1999999999989,\"onlineMoneyMade\":0,\"onlineRunningTime\":4192.409999999103,\"ramUsage\":2.65,\"server\":\"lauren\",\"scriptKey\":\"hack-server.js*[\\\"lauren\\\"]\",\"title\":\"hack-server.js lauren\",\"threads\":3,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":444.9642276923311}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":20894.6492030752}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":28.4758358974364}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":29.68447179487218}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":387.81092307694024}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":146.9916666666661}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":8203.279769232222}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1704148411551","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}