{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":523,\"hp\":55,\"max_hp\":55,\"strength\":415,\"defense\":458,\"dexterity\":324,\"agility\":401,\"charisma\":271,\"intelligence\":0,\"hacking_chance_mult\":1.51612154422013,\"hacking_speed_mult\":1.5181494786940735,\"hacking_money_mult\":1.5814419735629472,\"hacking_grow_mult\":1.3751669335329977,\"hacking_exp\":10408614.48369592,\"strength_exp\":222023.91182859655,\"defense_exp\":225312.42552610204,\"dexterity_exp\":45286.67218548985,\"agility_exp\":547454.0374567213,\"charisma_exp\":87708.8109650461,\"intelligence_exp\":0,\"hacking_mult\":2.0624897825127215,\"strength_mult\":2.141778493635771,\"defense_mult\":2.355956342999348,\"dexterity_mult\":2.264305867413561,\"agility_mult\":1.8011523945335146,\"charisma_mult\":1.6502003202395972,\"hacking_exp_mult\":2.625687876731231,\"strength_exp_mult\":1.739586170919242,\"defense_exp_mult\":1.739586170919242,\"dexterity_exp_mult\":2.000524096557128,\"agility_exp_mult\":1.739586170919242,\"charisma_exp_mult\":1.739586170919242,\"company_rep_mult\":1.5126836268862973,\"faction_rep_mult\":1.5126836268862973,\"money\":29813180.782725655,\"city\":\"Chongqing\",\"location\":\"Travel Agency\",\"jobs\":{\"Four Sigma\":\"Software Engineering Intern\",\"National Security Agency\":\"Field Agent\"},\"companyName\":\"National Security Agency\",\"currentServer\":\"home\",\"purchasedServers\":[\"lauren-13\",\"lauren-23\",\"lauren-21\",\"lauren-3\",\"lauren-22\",\"lauren-4\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-20\",\"lauren-14\",\"lauren-0\",\"lauren-8\",\"lauren-9\",\"lauren-17\",\"lauren-15\",\"lauren-2\",\"lauren-5\",\"lauren\",\"lauren-6\",\"lauren-18\",\"lauren-16\",\"lauren-1\",\"lauren-19\",\"lauren-7\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":5,\"level\":136,\"moneyGainRatePerSecond\":493.9020395096544,\"onlineTimeSeconds\":170660.4000003576,\"ram\":16,\"totalMoneyGenerated\":62292170.43850626,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":131,\"moneyGainRatePerSecond\":216.77123847333212,\"onlineTimeSeconds\":170658.40000035745,\"ram\":8,\"totalMoneyGenerated\":32776730.47437586,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":123,\"moneyGainRatePerSecond\":203.53330024595306,\"onlineTimeSeconds\":170658.40000035745,\"ram\":8,\"totalMoneyGenerated\":29677994.196290154,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":7573.53597248987,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":874373862.7688596,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":837361698.6697934,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":704899144.6949016,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":15,\"level\":200,\"moneyGainRatePerSecond\":7573.53597248987,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":817098012.1033049,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":6816.182375240884,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":798150642.5800068,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":6437.5055766163905,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":833825153.3989831,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":930960075.3653202,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":170658.40000035745,\"ram\":64,\"totalMoneyGenerated\":798392882.8458415,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.3006124731013402,\"onlineTimeSeconds\":82565.19999984291,\"ram\":1,\"totalMoneyGenerated\":107385.32896429196,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.3006124731013402,\"onlineTimeSeconds\":82565.19999984291,\"ram\":1,\"totalMoneyGenerated\":107385.32896429196,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":1.3006124731013402,\"onlineTimeSeconds\":82565.19999984291,\"ram\":1,\"totalMoneyGenerated\":107385.32896429196,\"name\":\"hacknet-node-13\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"MegaCorp\",\"Blade Industries\",\"Netburners\",\"CyberSec\",\"NiteSec\",\"Slum Snakes\",\"Sector-12\",\"The Black Hand\",\"BitRunners\",\"Tian Di Hui\",\"Tetrads\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"HemoRecirculator\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":0,\"karma\":-24016.699999999855,\"crime_money_mult\":2.718103392061315,\"crime_success_mult\":1.5126836268862973,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":600000,\"work_money_mult\":1.3751669335329977,\"hacknet_node_money_mult\":3.4682999282702407,\"hacknet_node_purchase_cost_mult\":0.5411336207724426,\"hacknet_node_ram_cost_mult\":0.7073642101600558,\"hacknet_node_core_cost_mult\":0.7073642101600558,\"hacknet_node_level_cost_mult\":0.6012595786360475,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Lauren Corp\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Agriculture Division\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":14836.2722601117,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Bulk Purchasing\":true,\"Drones\":true,\"AutoPartyManager\":true,\"AutoBrew\":true,\"Overclock\":true,\"HRBuddy-Recruitment\":true,\"Automatic Drug Administration\":true,\"Market-TA.I\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":848.9647758053159,\"popularity\":201.13311321247187,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":66.50816416897945,\"upgrades\":[144,6],\"state\":\"PURCHASE\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s8d0HD9\",\"mor\":100,\"hap\":99.99839398280237,\"ene\":99.99839398280237,\"int\":76,\"cha\":64,\"exp\":283.32999999927165,\"cre\":53,\"eff\":98,\"sal\":1137,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Y0TkaE1\",\"mor\":100,\"hap\":99.99804309673819,\"ene\":99.99804309673819,\"int\":94,\"cha\":50,\"exp\":267.3299999993474,\"cre\":53,\"eff\":61,\"sal\":990,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"H7jnanj\",\"mor\":100,\"hap\":99.99949496571936,\"ene\":99.99949496571936,\"int\":89,\"cha\":88,\"exp\":283.32999999927165,\"cre\":83,\"eff\":70,\"sal\":1254,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"61tbHxH\",\"mor\":100,\"hap\":99.99765639976532,\"ene\":99.99765639976532,\"int\":90,\"cha\":85.20971922033486,\"exp\":228.36371921986577,\"cre\":69,\"eff\":61.20971922033482,\"sal\":1098,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2lXxQ1V\",\"mor\":100,\"hap\":99.9990976787515,\"ene\":99.9990976787515,\"int\":70,\"cha\":95,\"exp\":251.15399999942295,\"cre\":96,\"eff\":84,\"sal\":1287,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TQL0GZm\",\"mor\":100,\"hap\":99.99856040103276,\"ene\":99.99856040103276,\"int\":65,\"cha\":90.02249652045863,\"exp\":281.1764965197706,\"cre\":71,\"eff\":71.02249652045892,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wYeCHh9\",\"mor\":100,\"hap\":99.99765869322594,\"ene\":99.99765869322594,\"int\":63,\"cha\":65,\"exp\":189.4229999997127,\"cre\":57,\"eff\":99,\"sal\":1131,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zTy6zh9\",\"mor\":100,\"hap\":99.99987026156589,\"ene\":99.99987026156589,\"int\":83,\"cha\":83,\"exp\":194.422999999689,\"cre\":85,\"eff\":98,\"sal\":1341,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2qazTpr\",\"mor\":100,\"hap\":99.99964888322637,\"ene\":99.99964888322637,\"int\":85,\"cha\":72.85458251060072,\"exp\":169.27758251040885,\"cre\":77,\"eff\":73.85458251060072,\"sal\":1065,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BXz08WB\",\"mor\":100,\"hap\":99.99946813271109,\"ene\":99.99946813271109,\"int\":50,\"cha\":91.8149976766153,\"exp\":146.16899767653248,\"cre\":50,\"eff\":60.81499767661537,\"sal\":918,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IOpgtR3\",\"mor\":100,\"hap\":99.99809544882079,\"ene\":99.99809544882079,\"int\":87,\"cha\":88.85474323693275,\"exp\":173.2087432367218,\"cre\":74,\"eff\":94.85474323693275,\"sal\":1275,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RL3lgRD\",\"mor\":100,\"hap\":99.99903810917036,\"ene\":99.99903810917036,\"int\":97,\"cha\":66.86116721014282,\"exp\":150.21516721004076,\"cre\":64,\"eff\":55.8611672101428,\"sal\":1023,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wRfC0c8\",\"mor\":100,\"hap\":99.99868629458807,\"ene\":99.99868629458807,\"int\":56,\"cha\":77.86219660411116,\"exp\":148.2161966040186,\"cre\":92,\"eff\":75.86219660411116,\"sal\":1071,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9KTOZjt\",\"mor\":100,\"hap\":99.99916078942358,\"ene\":99.99916078942358,\"int\":54,\"cha\":91.9024605091599,\"exp\":158.25646050901977,\"cre\":65,\"eff\":58.90246050915979,\"sal\":1005,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ySwd3by\",\"mor\":100,\"hap\":99.9997138866705,\"ene\":99.9997138866705,\"int\":80,\"cha\":78.8518376830228,\"exp\":149.20583768292553,\"cre\":52,\"eff\":63.85183768302306,\"sal\":993,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Nd0HdB0\",\"mor\":100,\"hap\":99.998899907151,\"ene\":99.998899907151,\"int\":50,\"cha\":93.81441281079596,\"exp\":165.1684128106231,\"cre\":60,\"eff\":56.81441281079598,\"sal\":999,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DJKwVtZ\",\"mor\":100,\"hap\":99.99809339840823,\"ene\":99.99809339840823,\"int\":67,\"cha\":101.89926124997876,\"exp\":173.2532612497676,\"cre\":86,\"eff\":81.89926124997876,\"sal\":1251,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zVeD026\",\"mor\":100,\"hap\":99.99760348626262,\"ene\":99.99760348626262,\"int\":74,\"cha\":79.82439450694811,\"exp\":176.1783945067231,\"cre\":61,\"eff\":96.82439450694811,\"sal\":1185,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9BZq6Ih\",\"mor\":100,\"hap\":99.9981802484471,\"ene\":99.9981802484471,\"int\":92,\"cha\":86,\"exp\":173.35399999978836,\"cre\":93,\"eff\":92,\"sal\":1356,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DHTY2va\",\"mor\":100,\"hap\":99.99807205091437,\"ene\":99.99807205091437,\"int\":66,\"cha\":73,\"exp\":180.3539999997552,\"cre\":88,\"eff\":93,\"sal\":1248,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1Eg0AS7\",\"mor\":100,\"hap\":99.99999847820932,\"ene\":99.99999847820932,\"int\":73,\"cha\":78,\"exp\":173.35399999978836,\"cre\":77,\"eff\":59,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":2888.357583516678,\"Engineer\":3411.0360780579017,\"Business\":1648.6680992467013,\"Management\":1363.2926817610914,\"Research & Development\":2367.73961277973,\"total\":11679.094055362102,\"Unassigned\":0,\"Training\":0},\"loc\":\"Aevum\",\"size\":21}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XqzK3JX\",\"mor\":100,\"hap\":99.99717168993851,\"ene\":99.99717168993851,\"int\":52,\"cha\":89.00378590870625,\"exp\":233.90278590820967,\"cre\":57,\"eff\":73.00378590870625,\"sal\":1113,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vJNJ6HV\",\"mor\":100,\"hap\":99.99919625014685,\"ene\":99.99919625014685,\"int\":50,\"cha\":109.15898586302009,\"exp\":200.05798586268378,\"cre\":51,\"eff\":73.15898586301994,\"sal\":939,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"R00WLsT\",\"mor\":100,\"hap\":99.99835366942179,\"ene\":99.99835366942179,\"int\":50,\"cha\":91.83965646040693,\"exp\":237.73865645989778,\"cre\":95,\"eff\":79.83965646040693,\"sal\":1146,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SPZ43C7\",\"mor\":100,\"hap\":99.9985888068408,\"ene\":99.9985888068408,\"int\":79,\"cha\":99.74458525563395,\"exp\":189.63658525534606,\"cre\":76,\"eff\":91.74458525563395,\"sal\":1278,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TVFFKYh\",\"mor\":100,\"hap\":99.99737651664796,\"ene\":99.99737651664796,\"int\":96,\"cha\":66.79945297845741,\"exp\":170.6914529782593,\"cre\":53,\"eff\":55.79945297845744,\"sal\":996,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iixtKp6\",\"mor\":100,\"hap\":99.99940613111158,\"ene\":99.99940613111158,\"int\":65,\"cha\":95.75342450207134,\"exp\":162.6454245019114,\"cre\":78,\"eff\":54.75342450207145,\"sal\":1038,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SYiVag3\",\"mor\":100,\"hap\":99.99889798298325,\"ene\":99.99889798298325,\"int\":70,\"cha\":73.76766503084919,\"exp\":204.65966503049015,\"cre\":75,\"eff\":82.76766503084919,\"sal\":1188,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qCoH9SG\",\"mor\":100,\"hap\":99.99780926855189,\"ene\":99.99780926855189,\"int\":78,\"cha\":50.747158341006134,\"exp\":205.63915834064247,\"cre\":96,\"eff\":55.747158341006134,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C5iFmWW\",\"mor\":100,\"hap\":99.99738843210696,\"ene\":99.99738843210696,\"int\":100,\"cha\":57.79712705848726,\"exp\":205.6891270581235,\"cre\":73,\"eff\":97.79712705848742,\"sal\":1272,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gaEyezF\",\"mor\":100,\"hap\":99.99773875595943,\"ene\":99.99773875595943,\"int\":70,\"cha\":92.76396731226436,\"exp\":208.65596731188637,\"cre\":68,\"eff\":83.76396731226436,\"sal\":1239,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CY3bFS4\",\"mor\":100,\"hap\":99.99799555712056,\"ene\":99.99799555712056,\"int\":72,\"cha\":95.79466091082892,\"exp\":165.68666091065464,\"cre\":93,\"eff\":80.79466091082892,\"sal\":1191,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jZ36uMj\",\"mor\":100,\"hap\":99.99881316812552,\"ene\":99.99881316812552,\"int\":70,\"cha\":52,\"exp\":189.89199999971092,\"cre\":60,\"eff\":91,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XQmK34s\",\"mor\":100,\"hap\":99.99959987943299,\"ene\":99.99959987943299,\"int\":51,\"cha\":99,\"exp\":192.88899999969672,\"cre\":66,\"eff\":73,\"sal\":1122,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3G7nWTP\",\"mor\":100,\"hap\":99.99704540187774,\"ene\":99.99704540187774,\"int\":56,\"cha\":88,\"exp\":174.888999999782,\"cre\":92,\"eff\":71,\"sal\":1122,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qH46miQ\",\"mor\":100,\"hap\":99.99743920427932,\"ene\":99.99743920427932,\"int\":94,\"cha\":51,\"exp\":196.88899999967776,\"cre\":63,\"eff\":71,\"sal\":1104,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":2590.262465715813,\"Management\":0,\"Research & Development\":4062.317476856494,\"total\":6652.579942572308,\"Unassigned\":0,\"Training\":0},\"loc\":\"Chongqing\",\"size\":15}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xBFsfor\",\"mor\":100,\"hap\":99.99842023797464,\"ene\":99.99842023797464,\"int\":83,\"cha\":96,\"exp\":502.70399999824036,\"cre\":98,\"eff\":97,\"sal\":1419,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LfgJdA4\",\"mor\":100,\"hap\":99.9991489244845,\"ene\":99.9991489244845,\"int\":76,\"cha\":75,\"exp\":462.7039999984298,\"cre\":81,\"eff\":51,\"sal\":1026,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4dAjFsU\",\"mor\":100,\"hap\":99.999182493535,\"ene\":99.999182493535,\"int\":78,\"cha\":51,\"exp\":493.703999998283,\"cre\":74,\"eff\":84,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xkQFqq8\",\"mor\":100,\"hap\":99.99845656383624,\"ene\":99.99845656383624,\"int\":82,\"cha\":80,\"exp\":491.2529999982945,\"cre\":61,\"eff\":65,\"sal\":1134,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rmC5gZ7\",\"mor\":100,\"hap\":99.99710787898154,\"ene\":99.99710787898154,\"int\":66,\"cha\":82,\"exp\":463.25299999842713,\"cre\":61,\"eff\":71,\"sal\":1026,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ddGlhA6\",\"mor\":100,\"hap\":99.99835432780583,\"ene\":99.99835432780583,\"int\":95,\"cha\":114.88839621920457,\"exp\":494.1413962175382,\"cre\":83,\"eff\":123.88839621920457,\"sal\":1224,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4HRfhxi\",\"mor\":100,\"hap\":99.99951558582178,\"ene\":99.99951558582178,\"int\":93,\"cha\":88,\"exp\":305.9439999991662,\"cre\":73,\"eff\":89,\"sal\":1230,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Va58QZb\",\"mor\":100,\"hap\":99.99724055312743,\"ene\":99.99724055312743,\"int\":92,\"cha\":96,\"exp\":302.9439999991804,\"cre\":95,\"eff\":96,\"sal\":1329,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NflyWlP\",\"mor\":100,\"hap\":99.99837621143656,\"ene\":99.99837621143656,\"int\":55,\"cha\":61,\"exp\":316.94399999911406,\"cre\":98,\"eff\":70,\"sal\":1086,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u6hd2yV\",\"mor\":100,\"hap\":99.99782180197134,\"ene\":99.99782180197134,\"int\":90,\"cha\":96,\"exp\":304.2919999991734,\"cre\":68,\"eff\":51,\"sal\":1155,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wP5I4d3\",\"mor\":100,\"hap\":99.99724617834462,\"ene\":99.99724617834462,\"int\":97,\"cha\":88,\"exp\":312.29199999913556,\"cre\":67,\"eff\":84,\"sal\":1272,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zLIxguW\",\"mor\":100,\"hap\":99.99732733875578,\"ene\":99.99732733875578,\"int\":55,\"cha\":90,\"exp\":289.29199999924447,\"cre\":54,\"eff\":65,\"sal\":987,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iwxnJB6\",\"mor\":100,\"hap\":99.99735063009383,\"ene\":99.99735063009383,\"int\":55,\"cha\":74,\"exp\":311.3849999991395,\"cre\":53,\"eff\":73,\"sal\":1053,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cO3vpVV\",\"mor\":100,\"hap\":99.99777385260408,\"ene\":99.99777385260408,\"int\":93,\"cha\":92,\"exp\":293.38499999922476,\"cre\":73,\"eff\":67,\"sal\":1209,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1EOFDoP\",\"mor\":100,\"hap\":99.9994881155084,\"ene\":99.9994881155084,\"int\":64,\"cha\":74,\"exp\":283.3849999992721,\"cre\":51,\"eff\":62,\"sal\":957,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":3504.3652262359615,\"Engineer\":4085.642658559951,\"Business\":2634.533156407262,\"Management\":0,\"Research & Development\":0,\"total\":10224.541041203174,\"Unassigned\":0,\"Training\":0},\"loc\":\"Sector-12\",\"size\":15}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":771949.3292459736,\"lastCycleExpenses\":321097.39128194767,\"thisCycleRevenue\":0,\"thisCycleExpenses\":3210202.1603588643,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":23,\"sizeUsed\":3449.9444280865964,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Aevum\",\"size\":3450,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":77.97907334977964,\"dmdR\":[65,85],\"cmp\":43.201653293269565,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1526.1660374685337,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0.5,\"qlt\":0,\"dmd\":89.91118438037518,\"dmdR\":[80,99],\"cmp\":69.07487015881769,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2577.561599263607,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":31683.394085459975,\"qlt\":159.63736730143557,\"dmd\":71.3850649198933,\"dmdR\":[70,90],\"cmp\":43.79389566511049,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5450.252967951368,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":24947.19153006693,\"qlt\":159.63736730143557,\"dmd\":65.25126490092208,\"dmdR\":[20,90],\"cmp\":34.62402479671848,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4338.265981018871,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.36711267855027,\"dmdR\":[80,90],\"cmp\":79.64687499048556,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5895.226736510348,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":101723.5126291624,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":84.51863857590996,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":20310.04762478636,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":250415.6058038901,\"qlt\":0,\"dmd\":88.19624328165642,\"dmdR\":[5,99],\"cmp\":46.98635190942623,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0.16161403698599358,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":741494.8919203359,\"sCost\":\"MP+100\",\"prdman\":[false,0],\"sllman\":[true,1],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":16,\"sizeUsed\":2058.4861614505253,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Chongqing\",\"size\":2400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":251.5,\"qlt\":0,\"dmd\":78.70846797837305,\"dmdR\":[65,85],\"cmp\":41.501334255834664,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1583.1438612198042,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":251.5,\"qlt\":0,\"dmd\":84.89997284354357,\"dmdR\":[80,99],\"cmp\":77.68994705019516,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2198.035596514234,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":25542.452018131564,\"qlt\":187.45246413209125,\"dmd\":74.07160959474562,\"dmdR\":[70,90],\"cmp\":38.86793165340285,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6492.0034958918595,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":25542.452018131564,\"qlt\":187.45246413209125,\"dmd\":49.99249269630834,\"dmdR\":[20,90],\"cmp\":51.859486954861026,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2576.550361560749,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.32691709078887,\"dmdR\":[80,90],\"cmp\":93.17621130823514,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13407.779086682678,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":57099.37960778093,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":94.81828656201739,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":22189.124882599514,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":22.303112619381352,\"dmdR\":[5,99],\"cmp\":42.47723865895568,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":100239.42126832114,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,1],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":21,\"sizeUsed\":2734.016761885409,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":146.42589700545972,\"loc\":\"Sector-12\",\"size\":3150,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":732.1294850272986,\"qlt\":0,\"dmd\":69.25852717695078,\"dmdR\":[65,85],\"cmp\":54.52107051440649,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":73.21294850272986,\"sll\":0,\"prd\":-73.21260973322866,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1335.0657103857723,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":732.1294850272986,\"qlt\":0,\"dmd\":86.10482399623689,\"dmdR\":[80,99],\"cmp\":70.32501265760843,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":73.21294850272986,\"sll\":0,\"prd\":-73.21260973322866,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2257.279925387657,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":167.19315354205355,\"dmd\":70.2729683016814,\"dmdR\":[70,90],\"cmp\":59.664347485107776,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":146.42521946645732,\"prd\":146.42521946645732,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3684.3575333293556,\"sCost\":\"MP+10\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":167.19315354205355,\"dmd\":20.16831726687507,\"dmdR\":[20,90],\"cmp\":51.297640780283345,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":146.42521946645732,\"prd\":146.42521946645732,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":751.9555450466695,\"sCost\":\"MP+10\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.60138607468613,\"dmdR\":[80,90],\"cmp\":88.93010623585835,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8068.807583810968,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":27107.8330255422,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":96.85006282098662,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":26048.73705554022,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":538017.7985567542,\"qlt\":0,\"dmd\":12.334621755028762,\"dmdR\":[5,99],\"cmp\":27.225302082544818,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":449746.2755379177,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":1729377596.9487443,\"revenue\":771949.3292459736,\"expenses\":321097.39128194767,\"fundingRound\":4,\"public\":true,\"totalShares\":1870000000,\"numShares\":13061073,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":123430,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":380938927,\"sharePrice\":11.887585049889791,\"storedCycles\":324377,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":2}},\"unlockUpgrades\":[1,1,1,1,1,0,0,0,1],\"upgrades\":[5,5,3,2,4,10,6,12,10,3],\"upgradeMultipliers\":[1.15,1.5,1.003,1.01,1.4,2,1.6,2.2,1.1,1.15]}},\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":3,\"lastUpdate\":1644292475819,\"totalPlaytime\":4072983600,\"playtimeSinceLastAug\":170667200,\"playtimeSinceLastBitnode\":1498885800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-130151328,\"codingcontract\":1350000000,\"corporation\":-55934695.50655104,\"crime\":161066652.7033774,\"gang\":0,\"hacking\":355828180.9131011,\"hacknet\":6720130523.537699,\"hacknet_expenses\":-1737106922.2484372,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1824057113.404106,\"total\":28813180.782734606,\"work\":6183815.5999550065,\"servers\":-4536345932.8,\"other\":-280800000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-360588960,\"codingcontract\":20025000000,\"corporation\":2752501096.3124647,\"crime\":2056732752.8913872,\"gang\":0,\"hacking\":1037158374.0435883,\"hacknet\":33518811748.62613,\"hacknet_expenses\":-5948442926.057392,\"hospitalization\":-1745591.1844155397,\"infiltration\":39818848.72757816,\"sleeves\":0,\"stock\":-7060156608.093459,\"total\":103175192.53214456,\"work\":137051763.8672639,\"servers\":-22991357455.131287,\"other\":-2644227990.645193,\"augmentations\":-20457379859.534943}},\"scriptProdSinceLastAug\":2291037830.946352,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641675126871},{\"ID\":\"NITESEC\",\"unlockedOn\":1641675126890},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641675126893},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641675126897},{\"ID\":\"SF1.1\",\"unlockedOn\":1641675126901},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641675126906},{\"ID\":\"NS2\",\"unlockedOn\":1641675126910},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641675126915},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641675126920},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641675126925},{\"ID\":\"TOR\",\"unlockedOn\":1641675126930},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641675126934},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641683001577},{\"ID\":\"WORKOUT\",\"unlockedOn\":1641683661513},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641699444909},{\"ID\":\"N00DLES\",\"unlockedOn\":1641699444911},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641711726317},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641713166320},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641748014946},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641858253775},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641872767788},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641941669460},{\"ID\":\"4S\",\"unlockedOn\":1641943349663},{\"ID\":\"DONATION\",\"unlockedOn\":1642017508846},{\"ID\":\"FROZE\",\"unlockedOn\":1642193609462},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1642523664057},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642573834102},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642619100874},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642634100595},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642697584734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642717768356},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642723230131},{\"ID\":\"SF4.1\",\"unlockedOn\":1642793617209},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642793617217},{\"ID\":\"CORPORATION\",\"unlockedOn\":1642881865050}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"98.8.9.1\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":1023.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-stocks.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":29440.685999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":1949382214.9463532,\"onlineRunningTime\":141218.01000035746,\"pid\":2,\"ramUsage\":21.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///f81de659-2c5e-45e7-8752-abb3d2f4037f\",\"moduleSequenceNumber\":263},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///28bb107d-b6d9-48e3-bbf4-be1e814bba46\",\"moduleSequenceNumber\":250},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///7f18853f-8d0b-4fc9-9e1d-202bea19fb0b\",\"moduleSequenceNumber\":239},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///abe2de61-0c85-46fb-8620-02c4d4c413e4\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///357e792d-b0d9-4cb2-8b19-ad7e71395513\",\"moduleSequenceNumber\":219},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///68247c7b-efc8-49d4-9f62-6b2147007330\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///06ae1149-5c50-4a4d-a1e9-ab2d689d934c\",\"moduleSequenceNumber\":239},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e1e56eab-5010-4fec-9698-51c7a0655bcf\",\"moduleSequenceNumber\":221},{\"filename\":\"manage-stocks.js\",\"url\":\"blob:file:///64f04ead-32d4-4c81-8d4c-e6d1702f5418\",\"moduleSequenceNumber\":123498}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-life.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":29440.689,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":128977.60999979817,\"pid\":3,\"ramUsage\":90.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"manage-life.js\",\"url\":\"blob:file:///b480ed19-2006-4497-8688-00eda846a369\",\"moduleSequenceNumber\":131580}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"test.js\"],\"dataMap\":{},\"filename\":\"run-script.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2932.8099999998058,\"pid\":19260,\"ramUsage\":3.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///d26c7da3-71ed-4867-978d-43fb5c50211d\",\"moduleSequenceNumber\":131531},{\"filename\":\"run-script.js\",\"url\":\"blob:file:///938dc866-ebe8-4fcb-9f80-88e6967d71ab\",\"moduleSequenceNumber\":132800}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":519774.28583462856,\"onlineMoneyMade\":33856268,\"onlineRunningTime\":793.2100000000258,\"pid\":28204,\"ramUsage\":15.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///4c0ba4a3-c429-4d61-89f5-625033fccdab\",\"moduleSequenceNumber\":379},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///2b9d92d2-23a5-4f58-bbef-cd91b76c7f21\",\"moduleSequenceNumber\":348},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///37f0dff5-6cd0-4b0c-8946-925353dc4987\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///c40b2936-3d91-426e-9d21-f6d5290e531e\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///2d519509-2a37-4426-916f-4934f9e6ea46\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///93478541-e75b-4bc6-a093-b3f1dd66a851\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///c4c3d7d0-f263-4b10-8ba4-ad69b7300a52\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///704c5e93-3387-4ff7-bda1-5a578c337fe9\",\"moduleSequenceNumber\":349},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///41c18c96-309c-4566-896b-faef767d340a\",\"moduleSequenceNumber\":685}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":630.2100000000207,\"pid\":28914,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":222,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///464bfa90-d335-469f-b5bb-c1af5fad752f\",\"moduleSequenceNumber\":686}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29625,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///00103dd7-8784-4839-af0a-8236442b064d\",\"moduleSequenceNumber\":798}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29876,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":189,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6325ba1b-d501-4b8d-bc06-c75ec694f8d9\",\"moduleSequenceNumber\":687}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DEFAULT_PORT, LOCALHOST_PREFIX } from '/utils/misc.js';\\n\\nconst GITHUB_SCRIPTS_FOLDER =\\n  'https://raw.githubusercontent.com/phantomesse/bitburner/master/';\\nconst SCRIPTS_TXT = 'scripts.txt';\\n\\n/**\\n * Copy this file to the bitburner game to sync the rest of the scripts:\\n *\\n * ```\\n * wget https://raw.githubusercontent.com/phantomesse/bitburner/main/scripts/sync.js sync.js\\n * ```\\n *\\n * @example run sync.js <port>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  let port = ns.args[0];\\n  port = typeof port !== 'number' ? DEFAULT_PORT : port;\\n\\n  // Check if local server is running and set scripts prefix accordingly.\\n  let scriptsPrefix;\\n  try {\\n    scriptsPrefix = `${LOCALHOST_PREFIX}:${port}/`;\\n    await fetch(scriptsPrefix + SCRIPTS_TXT);\\n    ns.tprint('syncing to local server');\\n  } catch (_) {\\n    ns.tprint('no local server running, so syncing from github');\\n    scriptsPrefix = GITHUB_SCRIPTS_FOLDER;\\n  }\\n\\n  // Get list of scripts to download and download each script.\\n  let currentScripts = await getScripts(scriptsPrefix);\\n  for await (const script of currentScripts) {\\n    await script.download(ns, scriptsPrefix);\\n  }\\n\\n  // Watch for any changes in scripts every second and download newer copies.\\n  while (true) {\\n    let latestScripts = await getScripts(scriptsPrefix);\\n    for await (const latestScript of latestScripts) {\\n      const currentScript = currentScripts.find(\\n        script => script.fileName === latestScript.fileName\\n      );\\n      if (\\n        currentScript === undefined ||\\n        latestScript.lastModifiedTime !== currentScript.lastModifiedTime\\n      ) {\\n        await latestScript.download(ns, scriptsPrefix);\\n      }\\n    }\\n\\n    // Delete any files that were in the current scripts but are not in the\\n    // latest scripts.\\n    for await (const currentScript of currentScripts) {\\n      const latestScript = latestScripts.find(\\n        script => script.fileName === currentScript.fileName\\n      );\\n      if (latestScript === undefined) {\\n        ns.rm(currentScript.fileName);\\n        ns.tprint(`removed ${currentScript.fileName}`);\\n      }\\n    }\\n\\n    currentScripts = latestScripts;\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\nclass Script {\\n  /**\\n   * @param {string} fileName,\\n   * @param {number} lastModifiedTime\\n   */\\n  constructor(fileName, lastModifiedTime) {\\n    this.fileName = fileName;\\n    this.lastModifiedTime = lastModifiedTime;\\n  }\\n\\n  /**\\n   * @param {import('index').NS } ns\\n   * @param {string} scriptsPrefix\\n   */\\n  async download(ns, scriptsPrefix) {\\n    const contents = await getFileContents(scriptsPrefix, this.fileName);\\n    await ns.write('/' + this.fileName, contents, 'w');\\n    ns.tprint(`downloaded ${this.fileName}`);\\n  }\\n}\\n\\n/** @param {string} scriptsPrefix */\\nasync function getScripts(scriptsPrefix) {\\n  return (await getFileContents(scriptsPrefix, SCRIPTS_TXT))\\n    .split('\\\\n')\\n    .map(line => line.split('\\\\t'))\\n    .map(args => new Script(args[0], parseFloat(args[1])));\\n}\\n\\n/**\\n * @param {string} scriptsPrefix\\n * @param {string} fileName\\n */\\nasync function getFileContents(scriptsPrefix, fileName) {\\n  const response = await fetch(scriptsPrefix + 'scripts/' + fileName);\\n  return await response.text();\\n}\\n\",\"filename\":\"sync.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///2e177a76-2849-4f4e-8ea1-0c9b96159aef\",\"moduleSequenceNumber\":131531},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///bf88ca85-c9c8-4881-b62e-e23a8eb8443f\",\"moduleSequenceNumber\":131548},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///16a4d1bc-80b1-4bb5-92dc-bbb82afca591\",\"moduleSequenceNumber\":131530},{\"filename\":\"sync.js\",\"url\":\"blob:file:///85843511-cae4-4466-9fb4-0b9a78d6e294\",\"moduleSequenceNumber\":131577}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":341,\"_hash\":\"5ee6ae55677672bee2cba1d9c424dc6b1eb1f013e7ebc3f7f8c6be059cfad9e8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend } from '/utils/misc.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['sleep', 'getServerMoneyAvailable'];\\n\\n/**\\n * Manages buying and upgrading hacknet nodes.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    // Buy new nodes if we can.\\n    const moneyToSpend = getMoneyToSpend(ns);\\n    let nodesPurchased = 0;\\n    while (ns.hacknet.getPurchaseNodeCost() < moneyToSpend) {\\n      if (ns.hacknet.purchaseNode() === -1) break;\\n      nodesPurchased++;\\n    }\\n    if (nodesPurchased > 0) {\\n      ns.print(`purchased ${nodesPurchased} new hacknet nodes`);\\n    }\\n\\n    // Upgrade nodes.\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      // Upgrade cores.\\n      const coresUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getCoreUpgradeCost,\\n        ns.hacknet.upgradeCore\\n      );\\n      if (coresUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} cores ${coresUpgraded} times`);\\n      }\\n\\n      // Upgrade RAM.\\n      const ramUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getRamUpgradeCost,\\n        ns.hacknet.upgradeRam\\n      );\\n      if (ramUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} RAM ${ramUpgraded} times`);\\n      }\\n\\n      // Upgrade level.\\n      const levelsUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getLevelUpgradeCost,\\n        ns.hacknet.upgradeLevel\\n      );\\n      if (levelsUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} levels ${levelsUpgraded} times`);\\n      }\\n\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\\n\\n/**\\n * Calculates the cost of upgrading an aspect of a node.\\n *\\n * @callback UpgradeCostFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {number} cost of upgrade\\n */\\n\\n/**\\n * Upgrades an aspect of a node.\\n *\\n * @callback UpgradeFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {boolean} whether the upgrade was successful\\n */\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {number} nodeIndex\\n * @param {UpgradeCostFn} getUpgradeCostFn\\n * @param {UpgradeFn} upgradeFn\\n * @returns {number} number of upgrades successful\\n */\\nfunction upgrade(ns, nodeIndex, getUpgradeCostFn, upgradeFn) {\\n  const moneyToSpend = getMoneyToSpend(ns);\\n  let upgradeCount = 0;\\n  while (getUpgradeCostFn(nodeIndex, ++upgradeCount) < moneyToSpend);\\n  if (upgradeCount === 0) return 0;\\n  return upgradeFn(nodeIndex, upgradeCount) ? upgradeCount : 0;\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///cdcb6082-4a96-465a-909a-b1fe487feb80\",\"moduleSequenceNumber\":131531},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///c9db5d41-d32f-467c-9683-de5c1e4ca1b0\",\"moduleSequenceNumber\":131548},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///13d53dd3-e6d6-4aad-8f70-7172370d3372\",\"moduleSequenceNumber\":131530},{\"filename\":\"manage-hacknet.js\",\"url\":\"blob:file:///1444d1f0-6bb1-4af9-9aed-c82885f0a843\",\"moduleSequenceNumber\":142320}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":342,\"_hash\":\"668ac2cd1df76bb0088f74b8f2ead30c105c850c694e5ac5a35293a6f5eaca8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///00103dd7-8784-4839-af0a-8236442b064d\",\"moduleSequenceNumber\":798}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":798,\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6325ba1b-d501-4b8d-bc06-c75ec694f8d9\",\"moduleSequenceNumber\":687}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":687,\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///464bfa90-d335-469f-b5bb-c1af5fad752f\",\"moduleSequenceNumber\":686}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":686,\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MANAGE_SERVERS_TO_MANAGE_HACKING_PORT } from '/utils/ports.js';\\nimport { getMoneyToSpend, sort } from '/utils/misc.js';\\nimport { PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\nimport { formatNumber } from '/utils/format.js';\\n\\nconst MIN_POWER = 3; // Min RAM that we want is at least 8GB\\nconst MAX_POWER = 20; // Max RAM is 2^20\\n\\n/**\\n * Continuously try to buy more servers and sells any old servers with less RAM\\n * than we could get with a new server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  const purchasedServerLimit = ns.getPurchasedServerLimit();\\n  let lowestRamAcceptable = Math.pow(2, MIN_POWER);\\n\\n  while (true) {\\n    // Buy / upgrade servers.\\n    for (let power = MAX_POWER; power >= MIN_POWER; power--) {\\n      const ram = Math.pow(2, power);\\n      if (ram < lowestRamAcceptable) continue;\\n      const cost = ns.getPurchasedServerCost(ram);\\n      if (getMoneyToSpend(ns) < cost) continue;\\n\\n      // Delete lowest RAM server if over server limit.\\n      if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n        const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n        const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n        if (ram <= lowestRam) continue;\\n        ns.killall(lowestRamServerName);\\n        if (ns.deleteServer(lowestRamServerName)) {\\n          ns.toast(\\n            `deleted server ${lowestRamServerName} which had ${lowestRam}GB RAM`\\n          );\\n          await ns.writePort(\\n            MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n            JSON.stringify({ remove: lowestRamServerName })\\n          );\\n        }\\n      }\\n\\n      // Buy server.\\n      const server = ns.purchaseServer(PURCHASED_SERVER_PREFIX, ram);\\n      if (server !== '') {\\n        ns.toast(`bought server (${server}) with ${formatNumber(ram)}GB RAM`);\\n        await ns.writePort(\\n          MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n          JSON.stringify({ add: server })\\n        );\\n\\n        // Update lowest RAM acceptable.\\n        if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n          const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n          const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n          if (lowestRam > lowestRamAcceptable) {\\n            lowestRamAcceptable = lowestRam;\\n            ns.toast(`now only buying servers >= ${lowestRamAcceptable}GB RAM`);\\n          }\\n        }\\n      }\\n    }\\n\\n    // Wait 30 seconds before buying another server.\\n    await ns.sleep(1000 * 30);\\n  }\\n}\\n\\nfunction getPurchasedServerNames(ns) {\\n  return ns\\n    .scan()\\n    .filter(serverName => serverName.startsWith(PURCHASED_SERVER_PREFIX));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getLowestRamPurchasedServer(ns) {\\n  const purchasedServerNames = getPurchasedServerNames(ns);\\n  sort(purchasedServerNames, ns.getServerMaxRam);\\n  return purchasedServerNames[0];\\n}\\n\",\"filename\":\"manage-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///5b274c72-0d0c-48c2-b6a8-5e2d8d65f1ab\",\"moduleSequenceNumber\":348},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98ba2eec-1389-40a8-a391-3472f30fc714\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///5d5c3f20-f959-49c9-9298-7d9c40e7ac72\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///c80682d3-ca81-46ba-ac6f-ae6ce6a530b6\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e6b3b3f0-38a6-4c77-8ce2-af0f47140acf\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///fcc2d688-39c6-43fa-96bd-8db0adcd60aa\",\"moduleSequenceNumber\":379},{\"filename\":\"manage-servers.js\",\"url\":\"blob:file:///3a027d15-fdda-4edc-9d25-2ffec5118acf\",\"moduleSequenceNumber\":681}],\"dependents\":[],\"ramUsage\":7.25,\"server\":\"home\",\"moduleSequenceNumber\":681,\"_hash\":\"f350c6b09307105977aa72deb76168265bd2f2bdcd8bcb3f1c1736e2cb7ea5d2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend, getNetWorth, sort } from '/utils/misc.js';\\nimport { formatMoney, formatPercent } from '/utils/format.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { getForecast } from './utils/stock';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  NULL_PORT_DATA,\\n} from './utils/ports';\\nimport { getStockSymbol } from './utils/organizations';\\n\\nconst COMMISSION_FEE = 100000;\\nconst PERCENT_OF_NET_WORTH_IN_STOCK = 0.99;\\n\\n/**\\n * Manages buying and selling stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols;\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    // No stock exchange API.\\n    return;\\n  }\\n\\n  while (true) {\\n    const manageHackingMessage = ns.readPort(\\n      MANAGE_HACKING_TO_MANAGE_STOCKS_PORT\\n    );\\n    if (manageHackingMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageHackingMessage);\\n      if (response.buy) {\\n        const symbol = getStockSymbol(response.buy);\\n        if (symbol !== undefined) {\\n          buyStock(ns, symbol, ns.getServerMoneyAvailable(HOME_SERVER_NAME));\\n        }\\n      }\\n      if (response.sell) {\\n        const symbol = getStockSymbol(response.sell);\\n        if (symbol !== undefined) sellStock(ns, symbol);\\n      }\\n    }\\n\\n    const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n    const netWorth = getNetWorth(ns);\\n    if (cash / netWorth < 1 - PERCENT_OF_NET_WORTH_IN_STOCK) {\\n      ns.print(\\n        `\\\\nnot buying any stock because we want only ${formatPercent(\\n          PERCENT_OF_NET_WORTH_IN_STOCK\\n        )} of our net worth in stocks and we currently have ${formatMoney(\\n          cash,\\n          true\\n        )} in cash which is ${formatPercent(\\n          cash / netWorth\\n        )} of our net worth (${formatMoney(netWorth, true)})`\\n      );\\n    } else {\\n      // Sort stock symbols sorted from lowest to highest ask price and buy stock\\n      // starting with the cheapest stock.\\n      let moneyToSpend = cash - (1 - PERCENT_OF_NET_WORTH_IN_STOCK) * netWorth;\\n      ns.print(`\\\\ncan spend ${formatMoney(moneyToSpend)}`);\\n      sort(symbols, ns.stock.getAskPrice);\\n      for (const symbol of symbols) {\\n        if (moneyToSpend <= COMMISSION_FEE) break;\\n        moneyToSpend -= buyStock(ns, symbol, moneyToSpend);\\n      }\\n    }\\n\\n    // Sort stock symbols sorted from highest to lowest bid price and sell stock\\n    // starting at the most expensive stock.\\n    sort(symbols, ns.stock.getBidPrice);\\n    for (const symbol of symbols) sellStock(ns, symbol);\\n\\n    await ns.sleep(6000); // Sleep for 6 seconds.\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n * @param {number} moneyToSpend\\n * @returns {number} how much we spent\\n */\\nfunction buyStock(ns, symbol, moneyToSpend) {\\n  const ownedShareCount = ns.stock.getPosition(symbol)[0];\\n  let sharesToBuy = Math.min(\\n    Math.floor((moneyToSpend - COMMISSION_FEE) / ns.stock.getAskPrice(symbol)),\\n    ns.stock.getMaxShares(symbol) - ownedShareCount\\n  );\\n  if (sharesToBuy <= 0) return 0;\\n\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast < 0.5) return 0;\\n  sharesToBuy = Math.ceil(forecast * sharesToBuy);\\n\\n  const sharePrice = ns.stock.buy(symbol, sharesToBuy);\\n  ns.print(\\n    `bought ${sharesToBuy} shares of ${symbol} at ${formatMoney(sharePrice)}`\\n  );\\n\\n  return sharePrice * sharesToBuy + COMMISSION_FEE;\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n */\\nfunction sellStock(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  const ownedShareCount = position[0];\\n  if (ownedShareCount === 0) return; // Nothing to sell.\\n\\n  // Panic sell.\\n  if (getForecast(ns, symbol) < 0.15) {\\n    const sharesToSell = ns.stock.getPosition(symbol)[0];\\n    ns.stock.sell(symbol, sharesToSell);\\n    ns.print(`panic sold ${sharesToSell} shares of ${symbol}`);\\n  }\\n\\n  const ownedAvgSharePrice = position[1];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  if (bidPrice < ownedAvgSharePrice) return; // We won't make a profit.\\n\\n  // Determine how much to sell.\\n  let sharesToSell = ownedShareCount;\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast > 0.5) return; // Stock will go up.\\n  sharesToSell = Math.ceil((forecast / 0.5) * sharesToSell);\\n\\n  if (sharesToSell === 0) return; // Nothing to sell.\\n  const gain = ns.stock.getSaleGain(symbol, sharesToSell, 'Long');\\n  const profit =\\n    (gain - ownedAvgSharePrice * ownedShareCount) /\\n    (ownedAvgSharePrice * ownedShareCount);\\n  if (profit < 0) return; // We won't make a profit.\\n\\n  const sharePrice = ns.stock.sell(symbol, sharesToSell);\\n  ns.print(\\n    `sold ${sharesToSell} shares of ${symbol} at ${formatMoney(\\n      sharePrice\\n    )} with profit of ${formatPercent(profit)}`\\n  );\\n}\\n\",\"filename\":\"manage-stocks.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///473f5b86-c2fc-4802-9da8-8e3af71e13c2\",\"moduleSequenceNumber\":392},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///6dcdc975-e47c-4473-a4b0-cd6db740855c\",\"moduleSequenceNumber\":379},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///fa684a8a-158f-4160-8a94-d6b7c776c238\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///4168e494-5200-4c5c-b6f6-7a4bb8bec6f7\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///3e8e25eb-edd2-41bd-b60e-cdca13552ed2\",\"moduleSequenceNumber\":348},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///ded6611d-c406-4234-aafe-91f41d7ed53f\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///134367d5-768b-4bd0-8eca-b52984f79030\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ddb8b995-139b-4d61-af6f-44dd9a5c690a\",\"moduleSequenceNumber\":350},{\"filename\":\"manage-stocks.js\",\"url\":\"blob:file:///03e243f8-377d-4b4c-b7bd-dc36bf81f2be\",\"moduleSequenceNumber\":682}],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":682,\"_hash\":\"67967b49a7dd161625c2ca1d07c8a3ec6672b5d5e4a116564c6417dbd84ce857\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for formatting numbers. */\\n\\n/**\\n * @param {number} money\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatMoney(money, isCompact) {\\n  return money.toLocaleString('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n    notation: isCompact ? 'compact' : 'standard',\\n  });\\n}\\n\\n/**\\n * @param {number} number\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatNumber(number, isCompact) {\\n  return Intl.NumberFormat('en', {\\n    notation: isCompact ? 'compact' : 'standard',\\n  }).format(number);\\n}\\n\\n/**\\n * Formats a percentage within two decimals.\\n *\\n * @param {number} percent\\n * @returns {string}\\n */\\nexport function formatPercent(percent) {\\n  return (percent * 100).toFixed(2) + '%';\\n}\\n\\n/**\\n * Formats time with minutes and seconds.\\n *\\n * @param {number} timeMs\\n * @returns {string} e.g. \\\"43s\\\", \\\"4m 0s\\\", \\\"3m 32s\\\"\\n */\\nexport function formatTime(timeMs) {\\n  const hours = Math.floor(timeMs / 1000 / 60 / 60);\\n  const minutes = Math.floor((timeMs - hours * 1000 * 60 * 60) / 1000 / 60);\\n  const seconds = Math.floor(\\n    (timeMs - hours * 1000 * 60 * 60 - minutes * 1000 * 60) / 1000\\n  );\\n  return (\\n    (hours > 0 ? `${formatNumber(hours)}h ` : '') +\\n    (minutes > 0 ? `${minutes}m ` : '') +\\n    `${seconds}s`\\n  );\\n}\\n\",\"filename\":\"/utils/format.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":348,\"_hash\":\"2edf8f46ea83666c8efabac9644a7a57ba8e7523e911340efe3b90ab61e64391\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for hacking servers. */\\nimport { HOME_SERVER_NAME, PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\n\\nexport const GROW_SCRIPT = 'grow.js';\\nexport const WEAKEN_SCRIPT = 'weaken.js';\\nexport const HACK_SCRIPT = 'hack.js';\\n\\n/**\\n * Returns whether a server is hackable.\\n *\\n * Note that we are using {@link PURCHASED_SERVER_PREFIX} instead of getting the\\n * purchased servers list here in order to save on 2.25GB of RAM. This requires\\n * that all purchased servers have the same prefix.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if the server is hackable, false if otherwise\\n */\\nexport function isHackable(ns, serverName) {\\n  return (\\n    serverName !== HOME_SERVER_NAME &&\\n    !serverName.startsWith(PURCHASED_SERVER_PREFIX) &&\\n    ns.getServerMaxMoney(serverName) > 0 &&\\n    ns.hasRootAccess(serverName) &&\\n    ns.getServerRequiredHackingLevel(serverName) <= ns.getHackingLevel()\\n  );\\n}\\n\\n/**\\n * A heuristic that determines how hackable a server is.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {number} higher number means better to hack\\n */\\nexport function getHackingHeuristic(ns, serverName) {\\n  let heuristic =\\n    (ns.hackAnalyzeChance(serverName) *\\n      ns.hackAnalyze(serverName) *\\n      ns.getServerMoneyAvailable(serverName)) /\\n    ns.getHackTime(serverName);\\n  try {\\n    heuristic *= ns.formulas.hacking.hackExp(\\n      ns.getServer(serverName),\\n      ns.getPlayer()\\n    );\\n  } catch (_) {}\\n  return heuristic;\\n}\\n\",\"filename\":\"/utils/hacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":349,\"_hash\":\"2d9501a3638029920ab5ffd79a6b08672381d1fe45b026e1ffd907c16c0926a1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Miscellaneous utils that don't fit anywhere else. */\\n\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nexport const DEFAULT_PORT = 1337;\\nexport const LOCALHOST_PREFIX = 'http://localhost';\\n\\n/**\\n * Sorts an array given a function to call on each item of the array.\\n *\\n * @param {any[]} array\\n * @param {} fn\\n * @param {boolean} [reverse=false]\\n */\\nexport function sort(array, fn, reverse) {\\n  array.sort((a, b) => {\\n    const first = fn(reverse ? b : a);\\n    const second = fn(reverse ? a : b);\\n    if (typeof first === 'string') return first.localeCompare(second);\\n    return first - second;\\n  });\\n}\\n\\n/**\\n * This function allows us to reserve a certain amount of money so we don't end\\n * up spending all our money buying things.\\n *\\n * @param {import('../index').NS} ns\\n * @returns {number} money that we want to spend purchasing things\\n */\\nexport function getMoneyToSpend(ns) {\\n  return ns.getServerMoneyAvailable(HOME_SERVER_NAME) / 2;\\n}\\n\\n/**\\n * @param {import ('../index').NS} ns\\n * @returns {number} net worth including cash on hand and stocks\\n */\\nexport function getNetWorth(ns) {\\n  return (\\n    ns.getServerMoneyAvailable(HOME_SERVER_NAME) +\\n    ns.stock\\n      .getSymbols()\\n      .map(symbol => getStockWorth(ns, symbol))\\n      .reduce((a, b) => a + b)\\n  );\\n}\\n\",\"filename\":\"/utils/misc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///a6fdad3e-cbfd-48f7-95e8-e667a743adc9\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ee932550-e5cb-49f2-946d-d8811d6ec59e\"}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":350,\"_hash\":\"a71eedebfa90df311ceefaf82c6ce1d055029652c90e0fe55f02aaa7e4ea25b3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for servers. */\\n\\nexport const HOME_SERVER_NAME = 'home';\\nexport const PURCHASED_SERVER_PREFIX = 'lauren';\\n\\n/**\\n * Retrieves all servers including personal servers and {@link HOME_SERVER_NAME}.\\n *\\n * @example getAllServers(ns)\\n * @param {import('../index').NS } ns\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} names of all servers including {@link HOME_SERVER_NAME}\\n */\\nexport function getAllServerNames(ns, root, parent) {\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  const servers = [...children];\\n  for (const child of children) {\\n    servers.push(...getAllServerNames(ns, child, root));\\n  }\\n  return [...new Set(servers)];\\n}\\n\\n/**\\n * Gets the connection path to a server.\\n *\\n * @example getPath(ns, 'silver-helix')\\n * @param {import('../index').NS} ns\\n * @param {string} server server to get path to\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} connection to server where the last item is the name of\\n *                     the server to get the path to (e.g. if the server is\\n *                     silver-helix, then the path is\\n *                     [\\\"foodnstuff\\\",\\\"zer0\\\",\\\"silver-helix\\\"])\\n */\\nexport function getPath(ns, server, root, parent) {\\n  if (parent === undefined) parent = 'home';\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  if (children.includes(server)) return [server];\\n  for (const child of children) {\\n    const path = getPath(ns, server, child, root);\\n    if (path.length > 0) return [child, ...path];\\n  }\\n  return [];\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(getPath(ns, 'silver-helix'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string} serverName\\n * @returns {number} GB of free RAM\\n */\\nexport function getFreeRam(ns, serverName) {\\n  if (!ns.hasRootAccess(serverName)) return 0;\\n  return ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n}\\n\",\"filename\":\"/utils/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":351,\"_hash\":\"5603a4f076bf668e39a9034a9b798647098b43f88cb67cc832bc04883a931d18\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPTS_TO_RUN = [\\n  'sync.js',\\n  'manage-hacking.js',\\n  'manage-hacknet.js',\\n  'manage-life.js',\\n  'manage-programs.js',\\n  'manage-servers.js',\\n  'manage-stocks.js',\\n];\\n\\n/**\\n * Script that starts up all managing scripts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport const main = ns => SCRIPTS_TO_RUN.forEach(script => ns.run(script, 1));\\n\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///128f2e83-4f3f-48ac-be9c-46b128ffb0e1\",\"moduleSequenceNumber\":131576}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":352,\"_hash\":\"f618d19def433b5f4dcaf46df1a7c615406da84ef4d0238170aa1517a75fdfc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  GROW_SCRIPT,\\n  WEAKEN_SCRIPT,\\n  HACK_SCRIPT,\\n  getHackingHeuristic,\\n  isHackable,\\n} from '/utils/hacking.js';\\nimport { HOME_SERVER_NAME, getAllServerNames } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n  NULL_PORT_DATA,\\n} from '/utils/ports.js';\\n\\nconst HACKING_SCRIPTS = [GROW_SCRIPT, WEAKEN_SCRIPT, HACK_SCRIPT];\\nconst MIN_HACK_CHANCE = 0.6;\\nconst MIN_AVAILABLE_MONEY = 5000000;\\n\\nlet homeReservedRam;\\n\\n/**\\n * Manages hacking servers.\\n *\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  homeReservedRam = ns.args[0];\\n  ns.disableLog('ALL');\\n\\n  let allServerNames = getAllServerNames(ns);\\n\\n  while (true) {\\n    // Update all server names based on servers that we've added or deleted from\\n    // the manage-servers.js script.\\n    const manageServersMessage = ns.readPort(\\n      MANAGE_SERVERS_TO_MANAGE_HACKING_PORT\\n    );\\n    if (manageServersMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageServersMessage);\\n      if (response.add && !allServerNames.includes(response.add)) {\\n        allServerNames.push(response.add);\\n      }\\n      if (response.remove && allServerNames.includes(response.remove)) {\\n        allServerNames = allServerNames.filter(\\n          serverName => serverName !== response.remove\\n        );\\n      }\\n    }\\n\\n    // Get all servers where we have root access including home.\\n    const rootAccessServerNames = allServerNames.filter(serverName =>\\n      gainRootAccess(ns, serverName)\\n    );\\n\\n    // Copy scripts to every root access server.\\n    for await (const serverName of rootAccessServerNames) {\\n      if (serverName === HOME_SERVER_NAME) continue;\\n      await copyScriptsToServer(ns, serverName);\\n    }\\n\\n    // Check if we have any free RAM to do anything.\\n    if (!hasFreeRam(ns, rootAccessServerNames)) continue;\\n\\n    // Get hackable servers sorted by hacking heuristic.\\n    const hackableServerNames = rootAccessServerNames.filter(serverName =>\\n      isHackable(ns, serverName)\\n    );\\n    sort(\\n      hackableServerNames,\\n      serverName => getHackingHeuristic(ns, serverName),\\n      true\\n    );\\n\\n    // Grow, weaken, and hack.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Tell the manage-stock script to sell if we are close to maxing out the\\n      // server's money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney / maxMoney > 0.99) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ sell: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-growing the server.\\n      if (availableMoney === maxMoney) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          GROW_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} reached max money; killed ` +\\n            `${killedServerCount} servers that were still trying to grow`\\n        );\\n      }\\n\\n      // Grow the server until MIN_AVAILABLE_MONEY.\\n      if (availableMoney < MIN_AVAILABLE_MONEY) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(MIN_AVAILABLE_MONEY)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames, MIN_AVAILABLE_MONEY);\\n      }\\n\\n      // Check that we are not over-weakening the server.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (hackChance === 1 || securityLevel === minSecurityLevel) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          WEAKEN_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached min security; killed ` +\\n            `${killedServerCount} servers that were still trying to weaken`\\n        );\\n      }\\n\\n      // Weaken the server until MIN_HACK_CHANCE or until lowest security level.\\n      if (hackChance < MIN_HACK_CHANCE && securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${formatPercent(\\n            hackChance\\n          )} to ${formatPercent(MIN_HACK_CHANCE)} hack chance`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Tell the manage-stock script to buy if we are close to hacking all of\\n      // the target server's money.\\n      if (availableMoney / maxMoney < 0.01) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ buy: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-hacking the server.\\n      if (availableMoney === 0) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          HACK_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached $0; killed ` +\\n            `${killedServerCount} servers that were still trying to hack`\\n        );\\n      }\\n\\n      // Hack the server if server has MIN_AVAILABLE_MONEY and MIN_HACK_CHANCE.\\n      if (\\n        availableMoney >= MIN_AVAILABLE_MONEY &&\\n        hackChance >= MIN_HACK_CHANCE\\n      ) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    // If we have any extra free RAM, grow and weaken hackable servers to the\\n    // max money and min security level.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Grow the server until max money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney < maxMoney) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(maxMoney)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Weaken the server until min security level.\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${securityLevel.toFixed(\\n            2\\n          )} to ${minSecurityLevel} security level`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Hack server that has >0% hack chance until no money.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      if (availableMoney > 0 && hackChance > 0) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    if (\\n      ns.fileExists('Formulas.exe') &&\\n      hasFreeRam(ns, rootAccessServerNames)\\n    ) {\\n      // Get server with the most hack exp.\\n      const hackableServerNamesSortedByHackExp = [...hackableServerNames];\\n      const player = ns.getPlayer();\\n      sort(\\n        hackableServerNamesSortedByHackExp,\\n        /** @type {string} */ serverName =>\\n          ns.formulas.hacking.hackExp(ns.getServer(serverName), player) /\\n          ns.getWeakenTime(serverName)\\n      );\\n      const targetServerName = hackableServerNamesSortedByHackExp[0];\\n\\n      for (const rootAccessServerName of rootAccessServerNames) {\\n        const threadCount = getAvailableThreadCount(\\n          ns,\\n          rootAccessServerName,\\n          WEAKEN_SCRIPT\\n        );\\n        if (threadCount === 0) continue;\\n        const pid = ns.exec(\\n          WEAKEN_SCRIPT,\\n          rootAccessServerName,\\n          threadCount,\\n          targetServerName,\\n          1\\n        );\\n        if (pid > 0) {\\n          ns.print(\\n            `weakening ${targetServerName} on ${rootAccessServerName} with ${formatNumber(\\n              threadCount\\n            )} threads`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(3000); // Wait for 3 seconds.\\n  }\\n}\\n\\n/**\\n * Open all the ports that we can open and attempt to gain root access to a\\n * given server.\\n *\\n * @param {import('index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if we now have root access and false if otherwise\\n */\\nfunction gainRootAccess(ns, serverName) {\\n  const server = ns.getServer(serverName);\\n\\n  // Attempt to open all ports even if we already have root access.\\n  if (ns.fileExists('BruteSSH.exe') && !server.sshPortOpen) {\\n    ns.brutessh(serverName);\\n  }\\n  if (ns.fileExists('FTPCrack.exe') && !server.ftpPortOpen) {\\n    ns.ftpcrack(serverName);\\n  }\\n  if (ns.fileExists('relaySMTP.exe') && !server.smtpPortOpen) {\\n    ns.relaysmtp(serverName);\\n  }\\n  if (ns.fileExists('HTTPWorm.exe') && !server.httpPortOpen) {\\n    ns.httpworm(serverName);\\n  }\\n  if (ns.fileExists('SQLInject.exe') && !server.sqlPortOpen) {\\n    ns.sqlinject(serverName);\\n  }\\n\\n  if (ns.hasRootAccess(serverName)) return true;\\n  try {\\n    ns.nuke(serverName);\\n  } catch (_) {\\n    return false;\\n  }\\n}\\n\\n/**\\n * Copies grow, hack, and weaken scripts to a given server and deletes any other\\n * js scripts from that server.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n */\\nasync function copyScriptsToServer(ns, serverName) {\\n  // Copy scripts over.\\n  await ns.scp(HACKING_SCRIPTS, HOME_SERVER_NAME, serverName);\\n\\n  // Delete any other scripts on the server.\\n  const otherScripts = ns\\n    .ls(serverName)\\n    .filter(\\n      script => script.endsWith('.js') && !HACKING_SCRIPTS.includes(script)\\n    );\\n  for (const script of otherScripts) ns.rm(script, serverName);\\n}\\n\\n/**\\n * Get amount of free RAM from list of servers or a single server.\\n *\\n * @param {import('index').NS} ns\\n * @param {(string[]|string)} serverNames\\n * @returns {number} GB of free RAM\\n */\\nfunction getFreeRam(ns, serverNames) {\\n  if (typeof serverNames === 'string') {\\n    // Return free RAM for a single server.\\n    const serverName = serverNames;\\n    const freeRam =\\n      ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n    if (serverName !== HOME_SERVER_NAME) return freeRam;\\n\\n    if (homeReservedRam !== undefined) {\\n      return Math.max(freeRam - homeReservedRam, 0);\\n    }\\n\\n    // If home server, make sure to reserve RAM to run other scripts.\\n    const scripts = ns\\n      .ls(HOME_SERVER_NAME)\\n      .filter(\\n        fileName => fileName.endsWith('.js') && !fileName.startsWith('/')\\n      );\\n    let reservedRam = Math.max(\\n      ...scripts.map(script => ns.getScriptRam(script))\\n    );\\n    return Math.max(freeRam - reservedRam, 0);\\n  }\\n  return serverNames\\n    .map(serverName => getFreeRam(ns, serverName))\\n    .reduce((a, b) => a + b);\\n}\\n\\n/**\\n * Get minimum amount of RAM to execute one of grow, weaken, or hack scripts.\\n *\\n * @param {import('index').NS} ns\\n * @returns {number} GB of RAM\\n */\\nfunction getMinRam(ns) {\\n  return Math.min(\\n    ...HACKING_SCRIPTS.map(script => ns.getScriptRam(script, HOME_SERVER_NAME))\\n  );\\n}\\n\\n/**\\n * Checks if we have any free RAM to do anything.\\n *\\n * @param {import('index').NS} ns\\n * @param {string[]} rootAccessServerNames\\n * @returns {boolean} true if we have free RAM\\n */\\nfunction hasFreeRam(ns, rootAccessServerNames) {\\n  const freeRam = getFreeRam(ns, rootAccessServerNames);\\n  if (getFreeRam(ns, rootAccessServerNames) < getMinRam(ns)) {\\n    ns.print(\\n      `all servers are currently busy (only ${freeRam} GB RAM available)`\\n    );\\n    return false;\\n  }\\n  return true;\\n}\\n\\n/**\\n * Grow until min money.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n * @param {number} [minMoneyAvailable] if not set, then will grow until max\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t money\\n */\\nfunction grow(ns, targetServerName, rootAccessServerNames, minMoneyAvailable) {\\n  const maxMoney = ns.getServerMaxMoney(targetServerName);\\n  if (minMoneyAvailable === undefined) minMoneyAvailable = maxMoney;\\n  const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n\\n  // Get number of threads needed to get money to get to the min available money\\n  const growthAmount =\\n    availableMoney === 0 ? 2 : minMoneyAvailable / availableMoney;\\n  let estimatedThreadCount = Math.round(\\n    ns.growthAnalyze(targetServerName, growthAmount)\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to grow ${targetServerName} ${formatPercent(\\n      growthAmount\\n    )}`\\n  );\\n\\n  // Use only the estimated thread count to grow the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      GROW_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * Weaken until min security level.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction weaken(ns, targetServerName, rootAccessServerNames) {\\n  const currentSecurityLevel = ns.getServerSecurityLevel(targetServerName);\\n  const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n\\n  // Get number of threads needed to get hack chance to get to minimum security\\n  // level.\\n  let estimatedThreadCount = 1;\\n  do {\\n    estimatedThreadCount++;\\n  } while (\\n    currentSecurityLevel - ns.weakenAnalyze(estimatedThreadCount) >\\n    minSecurityLevel\\n  );\\n  if (estimatedThreadCount === 0) return;\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to weaken ` +\\n      `${targetServerName} from ${currentSecurityLevel} to ${minSecurityLevel}`\\n  );\\n\\n  // Use only the estimated thread count to weaken the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      WEAKEN_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction hack(ns, targetServerName, rootAccessServerNames) {\\n  // Get number of threads needed to hack all the money from the server.\\n  let estimatedThreadCount = Math.round(\\n    ns.hackAnalyzeThreads(\\n      targetServerName,\\n      ns.getServerMoneyAvailable(targetServerName)\\n    )\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to hack ${targetServerName}`\\n  );\\n\\n  // Use only the estimated thread count to hack the target srver.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      HACK_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n * @param {string} scriptName\\n * @param {number} threadCount\\n * @param  {...any} args\\n * @returns {number} number of threads that we were able to run the script at\\n */\\nfunction runScript(ns, serverName, scriptName, threadCount, ...args) {\\n  if (ns.isRunning(scriptName, serverName, ...args)) {\\n    const script = ns.getRunningScript(scriptName, serverName, ...args);\\n    ns.print(\\n      `already running ${scriptName} ${args} on ${serverName} with ` +\\n        `${script.threads} threads`\\n    );\\n    return 0;\\n  }\\n\\n  const availableThreadCount = getAvailableThreadCount(\\n    ns,\\n    serverName,\\n    scriptName\\n  );\\n  const actualThreadCount =\\n    availableThreadCount > threadCount ? threadCount : availableThreadCount;\\n  if (actualThreadCount <= 0) return 0;\\n  const success = ns.exec(scriptName, serverName, actualThreadCount, ...args);\\n  if (success === 0) return 0;\\n  ns.print(\\n    `running ${scriptName} ${args} on ${serverName} with ${actualThreadCount} threads`\\n  );\\n  return actualThreadCount;\\n}\\n\\nfunction getAvailableThreadCount(ns, serverName, scriptName) {\\n  return Math.floor(getFreeRam(ns, serverName) / ns.getScriptRam(scriptName));\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string[]} serverNames\\n * @param {string} scriptName\\n * @param  {...any} args\\n * @returns {number} number of servers that we killed\\n */\\nfunction killScript(ns, serverNames, scriptName, ...args) {\\n  let killedServerCount = 0;\\n  for (const serverName of serverNames) {\\n    if (\\n      ns.isRunning(scriptName, serverName, ...args) &&\\n      ns.kill(scriptName, serverName, ...args)\\n    ) {\\n      killedServerCount++;\\n    }\\n  }\\n  return killedServerCount;\\n}\\n\",\"filename\":\"manage-hacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///4c0ba4a3-c429-4d61-89f5-625033fccdab\",\"moduleSequenceNumber\":379},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///2b9d92d2-23a5-4f58-bbef-cd91b76c7f21\",\"moduleSequenceNumber\":348},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///37f0dff5-6cd0-4b0c-8946-925353dc4987\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///c40b2936-3d91-426e-9d21-f6d5290e531e\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///2d519509-2a37-4426-916f-4934f9e6ea46\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///93478541-e75b-4bc6-a093-b3f1dd66a851\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///c4c3d7d0-f263-4b10-8ba4-ad69b7300a52\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///704c5e93-3387-4ff7-bda1-5a578c337fe9\",\"moduleSequenceNumber\":349},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///41c18c96-309c-4566-896b-faef767d340a\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":15.15,\"server\":\"home\",\"moduleSequenceNumber\":685,\"_hash\":\"bb0a6f095badb1d9361284145104fe5ca5d6133d6882ddd59d18ab27b2d9aec0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index exactly.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} input\\n * @returns {number} 1 if can reach the end, 0 if not\\n */\\nexport function arrayJumpingGame(input) {\\n  return _getPathToLastIndex(input).length === 0 ? 0 : 1;\\n}\\n\\n/**\\n * @param {number[]} maxJumps List of numbers where each number represents max jump.\\n * @param {number} [currentIndex=0]\\n * @returns {string[]} The path to the last index where each member of the array is\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\tthe jump. Empty if no path.\\n */\\nfunction _getPathToLastIndex(maxJumps, currentIndex) {\\n  currentIndex = currentIndex || 0;\\n  if (currentIndex === maxJumps.length - 1) return ['end'];\\n\\n  const maxJump = maxJumps[currentIndex];\\n  for (let n = 1; n <= maxJump; n++) {\\n    const path = _getPathToLastIndex(maxJumps, currentIndex + n);\\n    if (path.length > 0)\\n      return [\\n        `jump from ${currentIndex} to ${\\n          currentIndex + n\\n        } (max jump is ${maxJump})`,\\n        ...path,\\n      ];\\n  }\\n\\n  return [];\\n}\\n\",\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":354,\"_hash\":\"2feadad6c9c3bef4df0b60380d6f7e2136c7cd17813055df6906cb2a3bdbd2d6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const OPERATORS = ['+', '-', '*'];\\n\\n/**\\n * Find All Valid Math Expressions\\n *\\n * Return all possible ways you can add the +, -, and * operators to the string\\n * such that it evaluates to the target number.\\n *\\n * @param {any[]} input\\n * @returns {string[]}\\n */\\nexport function findValidMathExpressions(input) {\\n  /** @type {string} */ const digits = input[0];\\n  /** @type {number} */ const targetNumber = input[1];\\n\\n  /**\\n   * Index is the index of the digit in the digits string.\\n   *\\n   * @type {string[][]}\\n   */\\n  const combinations = Array(digits.length);\\n  for (let i = digits.length - 1; i >= 0; i--) {\\n    const digit = digits.substring(i, i + 1);\\n\\n    // Fill in the last slot of the combinations array.\\n    if (i === digits.length - 1) {\\n      combinations[i] = [digit];\\n      continue;\\n    }\\n\\n    // Fill in the other combinations.\\n    combinations[i] = [];\\n    for (const expression of combinations[i + 1]) {\\n      combinations[i].push(digit + expression);\\n      if (\\n        expression.startsWith('0') &&\\n        expression.split(/[\\\\+\\\\-\\\\*]/g)[0] !== '0'\\n      ) {\\n        continue;\\n      }\\n      OPERATORS.forEach(operator =>\\n        combinations[i].push(digit + operator + expression)\\n      );\\n    }\\n  }\\n\\n  // Get valid expressions.\\n  return combinations[0].filter(\\n    expression => evaluate(expression) === targetNumber\\n  );\\n}\\n\\n/**\\n * @param {string} expression\\n * @returns {number}\\n */\\nfunction evaluate(expression) {\\n  // Split + and - into an array of addends.\\n  const addParts = expression.split('+');\\n  const addends = [];\\n  for (const addPart of addParts) {\\n    if (addPart.includes('-')) {\\n      const subtractParts = addPart.split('-');\\n      addends.push(subtractParts[0]);\\n      for (let i = 1; i < subtractParts.length; i++) {\\n        addends.push('-' + subtractParts[i]);\\n      }\\n    } else {\\n      addends.push(addPart);\\n    }\\n  }\\n\\n  // Resolve multiplications within each addend and sum.\\n  let sum = 0;\\n  for (const addend of addends) {\\n    if (addend.includes('*')) {\\n      const factors = addend.split('*');\\n      if (factors.includes('0')) continue;\\n      const product = factors\\n        .filter(factor => factor !== '1')\\n        .map(factor => parseInt(factor))\\n        .reduce((a, b) => a * b, 1);\\n      sum += product;\\n    } else {\\n      sum += parseInt(addend);\\n    }\\n  }\\n  return sum;\\n}\\n\",\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":355,\"_hash\":\"e60a956a9f1f2c8e855494c69fbca65956aefe1e41d241f04fb2a1641c2d32ed\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the input.\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function generateIpAddresses(input) {\\n  return _getAddresses(input).filter(\\n    address => address.split('.').length === 4\\n  );\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} [depth]\\n * @returns {string[]}\\n */\\nfunction _getAddresses(str, depth) {\\n  if (depth === undefined) depth = 0;\\n  if (depth === 4) return [];\\n  const beginningSections = _getBeginningSections(str);\\n  const addresses = [];\\n  for (const beginningSection of beginningSections) {\\n    const restOfStr = str.substring(beginningSection.toString().length);\\n    if (restOfStr === '') {\\n      addresses.push(...beginningSections);\\n    } else {\\n      const addressVariants = _getAddresses(restOfStr, depth + 1);\\n      for (const variant of addressVariants) {\\n        if (variant.replaceAll('.', '') === restOfStr) {\\n          addresses.push(beginningSection + '.' + variant);\\n        }\\n      }\\n    }\\n  }\\n  return [...new Set(addresses)];\\n}\\n\\n/**\\n * A section is the first 1-3 characters of the {@link str} where there cannot\\n * be a leading zero nor can there be a leading zero after the section. The\\n * section must also be a number between 0 and 255.\\n *\\n * @param {string} str\\n */\\nfunction _getBeginningSections(str) {\\n  if (str.length === 0) return [];\\n  return [1, 2, 3]\\n    .filter(length => length === 1 || str[0] !== '0') // cannot be a leading zero after the section\\n    .map(length => parseInt(str.substring(0, length)))\\n    .filter(section => section >= 0 && section <= 255)\\n    .map(section => section.toString());\\n}\\n\",\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":356,\"_hash\":\"0f8ead77c485ea6b40daebdc532c4a27d1d48eaa1fd2e51e4567dbc41a48de72\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *\\n *  3 + 1\\n *  2 + 2\\n *  2 + 1 + 1\\n *  1 + 1 + 1 + 1\\n *\\n * How many different ways can the input number be written as a sum of at least\\n * two positive integers?\\n *\\n * @param {number} input\\n * @returns {number} number of ways to sum\\n */\\nexport function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":357,\"_hash\":\"8a68acbe2492a05c86e6546f54c823867bf6cff25d4d2e86d552aff1098d18db\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime\\n * factor of the input?\\n *\\n * @param {number} input\\n * @returns {number} largest prime factor\\n */\\nexport function findLargestPrimeFactor(input) {\\n  /** @type {Object.<number, boolean>} */\\n  const cachedPrimeNumberMap = {};\\n\\n  const primes = [];\\n  for (let i = 1; i <= input; i++) {\\n    if (input % i !== 0) continue;\\n    if (_isPrime(i, cachedPrimeNumberMap)) primes.push(i);\\n  }\\n  return primes.slice(-1)[0];\\n}\\n\\n/**\\n * Checks if a number is prime.\\n *\\n * @param {number} number\\n * @param {Object.<number, boolean>} cachedPrimeNumberMap\\n */\\nfunction _isPrime(number, cachedPrimeNumberMap) {\\n  if (number in cachedPrimeNumberMap) return cachedPrimeNumberMap[number];\\n  for (let i = 2; i < number; i++) {\\n    if (number % i === 0) {\\n      cachedPrimeNumberMap[number] = false;\\n      return false;\\n    }\\n  }\\n  cachedPrimeNumberMap[number] = true;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":358,\"_hash\":\"adaa0db1e11a934a70dc2e8e62ddd1dafa5485848c0fc539ce14dfcc5307e512\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 112,61,181,149,39,17,143,192,196,120,151\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {string} input\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderI(input) {\\n  let maxProfit = 0;\\n  for (let day = 0; day < input.length - 1; day++) {\\n    const profit = Math.max(...input.slice(day + 1)) - input[day];\\n    if (profit > maxProfit) maxProfit = profit;\\n  }\\n  return maxProfit;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderI([112, 61, 181, 149, 39, 17, 143, 192, 196, 120, 151])\\n);\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":359,\"_hash\":\"e2816fc708994620ac4a831daf31fe7c7e085d179d3b45f7fdbd3ec249c19d5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i.\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {int[]} stockPrices\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  let profit = 0;\\n\\n  let day = -1;\\n  while (day < stockPrices.length) {\\n    day++;\\n    if (stockPrices[day + 1] > stockPrices[day]) {\\n      let minPrice = stockPrices[day];\\n      day++;\\n\\n      while (\\n        day < stockPrices.length &&\\n        stockPrices[day + 1] > stockPrices[day]\\n      ) {\\n        day++;\\n      }\\n      let maxPrice = stockPrices[day];\\n      profit += maxPrice - minPrice;\\n    }\\n  }\\n\\n  return profit;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":360,\"_hash\":\"408d4f1e8f53592e4245048ecddbcdf5cbfa68ccea591735e28c2a10fca59457\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/algorithmic-stock-trader-iii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":361,\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/unique-paths-in-a-grid-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":362,\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * @param {number[]} input\\n * @returns {number}\\n */\\nexport function subarrayWithMaximumSum(input) {\\n  let maxSum = input[0];\\n  for (let startIndex = 0; startIndex < input.length; startIndex++) {\\n    for (let endIndex = startIndex + 1; endIndex <= input.length; endIndex++) {\\n      const subarray = input.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b);\\n      maxSum = Math.max(maxSum, sum);\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":363,\"_hash\":\"5cdf8f48468f4da70baeb04591bb73878aae85e5d0541f20b982457c69806d53\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  if (_isValid(input)) return [input];\\n\\n  let parenthesesToRemove = 1;\\n  let variants = [];\\n  while (parenthesesToRemove <= input.length) {\\n    variants = [...new Set(_getVariants(input, parenthesesToRemove))].filter(\\n      _isValid\\n    );\\n    if (variants.length > 0) break;\\n    parenthesesToRemove++;\\n  }\\n  return variants;\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} parenthesesToRemove\\n * @returns {string[]}\\n */\\nfunction _getVariants(str, parenthesesToRemove) {\\n  if (parenthesesToRemove === 0) return [str];\\n  const variants = [];\\n  for (let i = 0; i < str.length; i++) {\\n    if (str.charAt(i) !== '(' && str.charAt(i) !== ')') continue;\\n    const variant = str.substring(0, i) + str.substring(i + 1, str.length);\\n    if (parenthesesToRemove === 1) {\\n      variants.push(variant);\\n    } else {\\n      const furtherVariants = _getVariants(variant, parenthesesToRemove - 1);\\n      for (const furtherVariant of furtherVariants) {\\n        if (variants.includes(furtherVariant)) continue;\\n        variants.push(furtherVariant);\\n      }\\n    }\\n  }\\n  return variants;\\n}\\n\\nfunction _isValid(str) {\\n  if (str === '') return true;\\n  const stack = [];\\n  const characters = str.split('');\\n  for (const character of characters) {\\n    if (character === '(') stack.push(character);\\n    else if (character === ')' && stack.pop() !== '(') return false;\\n  }\\n  return stack.length === 0;\\n}\\n\",\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":364,\"_hash\":\"62149e986e689565cc9daaea888f5d6c8e3f0d01af3d0e963079f1ea60b4d6b7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of a grid.\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {int[][]} input\\n */\\nexport function uniquePathsInAGridII(input) {\\n  return new Set(getUniquePaths(input, 0, 0, '')).size;\\n}\\n\\n/**\\n * @param {int[][]} grid\\n * @param {int} startX\\n * @param {int} startY\\n * @returns {string[]} list of instructions (e.g. \\\"DDRR\\\")\\n */\\nexport function getUniquePaths(grid, startX, startY, instructionsThusFar) {\\n  if (startX === grid[0].length - 1 && startY === grid.length - 1) {\\n    return [instructionsThusFar];\\n  }\\n  const allInstructions = [];\\n  if (_canMoveRight(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX + 1, startY, instructionsThusFar + 'R')\\n    );\\n  }\\n  if (_canMoveDown(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX, startY + 1, instructionsThusFar + 'D')\\n    );\\n  }\\n  return allInstructions;\\n}\\n\\nfunction _canMoveRight(grid, x, y) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\nfunction _canMoveDown(grid, x, y) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":365,\"_hash\":\"46f788491f931079774091844bc994940b3a5e29a2c9dcd8b2ab13715a41cf4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SOURCE_COLUMN_HEADER = 'Source';\\nconst MONEY_COLUMN_HEADER = 'Money';\\nconst MONEY_ABBR_COLUMN_HEADER = 'Money (Abbr.)';\\nconst PERCENT_NET_WORTH_COLUMN_HEADER = '% net worth';\\n\\n/**\\n * Prints out net worth along with breakdown on how much of net worth is in each\\n * stock and in cash.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let stocks = [];\\n  try {\\n    stocks = ns.stock\\n      .getSymbols()\\n      .map(symbol => new Stock(ns, symbol))\\n      .filter(stock => stock.worth > 0);\\n    sort(stocks, stock => stock.symbol);\\n    sort(stocks, stock => stock.worth);\\n  } catch (_) {}\\n\\n  const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n  const netWorth =\\n    cash + stocks.map(stock => stock.worth).reduce((a, b) => a + b, 0);\\n\\n  const sections = [\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Cash',\\n        [MONEY_COLUMN_HEADER]: formatMoney(cash),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(cash, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(cash / netWorth),\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Net worth',\\n        [MONEY_COLUMN_HEADER]: formatMoney(netWorth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(netWorth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n  ];\\n  if (stocks.length > 0) {\\n    sections.unshift(\\n      stocks.map(stock => ({\\n        [SOURCE_COLUMN_HEADER]: stock.symbol,\\n        [MONEY_COLUMN_HEADER]: formatMoney(stock.worth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(stock.worth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(\\n          stock.worth / netWorth\\n        ),\\n      }))\\n    );\\n  }\\n  printTable(\\n    ns,\\n    {\\n      [MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MONEY_ABBR_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_NET_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...sections\\n  );\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.worth = getStockWorth(ns, symbol);\\n  }\\n}\\n\",\"filename\":\"get-net-worth.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///807e4624-2a28-4809-a825-04833baee107\",\"moduleSequenceNumber\":375},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///63e9d144-21e6-4e8e-bf96-39f841cc909b\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///571c0142-a73a-446c-8eda-89105d8304e3\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///c82413ae-edc4-4570-b700-822e0205f0ca\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///8eef96e0-8a3b-46be-ac20-afbddd51298a\",\"moduleSequenceNumber\":351},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///b1ead916-0e6e-4224-bd72-ec7755466b7c\",\"moduleSequenceNumber\":368},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///b9acd590-a419-4a80-9588-4a6876a76ff1\",\"moduleSequenceNumber\":348},{\"filename\":\"get-net-worth.js\",\"url\":\"blob:file:///04f7a3df-c6d4-4b25-aba1-2b5eade39278\",\"moduleSequenceNumber\":19983}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":19983,\"_hash\":\"808af31cf036be749f7db8413971ad21e883c085cd797aa2023756737e7cadc4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, RowColor, printTable } from '/utils/table.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { sort } from '/utils/misc.js';\\nimport {\\n  getAllServerNames,\\n  getFreeRam,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server Name';\\nconst FREE_RAM_COLUMN_HEADER = 'Free RAM';\\nconst MAX_RAM_COLUMN_HEADER = 'Max RAM';\\n\\n/**\\n * Prints out free RAM from all servers that have any RAM.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.freeRam > 0);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const totalFreeRam = servers\\n    .map(server => server.freeRam)\\n    .reduce((a, b) => a + b);\\n  const totalMaxRam = servers\\n    .map(server => server.maxRam)\\n    .reduce((a, b) => a + b);\\n\\n  printTable(\\n    ns,\\n    {\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    servers.map(server => ({\\n      [SERVER_NAME_COLUMN_HEADER]: server.name,\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(server.freeRam) + ' GB',\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(server.maxRam) + ' GB',\\n      rowColor: server.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    })),\\n    [\\n      {\\n        [SERVER_NAME_COLUMN_HEADER]: 'Total free RAM',\\n        [FREE_RAM_COLUMN_HEADER]: formatNumber(totalFreeRam) + ' GB',\\n        [MAX_RAM_COLUMN_HEADER]: formatNumber(totalMaxRam) + ' GB',\\n      },\\n    ]\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.name = serverName;\\n    this.freeRam = getFreeRam(ns, serverName);\\n    this.maxRam = ns.getServerMaxRam(serverName);\\n    this.isPurchased = serverName.startsWith(PURCHASED_SERVER_PREFIX);\\n  }\\n}\\n\",\"filename\":\"get-free-ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///b59d3e3b-9a0f-4a21-afab-81f7442e1adb\",\"moduleSequenceNumber\":131531},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///7e9afa5d-9131-47c9-82c1-8fec255365c0\",\"moduleSequenceNumber\":131531},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///5b93c72d-1739-4499-bb11-c609efee46bd\",\"moduleSequenceNumber\":131548},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///29d464a4-6e83-4f00-a7ad-f844fb814bd0\",\"moduleSequenceNumber\":131530},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///2d0389e0-d088-44db-9a21-8cdf6faf4b30\",\"moduleSequenceNumber\":131528},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///df76c2c4-35da-4695-86b8-907e8b5040c5\",\"moduleSequenceNumber\":131555},{\"filename\":\"get-free-ram.js\",\"url\":\"blob:file:///57c08dce-752a-49ce-8730-d0072309117f\",\"moduleSequenceNumber\":140109}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":367,\"_hash\":\"7c26dcb443ebca8174c811dfd3f5981d041f317059672535ca3bfcb150a4b6a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const COMMISSION_FEE = 100000;\\nconst MIN_PRICE_HISTORY_MILLIS = 5 * 6 * 1000; // Min 5 ticks of history.\\nconst MAX_PRICE_HISTORY_MILLIS = 10 * 60 * 1000; // Max 10 minutes of history.\\n\\n/**\\n * Map of timestamp to price.\\n *\\n * @typedef {Object.<string, number>} PriceHistory\\n */\\n\\n/** @type {Object.<string, PriceHistory>} */\\nconst symbolToAskPriceHistoryMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMaxAskPriceMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMinAskPriceMap = {};\\n\\n/**\\n * Gets how much a stock is worth based on how much of it we own and how much\\n * the bid price is.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n */\\nexport function getStockWorth(ns, symbol) {\\n  const ownedShares = ns.stock.getPosition(symbol)[0];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  return ownedShares * bidPrice - COMMISSION_FEE;\\n}\\n\\n/**\\n * Gets the real forecast or get a predicted forecast for a given stock symbol.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nexport function getForecast(ns, symbol) {\\n  try {\\n    return ns.stock.getForecast(symbol);\\n  } catch (_) {\\n    return predictForecast(ns, symbol);\\n  }\\n}\\n\\n/**\\n * Predicts the forecast based on how many times the ask price has increased or\\n * decreased in the past.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nfunction predictForecast(ns, symbol) {\\n  const currentTimestamp = Date.now();\\n  const currentAskPrice = ns.stock.getAskPrice(symbol);\\n  if (!(symbol in symbolToAskPriceHistoryMap)) {\\n    symbolToAskPriceHistoryMap[symbol] = {\\n      [currentTimestamp]: currentAskPrice,\\n    };\\n    return 0.5;\\n  }\\n  symbolToAskPriceHistoryMap[symbol][currentTimestamp] = currentAskPrice;\\n  const askPrices = Object.values(symbolToAskPriceHistoryMap[symbol]);\\n  symbolToMaxAskPriceMap[symbol] = Math.max(...askPrices);\\n  symbolToMinAskPriceMap[symbol] = Math.min(...askPrices);\\n\\n  // Not enough data.\\n  let timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const historyMillis = currentTimestamp - Math.min(...timestamps);\\n  if (historyMillis < MIN_PRICE_HISTORY_MILLIS) return 0.5;\\n\\n  if (historyMillis > MAX_PRICE_HISTORY_MILLIS) {\\n    // Trim out any data points that we no longer need.\\n    for (const timestamp of timestamps) {\\n      if (currentTimestamp - timestamp > MAX_PRICE_HISTORY_MILLIS) {\\n        delete symbolToAskPriceHistoryMap[symbol][timestamp];\\n      }\\n    }\\n  }\\n\\n  timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const askPriceHistory = symbolToAskPriceHistoryMap[symbol];\\n  let noChangeCount = 0;\\n  let increaseCount = 0;\\n  let decreaseCount = 0;\\n  for (let i = 1; i < timestamps.length; i++) {\\n    const askPriceDiff =\\n      askPriceHistory[timestamps[i]] - askPriceHistory[timestamps[i - 1]];\\n    if (askPriceDiff > 0) increaseCount++;\\n    else if (askPriceDiff < 0) decreaseCount++;\\n    else if (timestamps[i] - timestamps[i - 1] >= 6000) noChangeCount++;\\n  }\\n\\n  const totalCount = noChangeCount + increaseCount + decreaseCount;\\n  let forecast = 0.5 + increaseCount / totalCount - decreaseCount / totalCount;\\n  for (let i = 0; i < noChangeCount; i++) {\\n    if (forecast < 0.5) forecast += noChangeCount / totalCount;\\n    if (forecast > 0.5) forecast -= noChangeCount / totalCount;\\n  }\\n  if (symbolToMaxAskPriceMap[symbol] === currentAskPrice) forecast /= 2;\\n  if (symbolToMinAskPriceMap[symbol] === currentAskPrice) forecast *= 2;\\n  return forecast;\\n}\\n\\n/**\\n * @param {string} symbol\\n * @returns {number[]}\\n */\\nfunction getAskPriceHistoryTimestamps(symbol) {\\n  const timestamps = Object.keys(symbolToAskPriceHistoryMap[symbol]).map(\\n    timestamp => parseInt(timestamp)\\n  );\\n  timestamps.sort();\\n  return timestamps;\\n}\\n\",\"filename\":\"/utils/stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":368,\"_hash\":\"54c0d8d5338c659cb1b9446c193097d28553efe2e46f5f58adf0dff2c99b4c64\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sell all stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const symbols = ns.stock.getSymbols();\\n  for (const symbol of symbols) {\\n    ns.stock.sell(symbol, ns.stock.getPosition(symbol)[0]);\\n  }\\n}\\n\",\"filename\":\"sell-all-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell-all-stocks.js\",\"url\":\"blob:file:///9acba332-da8e-4871-b296-2039787bdc88\",\"moduleSequenceNumber\":130465}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"moduleSequenceNumber\":369,\"_hash\":\"969b0f01584407efec3f1c21529ee242c87d002f07ce3f2a9c822e470a6e2b99\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { arrayJumpingGame } from '/contracts/array-jumping-game.js';\\nimport { findValidMathExpressions } from './contracts/find-valid-math-solutions.js';\\nimport { findLargestPrimeFactor } from '/contracts/find-largest-prime-factor.js';\\nimport { generateIpAddresses } from '/contracts/generate-ip-addresses.js';\\nimport { mergeOverlappingIntervals } from '/contracts/merge-overlapping-intervals.js';\\nimport { minimumPathSumInATriangle } from '/contracts/minimum-path-sum-in-a-triangle.js';\\nimport { sanitizeParenthesesInExpression } from '/contracts/sanitize-parentheses-in-expression.js';\\nimport { spiralizeMatrix } from '/contracts/spiralize-matrix.js';\\nimport { subarrayWithMaximumSum } from '/contracts/subarray-with-maximum-sum.js';\\nimport { totalWaysToSum } from '/contracts/total-ways-to-sum.js';\\nimport {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n  algorithmicStockTraderIII,\\n  algorithmicStockTraderIV,\\n} from '/contracts/algorithmic-stock-trader.js';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from '/contracts/unique-paths-in-a-grid.js';\\nimport {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n} from '/utils/servers.js';\\n\\nconst CONTRACT_TYPE_TO_SOLVER_FN_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Find All Valid Math Expressions': findValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIpAddresses,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\\n/**\\n * Finds all the contracts across all servers and solves any that we can solve\\n * as we go. Print out all unsolved contracts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns).filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n\\n  // Get all contracts.\\n  const allContracts = [];\\n  for (const serverName of serverNames) {\\n    const contracts = ns\\n      .ls(serverName)\\n      .filter(fileName => fileName.endsWith('.cct'))\\n      .map(fileName => new Contract(fileName, serverName));\\n    allContracts.push(...contracts);\\n  }\\n\\n  // Attempt to solve contracts.\\n  const unsolvedContracts = allContracts.filter(\\n    contract => !contract.attemptToSolve(ns)\\n  );\\n\\n  if (unsolvedContracts.length === 0) {\\n    ns.tprintf('\\\\nno unsolved contracts available at the moment');\\n  }\\n}\\n\\nclass Contract {\\n  constructor(fileName, serverName) {\\n    this.fileName = fileName;\\n    this.serverName = serverName;\\n  }\\n\\n  /**\\n   * Attemps to solve a contract.\\n   *\\n   * @param {import('index').NS} ns\\n   * @returns {boolean} true if successfully solved\\n   */\\n  attemptToSolve(ns) {\\n    const contractType = ns.codingcontract.getContractType(\\n      this.fileName,\\n      this.serverName\\n    );\\n    if (!(contractType in CONTRACT_TYPE_TO_SOLVER_FN_MAP)) {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns)\\n      );\\n      return false;\\n    }\\n\\n    const input = ns.codingcontract.getData(this.fileName, this.serverName);\\n    let answer;\\n    try {\\n      answer = CONTRACT_TYPE_TO_SOLVER_FN_MAP[contractType](input);\\n    } catch (exception) {\\n      ns.tprint('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          exception: exception,\\n        })\\n      );\\n      return false;\\n    }\\n    const response = ns.codingcontract.attempt(\\n      answer,\\n      this.fileName,\\n      this.serverName,\\n      { returnReward: true }\\n    );\\n    if (response === '') {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          attemptedAnswer: answer,\\n        })\\n      );\\n      return false;\\n    }\\n\\n    ns.tprintf(\\n      '\\\\nsolved %s: %s\\\\n%s\\\\n',\\n      contractType,\\n      response,\\n      JSON.stringify({\\n        input: input,\\n        output: answer,\\n      })\\n    );\\n    return true;\\n  }\\n\\n  getPath(ns) {\\n    return (\\n      getPath(ns, this.serverName)\\n        .map(path => `connect ${path}`)\\n        .join('; ') + `; run ${this.fileName}`\\n    );\\n  }\\n}\\n\",\"filename\":\"find-contracts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e8c253dd-d592-455d-a2c6-46316da607dc\",\"moduleSequenceNumber\":351},{\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"blob:file:///78c27004-585b-4d7a-930f-1cf1b7261d0b\",\"moduleSequenceNumber\":383},{\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"blob:file:///1f276eee-96cc-4e4a-a90d-94e646593037\",\"moduleSequenceNumber\":381},{\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"blob:file:///480662cf-3cfc-4568-a6c2-a310bb25a64b\",\"moduleSequenceNumber\":357},{\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"blob:file:///2b493fb4-a325-47cf-b657-11ecf70d1638\",\"moduleSequenceNumber\":363},{\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"blob:file:///86f3ebed-08a5-4c55-ae96-1fdb7b05bbc9\",\"moduleSequenceNumber\":382},{\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"blob:file:///b92f35d5-aa77-4605-a840-b27327bd33b1\",\"moduleSequenceNumber\":364},{\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"blob:file:///2bc52278-0339-40c6-9942-f19cb9064a4e\",\"moduleSequenceNumber\":378},{\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"blob:file:///dbb3dfc1-1584-43d8-bf42-2205b1317112\",\"moduleSequenceNumber\":377},{\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"blob:file:///4adae338-c126-4009-8be2-7fb03a8a4555\",\"moduleSequenceNumber\":356},{\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"blob:file:///30b03d6d-6e1a-409a-bf41-93ff04f28ab1\",\"moduleSequenceNumber\":358},{\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"blob:file:///6470363f-53ba-4b97-acab-7cd07ad0799e\",\"moduleSequenceNumber\":355},{\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"blob:file:///98edf922-92bb-492d-aa88-a4ac7d2c196a\",\"moduleSequenceNumber\":354},{\"filename\":\"find-contracts.js\",\"url\":\"blob:file:///9111c643-6e86-4906-b23f-430fd67fc246\",\"moduleSequenceNumber\":19982}],\"dependents\":[],\"ramUsage\":22.05,\"server\":\"home\",\"moduleSequenceNumber\":19982,\"_hash\":\"2fd40bbd41cb4f81527a04f0552b2231f1ff6ed86765f96d77d24dd62522b067\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['scan', 'sleep', 'getHackingLevel'];\\n\\n/**\\n * Finds any servers that do not have backdoor installed and can have backdoor\\n * installed.\\n *\\n * Run this script with `--tail`.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  const hackableServerNames = getAllServerNames(ns).filter(\\n    server =>\\n      server !== HOME_SERVER_NAME && !server.startsWith(PURCHASED_SERVER_PREFIX)\\n  );\\n\\n  // If we have SF4, then we can automatically run the backdoors.\\n  try {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n    for (const serverName of serverNames) {\\n      _connectTo(ns, serverName, ns.getCurrentServer());\\n      await ns.installBackdoor();\\n    }\\n    _connectTo(ns, HOME_SERVER_NAME, ns.getCurrentServer());\\n  } catch (_) {\\n    // No Source File 4 API\\n  }\\n\\n  while (true) {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n\\n    if (serverNames.length === 0) {\\n      ns.print('No servers that we can install backdoor available.');\\n      ns.tprint('No servers that we can install backdoor available.');\\n      return;\\n    }\\n\\n    ns.clearLog();\\n    ns.print(\\n      '\\\\n' +\\n        serverNames\\n          .map(\\n            serverName =>\\n              `${serverName}\\\\n${[\\n                'home',\\n                ...getPath(ns, serverName).map(path => `connect ${path}`),\\n                'backdoor',\\n              ].join('; ')}`\\n          )\\n          .join('\\\\n\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _getBackdoorableServerNames(ns, hackableServerNames) {\\n  return hackableServerNames.filter(serverName => {\\n    const server = ns.getServer(serverName);\\n    return (\\n      server.hasAdminRights &&\\n      !server.backdoorInstalled &&\\n      server.requiredHackingSkill <= ns.getHackingLevel()\\n    );\\n  });\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _connectTo(ns, serverName, lastServerName) {\\n  const path = getPath(ns, serverName, lastServerName, '');\\n  for (const server of path) ns.connect(server);\\n}\\n\",\"filename\":\"find-backdoors.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///6885ac67-8739-43a6-9457-3e3b53a64a02\",\"moduleSequenceNumber\":351},{\"filename\":\"find-backdoors.js\",\"url\":\"blob:file:///20b81186-004a-4f8b-8932-ecde8cdf10bc\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":99.85,\"server\":\"home\",\"moduleSequenceNumber\":684,\"_hash\":\"1fa72ed546c8e0b9e667ab27c57f7e22fc31369c404b7a1d4297663b244f2e11\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCurrentServer\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\nimport {\\n  isHackable,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst GROWING_COLUMN_HEADER = 'Growing';\\nconst WEAKENING_COLUMN_HEADER = 'Weakening';\\nconst HACKING_COLUMN_HEADER = 'Hacking';\\nconst MAX_RAM_COLUMN_HEADER = 'Max ram';\\nconst USED_RAM_COLUMN_HEADER = 'Used ram';\\nconst FREE_RAM_COLUMN_HEADER = 'Free ram';\\n\\n/**\\n * Prints out information about all servers that we have root access to and\\n * which scripts they're running.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.hasRootAccess);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam, true);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const hackableServerNames = servers\\n    .filter(server => isHackable(ns, server.name))\\n    .map(server => server.name);\\n  sort(hackableServerNames, serverName => serverName);\\n  for (const server of servers) {\\n    for (const targetServerName of hackableServerNames) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        server.growing.push({\\n          targetServerName: targetServerName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        server.weakening.push({\\n          targetServerName: targetServerName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        server.hacking.push({\\n          targetServerName: targetServerName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  servers = servers.filter(server => server.maxRam > 0);\\n  printTable(\\n    ns,\\n    {\\n      [GROWING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [WEAKENING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACKING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [USED_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...servers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    const server = ns.getServer(serverName);\\n    this.hasRootAccess = server.hasAdminRights;\\n    if (!this.hasRootAccess) return;\\n\\n    this.isPurchased = server.purchasedByPlayer;\\n\\n    // RAM information.\\n    this.maxRam = server.maxRam;\\n    this.usedRam = server.ramUsed;\\n    this.freeRam = this.maxRam - this.usedRam;\\n\\n    this.growing = [];\\n    this.weakening = [];\\n    this.hacking = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n    sort(scripts, script => script.threadCount, true);\\n    return scripts\\n      .map(\\n        script =>\\n          script.targetServerName +\\n          ` (${formatNumber(script.threadCount, true)})`\\n      )\\n      .join('\\\\n');\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SERVER_NAME_COLUMN_HEADER]: this.name,\\n      [GROWING_COLUMN_HEADER]: this._formatScripts(this.growing),\\n      [WEAKENING_COLUMN_HEADER]: this._formatScripts(this.weakening),\\n      [HACKING_COLUMN_HEADER]: this._formatScripts(this.hacking),\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(this.maxRam, true) + ' GB',\\n      [USED_RAM_COLUMN_HEADER]: formatNumber(this.usedRam, true) + ' GB',\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(this.freeRam, true) + ' GB',\\n      rowColor: this.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    };\\n  }\\n}\\n\",\"filename\":\"get-servers-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///9e8f911f-1f26-4b07-a686-5f6a0d45d826\",\"moduleSequenceNumber\":137942},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///1d75221b-a36a-4019-89de-a7bf7ef23243\",\"moduleSequenceNumber\":137933},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///6dcb2154-1124-4216-b3b5-13efb7bbda17\",\"moduleSequenceNumber\":137932},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d42224ab-1a6b-4890-8fde-036f3e6230e8\",\"moduleSequenceNumber\":137941},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ae61acb1-b47b-47b6-80f3-368c51d28d77\",\"moduleSequenceNumber\":137937},{\"filename\":\"get-servers-info.js\",\"url\":\"blob:file:///01e7ab26-6bc3-43f9-8c52-225cd7774e2f\",\"moduleSequenceNumber\":165711}],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":372,\"_hash\":\"613ab5c851562e617a1ae6bb50baede41b0257dcb48404a4ef4a917b334c93a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport {\\n  formatMoney,\\n  formatNumber,\\n  formatPercent,\\n  formatTime,\\n} from '/utils/format.js';\\nimport {\\n  getHackingHeuristic,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  isHackable,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { sort } from '/utils/misc.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst AVAILABLE_MONEY_COLUMN_HEADER = 'Available money';\\nconst SECURITY_LEVEL_COLUMN_HEADER = 'Security level';\\nconst HACK_CHANCE_COLUMN_HEADER = 'Hack chance';\\nconst BEING_GROWN_COLUMN_HEADER = 'Growing by';\\nconst BEING_WEAKENED_COLUMN_HEADER = 'Weakening by';\\nconst BEING_HACKED_COLUMN_HEADER = 'Hacked by';\\nconst HACK_EXP_HEADER = 'Hack exp';\\n\\n/**\\n * Prints out information about all hackable servers.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const allServerNames = getAllServerNames(ns);\\n\\n  const hackableServers = allServerNames\\n    .filter(serverName => isHackable(ns, serverName))\\n    .map(serverName => new Server(ns, serverName));\\n  sort(hackableServers, server => getHackingHeuristic(ns, server.name));\\n\\n  const rootAccessServerNames = allServerNames.filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n  for (const serverName of rootAccessServerNames) {\\n    for (const targetServer of hackableServers) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        targetServer.beingGrownBy.push({\\n          serverName: serverName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        targetServer.beingWeakenedBy.push({\\n          serverName: serverName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        targetServer.beingHackedBy.push({\\n          serverName: serverName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  printTable(\\n    ns,\\n    {\\n      [AVAILABLE_MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_CHANCE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_GROWN_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_WEAKENED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_HACKED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_EXP_HEADER]: Alignment.RIGHT,\\n    },\\n    ...hackableServers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    this.hackHeuristic = getHackingHeuristic(ns, serverName);\\n\\n    this.availableMoney = ns.getServerMoneyAvailable(serverName);\\n    this.percentMaxMoney =\\n      this.availableMoney / ns.getServerMaxMoney(serverName);\\n\\n    this.securityLevel = ns.getServerSecurityLevel(serverName);\\n    this.minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    this.hackChance = ns.hackAnalyzeChance(serverName);\\n\\n    this.growTime = ns.getGrowTime(serverName);\\n    this.weakenTime = ns.getWeakenTime(serverName);\\n    this.hackTime = ns.getHackTime(serverName);\\n\\n    try {\\n      this.hackExp = ns.formulas.hacking.hackExp(\\n        ns.getServer(serverName),\\n        ns.getPlayer()\\n      );\\n    } catch (_) {\\n      // No Formulas.exe\\n    }\\n\\n    this.beingGrownBy = [];\\n    this.beingWeakenedBy = [];\\n    this.beingHackedBy = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n\\n    const totalThreadCount = scripts\\n      .map(script => script.threadCount)\\n      .reduce((a, b) => a + b);\\n    const totalServerCount = scripts.length;\\n    return `${totalServerCount} servers\\\\n${formatNumber(\\n      totalThreadCount,\\n      true\\n    )} threads`;\\n  }\\n\\n  _getRowColor() {\\n    const attackPoints = [\\n      this.beingGrownBy.length > 0 ? 1 : 0,\\n      this.beingWeakenedBy.length > 0 ? 1 : 0,\\n      this.beingHackedBy.length > 0 ? 1 : 0,\\n    ].reduce((a, b) => a + b);\\n    switch (attackPoints) {\\n      case 3:\\n        return RowColor.ERROR;\\n      case 2:\\n        return RowColor.WARN;\\n      case 1:\\n        return RowColor.NORMAL;\\n      case 0:\\n        return RowColor.INFO;\\n    }\\n  }\\n\\n  getTableRow() {\\n    const row = {\\n      [SERVER_NAME_COLUMN_HEADER]:\\n        this.name +\\n        `\\\\nHack heuristic: ${formatNumber(this.hackHeuristic, true)}`,\\n      [AVAILABLE_MONEY_COLUMN_HEADER]:\\n        formatMoney(this.availableMoney, true) +\\n        ` (${formatPercent(\\n          this.percentMaxMoney\\n        )} of max)\\\\nGrow time: ${formatTime(this.growTime)}`,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: `${this.securityLevel.toFixed(\\n        2\\n      )} (out of ${this.minSecurityLevel})\\\\nWeaken time: ${formatTime(\\n        this.weakenTime\\n      )}`,\\n      [HACK_CHANCE_COLUMN_HEADER]: `${formatPercent(\\n        this.hackChance\\n      )}\\\\nHack time: ${formatTime(this.hackTime)}`,\\n      [BEING_GROWN_COLUMN_HEADER]: this._formatScripts(this.beingGrownBy),\\n      [BEING_WEAKENED_COLUMN_HEADER]: this._formatScripts(this.beingWeakenedBy),\\n      [BEING_HACKED_COLUMN_HEADER]: this._formatScripts(this.beingHackedBy),\\n    };\\n    if (this.hackExp) row[HACK_EXP_HEADER] = formatNumber(this.hackExp, true);\\n    row.rowColor = this._getRowColor();\\n    return row;\\n  }\\n}\\n\",\"filename\":\"get-hacking-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e637d569-173c-404f-b10e-1e4f28552dba\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///57ce0fd8-b7dc-493e-abdb-9b1b96378be8\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///e586792f-1851-4b02-93a6-ad2e3a48f475\",\"moduleSequenceNumber\":139},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///d85e71ad-c063-48e7-b614-f184ccce14f8\",\"moduleSequenceNumber\":121},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///7027ad72-770d-4312-af3e-4bc48358c8ca\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///a424e95e-97e5-4a78-9e04-84d5f1af65fa\",\"moduleSequenceNumber\":120},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///25339bc6-ebed-4255-96a4-bfe6359dc1b6\",\"moduleSequenceNumber\":119},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///3430fb6c-2270-46ad-909d-7fc65a866935\",\"moduleSequenceNumber\":146},{\"filename\":\"get-hacking-info.js\",\"url\":\"blob:file:///e81a3bb3-f3ac-48a3-9042-e16803380156\",\"moduleSequenceNumber\":118602}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":373,\"_hash\":\"a2200d433d9b7c84a62ba22143ad157c55cc3fde27f94e9b8611dfe4bd95a366\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SYMBOL_COLUMN_HEADER = 'Symbol';\\nconst ASK_PRICE_COLUMN_HEADER = 'Ask price';\\nconst BID_PRICE_COLUMN_HEADER = 'Bid price';\\nconst OWNED_SHARE_COUNT_COLUMN_HEADER = 'Owned shares';\\nconst MAX_SHARE_COUNT_COLUMN_HEADER = 'Max shares';\\nconst PERCENT_MAX_SHARE_COLUMN_HEADER = '% of max';\\nconst SHARES_WORTH_COLUMN_HEADER = 'Worth';\\nconst SHARES_PROFIT_COLUMN_HEADER = 'Profit';\\nconst FORECAST_COLUMN_HEADER = 'Forecast';\\n\\n/**\\n * Prints out stock info.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const stocks = ns.stock.getSymbols().map(symbol => new Stock(ns, symbol));\\n  sort(stocks, stock => stock.profit, true);\\n\\n  printTable(\\n    ns,\\n    {\\n      [ASK_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BID_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_PROFIT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FORECAST_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    stocks.map(stock => stock.getTableRow())\\n  );\\n\\n  // ns.tprint(table);\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.askPrice = ns.stock.getAskPrice(symbol);\\n    this.bidPrice = ns.stock.getBidPrice(symbol);\\n    this.maxShareCount = ns.stock.getMaxShares(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    this.ownedShareCount = position[0];\\n    this.ownedShareAvgPrice = position[1];\\n    this.sharesWorth = getStockWorth(ns, symbol);\\n    this.profit =\\n      (this.sharesWorth - this.ownedShareCount * this.ownedShareAvgPrice) /\\n      (this.ownedShareCount * this.ownedShareAvgPrice);\\n\\n    this.forecast = ns.stock.getForecast(symbol);\\n  }\\n\\n  _getForecast() {\\n    if (this.forecast > 0.8) return '+++';\\n    if (this.forecast > 0.64) return '++';\\n    if (this.forecast >= 0.5) return '+';\\n    if (this.forecast > 0.32) return '-';\\n    if (this.forecast > 0.16) return '--';\\n    return '---';\\n  }\\n\\n  _getRowColor() {\\n    if (this.profit === 0) return RowColor.WARN;\\n    return this.profit > 0 ? RowColor.NORMAL : RowColor.ERROR;\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SYMBOL_COLUMN_HEADER]: this.symbol,\\n      [ASK_PRICE_COLUMN_HEADER]: formatMoney(this.askPrice),\\n      [BID_PRICE_COLUMN_HEADER]: formatMoney(this.bidPrice),\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: formatNumber(\\n        this.ownedShareCount,\\n        true\\n      ),\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: formatNumber(this.maxShareCount, true),\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: formatPercent(\\n        this.ownedShareCount / this.maxShareCount\\n      ),\\n      [SHARES_WORTH_COLUMN_HEADER]:\\n        this.ownedShareCount === 0 ? '--' : formatMoney(this.sharesWorth, true),\\n      [SHARES_PROFIT_COLUMN_HEADER]:\\n        this.ownedShareCount === 0\\n          ? '--'\\n          : (this.profit > 0 ? '+' : '') + formatPercent(this.profit),\\n      [FORECAST_COLUMN_HEADER]: this._getForecast(),\\n      rowColor: this._getRowColor(),\\n    };\\n  }\\n}\\n\",\"filename\":\"get-stock-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///9c3264f6-993b-4338-9da0-c144b8e64bc4\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///8ce78e3e-5b38-4745-9208-49a558120b99\"},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///5aaf1f10-1d28-48f5-bef3-b91f6f0029d4\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///ad4050d6-1fed-4597-8ada-d32cc43213f1\"},{\"filename\":\"get-stock-info.js\",\"url\":\"blob:file:///38c6bdee-8bbc-492b-b73d-605b0e8c795b\"}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":374,\"_hash\":\"f3bbc46e80bfd4c6386e22c95a62972d37bbd7348daf690e020321d6af4b1349\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef Alignment\\n */\\n\\n/**\\n * Enum for cell alignment.\\n *\\n * @readonly\\n * @enum {Alignment}\\n */\\nexport const Alignment = Object.freeze({ LEFT: 'left', RIGHT: 'right' });\\n\\n/**\\n * @typedef RowColor\\n */\\n\\n/**\\n * Enum for color of row.\\n *\\n * @readonly\\n * @enum {RowColor}\\n */\\nexport const RowColor = Object.freeze({\\n  INFO: 'INFO  ',\\n  WARN: 'WARN  ',\\n  ERROR: 'ERROR ',\\n  NORMAL: '      ',\\n});\\n\\nconst PIPE = '┊';\\nconst DASH = '—';\\nconst JOIN = '+';\\n\\n/**\\n * Utils for printing a table in the terminal.\\n *\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n *        if a column header is not specified in this map, then it is assumed\\n *        that it will be left-aligned\\n * @param {...Object.<string, any>[]} sections\\n *        sections contain rows that are divided by a divider; all rows must\\n *        have the same keys (which are used for column headers)\\n */\\nexport function printTable(ns, columnHeaderToAlignmentMap, ...sections) {\\n  // Fill in any missing alignments. Note that the alignments are not guaranteed\\n  // to be in the same order as the column headers, so we cannot rely on the\\n  // order.\\n  const columnHeaders = Object.keys(sections[0][0]).filter(\\n    key => key !== 'rowColor'\\n  );\\n  if (!columnHeaderToAlignmentMap) columnHeaderToAlignmentMap = {};\\n  for (const columnHeader of columnHeaders) {\\n    if (!(columnHeader in columnHeaderToAlignmentMap)) {\\n      columnHeaderToAlignmentMap[columnHeader] = Alignment.LEFT;\\n    }\\n  }\\n\\n  // Get width of each column.\\n  const columnHeaderToWidthMap = columnHeaders.reduce(\\n    (map, columnHeader) => ({ ...map, [columnHeader]: columnHeader.length }),\\n    {}\\n  );\\n  for (const columnHeader of columnHeaders) {\\n    for (const rows of sections) {\\n      for (const row of rows) {\\n        const lines = row[columnHeader].toString().split('\\\\n');\\n        columnHeaderToWidthMap[columnHeader] = Math.max(\\n          columnHeaderToWidthMap[columnHeader],\\n          ...lines.map(line => line.length)\\n        );\\n      }\\n    }\\n  }\\n\\n  // Print the column headers.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n\\n  // Print each section.\\n  for (let i = 0; i < sections.length; i++) {\\n    for (let j = 0; j < sections[i].length; j++) {\\n      _printRow(\\n        ns,\\n        sections[i][j],\\n        columnHeaders,\\n        columnHeaderToAlignmentMap,\\n        columnHeaderToWidthMap,\\n        j === sections[i].length - 1 && i !== sections.length - 1\\n      );\\n    }\\n  }\\n\\n  // Print the column headers at the end again.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, any>} row\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @param {boolean} shouldAddDivider\\n */\\nfunction _printRow(\\n  ns,\\n  row,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap,\\n  shouldAddDivider\\n) {\\n  const height = Math.max(\\n    ...Object.values(row).map(value => value.toString().split('\\\\n').length)\\n  );\\n\\n  const contents = new Array(height).fill('');\\n  for (const columnHeader of columnHeaders) {\\n    const lines = row[columnHeader].split('\\\\n');\\n    const width = columnHeaderToWidthMap[columnHeader];\\n\\n    for (let i = 0; i < contents.length; i++) {\\n      let line = lines[i] || '';\\n      line =\\n        columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n          ? line.padStart(width)\\n          : line.padEnd(width);\\n      contents[i] += `${PIPE} ${line} `;\\n    }\\n  }\\n  for (let i = 0; i < contents.length; i++) {\\n    contents[i] =\\n      (i === 0 && row.rowColor ? row.rowColor : RowColor.NORMAL) +\\n      contents[i] +\\n      PIPE;\\n  }\\n  if (shouldAddDivider) {\\n    contents.push(\\n      RowColor.NORMAL + _getDivider(columnHeaders, columnHeaderToWidthMap)\\n    );\\n  }\\n\\n  ns.tprintf('%s', contents.join('\\\\n'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printColumnHeaders(\\n  ns,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap\\n) {\\n  const contents = columnHeaders\\n    .map(columnHeader => {\\n      const width = columnHeaderToWidthMap[columnHeader];\\n      return columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n        ? columnHeader.padStart(width)\\n        : columnHeader.padEnd(width);\\n    })\\n    .join(` ${PIPE} `)\\n    .toUpperCase();\\n  const divider = _getDivider(columnHeaders, columnHeaderToWidthMap);\\n  ns.tprintf(\\n    '%s',\\n    [\\n      RowColor.INFO + divider,\\n      RowColor.NORMAL + PIPE + ` ${contents} ` + PIPE,\\n      RowColor.NORMAL + divider,\\n    ].join('\\\\n')\\n  );\\n}\\n\\n/**\\n * @param {import('..').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printDivider(ns, columnHeaders, columnHeaderToWidthMap) {\\n  ns.tprintf(\\n    '%s%s',\\n    RowColor.INFO,\\n    _getDivider(columnHeaders, columnHeaderToWidthMap)\\n  );\\n}\\n\\n/**\\n * Gets just the divider string without the row color print.\\n *\\n * This function does not print anything.\\n *\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @returns {string}\\n */\\nfunction _getDivider(columnHeaders, columnHeaderToWidthMap) {\\n  const contents = columnHeaders\\n    .map(columnHeader => ''.padEnd(columnHeaderToWidthMap[columnHeader], DASH))\\n    .join(DASH + JOIN + DASH);\\n  return [JOIN, DASH, contents, DASH, JOIN].join('');\\n}\\n\",\"filename\":\"/utils/table.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":375,\"_hash\":\"e6e0f0dac4daafd7cb1872f980a02b2d7ddaffe54f6741be2e57a9e3aaf08b0c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport { sort } from '/utils/misc.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nconst SCRIPT_NAME_COLUMN_HEADER = 'Script name';\\nconst RAM_COLUMN_HEADER = 'RAM';\\nconst IS_RUNNING_COLUMN_HEADER = 'Is running';\\n\\n/**\\n * Prints out how much RAM each script takes up.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const scriptNames = ns\\n    .ls(HOME_SERVER_NAME)\\n    .filter(fileName => fileName.endsWith('.js') && !fileName.startsWith('/'));\\n  sort(scriptNames, scriptName => scriptName);\\n  const scripts = scriptNames.map(fileName => ({\\n    [SCRIPT_NAME_COLUMN_HEADER]: fileName,\\n    [RAM_COLUMN_HEADER]: ns.getScriptRam(fileName) + ' GB',\\n    [IS_RUNNING_COLUMN_HEADER]: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? 'true'\\n      : '--',\\n    rowColor: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? RowColor.NORMAL\\n      : RowColor.INFO,\\n  }));\\n\\n  printTable(\\n    ns,\\n    {\\n      [RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [IS_RUNNING_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    scripts,\\n    [\\n      {\\n        [SCRIPT_NAME_COLUMN_HEADER]: 'Total',\\n        [RAM_COLUMN_HEADER]:\\n          scriptNames\\n            .map(scriptName => ns.getScriptRam(scriptName, HOME_SERVER_NAME))\\n            .reduce((a, b) => a + b)\\n            .toFixed(2) + ' GB',\\n        [IS_RUNNING_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ]\\n  );\\n}\\n\",\"filename\":\"get-scripts-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///eec09c77-77c0-4e72-a2bf-1493f392e65b\",\"moduleSequenceNumber\":454413},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///2d5c0813-1b86-46d0-bb31-36d7a49dd08d\",\"moduleSequenceNumber\":454413},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///5fe18efc-20d5-49d9-8e1a-6b6a5ddeb083\",\"moduleSequenceNumber\":454414},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///97888344-5e28-4a7a-b592-b12b4ca7e751\",\"moduleSequenceNumber\":454410},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///3cd1252e-9a6c-40c0-a656-27f678bac4a2\",\"moduleSequenceNumber\":454415},{\"filename\":\"get-scripts-info.js\",\"url\":\"blob:file:///379fa76c-d486-44ae-ae8b-d0becca1248d\",\"moduleSequenceNumber\":454416}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":376,\"_hash\":\"22a7af45c38cd14eb6c8f6dd6dc5cf0ccaabb9c565942e7005e1c8a468995be0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of array of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @param {number[][]} input\\n */\\nexport function mergeOverlappingIntervals(input) {\\n  return _mergeOverlappingIntervals(input);\\n}\\n\\n/**\\n * @param {number[][]} intervals\\n * @returns {number[][]} merged intervals\\n */\\nfunction _mergeOverlappingIntervals(intervals) {\\n  // Sort by second number and then by first number.\\n  intervals.sort((a, b) => a[1] - b[1]);\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  // Find any overlaps.\\n  let overlappingIntervals = [];\\n  let mergedInterval;\\n  for (let i = 0; i < intervals.length - 1; i++) {\\n    for (let j = i + 1; j < intervals.length; j++) {\\n      if (_hasOverlap(intervals[i], intervals[j])) {\\n        overlappingIntervals.push(intervals[i], intervals[j]);\\n        mergedInterval = _merge(intervals[i], intervals[j]);\\n        break;\\n      }\\n    }\\n    if (mergedInterval) break;\\n  }\\n\\n  if (mergedInterval === undefined) return intervals;\\n  intervals = [\\n    mergedInterval,\\n    ...intervals.filter(interval => {\\n      for (const overlappingInterval of overlappingIntervals) {\\n        if (_equal(overlappingInterval, interval)) return false;\\n      }\\n      return true;\\n    }),\\n  ];\\n  return _mergeOverlappingIntervals(intervals);\\n}\\n\\n/**\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {boolean} true if has overlap\\n */\\nfunction _hasOverlap(a, b) {\\n  if (a[0] === b[0] || a[1] === b[1]) return true;\\n  return a[0] < b[0] ? b[0] <= a[1] : a[0] <= b[1];\\n}\\n\\n/**\\n * Merge overlapping intervals. Intervals **must** be overlapping.\\n *\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {number[]} merged interval\\n */\\nfunction _merge(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\\nfunction _equal(a, b) {\\n  return a[0] === b[0] && a[1] === b[1];\\n}\\n\",\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":377,\"_hash\":\"e1a3fee96bfcb47b06fcf82a1625a24dfaec6e621278b577b1318efb365181e1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *             [5],\\n *            [4,5],\\n *           [7,4,6],\\n *          [9,6,4,3],\\n *         [7,4,9,7,8],\\n *        [6,2,7,9,4,2],\\n *       [5,2,3,8,1,5,1],\\n *      [8,4,9,7,1,1,1,2],\\n *     [4,8,1,8,1,3,9,8,6],\\n *    [7,1,1,7,5,8,3,5,3,6],\\n *   [4,6,3,6,4,7,8,5,9,5,8]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} input\\n */\\nexport function minimumPathSumInATriangle(input) {\\n  let rootNode = new Node(input, 0, 0);\\n  return Math.min(\\n    ..._getPaths(rootNode, '').map(path => path.reduce((a, b) => a + b))\\n  );\\n}\\n\\nfunction _getPaths(rootNode, pathThusFar) {\\n  pathThusFar = [...pathThusFar, rootNode.number];\\n  if (rootNode.nextNodes.length === 0) {\\n    return [pathThusFar];\\n  }\\n  const paths = [];\\n  for (const nextNode of rootNode.nextNodes) {\\n    paths.push(..._getPaths(nextNode, pathThusFar));\\n  }\\n  return paths;\\n}\\n\\nclass Node {\\n  constructor(input, row, column) {\\n    this.number = input[row][column];\\n    this.row = row;\\n    this.column = column;\\n\\n    if (this.row === input.length - 1) {\\n      this.nextNodes = [];\\n    } else {\\n      this.nextNodes = [\\n        new Node(input, row + 1, column),\\n        new Node(input, row + 1, column + 1),\\n      ];\\n    }\\n  }\\n}\\n\",\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":378,\"_hash\":\"b58fab38dc5a586f5c6c2795100c671d9b3302ba8dfd4d490d994f3f4e9d159f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const MANAGE_SERVERS_TO_MANAGE_HACKING_PORT = 1;\\nexport const MANAGE_HACKING_TO_MANAGE_STOCKS_PORT = 2;\\n\\nexport const NULL_PORT_DATA = 'NULL PORT DATA';\\n\",\"filename\":\"/utils/ports.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":379,\"_hash\":\"42d5972a2164f7240d5da41c0ba94b9d48bcf741587306fa984ce2e6023f732d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath, HOME_SERVER_NAME } from '/utils/servers.js';\\n\\n/**\\n * Prints the command to go to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint(`usage: run get-path.js <server name>`);\\n    return;\\n  }\\n  const path = [\\n    HOME_SERVER_NAME,\\n    ...getPath(ns, serverName).map(path => 'connect ' + path),\\n  ].join('; ');\\n  ns.tprintf('%s', path);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"get-path.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///3e8038f7-9cc4-454d-aa53-53e2ad0ee134\",\"moduleSequenceNumber\":122},{\"filename\":\"get-path.js\",\"url\":\"blob:file:///a89e6eab-7f6c-42d3-ae36-2cac9e23532f\",\"moduleSequenceNumber\":1471}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":380,\"_hash\":\"5d4680d9f7dbc8846cc1c53692a347168f5a7ad8703e441fb1237de6726247a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderI = input => _getMaxProfit(1, input);\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderII = input =>\\n  _getMaxProfit(input.length, input);\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIII = input => _getMaxProfit(2, input);\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * @param {any[]} input where the first element is the number of trade counts\\n *                      and the second element is the stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIV = input =>\\n  _getMaxProfit(input[0], input[1]);\\n\\n/**\\n * @param {number} maxTradeCount\\n * @param {number[]} stockPrices\\n * @returns {number} max profit\\n */\\nfunction _getMaxProfit(maxTradeCount, stockPrices) {\\n  const tradesWithPositiveProfits = Array(stockPrices.length); // Index is buy day\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    tradesWithPositiveProfits[buyDay] = _getTradesWithPositiveProfit(\\n      stockPrices,\\n      buyDay\\n    );\\n  }\\n\\n  const tradePermutations = Array(stockPrices.length); // Index is buy day.\\n  for (let buyDay = stockPrices.length - 1; buyDay >= 0; buyDay--) {\\n    const availableTrades = tradesWithPositiveProfits[buyDay];\\n    tradePermutations[buyDay] = availableTrades.map(trade => [trade]);\\n\\n    if (buyDay === stockPrices.length - 1) continue;\\n\\n    const futureTradePermutations = tradePermutations[buyDay + 1];\\n    for (const futureTradePermutation of futureTradePermutations) {\\n      tradePermutations[buyDay].push(futureTradePermutation);\\n      if (futureTradePermutation.length === maxTradeCount) continue;\\n\\n      for (const availableTrade of availableTrades) {\\n        if (availableTrade.sellDay <= futureTradePermutation[0].buyDay) {\\n          tradePermutations[buyDay].push([\\n            availableTrade,\\n            ...futureTradePermutation,\\n          ]);\\n        }\\n      }\\n    }\\n\\n    // Trim permutations so that only one permutation of each length and\\n    // buy day (where the chosen permutation is the one with the max profit)\\n    /** @type {Object.<number, Permutation[]>} */\\n    const buyDayToPermutationsMap = {};\\n    for (const permutation of tradePermutations[buyDay]) {\\n      const key = permutation[0].buyDay;\\n      if (!(key in buyDayToPermutationsMap)) buyDayToPermutationsMap[key] = [];\\n      buyDayToPermutationsMap[key].push(permutation);\\n    }\\n    const permutationsToKeep = [];\\n    for (const permutations of Object.values(buyDayToPermutationsMap)) {\\n      const lengthToBestPermutationMap = {};\\n      const lengthToMaxProfitMap = {};\\n      for (const permutation of permutations) {\\n        const length = permutation.length;\\n        const profit = permutation\\n          .map(trade => trade.profit)\\n          .reduce((a, b) => a + b, 0);\\n        if (\\n          !(length in lengthToMaxProfitMap) ||\\n          profit > lengthToMaxProfitMap[length]\\n        ) {\\n          lengthToMaxProfitMap[length] = profit;\\n          lengthToBestPermutationMap[length] = permutation;\\n        }\\n      }\\n      permutationsToKeep.push(...Object.values(lengthToBestPermutationMap));\\n    }\\n    tradePermutations[buyDay] = permutationsToKeep;\\n  }\\n\\n  return Math.max(\\n    ...tradePermutations[0].map(trades =>\\n      trades.map(trade => trade.profit).reduce((a, b) => a + b, 0)\\n    )\\n  );\\n}\\n\\n/**\\n * @typedef {Trade[]} Permutation\\n */\\n\\n/**\\n * @typedef {Object} Trade\\n * @property {number} buyDay\\n * @property {number} sellDay\\n * @property {number} profit\\n */\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {number} buyDay\\n * @returns {Trade[]} trades with positive profit\\n */\\nfunction _getTradesWithPositiveProfit(stockPrices, buyDay) {\\n  const buyPrice = stockPrices[buyDay];\\n  const trades = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const sellPrice = stockPrices[sellDay];\\n    const profit = sellPrice - buyPrice;\\n    if (profit > 0) {\\n      trades.push({ buyDay: buyDay, sellDay: sellDay, profit: profit });\\n    }\\n  }\\n  return trades;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":381,\"_hash\":\"8f1ce73f1ee6a0f7e5a26f84082207c53ce4a1febf88bc9ead2dfcc6c03fcc69\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order\\n *\\n * @param {number[][]} input\\n * @returns {number[]}\\n */\\nexport function spiralizeMatrix(input) {\\n  const visitedMatrix = Array.from({ length: input.length }, () =>\\n    Array(input[0].length).fill(false)\\n  );\\n  return _getPath(input, visitedMatrix, 0, 0, Direction.RIGHT, []);\\n}\\n\\n/**\\n * @typedef {number} Direction\\n */\\n\\n/**\\n * @readonly\\n * @enum {Direction}\\n */\\nconst Direction = Object.freeze({\\n  RIGHT: 0,\\n  DOWN: 1,\\n  LEFT: 2,\\n  UP: 3,\\n});\\n\\n/**\\n * @param {number[][]} matrix\\n * @param {boolean[][]} visitedMatrix copy of matrix for marking which cells we've visited\\n * @param {number} currentX\\n * @param {number} currentY\\n * @param {Direction} currentDirection\\n * @param {number[]} pathThusFar\\n */\\nfunction _getPath(\\n  matrix,\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection,\\n  pathThusFar\\n) {\\n  pathThusFar.push(matrix[currentY][currentX]);\\n  visitedMatrix[currentY][currentX] = true;\\n\\n  // Check if we have visited all cells.\\n  if (_visitedAll(visitedMatrix)) return pathThusFar;\\n\\n  const nextDirection = _getNextDirection(\\n    visitedMatrix,\\n    currentX,\\n    currentY,\\n    currentDirection\\n  );\\n  return _getPath(\\n    matrix,\\n    visitedMatrix,\\n    _getNextX(currentX, nextDirection),\\n    _getNextY(currentY, nextDirection),\\n    nextDirection,\\n    pathThusFar\\n  );\\n}\\n\\nfunction _getNextDirection(\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection\\n) {\\n  if (_canMove(visitedMatrix, currentX, currentY, currentDirection)) {\\n    return currentDirection;\\n  }\\n  return (currentDirection + 1) % Object.keys(Direction).length;\\n}\\n\\nfunction _canMove(visitedMatrix, currentX, currentY, nextDirection) {\\n  const x = _getNextX(currentX, nextDirection);\\n  const y = _getNextY(currentY, nextDirection);\\n  if (x < 0 || x >= visitedMatrix[0].length) return false;\\n  if (y < 0 || y >= visitedMatrix.length) return false;\\n  return !visitedMatrix[y][x];\\n}\\n\\nfunction _getNextX(currentX, nextDirection) {\\n  if (nextDirection === Direction.LEFT) return currentX - 1;\\n  if (nextDirection === Direction.RIGHT) return currentX + 1;\\n  return currentX;\\n}\\n\\nfunction _getNextY(currentY, nextDirection) {\\n  if (nextDirection === Direction.UP) return currentY - 1;\\n  if (nextDirection === Direction.DOWN) return currentY + 1;\\n  return currentY;\\n}\\n\\nfunction _visitedAll(visitedMatrix) {\\n  for (let y = 0; y < visitedMatrix.length; y++) {\\n    for (let x = 0; x < visitedMatrix[y].length; x++) {\\n      if (!visitedMatrix[y][x]) return false;\\n    }\\n  }\\n  return true;\\n}\\n\",\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":382,\"_hash\":\"e4811fbcb4e08d87e2f6b7535abe9a79be10092ade4a3c606f43b16279aa517e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with N rows and M columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns.\\n *\\n * @param {number[]} input array representing number of rows and columns\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const rowCount = input[0];\\n  const columnCount = input[1];\\n  const grid = Array(columnCount).fill(Array(rowCount).fill(0));\\n  return _getUniquePathCount(grid);\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * @param {number[][]} input grid\\n * @returns {number} number of unique paths\\n */\\nexport const uniquePathsInAGridII = _getUniquePathCount;\\n\\n/**\\n * String that is the Object {x: x, y: y} stringified.\\n *\\n * @typedef {string} Coordinates\\n */\\n\\n/**\\n * String containing of only 'D' and 'R' where 'D' represents moving down and\\n * 'R' represents moving right.\\n *\\n * @typedef {string} Path\\n */\\n\\n/**\\n * @param {number[][]} grid\\n * @returns {number} number of unique paths\\n */\\nfunction _getUniquePathCount(grid) {\\n  /** @type {Object.<Coordinates, Path[]>} */\\n  const coordinatesToUniquePathsMap = {};\\n\\n  const columnCount = grid.length;\\n  const rowCount = grid[0].length;\\n  for (let y = columnCount - 1; y >= 0; y--) {\\n    for (let x = rowCount - 1; x >= 0; x--) {\\n      const coordinates = JSON.stringify({ x: x, y: y });\\n      const uniquePaths = _getUniquePaths(\\n        x,\\n        y,\\n        grid,\\n        coordinatesToUniquePathsMap\\n      );\\n      coordinatesToUniquePathsMap[coordinates] = uniquePaths;\\n    }\\n  }\\n\\n  return coordinatesToUniquePathsMap[JSON.stringify({ x: 0, y: 0 })].length;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Object.<Coordinates, Path[]>} coordinatesToUniquePathsMap\\n * @returns {Path[]}\\n */\\nfunction _getUniquePaths(x, y, grid, coordinatesToUniquePathsMap) {\\n  if (y === grid.length - 1 && x === grid[0].length - 1) return [''];\\n\\n  const allPaths = [];\\n\\n  // Get paths if we moved right.\\n  if (_canMoveRight(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x + 1, y: y });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'R' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  // Get paths if we moved down.\\n  if (_canMoveDown(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x, y: y + 1 });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'D' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  return allPaths;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveRight(x, y, grid) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveDown(x, y, grid) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":383,\"_hash\":\"f28c78bf6d9946291215c40e2fea083e70af5c3a45d8320cde91ac933b45b830\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const STOCK_EXCHANGE_API = 'Stock Exchange API';\\nexport const STOCK_MARKET_DATA_API = 'Stock Market Data API';\\nexport const SF4_API = 'SF4 API';\\n\",\"filename\":\"/utils/apis.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":384,\"_hash\":\"bedec2aa15c0ed8f32f7d33bb1c1e3e1e3e742d78dd1765250809a0a9c92aeb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/utils/api.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":385,\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath } from '/utils/servers.js';\\n\\n/**\\n * Connects to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  if (typeof ns.args[0] !== 'string') {\\n    ns.tprint(`usage: run connect.js <server name>`);\\n    return;\\n  }\\n  const path = getPath(ns, ns.args[0]);\\n  for (const server of path) ns.connect(server);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///b2ecd93f-e761-41f8-9dab-3efd68e818ca\",\"moduleSequenceNumber\":122},{\"filename\":\"connect.js\",\"url\":\"blob:file:///77075a83-c349-4661-abd6-ffaf44aa8bc7\",\"moduleSequenceNumber\":1470}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"moduleSequenceNumber\":386,\"_hash\":\"630533065cffaa6689959d488806cdaede0e456c0811ac6148d496b1db5728b0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  formatPercent,\\n  formatMoney,\\n  formatNumber,\\n  formatTime,\\n} from '/utils/format.js';\\n\\n/**\\n * Monitors a single server in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint('usage: run monitor-server.js <server name> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(serverName);\\n\\n    const availableMoney = ns.getServerMoneyAvailable(serverName);\\n    const percentMaxMoney = availableMoney / ns.getServerMaxMoney(serverName);\\n    ns.print(\\n      `\\\\navailable money: ${formatMoney(availableMoney)} (${formatPercent(\\n        percentMaxMoney\\n      )} of max)`\\n    );\\n\\n    const securityLevel = ns.getServerSecurityLevel(serverName);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    ns.print(\\n      `security level:  ${formatNumber(securityLevel)} (min is ${formatNumber(\\n        minSecurityLevel\\n      )})`\\n    );\\n\\n    ns.print(`hack chance: ${formatPercent(ns.hackAnalyzeChance(serverName))}`);\\n\\n    ns.print(\\n      '\\\\n' +\\n        [\\n          `time to hack:   ${formatTime(ns.getHackTime(serverName))}`,\\n          `time to grow:   ${formatTime(ns.getGrowTime(serverName))}`,\\n          `time to weaken: ${formatTime(ns.getWeakenTime(serverName))}`,\\n        ].join('\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"monitor-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///625064d1-46ee-427d-bd07-ad9ba932eb85\"},{\"filename\":\"monitor-server.js\",\"url\":\"blob:file:///6a6a2172-87d7-4941-9392-8db1b856cc38\"}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":387,\"_hash\":\"45b6a42f6e2cc9bd77d3789b9e1fa5dfac2e81d8add5f155e670d20935793d2f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const PROGRAMS = [\\n  'SQLInject.exe',\\n  'HTTPWorm.exe',\\n  'relaySMTP.exe',\\n  'FTPCrack.exe',\\n  'BruteSSH.exe',\\n  'Formulas.exe',\\n];\\n\\n/**\\n * Buys TOR router and programs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const player = ns.getPlayer();\\n\\n  // Buy TOR router.\\n  if (!player.tor) {\\n    while (!ns.purchaseTor()) await ns.sleep(1000);\\n    ns.toast('Bought TOR');\\n  }\\n\\n  // Buy programs.\\n  let programsToBuy;\\n  do {\\n    programsToBuy = PROGRAMS.filter(program => !ns.fileExists(program));\\n\\n    for (const program of programsToBuy) {\\n      if (ns.isBusy() && ns.getPlayer().createProgramName === program) {\\n        continue;\\n      }\\n      const success = ns.purchaseProgram(program);\\n      if (success) ns.toast('Bought ' + program);\\n    }\\n\\n    await ns.sleep(1000);\\n  } while (programsToBuy.length > 0);\\n}\\n\",\"filename\":\"manage-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manage-programs.js\",\"url\":\"blob:file:///7d2083ba-fa32-4644-8334-f147bc84b19e\",\"moduleSequenceNumber\":131581}],\"dependents\":[],\"ramUsage\":74.2,\"server\":\"home\",\"moduleSequenceNumber\":388,\"_hash\":\"0a1a3edc774c4e50505c968ddb851560ba22c940ebdd09e78df9e2a6894f2242\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const DISABLE_LOGGING_FUNCTIONS = ['sleep'];\\n\\nconst WORKING_WORK_TYPES = [\\n  'Working for Company part-time',\\n  'Working for Company',\\n];\\n\\n/**\\n * Manages life when we're not busy playing.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    const player = ns.getPlayer();\\n\\n    if (\\n      ns.isBusy() &&\\n      (WORKING_WORK_TYPES.includes(player.workType) ||\\n        player.crimeType !== '' ||\\n        player.createProgramName !== '' ||\\n        player.currentWorkFactionName !== '')\\n    ) {\\n      // Working at a job or doing a crime, so keep on working.\\n      await ns.sleep(10000);\\n      continue;\\n    }\\n\\n    const lowestSkill = Math.min(\\n      player.hacking,\\n      player.charisma,\\n      player.strength,\\n      player.defense,\\n      player.dexterity,\\n      player.agility\\n    );\\n    if (ns.isBusy() && player.workType.startsWith('Study')) {\\n      // Studying or Taking a class at university\\n      switch (player.className) {\\n        case 'training your strength at a gym':\\n          if (lowestSkill != player.strength) ns.stopAction();\\n          break;\\n        case 'training your defense at a gym':\\n          if (lowestSkill != player.defense) ns.stopAction();\\n          break;\\n        case 'training your dexterity at a gym':\\n          if (lowestSkill != player.dexterity) ns.stopAction();\\n          break;\\n        case 'training your agility at a gym':\\n          if (lowestSkill != player.agility) ns.stopAction();\\n          break;\\n        case 'taking a Leadership course':\\n          if (lowestSkill != player.charisma) ns.stopAction();\\n          break;\\n        case 'taking an Algorithms course':\\n          if (lowestSkill != player.hacking) ns.stopAction();\\n          break;\\n        default:\\n          // Not sure what class we're taking, but stop it!\\n          ns.stopAction();\\n      }\\n      if (ns.isBusy()) {\\n        await ns.sleep(10000);\\n        continue;\\n      }\\n    }\\n\\n    // Player is no longer busy, so start learning something!\\n    switch (lowestSkill) {\\n      case player.strength:\\n        ns.gymWorkout('powerhouse gym', 'strength');\\n        break;\\n      case player.defense:\\n        ns.gymWorkout('powerhouse gym', 'defense');\\n        break;\\n      case player.dexterity:\\n        ns.gymWorkout('powerhouse gym', 'dexterity');\\n        break;\\n      case player.agility:\\n        ns.gymWorkout('powerhouse gym', 'agility');\\n        break;\\n      case player.charisma:\\n        ns.universityCourse('rothman university', 'Leadership');\\n        break;\\n      case player.hacking:\\n        ns.universityCourse('rothman university', 'Algorithms');\\n        break;\\n      default:\\n        // Should never get here.\\n        ns.universityCourse('rothman university', 'Leadership');\\n    }\\n    await ns.sleep(10000);\\n  }\\n}\\n\",\"filename\":\"manage-life.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manage-life.js\",\"url\":\"blob:file:///eba38a92-7171-4fd4-b7a0-f90f3cce226e\",\"moduleSequenceNumber\":683}],\"dependents\":[],\"ramUsage\":90.1,\"server\":\"home\",\"moduleSequenceNumber\":683,\"_hash\":\"502d1493ca2b7caa2b126c91c507ce13be99ed9fd0bc924c707efe26401cc7b5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getForecast } from '/utils/stock.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\n\\n/**\\n * Monitors a single stock in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols = [];\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    ns.tprint('stock API not bought yet');\\n    return;\\n  }\\n\\n  const symbol = ns.args[0];\\n  if (typeof symbol !== 'string' || !symbols.includes(symbol)) {\\n    ns.tprint('usage: run monitor-stock.js <stock symbol> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    const ownedShareCount = position[0];\\n    const ownedAvgSharePrice = position[1];\\n    ns.print('owned shared count:     ', formatNumber(ownedShareCount));\\n    ns.print('owned avg. share price: ', formatMoney(ownedAvgSharePrice));\\n\\n    const askPrice = ns.stock.getAskPrice(symbol);\\n    const bidPrice = ns.stock.getBidPrice(symbol);\\n    ns.print('ask price: ', formatMoney(askPrice));\\n    ns.print('bid price: ', formatMoney(bidPrice), '\\\\n');\\n    ns.print('forecast: ', formatPercent(getForecast(ns, symbol)));\\n\\n    await ns.sleep(6000);\\n  }\\n}\\n\",\"filename\":\"monitor-stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///273103e9-03ca-40d0-a58e-4c0bfa94c8dc\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///3f4be85e-f1c5-42f3-a813-8922f8bac344\"},{\"filename\":\"monitor-stock.js\",\"url\":\"blob:file:///fef1cf13-fcfa-4ae5-a748-0a7c15157192\"}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":390,\"_hash\":\"049233dae835648710e421548d0d39f0a5940cccdde4876058c91940a10804b1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServerNames } from '/utils/servers.js';\\n\\nconst COMPANY_NAMES = {\\n  ECorp: { stockSymbol: 'ECP' },\\n  MegaCorp: { stockSymbol: 'MGCP' },\\n  'Blade Industries': { stockSymbol: 'BLD' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK' },\\n  'Four Sigma': { stockSymbol: 'FSIG' },\\n  'KuaiGong International': { stockSymbol: 'KGI' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM' },\\n  'Storm Technologies': { stockSymbol: 'STM' },\\n  DefComm: { stockSymbol: 'DCOMM' },\\n  'Helios Labs': { stockSymbol: 'HLS' },\\n  VitaLife: { stockSymbol: 'VITA' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS' },\\n  'Universal Energy': { stockSymbol: 'UNV' },\\n  AeroCorp: { stockSymbol: 'AERO' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH' },\\n  'Nova Medical': { stockSymbol: 'NVMD' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO' },\\n  'Rho Construction': { stockSymbol: 'RHOC' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE' },\\n  'SysCore Securities': { stockSymbol: 'SYSC' },\\n  CompuTek: { stockSymbol: 'CTK' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK' },\\n  'Omega Software': { stockSymbol: 'OMGA' },\\n  FoodNStuff: { stockSymbol: 'FNS' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN' },\\n  'Titan Laboratories': { stockSymbol: 'TITN' },\\n};\\n\\nexport function main(ns) {\\n  // ns.tprint(Object.keys(COMPANY_NAMES).length);\\n  // ns.tprint(ns.stock.getSymbols().length);\\n  const serverNames = getAllServerNames(ns);\\n  for (const serverName of serverNames) {\\n    ns.tprint(ns.getServer(serverName).organizationName);\\n  }\\n}\\n\",\"filename\":\"/utils/companies.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/companies.js\",\"url\":\"blob:file:///1286c66f-cb85-4d0a-8f25-beba3ad005cb\"}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":391,\"_hash\":\"e794661723ab1af3726d0ee386e3e10b8c6e5d84afe5dad138446185ab3a4d4b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ORGANIZATIONS = {\\n  ECorp: { stockSymbol: 'ECP', serverName: 'ecorp' },\\n  MegaCorp: { stockSymbol: 'MGCP', serverName: 'megacorp' },\\n  'Blade Industries': { stockSymbol: 'BLD', serverName: 'blade' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK', serverName: 'clarkinc' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK', serverName: 'omnitek' },\\n  'Four Sigma': { stockSymbol: 'FSIG', serverName: '4sigma' },\\n  'KuaiGong International': { stockSymbol: 'KGI', serverName: 'kuai-gong' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM', serverName: 'fulcrumtech' },\\n  'Storm Technologies': { stockSymbol: 'STM', serverName: 'stormtech' },\\n  DefComm: { stockSymbol: 'DCOMM', serverName: 'defcomm' },\\n  'Helios Labs': { stockSymbol: 'HLS', serverName: 'helios' },\\n  VitaLife: { stockSymbol: 'VITA', serverName: 'vitalife' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS', serverName: 'icarus' },\\n  'Universal Energy': { stockSymbol: 'UNV', serverName: 'univ-energy' },\\n  AeroCorp: { stockSymbol: 'AERO', serverName: 'aerocorp' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN', serverName: 'omnia' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS', serverName: 'solaris' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH', serverName: 'global-pharm' },\\n  'Nova Medical': { stockSymbol: 'NVMD', serverName: 'nova-med' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO', serverName: 'lexo-corp' },\\n  'Rho Construction': { stockSymbol: 'RHOC', serverName: 'rho-construction' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE', serverName: 'alpha-ent' },\\n  'SysCore Securities': { stockSymbol: 'SYSC', serverName: 'syscore' },\\n  CompuTek: { stockSymbol: 'CTK', serverName: 'comptek' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK', serverName: 'netlink' },\\n  'Omega Software': { stockSymbol: 'OMGA', serverName: 'omega-net' },\\n  FoodNStuff: { stockSymbol: 'FNS', serverName: 'foodnstuff' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC', serverName: 'sigma-cosmetics' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN', serverName: 'joesguns' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS', serverName: 'catalyst' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN', serverName: 'microdyne' },\\n  'Titan Laboratories': { stockSymbol: 'TITN', serverName: 'titan-labs' },\\n};\\n\\n/**\\n * @param {string} serverName\\n * @returns {string|undefined} stock symbol\\n */\\nexport function getStockSymbol(serverName) {\\n  const organizations = Object.values(ORGANIZATIONS);\\n  const organization = organizations.find(\\n    organization => organization.serverName === serverName\\n  );\\n  return organization === undefined ? undefined : organization.stockSymbol;\\n}\\n\",\"filename\":\"/utils/organizations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///e98eb0ff-a686-41d3-9223-a2ac132a04dd\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":392,\"_hash\":\"87c11a870fd8c62ffd2783a85ca99f5023b43d9b5d1922aaf0ad763d3a0eb9dc\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumber, formatTime } from '/utils/format.js';\\n\\nconst HISTORY_LENGTH = 100;\\nconst HISTORY_SECONDS = 10;\\n\\n/**\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const targetLevel = ns.args[0];\\n  if (typeof targetLevel !== 'number') {\\n    ns.tprint(`usage: run get-hacking-skill-progress.js <target level>`);\\n    return;\\n  }\\n  if (!ns.fileExists('Formulas.exe')) {\\n    ns.tprint('Need Formulas.exe');\\n    return;\\n  }\\n  const player = ns.getPlayer();\\n  const targetExp = ns.formulas.skills.calculateExp(9000, player.hacking_mult);\\n\\n  // Get current rate of exp growth.\\n  const expHistory = [];\\n  for (let i = 0; i < HISTORY_LENGTH; i++) {\\n    expHistory.push(getCurrentExp(ns));\\n    await ns.sleep((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  }\\n  const expDiffs = [];\\n  for (let i = 1; i < expHistory.length; i++) {\\n    expDiffs.push(expHistory[i] - expHistory[i - 1]);\\n  }\\n  const averageGrowth = expDiffs.reduce((a, b) => a + b) / HISTORY_LENGTH;\\n  const averageGrowthPerMs =\\n    averageGrowth / ((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  const currentExp = getCurrentExp(ns);\\n  const timeLeftMs = (targetExp - currentExp) / averageGrowthPerMs;\\n\\n  ns.tprintf('Current hacking experience: ' + formatNumber(currentExp, true));\\n  ns.tprintf('Target hacking experience: ' + formatNumber(targetExp, true));\\n  ns.tprintf(\\n    'Average exp growth per second: ' +\\n      formatNumber(averageGrowthPerMs * 1000, true)\\n  );\\n  ns.tprintf('Time to reach target: ' + formatTime(timeLeftMs));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getCurrentExp(ns) {\\n  const player = ns.getPlayer();\\n  return ns.formulas.skills.calculateExp(player.hacking, player.hacking_mult);\\n}\\n\",\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":156243},{\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"blob:file:///27db7ff0-7b0b-4145-ae9a-9ad7ecef722e\",\"moduleSequenceNumber\":191611}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":393,\"_hash\":\"c12132038d1dccdd6809c6332588105a4c1105ded343fe02c3ed7e2a8112ad26\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const division = ns.corporation.getCorporation().divisions;\\n  console.log(division);\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///24437277-1184-43f9-a54c-a0c79f7e047b\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///7c45a3cf-3f9e-45aa-b3f9-a0e0220b75d5\",\"moduleSequenceNumber\":139},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///345120fa-4688-47ed-b07d-f29996c2c264\",\"moduleSequenceNumber\":121},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e0974ad3-38af-4543-bf83-36f2f9958df7\",\"moduleSequenceNumber\":122},{\"filename\":\"test.js\",\"url\":\"blob:file:///d223fa19-643c-4afa-916b-dddf49786c43\",\"moduleSequenceNumber\":2028}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":52634,\"_hash\":\"3554a6554bbd5b080c2fae53d06f3bb362a956a25abb3a34be5848dbf4d06aa9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFreeRam, HOME_SERVER_NAME } from '/utils/servers.js';\\n\\n/**\\n * Runs a script when we have enough RAM to do so.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const scriptName = /** @type {string} */ (ns.args[0]);\\n  const args = ns.args.slice(1);\\n  const scriptRam = ns.getScriptRam(scriptName);\\n\\n  while (true) {\\n    const freeRam = getFreeRam(ns, HOME_SERVER_NAME);\\n    if (freeRam > scriptRam) {\\n      ns.exec(scriptName, HOME_SERVER_NAME, 1, ...args);\\n      return;\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autcomplete = data => [...data.scripts];\\n\",\"filename\":\"run-script.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///9693a758-c5c2-41fe-b1c9-2edddfd7903f\",\"moduleSequenceNumber\":351},{\"filename\":\"run-script.js\",\"url\":\"blob:file:///c2c91bb8-7a81-4c3f-abe4-c19c59ff3cc2\",\"moduleSequenceNumber\":52635}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":52635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"lauren-13\",\"lauren-23\",\"lauren-21\",\"lauren-3\",\"lauren-22\",\"lauren-4\",\"lauren-10\",\"lauren-11\",\"lauren-12\",\"lauren-20\",\"lauren-14\",\"lauren-0\",\"lauren-8\",\"lauren-9\",\"lauren-17\",\"lauren-15\",\"lauren-2\",\"lauren-5\",\"lauren\",\"lauren-6\",\"lauren-18\",\"lauren-16\",\"lauren-1\",\"lauren-19\",\"lauren-7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":27.956000000000035,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"96.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7436545504.400001,\"moneyMax\":37182727522,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1394,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"73.0.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10993849440.800001,\"moneyMax\":54969247204.00001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1237,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"21.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":5632658818.8,\"moneyMax\":28163294094,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1059,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"62.1.2.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":510.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":666.2100000000236,\"pid\":28779,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":83,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e3f814eb-dce5-4fb0-b3d9-6db49746c1f9\",\"moduleSequenceNumber\":689}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":627.01000000002,\"pid\":28929,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":70,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7c5380c5-6be4-4a68-b3f2-9c0b534a495d\",\"moduleSequenceNumber\":2193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":487.4099999999903,\"pid\":29525,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":25,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7c5380c5-6be4-4a68-b3f2-9c0b534a495d\",\"moduleSequenceNumber\":2193}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29641,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":105,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e3f814eb-dce5-4fb0-b3d9-6db49746c1f9\",\"moduleSequenceNumber\":689}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.4100000000006,\"pid\":29851,\"ramUsage\":1.7,\"server\":\"blade\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///cde0d44d-8cb2-4b24-ad61-3a960a329f0e\",\"moduleSequenceNumber\":14857}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7c5380c5-6be4-4a68-b3f2-9c0b534a495d\",\"moduleSequenceNumber\":2193}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":2193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e3f814eb-dce5-4fb0-b3d9-6db49746c1f9\",\"moduleSequenceNumber\":689}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///cde0d44d-8cb2-4b24-ad61-3a960a329f0e\",\"moduleSequenceNumber\":14857}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":14857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":2249061021.4,\"moneyMax\":11245305107,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1199,\"serverGrowth\":63}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"28.1.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7602757151.400001,\"moneyMax\":38013785757,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1145,\"serverGrowth\":91}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"87.8.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":3783199510.2000003,\"moneyMax\":18915997551,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1058,\"serverGrowth\":70}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"87.2.7.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":510.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.4099999999919,\"pid\":29423,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":166,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8221daec-7eb8-40d0-b386-2e9231ee8885\",\"moduleSequenceNumber\":2191}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29642,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":43,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e2d18e04-3b38-4aba-a737-f91e490a2a1e\",\"moduleSequenceNumber\":690}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":158.20999999999972,\"pid\":29730,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":50,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e2d18e04-3b38-4aba-a737-f91e490a2a1e\",\"moduleSequenceNumber\":690}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29753,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":23,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8221daec-7eb8-40d0-b386-2e9231ee8885\",\"moduleSequenceNumber\":2191}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29885,\"ramUsage\":1.7,\"server\":\"omnitek\",\"threads\":10,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bf526ea5-3b97-4e8f-a16b-eb82c6c1fa22\",\"moduleSequenceNumber\":14855}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8221daec-7eb8-40d0-b386-2e9231ee8885\",\"moduleSequenceNumber\":2191}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":2191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e2d18e04-3b38-4aba-a737-f91e490a2a1e\",\"moduleSequenceNumber\":690}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bf526ea5-3b97-4e8f-a16b-eb82c6c1fa22\",\"moduleSequenceNumber\":14855}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":14855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":3086417118.6000004,\"moneyMax\":15432085593.000004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":916,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"51.8.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":4001174257.2000003,\"moneyMax\":20005871286,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1000,\"serverGrowth\":76}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"86.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":4475342426.400001,\"moneyMax\":22376712132.000004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1237,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"82.5.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29634,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":64,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///00bd1866-33ad-45e0-8e9a-eba8aaee3e65\",\"moduleSequenceNumber\":2190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29884,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1a8fc659-a509-4d54-802c-1a6622e97c6f\",\"moduleSequenceNumber\":14854}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///00bd1866-33ad-45e0-8e9a-eba8aaee3e65\",\"moduleSequenceNumber\":2190}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":2190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cc86028f-b3b9-4824-9fe4-04119def96de\",\"moduleSequenceNumber\":691}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1a8fc659-a509-4d54-802c-1a6622e97c6f\",\"moduleSequenceNumber\":14854}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":14854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":315934876.6,\"moneyMax\":1579674383.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1216,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"15.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1418,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"69.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":233270465,\"moneyMax\":1166352325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":990,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"21.4.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":164474630,\"moneyMax\":822373150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":977,\"serverGrowth\":57}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"41.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":136634975.20000002,\"moneyMax\":683174876.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":937,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"65.5.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29934,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e4b2549a-d2a5-431e-b922-4f9815d7f99d\",\"moduleSequenceNumber\":2200}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e4b2549a-d2a5-431e-b922-4f9815d7f99d\",\"moduleSequenceNumber\":2200}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":2200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d3bd211b-c19b-4ae4-87e6-554c863a455f\",\"moduleSequenceNumber\":692}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///97cf01fe-01be-49ad-80d4-a5952f01a291\",\"moduleSequenceNumber\":14864}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":14864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":135898197.8,\"moneyMax\":679490989.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"85.9.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29636,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4fdeb3b8-7ab9-4cfa-926b-2fbeb7875d45\",\"moduleSequenceNumber\":2198}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29887,\"ramUsage\":1.7,\"server\":\"vitalife\",\"threads\":29,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///09451ced-567b-45d2-8c27-1417dd30dabe\",\"moduleSequenceNumber\":14862}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4fdeb3b8-7ab9-4cfa-926b-2fbeb7875d45\",\"moduleSequenceNumber\":2198}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":2198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///fd16d83b-932f-4c31-b182-9315d5ab0e33\",\"moduleSequenceNumber\":694}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///09451ced-567b-45d2-8c27-1417dd30dabe\",\"moduleSequenceNumber\":14862}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":14862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":159222894.6,\"moneyMax\":796114473,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":73}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"79.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":186539802.20000002,\"moneyMax\":932699011,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"75.0.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":63.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.010000000001,\"pid\":29297,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///58c22c33-9f9f-47e4-a8bb-7c6882ecb119\",\"moduleSequenceNumber\":2201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29638,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///58c22c33-9f9f-47e4-a8bb-7c6882ecb119\",\"moduleSequenceNumber\":2201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29889,\"ramUsage\":1.7,\"server\":\"univ-energy\",\"threads\":26,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///46293b1a-55cb-4ddd-bdb6-71195ebce7d0\",\"moduleSequenceNumber\":14865}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///58c22c33-9f9f-47e4-a8bb-7c6882ecb119\",\"moduleSequenceNumber\":2201}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///fd0121d5-67cf-46cb-b0a6-81de24a5c924\",\"moduleSequenceNumber\":695}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///46293b1a-55cb-4ddd-bdb6-71195ebce7d0\",\"moduleSequenceNumber\":14865}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":14865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":223435965.4,\"moneyMax\":1117179827,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"57.1.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":63.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29633,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///78671e2c-615a-4f60-a967-3a66b29360a7\",\"moduleSequenceNumber\":2189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29883,\"ramUsage\":1.7,\"server\":\"titan-labs\",\"threads\":28,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///221c8936-293f-40be-a891-33cd0ac21455\",\"moduleSequenceNumber\":14853}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///78671e2c-615a-4f60-a967-3a66b29360a7\",\"moduleSequenceNumber\":2189}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":2189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4da2368c-2a03-4595-9ff5-a5962d8f520a\",\"moduleSequenceNumber\":697}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///221c8936-293f-40be-a891-33cd0ac21455\",\"moduleSequenceNumber\":14853}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":14853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":163530580.60000002,\"moneyMax\":817652903.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":78}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"34.6.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29932,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5b71d535-2390-4872-b1ed-841330a80b1e\",\"moduleSequenceNumber\":2196}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5b71d535-2390-4872-b1ed-841330a80b1e\",\"moduleSequenceNumber\":2196}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":2196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c1cb076c-1f53-437d-94a1-8063a8fbfa36\",\"moduleSequenceNumber\":698}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a92be1ef-96a2-4240-81a4-7c60aa73c44b\",\"moduleSequenceNumber\":14860}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":14860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":112286570.4,\"moneyMax\":561432852,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"95.6.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":165702392.8,\"moneyMax\":828511964.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":949,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"12.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":151048348,\"moneyMax\":755241740,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"48.6.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":204399312.4,\"moneyMax\":1021996562,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":904,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"16.0.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29931,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///46ec298f-0422-46db-9805-6d732ecf5fc6\",\"moduleSequenceNumber\":2194}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///46ec298f-0422-46db-9805-6d732ecf5fc6\",\"moduleSequenceNumber\":2194}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":2194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7fc12798-30f3-4de5-9db9-f7a43040db22\",\"moduleSequenceNumber\":699}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7fe80a39-7393-4c51-838c-06eb616875fe\",\"moduleSequenceNumber\":14858}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":14858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":189951878,\"moneyMax\":949759390,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"97.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":180948276.4,\"moneyMax\":904741382,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"87.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":143052310.20000002,\"moneyMax\":715261551.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"68.7.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":126.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29632,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":55,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ba263fba-0559-4c1f-a527-f5a7415134dc\",\"moduleSequenceNumber\":2188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29882,\"ramUsage\":1.7,\"server\":\"solaris\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fab5c2f9-66e0-4279-8c9e-ce2ec37a5225\",\"moduleSequenceNumber\":14852}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ba263fba-0559-4c1f-a527-f5a7415134dc\",\"moduleSequenceNumber\":2188}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":2188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///db468f5f-d9bc-4f59-b099-bbbedfc8374a\",\"moduleSequenceNumber\":700}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fab5c2f9-66e0-4279-8c9e-ce2ec37a5225\",\"moduleSequenceNumber\":14852}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":14852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":149536676.6,\"moneyMax\":747683383,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":757,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"15.9.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":288012159.40000004,\"moneyMax\":1440060797.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"99.2.6.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":6.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29631,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c52eb720-f2cc-4971-bb15-bae89e9599cc\",\"moduleSequenceNumber\":2187}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29881,\"ramUsage\":1.7,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1f0972d7-888d-4ec9-8b7b-4585b9434b08\",\"moduleSequenceNumber\":14851}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c52eb720-f2cc-4971-bb15-bae89e9599cc\",\"moduleSequenceNumber\":2187}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///298c1ed1-4059-40e7-a6ec-f50b75b8f6f3\",\"moduleSequenceNumber\":701}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1f0972d7-888d-4ec9-8b7b-4585b9434b08\",\"moduleSequenceNumber\":14851}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":14851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":323524756.8,\"moneyMax\":1617623784,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":776,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"40.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":229426903.4,\"moneyMax\":1147134517,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"24.7.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":288852123.6,\"moneyMax\":1444260618.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"71.5.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29635,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e4d0c432-49b2-4327-9877-4e15e2bff911\",\"moduleSequenceNumber\":2195}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29886,\"ramUsage\":1.7,\"server\":\"unitalife\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e693c49-e4b6-4192-b661-d4bceea24957\",\"moduleSequenceNumber\":14859}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e4d0c432-49b2-4327-9877-4e15e2bff911\",\"moduleSequenceNumber\":2195}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":2195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e4d4dc41-6fbd-43fc-b046-046d215ea36c\",\"moduleSequenceNumber\":702}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e693c49-e4b6-4192-b661-d4bceea24957\",\"moduleSequenceNumber\":14859}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":14859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":210305076,\"moneyMax\":1051525380,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"32.6.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29965,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8a28f888-36ae-453e-baa2-1ad073ea37a9\",\"moduleSequenceNumber\":17941}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8a28f888-36ae-453e-baa2-1ad073ea37a9\",\"moduleSequenceNumber\":17941}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":17941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ae52199f-2753-45ee-8537-2d421af8eb6d\",\"moduleSequenceNumber\":703}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///dcbb1d12-6740-4278-abd8-f50c47d125dc\",\"moduleSequenceNumber\":14846}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":14846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":153088891.8,\"moneyMax\":765444459.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":701,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"48.1.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29630,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8c9df898-13d5-467d-a52b-6a6b1ab014dd\",\"moduleSequenceNumber\":2183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29880,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///73b31ad5-4611-4f9a-bd5f-d527f521d39f\",\"moduleSequenceNumber\":14847}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8c9df898-13d5-467d-a52b-6a6b1ab014dd\",\"moduleSequenceNumber\":2183}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8f3ca040-1592-4f94-bfba-e0fecfa278ff\",\"moduleSequenceNumber\":705}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///73b31ad5-4611-4f9a-bd5f-d527f521d39f\",\"moduleSequenceNumber\":14847}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":14847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":129705509.4,\"moneyMax\":648527547,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":521,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"15.2.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29964,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///16cabb19-f760-4dd0-9bb7-8f95c84f7621\",\"moduleSequenceNumber\":17939}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///16cabb19-f760-4dd0-9bb7-8f95c84f7621\",\"moduleSequenceNumber\":17939}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":17939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///50f61f93-164a-4121-bfb7-98b823e579ff\",\"moduleSequenceNumber\":706}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///df58c62f-4b4c-4928-b7e2-65cd69a116e7\",\"moduleSequenceNumber\":14844}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":14844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":145272138.8,\"moneyMax\":726360694.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":504,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"63.7.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29929,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///48aa574b-a133-4a4c-a691-044956539d9f\",\"moduleSequenceNumber\":2186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///48aa574b-a133-4a4c-a691-044956539d9f\",\"moduleSequenceNumber\":2186}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///fdf52492-6ebd-497a-ab77-bad59975572a\",\"moduleSequenceNumber\":707}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9cb2d681-d092-4f84-8829-124a8b64210f\",\"moduleSequenceNumber\":14850}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":14850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":49188529.2,\"moneyMax\":245942646,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":429,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685746.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[45,133,98,9,34,15,8,76,165,86,120,17,18,66,37,129,165,111,144,176,83,168,110,172,199,188,161,7,76,33,158],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"48.5.2.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29626,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":59,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///74b5ee09-3725-4706-b018-0159cd342963\",\"moduleSequenceNumber\":802}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29877,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":14,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d1e6966f-47b2-471b-8b87-ebfa4c5d50e7\",\"moduleSequenceNumber\":708}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///74b5ee09-3725-4706-b018-0159cd342963\",\"moduleSequenceNumber\":802}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///eda48d8e-dc4d-4de4-b0e4-6a0c2824462e\",\"moduleSequenceNumber\":4936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d1e6966f-47b2-471b-8b87-ebfa4c5d50e7\",\"moduleSequenceNumber\":708}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":50,\"hackDifficulty\":29.978000000000023,\"minDifficulty\":17,\"moneyAvailable\":4714063.823620032,\"moneyMax\":208172059.00000003,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"53.2.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29966,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6dece3c3-cb4b-4027-81e0-009e4b4bf662\",\"moduleSequenceNumber\":2184}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6dece3c3-cb4b-4027-81e0-009e4b4bf662\",\"moduleSequenceNumber\":2184}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":2184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cab47f15-ddda-4e03-99da-5b9b0b3e424c\",\"moduleSequenceNumber\":709}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///38e9fdec-bccc-47c6-8270-a05e74a5de99\",\"moduleSequenceNumber\":14848}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":14848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":161718533.4,\"moneyMax\":808592667,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"71.5.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29928,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":21,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ccd0f8ce-9f31-4d09-97e6-9774767844de\",\"moduleSequenceNumber\":2185}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29969,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":16,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///20b7476c-a2c2-4228-8a22-eb73e75e91dd\",\"moduleSequenceNumber\":14849}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ccd0f8ce-9f31-4d09-97e6-9774767844de\",\"moduleSequenceNumber\":2185}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e1fb68c2-e7d8-40f1-937c-1efbd0d2260d\",\"moduleSequenceNumber\":710}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///20b7476c-a2c2-4228-8a22-eb73e75e91dd\",\"moduleSequenceNumber\":14849}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":14849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":27.440000000000037,\"minDifficulty\":20,\"moneyAvailable\":26818468.400000006,\"moneyMax\":260308327.00000006,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":430,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"33.3.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":98887335.80000001,\"moneyMax\":494436679.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":564,\"serverGrowth\":68}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"84.5.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29963,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///77b80e88-6aaa-41be-9d80-91d68b8f7ba0\",\"moduleSequenceNumber\":17938}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///77b80e88-6aaa-41be-9d80-91d68b8f7ba0\",\"moduleSequenceNumber\":17938}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":17938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f8d9c302-13a8-4e8f-bb42-7d6e4e64546b\",\"moduleSequenceNumber\":711}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4a2ff620-4999-4114-9819-af8260400bc3\",\"moduleSequenceNumber\":14843}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":14843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":28.205999999999992,\"minDifficulty\":20,\"moneyAvailable\":7648668.200000003,\"moneyMax\":408699046,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":423,\"serverGrowth\":48}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"11.1.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":62.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.010000000001,\"pid\":29296,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":20,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///613372df-7e3e-4ce8-b9ba-28e85faf6667\",\"moduleSequenceNumber\":17937}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29628,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///613372df-7e3e-4ce8-b9ba-28e85faf6667\",\"moduleSequenceNumber\":17937}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29892,\"ramUsage\":1.7,\"server\":\"the-hub\",\"threads\":13,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///24be618b-697b-4b8f-8095-864732c12c2a\",\"moduleSequenceNumber\":14842}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30021,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///613372df-7e3e-4ce8-b9ba-28e85faf6667\",\"moduleSequenceNumber\":17937}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///613372df-7e3e-4ce8-b9ba-28e85faf6667\",\"moduleSequenceNumber\":17937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":17937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///91d13817-8840-49a4-a2a7-f9208264a19f\",\"moduleSequenceNumber\":712}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///24be618b-697b-4b8f-8095-864732c12c2a\",\"moduleSequenceNumber\":14842}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":14842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":43.906000000000056,\"minDifficulty\":12,\"moneyAvailable\":2180528.05590258,\"moneyMax\":177403280,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":296,\"serverGrowth\":45}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"82.7.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":24.051999999999996,\"minDifficulty\":22,\"moneyAvailable\":3425356.099071542,\"moneyMax\":234496079,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":371,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"75.6.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29938,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d75f579d-a313-4308-9dcf-a0ce0126b628\",\"moduleSequenceNumber\":2205}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d75f579d-a313-4308-9dcf-a0ce0126b628\",\"moduleSequenceNumber\":2205}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":2205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a95b0f73-995f-4e77-b01a-40e64e96f9fd\",\"moduleSequenceNumber\":713}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///072fade3-3d99-492e-9dd4-1012495d357b\",\"moduleSequenceNumber\":14869}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":14869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":70,\"hackDifficulty\":25.904000000000018,\"minDifficulty\":23,\"moneyAvailable\":11701875,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":383,\"serverGrowth\":61}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"39.4.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46,\"hackDifficulty\":23.866000000000042,\"minDifficulty\":15,\"moneyAvailable\":4222579.850417092,\"moneyMax\":84764729,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":270,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"76.9.8.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30011,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///719cd57d-aa38-41e3-ad97-8686f61bfb6b\",\"moduleSequenceNumber\":714}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///719cd57d-aa38-41e3-ad97-8686f61bfb6b\",\"moduleSequenceNumber\":714}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9ec89ec1-b69d-4eaa-846a-3212f8b10c47\",\"moduleSequenceNumber\":167084}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6142ba7e-e8b6-4cba-b33f-c06d26d050e2\",\"moduleSequenceNumber\":137637}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.23,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"79.3.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30012,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9c41e0b0-9dba-44f5-b890-268a60631e16\",\"moduleSequenceNumber\":715}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9c41e0b0-9dba-44f5-b890-268a60631e16\",\"moduleSequenceNumber\":715}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///bc4725c6-23f7-4aa9-ae26-198128e41581\",\"moduleSequenceNumber\":167085}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5c141093-48bd-42dc-9760-41581a72f4ec\",\"moduleSequenceNumber\":137638}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":89.87400000000032,\"minDifficulty\":3,\"moneyAvailable\":558923.2668882238,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"75.1.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30013,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ad72e12b-8483-418e-a326-1206b71b7c29\",\"moduleSequenceNumber\":716}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ad72e12b-8483-418e-a326-1206b71b7c29\",\"moduleSequenceNumber\":716}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///256890f9-5e94-4a35-bf8f-0d5f4d86b411\",\"moduleSequenceNumber\":167086}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f673216b-cde9-43aa-92de-53dba70cbf13\",\"moduleSequenceNumber\":137639}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":87.00800000000018,\"minDifficulty\":3,\"moneyAvailable\":747949.1770563168,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"96.9.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30014,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///50a6cf63-e3e6-4a29-ac43-7862fbcca1ae\",\"moduleSequenceNumber\":717}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///50a6cf63-e3e6-4a29-ac43-7862fbcca1ae\",\"moduleSequenceNumber\":717}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ca6ad991-fed2-47d9-96ab-b9a36a3e0027\",\"moduleSequenceNumber\":167087}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7d130697-ec18-4c97-9718-a2756d706e8e\",\"moduleSequenceNumber\":137640}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":87.58400000000039,\"minDifficulty\":5,\"moneyAvailable\":1078652.5422927155,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"19.8.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29957,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///df2f6f60-84d3-4634-befa-4fd15c78da46\",\"moduleSequenceNumber\":799}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///df2f6f60-84d3-4634-befa-4fd15c78da46\",\"moduleSequenceNumber\":799}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///95d0ab2a-2c16-431d-8813-b18c796d2bb6\",\"moduleSequenceNumber\":4933}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":4933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///416c186a-8923-4a73-832b-17af8f0fa3c0\",\"moduleSequenceNumber\":718}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":74.75600000000033,\"minDifficulty\":8,\"moneyAvailable\":1997636.3414041093,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"96.6.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29935,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///849b23cd-fe7b-4e4e-8f43-ede9c5259141\",\"moduleSequenceNumber\":2202}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///849b23cd-fe7b-4e4e-8f43-ede9c5259141\",\"moduleSequenceNumber\":2202}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d0312040-f4fc-4b25-9cad-76e24ce12a8c\",\"moduleSequenceNumber\":719}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d617f0ea-53d6-4656-908b-dcdf55a72a8c\",\"moduleSequenceNumber\":14866}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":14866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":86.35200000000034,\"minDifficulty\":7,\"moneyAvailable\":1203184.1321213194,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"87.5.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29958,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ab200083-a58e-45d9-bc38-4c7e102d3b17\",\"moduleSequenceNumber\":800}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ab200083-a58e-45d9-bc38-4c7e102d3b17\",\"moduleSequenceNumber\":800}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///366d5e37-c969-4daf-a09c-41ed4da4d741\",\"moduleSequenceNumber\":4934}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":4934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///81858e99-6808-401f-8401-cf82d4245694\",\"moduleSequenceNumber\":720}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":77.40800000000016,\"minDifficulty\":8,\"moneyAvailable\":1852714.178079783,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"71.6.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29627,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":29,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///53cd4a36-ac8a-4d4c-bc09-f4d93ae86347\",\"moduleSequenceNumber\":2182}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29878,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a13c4dd3-207c-462c-9dca-18b5d81638dc\",\"moduleSequenceNumber\":14840}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///53cd4a36-ac8a-4d4c-bc09-f4d93ae86347\",\"moduleSequenceNumber\":2182}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b788045d-3324-4489-a09f-e70d9e5c9245\",\"moduleSequenceNumber\":722}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a13c4dd3-207c-462c-9dca-18b5d81638dc\",\"moduleSequenceNumber\":14840}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":14840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":66.50400000000012,\"minDifficulty\":10,\"moneyAvailable\":2546563.2170714284,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"37.3.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30015,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///24895351-9a85-4b9c-8bc6-afc612f345fe\",\"moduleSequenceNumber\":723}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///24895351-9a85-4b9c-8bc6-afc612f345fe\",\"moduleSequenceNumber\":723}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///db800f9a-51e8-4592-a44a-ce0357fdc7b9\",\"moduleSequenceNumber\":167088}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///97bcc870-45cc-41a4-941c-92771c7e7ba1\",\"moduleSequenceNumber\":137641}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":79.69800000000032,\"minDifficulty\":5,\"moneyAvailable\":1359024.306563426,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"89.7.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30016,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ad973f5b-914f-427b-af2a-6859994e6c47\",\"moduleSequenceNumber\":724}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ad973f5b-914f-427b-af2a-6859994e6c47\",\"moduleSequenceNumber\":724}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///81c7cea0-f51d-43ca-8d26-7960383f215e\",\"moduleSequenceNumber\":167089}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ebabd16f-709e-4567-a3d0-061393940b99\",\"moduleSequenceNumber\":137642}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.581999999999991,\"minDifficulty\":5,\"moneyAvailable\":3995394,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"84.5.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29937,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///fca065e9-7d6b-4820-8de7-2956be631c9f\",\"moduleSequenceNumber\":2204}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///fca065e9-7d6b-4820-8de7-2956be631c9f\",\"moduleSequenceNumber\":2204}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4ae5568e-eb75-4412-a5fc-5a6d74a6b8a2\",\"moduleSequenceNumber\":725}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e743c400-8aab-4de9-b2ed-908bc9f8e419\",\"moduleSequenceNumber\":14868}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":14868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":33.47000000000022,\"minDifficulty\":7,\"moneyAvailable\":2936616.368550327,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"56.4.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29961,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///14f4f76f-385e-48df-acc5-189f5e8fccf8\",\"moduleSequenceNumber\":17935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///14f4f76f-385e-48df-acc5-189f5e8fccf8\",\"moduleSequenceNumber\":17935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":17935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///87ad0701-1345-4e31-b245-840490f8d475\",\"moduleSequenceNumber\":726}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c2f425ea-4f59-466a-ae5d-b916fed6bd05\",\"moduleSequenceNumber\":14839}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":14839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":61.23200000000004,\"minDifficulty\":5,\"moneyAvailable\":782220.353862214,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"74.4.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29962,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///451623ce-e604-40a8-a42e-02be7a3f758a\",\"moduleSequenceNumber\":17936}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///451623ce-e604-40a8-a42e-02be7a3f758a\",\"moduleSequenceNumber\":17936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":17936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed270c1b-8874-4eaf-88a3-c8b01b87bc39\",\"moduleSequenceNumber\":727}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ea5cf11f-3ff2-42c6-ae4f-a299e2e01229\",\"moduleSequenceNumber\":14841}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":14841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":58.66199999999998,\"minDifficulty\":12,\"moneyAvailable\":3159355.1120161824,\"moneyMax\":65531115,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":212,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"47.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":36,\"hackDifficulty\":45.44999999999997,\"minDifficulty\":12,\"moneyAvailable\":1550125.2000000011,\"moneyMax\":45845331.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":249,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"50.1.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30017,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c02524ad-0781-4bc4-abb9-849aed62db8d\",\"moduleSequenceNumber\":728}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c02524ad-0781-4bc4-abb9-849aed62db8d\",\"moduleSequenceNumber\":728}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b734eef4-3c2d-4f9d-aba4-feb9cde68b31\",\"moduleSequenceNumber\":167090}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///36116c94-9672-4535-aab1-ca01aeab1100\",\"moduleSequenceNumber\":137643}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":61.20800000000005,\"minDifficulty\":10,\"moneyAvailable\":1165832.204322746,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"99.9.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29960,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7fcd1788-ed0f-45e5-a65c-d8705e9e2e8b\",\"moduleSequenceNumber\":17934}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7fcd1788-ed0f-45e5-a65c-d8705e9e2e8b\",\"moduleSequenceNumber\":17934}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":17934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///32e9b860-9fc4-4929-9864-7bc971bd86d0\",\"moduleSequenceNumber\":729}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///207a7ad8-b3da-4541-9e74-4740a2033694\",\"moduleSequenceNumber\":14838}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":14838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":502,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"36.4.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":15.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29637,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///76a24cfd-cda7-44a7-b020-569f805d9d4e\",\"moduleSequenceNumber\":2199}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29888,\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"threads\":8,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e7f172e-0ee9-43a0-baa3-2866b9645dbb\",\"moduleSequenceNumber\":14863}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///76a24cfd-cda7-44a7-b020-569f805d9d4e\",\"moduleSequenceNumber\":2199}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":2199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///49968b0c-826f-4ccb-9a2a-e51c65d453ab\",\"moduleSequenceNumber\":730}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e7f172e-0ee9-43a0-baa3-2866b9645dbb\",\"moduleSequenceNumber\":14863}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":14863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1079,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"87.0.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":690,\"serverGrowth\":51}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"30.4.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29933,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bc530fc2-c689-40f4-89e4-515e27622bd2\",\"moduleSequenceNumber\":2197}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bc530fc2-c689-40f4-89e4-515e27622bd2\",\"moduleSequenceNumber\":2197}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///178c84ea-b471-495d-9da3-bd28469869e7\",\"moduleSequenceNumber\":731}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///05aa9010-a02c-4cfc-8ee6-92fad4a82d68\",\"moduleSequenceNumber\":14861}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":14861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"55.1.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29629,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":6,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8a92af0c-d45d-4b2d-aca1-8ba58fa2944b\",\"moduleSequenceNumber\":17940}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29879,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":31,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6ace6323-9df4-4561-941f-de2eb568a679\",\"moduleSequenceNumber\":14845}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8a92af0c-d45d-4b2d-aca1-8ba58fa2944b\",\"moduleSequenceNumber\":17940}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":17940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e5fef7f0-7d0e-4a5e-900c-67c08a9f7466\",\"moduleSequenceNumber\":732}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6ace6323-9df4-4561-941f-de2eb568a679\",\"moduleSequenceNumber\":14845}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":14845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":351,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"67.6.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29959,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ca74a9ae-f9ab-43ad-a1c5-1cde3e04ebfe\",\"moduleSequenceNumber\":801}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ca74a9ae-f9ab-43ad-a1c5-1cde3e04ebfe\",\"moduleSequenceNumber\":801}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c35a9aad-66c4-4e6e-8235-16bda4c67e04\",\"moduleSequenceNumber\":4935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3ec0d482-bae2-48de-9e49-eddf4196ac96\",\"moduleSequenceNumber\":733}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":218,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"96.1.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29930,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0ddb39b5-63a8-4bd7-8038-38ba613160e9\",\"moduleSequenceNumber\":2192}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0ddb39b5-63a8-4bd7-8038-38ba613160e9\",\"moduleSequenceNumber\":2192}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":2192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6f14951e-3263-41e7-ab18-6eeb901e3f06\",\"moduleSequenceNumber\":734}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d1fe5cc7-ff06-464f-bc21-0768fee451a3\",\"moduleSequenceNumber\":14856}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":14856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":546,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"44.8.1.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":61.61000000000031,\"pid\":29936,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1e29b86f-c01c-4eaa-9763-b3574d448785\",\"moduleSequenceNumber\":2203}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1e29b86f-c01c-4eaa-9763-b3574d448785\",\"moduleSequenceNumber\":2203}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":2203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///13b08d67-9151-48c2-8585-5a6c442e3cce\",\"moduleSequenceNumber\":735}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c086fbdb-8505-4a19-94eb-28ecd708d085\",\"moduleSequenceNumber\":14867}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":14867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"83.1.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"49.0.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"58.1.0.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-13\",\"httpPortOpen\":true,\"ip\":\"57.7.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30018,\"ramUsage\":1.75,\"server\":\"lauren-13\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ad07686c-ea83-4e86-850d-e7ab2777b7bf\",\"moduleSequenceNumber\":737}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ad07686c-ea83-4e86-850d-e7ab2777b7bf\",\"moduleSequenceNumber\":737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-13\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///49619bc7-5fec-4fe2-8a84-5240d525fd2c\",\"moduleSequenceNumber\":201540}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-13\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///275e46af-cce0-4c0c-a23c-07cde1112b0f\",\"moduleSequenceNumber\":181322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-13\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-23\",\"httpPortOpen\":true,\"ip\":\"47.0.6.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30019,\"ramUsage\":1.75,\"server\":\"lauren-23\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2c0d1bc4-4f39-4bf6-a314-0b002e79b391\",\"moduleSequenceNumber\":738}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2c0d1bc4-4f39-4bf6-a314-0b002e79b391\",\"moduleSequenceNumber\":738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-23\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ab252c9f-43f8-4f98-8b80-e2bdfdd19dde\",\"moduleSequenceNumber\":200850}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-23\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d5962159-6304-4071-acf1-5299c5238e0c\",\"moduleSequenceNumber\":184809}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-23\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-21\",\"httpPortOpen\":true,\"ip\":\"7.0.4.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.409999999999991,\"pid\":30020,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"threads\":224,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a88222d7-96ce-45f5-bcef-52d7166437e5\",\"moduleSequenceNumber\":741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":30033,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"threads\":68,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a88222d7-96ce-45f5-bcef-52d7166437e5\",\"moduleSequenceNumber\":741}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a88222d7-96ce-45f5-bcef-52d7166437e5\",\"moduleSequenceNumber\":741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-21\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c350973d-4eb5-4f15-a104-6e33ef8e878b\",\"moduleSequenceNumber\":739}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-21\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e3eaa8dc-3f63-4d45-a334-58bef5e27a90\",\"moduleSequenceNumber\":14823}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-21\",\"moduleSequenceNumber\":14823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-3\",\"httpPortOpen\":true,\"ip\":\"94.6.8.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29611,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c243b934-cb4c-478c-94aa-5bc2e900ae33\",\"moduleSequenceNumber\":742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29862,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"threads\":63,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0dd903ee-da96-4330-8ead-c641dbab90ac\",\"moduleSequenceNumber\":2168}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":30034,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"threads\":80,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0dd903ee-da96-4330-8ead-c641dbab90ac\",\"moduleSequenceNumber\":2168}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0dd903ee-da96-4330-8ead-c641dbab90ac\",\"moduleSequenceNumber\":2168}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-3\",\"moduleSequenceNumber\":2168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c243b934-cb4c-478c-94aa-5bc2e900ae33\",\"moduleSequenceNumber\":742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-3\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///73155645-91de-4d7c-a7a7-617534224c0a\",\"moduleSequenceNumber\":14824}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-3\",\"moduleSequenceNumber\":14824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-22\",\"httpPortOpen\":true,\"ip\":\"92.0.9.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29955,\"ramUsage\":1.75,\"server\":\"lauren-22\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///578ed7e6-b37b-4e05-b712-d50e9de0eab1\",\"moduleSequenceNumber\":2169}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///578ed7e6-b37b-4e05-b712-d50e9de0eab1\",\"moduleSequenceNumber\":2169}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-22\",\"moduleSequenceNumber\":2169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///af62c4c4-9a32-44ee-b334-f9a226042365\",\"moduleSequenceNumber\":744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-22\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8f9f87ce-bbd9-4055-9f65-bd4586f5de48\",\"moduleSequenceNumber\":14825}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-22\",\"moduleSequenceNumber\":14825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-4\",\"httpPortOpen\":true,\"ip\":\"85.1.2.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29612,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"threads\":102,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a9a98b08-2ec5-43b5-a6b9-d08511dbe6c0\",\"moduleSequenceNumber\":746}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.20999999999785,\"pid\":29689,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///194fad0f-d390-4dd2-a570-d0ecf9c87969\",\"moduleSequenceNumber\":2170}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.4100000000006,\"pid\":29846,\"ramUsage\":1.7,\"server\":\"lauren-4\",\"threads\":38,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1b9cef8e-2a0e-498c-8e62-7475a44c7cb8\",\"moduleSequenceNumber\":14826}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///194fad0f-d390-4dd2-a570-d0ecf9c87969\",\"moduleSequenceNumber\":2170}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-4\",\"moduleSequenceNumber\":2170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a9a98b08-2ec5-43b5-a6b9-d08511dbe6c0\",\"moduleSequenceNumber\":746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-4\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1b9cef8e-2a0e-498c-8e62-7475a44c7cb8\",\"moduleSequenceNumber\":14826}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-4\",\"moduleSequenceNumber\":14826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-10\",\"httpPortOpen\":true,\"ip\":\"78.3.4.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.010000000001,\"pid\":29293,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"threads\":177,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f747b165-017d-40d7-a057-a4c4a75c0ca2\",\"moduleSequenceNumber\":2171}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29613,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"threads\":44,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///41f30393-18f5-4219-bb89-512ffce082f0\",\"moduleSequenceNumber\":748}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29614,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"threads\":10,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f747b165-017d-40d7-a057-a4c4a75c0ca2\",\"moduleSequenceNumber\":2171}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29865,\"ramUsage\":1.7,\"server\":\"lauren-10\",\"threads\":63,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///96835d2e-2d4d-4552-86ce-0f7ac1fcb276\",\"moduleSequenceNumber\":14827}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f747b165-017d-40d7-a057-a4c4a75c0ca2\",\"moduleSequenceNumber\":2171}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-10\",\"moduleSequenceNumber\":2171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///41f30393-18f5-4219-bb89-512ffce082f0\",\"moduleSequenceNumber\":748}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-10\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///96835d2e-2d4d-4552-86ce-0f7ac1fcb276\",\"moduleSequenceNumber\":14827}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-10\",\"moduleSequenceNumber\":14827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-11\",\"httpPortOpen\":true,\"ip\":\"26.9.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":254.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29615,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"threads\":31,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///11911c3a-0eec-4f9c-b8e0-61fd0178775b\",\"moduleSequenceNumber\":2172}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29866,\"ramUsage\":1.7,\"server\":\"lauren-11\",\"threads\":118,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c34fa95d-a332-4ffc-8572-730ca75a8956\",\"moduleSequenceNumber\":14828}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///11911c3a-0eec-4f9c-b8e0-61fd0178775b\",\"moduleSequenceNumber\":2172}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-11\",\"moduleSequenceNumber\":2172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///2bb80b3f-db1f-43fc-95a9-661533df50cc\",\"moduleSequenceNumber\":749}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-11\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c34fa95d-a332-4ffc-8572-730ca75a8956\",\"moduleSequenceNumber\":14828}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-11\",\"moduleSequenceNumber\":14828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-12\",\"httpPortOpen\":true,\"ip\":\"42.0.9.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":510.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":662.8100000000238,\"pid\":28792,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"threads\":74,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1d5e2815-2d35-41fa-9ca9-94498c7133aa\",\"moduleSequenceNumber\":752}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.010000000001,\"pid\":29294,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"threads\":116,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8319c447-f4de-41d7-a8ba-22cc0b3f1efa\",\"moduleSequenceNumber\":2173}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29616,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"threads\":64,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8319c447-f4de-41d7-a8ba-22cc0b3f1efa\",\"moduleSequenceNumber\":2173}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.4100000000006,\"pid\":29847,\"ramUsage\":1.7,\"server\":\"lauren-12\",\"threads\":39,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4c95755f-915c-41d5-a203-95c579f26f17\",\"moduleSequenceNumber\":14829}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8319c447-f4de-41d7-a8ba-22cc0b3f1efa\",\"moduleSequenceNumber\":2173}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-12\",\"moduleSequenceNumber\":2173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1d5e2815-2d35-41fa-9ca9-94498c7133aa\",\"moduleSequenceNumber\":752}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-12\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4c95755f-915c-41d5-a203-95c579f26f17\",\"moduleSequenceNumber\":14829}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-12\",\"moduleSequenceNumber\":14829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-20\",\"httpPortOpen\":true,\"ip\":\"86.3.0.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":549.010000000001,\"pid\":29295,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"threads\":24,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36a8a375-69ce-44d9-9885-4e0a8227a793\",\"moduleSequenceNumber\":20664}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29617,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"threads\":53,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36a8a375-69ce-44d9-9885-4e0a8227a793\",\"moduleSequenceNumber\":20664}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29867,\"ramUsage\":1.7,\"server\":\"lauren-20\",\"threads\":71,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f9a25338-7811-430d-8854-274c3b626ca8\",\"moduleSequenceNumber\":14830}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36a8a375-69ce-44d9-9885-4e0a8227a793\",\"moduleSequenceNumber\":20664}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-20\",\"moduleSequenceNumber\":20664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///35950393-fa8e-433e-aec6-f28730fd3977\",\"moduleSequenceNumber\":753}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-20\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f9a25338-7811-430d-8854-274c3b626ca8\",\"moduleSequenceNumber\":14830}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-20\",\"moduleSequenceNumber\":14830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-14\",\"httpPortOpen\":true,\"ip\":\"34.4.9.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29055,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":30,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c20b7f82-a07a-4b03-8014-fe5cbcfeac26\",\"moduleSequenceNumber\":757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.4099999999919,\"pid\":29424,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":206,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c20b7f82-a07a-4b03-8014-fe5cbcfeac26\",\"moduleSequenceNumber\":757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":487.4099999999903,\"pid\":29526,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":135,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d1355377-2a08-449b-a729-981dc98fb7aa\",\"moduleSequenceNumber\":2175}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29644,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":62,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d1355377-2a08-449b-a729-981dc98fb7aa\",\"moduleSequenceNumber\":2175}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.20999999999785,\"pid\":29688,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":78,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c20b7f82-a07a-4b03-8014-fe5cbcfeac26\",\"moduleSequenceNumber\":757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.61000000000082,\"pid\":29792,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d1355377-2a08-449b-a729-981dc98fb7aa\",\"moduleSequenceNumber\":2175}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.21000000000073,\"pid\":29809,\"ramUsage\":1.7,\"server\":\"lauren-14\",\"threads\":75,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e7790ec-4c22-481e-98f9-289c9cf04146\",\"moduleSequenceNumber\":14831}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d1355377-2a08-449b-a729-981dc98fb7aa\",\"moduleSequenceNumber\":2175}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-14\",\"moduleSequenceNumber\":2175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c20b7f82-a07a-4b03-8014-fe5cbcfeac26\",\"moduleSequenceNumber\":757}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-14\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6e7790ec-4c22-481e-98f9-289c9cf04146\",\"moduleSequenceNumber\":14831}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-14\",\"moduleSequenceNumber\":14831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-0\",\"httpPortOpen\":true,\"ip\":\"44.6.0.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29053,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"threads\":16,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///710f116b-a50b-425d-abec-e9fff73d6bd9\",\"moduleSequenceNumber\":758}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":584.610000000011,\"pid\":29160,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"threads\":139,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///10b79160-c304-4f3c-b9da-e7c969520753\",\"moduleSequenceNumber\":2176}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29618,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"threads\":117,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///10b79160-c304-4f3c-b9da-e7c969520753\",\"moduleSequenceNumber\":2176}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.4100000000006,\"pid\":29848,\"ramUsage\":1.7,\"server\":\"lauren-0\",\"threads\":21,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2a577239-274d-4c94-8f03-8119bf98c0f9\",\"moduleSequenceNumber\":14832}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///10b79160-c304-4f3c-b9da-e7c969520753\",\"moduleSequenceNumber\":2176}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-0\",\"moduleSequenceNumber\":2176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///710f116b-a50b-425d-abec-e9fff73d6bd9\",\"moduleSequenceNumber\":758}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-0\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2a577239-274d-4c94-8f03-8119bf98c0f9\",\"moduleSequenceNumber\":14832}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-0\",\"moduleSequenceNumber\":14832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-8\",\"httpPortOpen\":true,\"ip\":\"80.9.2.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.4099999999919,\"pid\":29421,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"threads\":104,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///41515c86-558c-485e-b16f-d0b5c6e36e34\",\"moduleSequenceNumber\":2177}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29639,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"threads\":8,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///51afcd4f-4615-4f9e-8839-8a8f981a14d0\",\"moduleSequenceNumber\":759}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.4100000000006,\"pid\":29849,\"ramUsage\":1.7,\"server\":\"lauren-8\",\"threads\":35,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9db4de1f-c828-4db8-9955-039df6406a33\",\"moduleSequenceNumber\":14833}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///41515c86-558c-485e-b16f-d0b5c6e36e34\",\"moduleSequenceNumber\":2177}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-8\",\"moduleSequenceNumber\":2177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///51afcd4f-4615-4f9e-8839-8a8f981a14d0\",\"moduleSequenceNumber\":759}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-8\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9db4de1f-c828-4db8-9955-039df6406a33\",\"moduleSequenceNumber\":14833}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-8\",\"moduleSequenceNumber\":14833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-9\",\"httpPortOpen\":true,\"ip\":\"13.3.9.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":510.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29050,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"threads\":24,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///69a49864-4a80-4868-a1bb-77c3f05f34f6\",\"moduleSequenceNumber\":762}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":597.6100000000138,\"pid\":29110,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"threads\":109,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e1067ca5-3f21-4858-82c2-7472c8a234ac\",\"moduleSequenceNumber\":763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29619,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"threads\":55,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///69a49864-4a80-4868-a1bb-77c3f05f34f6\",\"moduleSequenceNumber\":762}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29749,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"threads\":64,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e1067ca5-3f21-4858-82c2-7472c8a234ac\",\"moduleSequenceNumber\":763}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.4100000000006,\"pid\":29850,\"ramUsage\":1.7,\"server\":\"lauren-9\",\"threads\":41,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a3c9948a-69fa-4aca-b28e-588fc75ecf20\",\"moduleSequenceNumber\":14834}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///69a49864-4a80-4868-a1bb-77c3f05f34f6\",\"moduleSequenceNumber\":762}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-9\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e1067ca5-3f21-4858-82c2-7472c8a234ac\",\"moduleSequenceNumber\":763}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-9\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a3c9948a-69fa-4aca-b28e-588fc75ecf20\",\"moduleSequenceNumber\":14834}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-9\",\"moduleSequenceNumber\":14834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-17\",\"httpPortOpen\":true,\"ip\":\"18.3.5.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":516.4099999999919,\"pid\":29422,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"threads\":88,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///89ec02de-f2d5-4b0f-890e-b2d2ea87a653\",\"moduleSequenceNumber\":2179}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29640,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"threads\":51,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///207f013c-bd34-4dc3-9c41-380f2457db87\",\"moduleSequenceNumber\":765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29868,\"ramUsage\":1.7,\"server\":\"lauren-17\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8d258d88-432f-4d9b-a05e-2faf2bfc1837\",\"moduleSequenceNumber\":14835}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///89ec02de-f2d5-4b0f-890e-b2d2ea87a653\",\"moduleSequenceNumber\":2179}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-17\",\"moduleSequenceNumber\":2179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///207f013c-bd34-4dc3-9c41-380f2457db87\",\"moduleSequenceNumber\":765}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-17\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8d258d88-432f-4d9b-a05e-2faf2bfc1837\",\"moduleSequenceNumber\":14835}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-17\",\"moduleSequenceNumber\":14835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-15\",\"httpPortOpen\":true,\"ip\":\"38.1.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29620,\"ramUsage\":1.75,\"server\":\"lauren-15\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9512280f-ab9a-4f78-adff-743b42cf9e80\",\"moduleSequenceNumber\":2180}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29869,\"ramUsage\":1.7,\"server\":\"lauren-15\",\"threads\":133,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5099e4af-bb46-411d-a3a6-ff3de193c910\",\"moduleSequenceNumber\":14836}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9512280f-ab9a-4f78-adff-743b42cf9e80\",\"moduleSequenceNumber\":2180}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-15\",\"moduleSequenceNumber\":2180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9a0e1514-f299-4ab8-a5e0-ceae3abb1466\",\"moduleSequenceNumber\":767}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-15\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5099e4af-bb46-411d-a3a6-ff3de193c910\",\"moduleSequenceNumber\":14836}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-15\",\"moduleSequenceNumber\":14836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-2\",\"httpPortOpen\":true,\"ip\":\"63.8.2.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29956,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c01a467a-00bb-4bd9-98a1-6ccc0dffe978\",\"moduleSequenceNumber\":2181}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c01a467a-00bb-4bd9-98a1-6ccc0dffe978\",\"moduleSequenceNumber\":2181}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-2\",\"moduleSequenceNumber\":2181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0381228f-5d9c-4fa4-9a3f-661e2daf3f57\",\"moduleSequenceNumber\":769}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-2\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ad970ffc-e3bf-447b-a62b-2d253e7e48a6\",\"moduleSequenceNumber\":14837}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-2\",\"moduleSequenceNumber\":14837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-5\",\"httpPortOpen\":true,\"ip\":\"10.3.2.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29051,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":342,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///21ba680e-9011-4c91-87c4-8c7b1f969bc4\",\"moduleSequenceNumber\":807}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29056,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":135,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4ebd7a12-87e6-4ef1-a893-bd20e542f1bd\",\"moduleSequenceNumber\":806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":607.2100000000158,\"pid\":29072,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":196,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///21ba680e-9011-4c91-87c4-8c7b1f969bc4\",\"moduleSequenceNumber\":807}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29646,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4ebd7a12-87e6-4ef1-a893-bd20e542f1bd\",\"moduleSequenceNumber\":806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29750,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":85,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4ebd7a12-87e6-4ef1-a893-bd20e542f1bd\",\"moduleSequenceNumber\":806}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29756,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":40,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///21ba680e-9011-4c91-87c4-8c7b1f969bc4\",\"moduleSequenceNumber\":807}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29890,\"ramUsage\":1.7,\"server\":\"lauren-5\",\"threads\":113,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b1a9cb11-f6d0-4d6a-8d7a-6e57ae21a6fe\",\"moduleSequenceNumber\":797}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.0100000000000025,\"pid\":30026,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":49,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///21ba680e-9011-4c91-87c4-8c7b1f969bc4\",\"moduleSequenceNumber\":807}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":30032,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":210,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///21ba680e-9011-4c91-87c4-8c7b1f969bc4\",\"moduleSequenceNumber\":807}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///21ba680e-9011-4c91-87c4-8c7b1f969bc4\",\"moduleSequenceNumber\":807}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-5\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4ebd7a12-87e6-4ef1-a893-bd20e542f1bd\",\"moduleSequenceNumber\":806}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-5\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b1a9cb11-f6d0-4d6a-8d7a-6e57ae21a6fe\",\"moduleSequenceNumber\":797}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-5\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":true,\"ip\":\"56.3.3.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1022.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29059,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":59,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///62429222-8ec8-424e-83e2-d38e53b494ca\",\"moduleSequenceNumber\":803}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":529.4099999999955,\"pid\":29371,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":47,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///62429222-8ec8-424e-83e2-d38e53b494ca\",\"moduleSequenceNumber\":803}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29621,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":151,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///62429222-8ec8-424e-83e2-d38e53b494ca\",\"moduleSequenceNumber\":803}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29754,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":126,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a5df5923-ea84-4435-b8c4-8416ff82d39e\",\"moduleSequenceNumber\":4937}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29891,\"ramUsage\":1.7,\"server\":\"lauren\",\"threads\":63,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///28ced741-446d-4500-841f-31a7c0ebe6e8\",\"moduleSequenceNumber\":788}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":30031,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":140,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///62429222-8ec8-424e-83e2-d38e53b494ca\",\"moduleSequenceNumber\":803}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///62429222-8ec8-424e-83e2-d38e53b494ca\",\"moduleSequenceNumber\":803}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a5df5923-ea84-4435-b8c4-8416ff82d39e\",\"moduleSequenceNumber\":4937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren\",\"moduleSequenceNumber\":4937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///28ced741-446d-4500-841f-31a7c0ebe6e8\",\"moduleSequenceNumber\":788}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-6\",\"httpPortOpen\":true,\"ip\":\"71.0.9.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":510.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":597.6100000000138,\"pid\":29109,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"threads\":140,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///05c85dad-1e7d-4aeb-ab8e-50184699bf0c\",\"moduleSequenceNumber\":804}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29622,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"threads\":22,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///05c85dad-1e7d-4aeb-ab8e-50184699bf0c\",\"moduleSequenceNumber\":804}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29751,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"threads\":125,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///277d234b-71ea-4bff-a4ce-3f58d736cec6\",\"moduleSequenceNumber\":10038}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29870,\"ramUsage\":1.7,\"server\":\"lauren-6\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5f1dc5eb-f675-4a60-aeb2-24377f74060a\",\"moduleSequenceNumber\":789}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///05c85dad-1e7d-4aeb-ab8e-50184699bf0c\",\"moduleSequenceNumber\":804}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-6\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///277d234b-71ea-4bff-a4ce-3f58d736cec6\",\"moduleSequenceNumber\":10038}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-6\",\"moduleSequenceNumber\":10038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5f1dc5eb-f675-4a60-aeb2-24377f74060a\",\"moduleSequenceNumber\":789}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-6\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-18\",\"httpPortOpen\":true,\"ip\":\"98.3.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":254.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29623,\"ramUsage\":1.75,\"server\":\"lauren-18\",\"threads\":31,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3f3e0bbb-22c0-44c4-a207-2a673e3c3d8b\",\"moduleSequenceNumber\":805}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29871,\"ramUsage\":1.7,\"server\":\"lauren-18\",\"threads\":118,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///48089196-64b1-4b92-a566-4438e3ec3308\",\"moduleSequenceNumber\":790}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3f3e0bbb-22c0-44c4-a207-2a673e3c3d8b\",\"moduleSequenceNumber\":805}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-18\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5fde2fd4-cd7d-4ebc-affa-d81306f1b0fe\",\"moduleSequenceNumber\":10039}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-18\",\"moduleSequenceNumber\":10039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///48089196-64b1-4b92-a566-4438e3ec3308\",\"moduleSequenceNumber\":790}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-18\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-16\",\"httpPortOpen\":true,\"ip\":\"38.9.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29624,\"ramUsage\":1.75,\"server\":\"lauren-16\",\"threads\":105,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///90b30216-7d07-411a-ad1d-69887f5f4ebd\",\"moduleSequenceNumber\":37326}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29872,\"ramUsage\":1.7,\"server\":\"lauren-16\",\"threads\":42,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6a3b4910-64e6-48b0-9b32-46e3e0fea53a\",\"moduleSequenceNumber\":35965}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///90b30216-7d07-411a-ad1d-69887f5f4ebd\",\"moduleSequenceNumber\":37326}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-16\",\"moduleSequenceNumber\":37326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d5f99ea8-f080-4aa0-90b7-d36d5f330604\",\"moduleSequenceNumber\":4252}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-16\",\"moduleSequenceNumber\":4252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6a3b4910-64e6-48b0-9b32-46e3e0fea53a\",\"moduleSequenceNumber\":35965}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-16\",\"moduleSequenceNumber\":35965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-1\",\"httpPortOpen\":true,\"ip\":\"63.1.9.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2046.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":777.0100000000267,\"pid\":28290,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":124,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":760.6100000000276,\"pid\":28352,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f446e2b8-e159-4669-82a2-7f1458cf1669\",\"moduleSequenceNumber\":12101}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":702.0100000000309,\"pid\":28633,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":34,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":630.2100000000207,\"pid\":28913,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":94,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f446e2b8-e159-4669-82a2-7f1458cf1669\",\"moduleSequenceNumber\":12101}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":630.2100000000207,\"pid\":28915,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":532.8099999999965,\"pid\":29358,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":115,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29752,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29873,\"ramUsage\":1.7,\"server\":\"lauren-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e6560688-4856-48c1-a196-b2c5c4a4d10c\",\"moduleSequenceNumber\":15551}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.41000000000027,\"pid\":29943,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":122,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.21000000000022,\"pid\":29970,\"ramUsage\":1.7,\"server\":\"lauren-1\",\"threads\":55,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e6560688-4856-48c1-a196-b2c5c4a4d10c\",\"moduleSequenceNumber\":15551}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.0100000000000025,\"pid\":30027,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":535,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f446e2b8-e159-4669-82a2-7f1458cf1669\",\"moduleSequenceNumber\":12101}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.0100000000000025,\"pid\":30028,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f446e2b8-e159-4669-82a2-7f1458cf1669\",\"moduleSequenceNumber\":12101}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f446e2b8-e159-4669-82a2-7f1458cf1669\",\"moduleSequenceNumber\":12101}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-1\",\"moduleSequenceNumber\":12101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6badee07-23d7-4131-940d-a040bbb9828b\",\"moduleSequenceNumber\":12100}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-1\",\"moduleSequenceNumber\":12100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e6560688-4856-48c1-a196-b2c5c4a4d10c\",\"moduleSequenceNumber\":15551}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-1\",\"moduleSequenceNumber\":15551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-19\",\"httpPortOpen\":true,\"ip\":\"47.7.3.3\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29052,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":21,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ffdbccfe-478c-44d6-a631-3269f2044952\",\"moduleSequenceNumber\":14870}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.6100000000166,\"pid\":29054,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":137,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b5e6ba07-0e99-43b1-881e-abe3a6ae0f31\",\"moduleSequenceNumber\":12093}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":597.6100000000138,\"pid\":29111,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":116,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b5e6ba07-0e99-43b1-881e-abe3a6ae0f31\",\"moduleSequenceNumber\":12093}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":523.0099999999937,\"pid\":29396,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ffdbccfe-478c-44d6-a631-3269f2044952\",\"moduleSequenceNumber\":14870}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29645,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":149,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ffdbccfe-478c-44d6-a631-3269f2044952\",\"moduleSequenceNumber\":14870}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":130.21000000000112,\"pid\":29755,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":124,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b5e6ba07-0e99-43b1-881e-abe3a6ae0f31\",\"moduleSequenceNumber\":12093}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29874,\"ramUsage\":1.7,\"server\":\"lauren-19\",\"threads\":34,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///19de0d3a-4f28-4ef5-beec-1ffef56f8709\",\"moduleSequenceNumber\":16912}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ffdbccfe-478c-44d6-a631-3269f2044952\",\"moduleSequenceNumber\":14870}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-19\",\"moduleSequenceNumber\":14870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b5e6ba07-0e99-43b1-881e-abe3a6ae0f31\",\"moduleSequenceNumber\":12093}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-19\",\"moduleSequenceNumber\":12093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///19de0d3a-4f28-4ef5-beec-1ffef56f8709\",\"moduleSequenceNumber\":16912}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-19\",\"moduleSequenceNumber\":16912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-7\",\"httpPortOpen\":true,\"ip\":\"88.5.2.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":627.01000000002,\"pid\":28928,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":125,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///27bce83e-eec3-4023-be09-3576676dd639\",\"moduleSequenceNumber\":13802}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":484.0099999999903,\"pid\":29539,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":76,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e7a7797d-bd99-49ba-a0ad-b04d51e49b7c\",\"moduleSequenceNumber\":12092}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":471.0099999999903,\"pid\":29643,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":13,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e7a7797d-bd99-49ba-a0ad-b04d51e49b7c\",\"moduleSequenceNumber\":12092}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":167.80999999999923,\"pid\":29716,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":18,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///27bce83e-eec3-4023-be09-3576676dd639\",\"moduleSequenceNumber\":13802}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.01000000000055,\"pid\":29875,\"ramUsage\":1.7,\"server\":\"lauren-7\",\"threads\":62,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///87f6b5cc-ffe6-425c-a5b2-996009d711bf\",\"moduleSequenceNumber\":16913}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e7a7797d-bd99-49ba-a0ad-b04d51e49b7c\",\"moduleSequenceNumber\":12092}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-7\",\"moduleSequenceNumber\":12092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///27bce83e-eec3-4023-be09-3576676dd639\",\"moduleSequenceNumber\":13802}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-7\",\"moduleSequenceNumber\":13802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///87f6b5cc-ffe6-425c-a5b2-996009d711bf\",\"moduleSequenceNumber\":16913}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-7\",\"moduleSequenceNumber\":16913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":146.6668,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":164.4003,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":6432.644317020958,\"favor\":0.018,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.7586,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":52.7352,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30.6766,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.4598,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":242663.759910967,\"favor\":151.8442,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":121.6556,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":107.7531,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":158.0929,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":223037.35020608135}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":31.3686,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":53873.07817720334}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":126.9141562957614}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":123.2461,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":54941.36489410225}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":175.5948,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":230677.64862194605}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":23.2061,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":180.7434,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":67885.63603963051}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":86.1561,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":15.8558,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":142.26688783898837}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":146.1227,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":112909.77766401683}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":194.1063,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":241284.6298123771}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":50.506,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":433.04884158544183}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":188.5892,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":235561.7571472565}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":15859.449979950175,\"lastPrice\":15851.28403634198,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":false,\"otlkMag\":19.527672162125334,\"otlkMagForecast\":30.628867106530947,\"cap\":177588476,\"spreadPerc\":0.5,\"shareTxForMovement\":61031,\"shareTxUntilMovement\":57871,\"totalShares\":131400000,\"maxShares\":26300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":42339.35760217905,\"lastPrice\":42315.53050584479,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":true,\"otlkMag\":15.968405348018079,\"otlkMagForecast\":66.14143152344403,\"cap\":176464982,\"spreadPerc\":0.5,\"shareTxForMovement\":66199,\"shareTxUntilMovement\":66199,\"totalShares\":75700000,\"maxShares\":15100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":12264.715755065161,\"lastPrice\":12253.118713725784,\"playerShares\":930,\"playerAvgPx\":13846.739180878325,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":12.078753849125002,\"otlkMagForecast\":60.83004943751334,\"cap\":583397376,\"spreadPerc\":0.2,\"shareTxForMovement\":71156,\"shareTxUntilMovement\":71156,\"totalShares\":68200000,\"maxShares\":13600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":16177.870616165472,\"lastPrice\":16191.43789874584,\"playerShares\":63,\"playerAvgPx\":19355.382681716386,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":12.039591677507717,\"otlkMagForecast\":38.20617483910071,\"cap\":365430915,\"spreadPerc\":0.1,\"shareTxForMovement\":67680,\"shareTxUntilMovement\":67680,\"totalShares\":76000000,\"maxShares\":15200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":33494.641188139416,\"lastPrice\":33518.71805953153,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":12.28770548096247,\"otlkMagForecast\":38.72627217479094,\"cap\":448734323,\"spreadPerc\":0.4,\"shareTxForMovement\":55645,\"shareTxUntilMovement\":55645,\"totalShares\":47300000,\"maxShares\":9500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":23379.426884469285,\"lastPrice\":23350.053725478523,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":false,\"otlkMag\":14.5924229630352,\"otlkMagForecast\":35.90496116208509,\"cap\":802093179,\"spreadPerc\":0.3,\"shareTxForMovement\":43637,\"shareTxUntilMovement\":43637,\"totalShares\":36200000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":53457.42719403953,\"lastPrice\":53506.10097890602,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":10.246127289349056,\"otlkMagForecast\":38.92926510009325,\"cap\":289500371,\"spreadPerc\":0.4,\"shareTxForMovement\":32607,\"shareTxUntilMovement\":32607,\"totalShares\":72600000,\"maxShares\":14500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":26093.269846014267,\"lastPrice\":26132.03340675095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":17.372993634273215,\"otlkMagForecast\":32.35237252280532,\"cap\":312122920,\"spreadPerc\":0.4,\"shareTxForMovement\":69776,\"shareTxUntilMovement\":69776,\"totalShares\":65600000,\"maxShares\":13100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":38967.609813535724,\"lastPrice\":39006.82520248514,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":6.679681744120289,\"otlkMagForecast\":58.246929844324654,\"cap\":315978166,\"spreadPerc\":0.6,\"shareTxForMovement\":57975,\"shareTxUntilMovement\":57975,\"totalShares\":50000000,\"maxShares\":10000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11938.922175565767,\"lastPrice\":11929.632214706358,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.758678738532852,\"otlkMagForecast\":59.24619750717669,\"cap\":126551086,\"spreadPerc\":0.3,\"shareTxForMovement\":36756,\"shareTxUntilMovement\":14781,\"totalShares\":145300000,\"maxShares\":29100000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":28774.696612445205,\"lastPrice\":28753.338963368136,\"playerShares\":3,\"playerAvgPx\":25436.694540872006,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.115338797854132,\"otlkMagForecast\":58.80925015418301,\"cap\":313106525,\"spreadPerc\":0.4,\"shareTxForMovement\":53584,\"shareTxUntilMovement\":53584,\"totalShares\":46400000,\"maxShares\":9300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13903.20065279643,\"lastPrice\":13916.026291111495,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":6.494518736571213,\"otlkMagForecast\":42.23081345063836,\"cap\":234427980,\"spreadPerc\":0.2,\"shareTxForMovement\":50002,\"shareTxUntilMovement\":50002,\"totalShares\":72500000,\"maxShares\":14500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19511.764369192766,\"lastPrice\":19497.515428445906,\"playerShares\":15,\"playerAvgPx\":17112.088989953856,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":8.166419905031585,\"otlkMagForecast\":58.3036020291734,\"cap\":131452101,\"spreadPerc\":0.6,\"shareTxForMovement\":53860,\"shareTxUntilMovement\":53663,\"totalShares\":48900000,\"maxShares\":9800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":31942.022559323028,\"lastPrice\":31919.46038111622,\"playerShares\":2,\"playerAvgPx\":25928.613528754475,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":10.837271529045367,\"otlkMagForecast\":39.937460652074506,\"cap\":354038626,\"spreadPerc\":0.5,\"shareTxForMovement\":43791,\"shareTxUntilMovement\":43791,\"totalShares\":36500000,\"maxShares\":7300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15167.416994921723,\"lastPrice\":15178.501464983392,\"playerShares\":295,\"playerAvgPx\":15080.542971070607,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":6.141208532338856,\"otlkMagForecast\":43.80498888556642,\"cap\":178177216,\"spreadPerc\":0.9,\"shareTxForMovement\":101647,\"shareTxUntilMovement\":101647,\"totalShares\":38800000,\"maxShares\":7800000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":14332.224235752943,\"lastPrice\":14344.071993291565,\"playerShares\":3,\"playerAvgPx\":11594.65549663327,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":6.246297817943048,\"otlkMagForecast\":54.68563382883266,\"cap\":182702844,\"spreadPerc\":1,\"shareTxForMovement\":47145,\"shareTxUntilMovement\":43914,\"totalShares\":76100000,\"maxShares\":15200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":38407.04163621389,\"lastPrice\":38371.64397207666,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":9.795292743612366,\"otlkMagForecast\":57.2613006906629,\"cap\":459463067,\"spreadPerc\":0.4,\"shareTxForMovement\":74044,\"shareTxUntilMovement\":74044,\"totalShares\":32800000,\"maxShares\":6600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":27556.587949205325,\"lastPrice\":27577.056665410088,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":9.401752567595162,\"otlkMagForecast\":39.98081668292811,\"cap\":327340213,\"spreadPerc\":0.8,\"shareTxForMovement\":52328,\"shareTxUntilMovement\":52328,\"totalShares\":33700000,\"maxShares\":6700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":19510.458382022003,\"lastPrice\":19492.24335162982,\"playerShares\":1,\"playerAvgPx\":15935.13971918702,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":5.816259973273147,\"otlkMagForecast\":45.43979726280429,\"cap\":327264588,\"spreadPerc\":1.1,\"shareTxForMovement\":89358,\"shareTxUntilMovement\":89358,\"totalShares\":29900000,\"maxShares\":6000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":617.0806937092569,\"lastPrice\":618.9363141734392,\"playerShares\":388775,\"playerAvgPx\":1518.9541817441602,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.51,\"b\":false,\"otlkMag\":6.254324543512191,\"otlkMagForecast\":44.1324728253839,\"cap\":79943225,\"spreadPerc\":0.7,\"shareTxForMovement\":35231,\"shareTxUntilMovement\":27626,\"totalShares\":75700000,\"maxShares\":15100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":2789.0930262274037,\"lastPrice\":2793.4703409032973,\"playerShares\":354099,\"playerAvgPx\":2562.574332469173,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":true,\"otlkMag\":5.1990265856073465,\"otlkMagForecast\":52.02322258479481,\"cap\":55235646,\"spreadPerc\":0.7,\"shareTxForMovement\":97793,\"shareTxUntilMovement\":41065,\"totalShares\":64800000,\"maxShares\":13000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5646.672222496008,\"lastPrice\":5651.204754236814,\"playerShares\":158,\"playerAvgPx\":6172.029969695348,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":6.159448340321372,\"otlkMagForecast\":44.86828202426433,\"cap\":104449359,\"spreadPerc\":0.9,\"shareTxForMovement\":68669,\"shareTxUntilMovement\":68236,\"totalShares\":31000000,\"maxShares\":6200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":28117.197391411086,\"lastPrice\":28177.15792719853,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":false,\"otlkMag\":5.726625423074336,\"otlkMagForecast\":45.14587179944116,\"cap\":157769050,\"spreadPerc\":1.1,\"shareTxForMovement\":58326,\"shareTxUntilMovement\":50007,\"totalShares\":36700000,\"maxShares\":7300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5739.350913979317,\"lastPrice\":5727.822427351752,\"playerShares\":61,\"playerAvgPx\":4659.117845210479,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.68,\"b\":true,\"otlkMag\":4.225203922990946,\"otlkMagForecast\":46.77686103400233,\"cap\":75643285,\"spreadPerc\":0.5,\"shareTxForMovement\":27060,\"shareTxUntilMovement\":7749,\"totalShares\":53000000,\"maxShares\":10600000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":7039.211041149871,\"lastPrice\":7047.644339379465,\"playerShares\":74680,\"playerAvgPx\":7262.165887768625,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":5.768153126498056,\"otlkMagForecast\":56.11735558095629,\"cap\":103404036,\"spreadPerc\":0.6,\"shareTxForMovement\":96773,\"shareTxUntilMovement\":36903,\"totalShares\":32200000,\"maxShares\":6400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2841.497368590132,\"lastPrice\":2834.0615827908573,\"playerShares\":91293,\"playerAvgPx\":2837.8599891411754,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.19,\"b\":true,\"otlkMag\":6.40457483984903,\"otlkMagForecast\":57.15952747457221,\"cap\":9672056,\"spreadPerc\":1.9,\"shareTxForMovement\":28082,\"shareTxUntilMovement\":10466,\"totalShares\":17400000,\"maxShares\":3500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3800.3329436983504,\"lastPrice\":3804.8859171635027,\"playerShares\":89823,\"playerAvgPx\":4253.76064410592,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":8.790921435186924,\"otlkMagForecast\":59.084204277985016,\"cap\":88178227,\"spreadPerc\":0.5,\"shareTxForMovement\":58427,\"shareTxUntilMovement\":41783,\"totalShares\":7800000,\"maxShares\":1600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3142.861810685397,\"lastPrice\":3145.535168602949,\"playerShares\":115562,\"playerAvgPx\":3757.2368471117884,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":1.5937451487701368,\"otlkMagForecast\":50.217015363519415,\"cap\":14283912,\"spreadPerc\":0.7,\"shareTxForMovement\":166260,\"shareTxUntilMovement\":102575,\"totalShares\":15900000,\"maxShares\":3200000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":5147.484567617032,\"lastPrice\":5135.364334875054,\"playerShares\":27860,\"playerAvgPx\":4933.966559704487,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.97,\"b\":false,\"otlkMag\":6.139220256791684,\"otlkMagForecast\":44.28211687570268,\"cap\":72853040,\"spreadPerc\":0.7,\"shareTxForMovement\":30917,\"shareTxUntilMovement\":30663,\"totalShares\":9300000,\"maxShares\":1900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":642.1676820460159,\"lastPrice\":639.7380811537795,\"playerShares\":100786,\"playerAvgPx\":841.630588530119,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.17,\"b\":false,\"otlkMag\":6.325734562989304,\"otlkMagForecast\":40.81427298117175,\"cap\":18222207,\"spreadPerc\":1,\"shareTxForMovement\":42912,\"shareTxUntilMovement\":15484,\"totalShares\":52600000,\"maxShares\":10500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":280.0473674101219,\"lastPrice\":279.5115790688132,\"playerShares\":46996,\"playerAvgPx\":341.78566117917734,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":true,\"otlkMag\":13.740636794459144,\"otlkMagForecast\":63.95070911490984,\"cap\":13685800,\"spreadPerc\":0.5,\"shareTxForMovement\":58042,\"shareTxUntilMovement\":51394,\"totalShares\":166100000,\"maxShares\":33200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":16500.295719403468,\"lastPrice\":16484.69367730226,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":9.557157500358084,\"otlkMagForecast\":58.760674884251436,\"cap\":95094522,\"spreadPerc\":0.7,\"shareTxForMovement\":116085,\"shareTxUntilMovement\":116085,\"totalShares\":16700000,\"maxShares\":3300000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":11272.910369389521,\"lastPrice\":11263.599295876114,\"playerShares\":11,\"playerAvgPx\":10931.02366365717,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":10.542538515388284,\"otlkMagForecast\":61.43482084993211,\"cap\":25096437,\"spreadPerc\":0.3,\"shareTxForMovement\":156094,\"shareTxUntilMovement\":156094,\"totalShares\":27800000,\"maxShares\":5600000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":717166,\"lastUpdate\":1644292472033,\"ticksUntilCycle\":36}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":100,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":70,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"'Input', Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":1,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644253427731","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644292475904"}}