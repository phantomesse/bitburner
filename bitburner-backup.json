{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":172,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.1611599999999997,\"hacking_speed_mult\":1.1611599999999997,\"hacking_money_mult\":1.1611599999999997,\"hacking_grow_mult\":1.1611599999999997,\"hacking_exp\":173836.30347442228,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.1611599999999997,\"strength_mult\":1.1611599999999997,\"defense_mult\":1.1611599999999997,\"dexterity_mult\":1.1611599999999997,\"agility_mult\":1.1611599999999997,\"charisma_mult\":1.1611599999999997,\"hacking_exp_mult\":1.1611599999999997,\"strength_exp_mult\":1.1611599999999997,\"defense_exp_mult\":1.1611599999999997,\"dexterity_exp_mult\":1.1611599999999997,\"agility_exp_mult\":1.1611599999999997,\"charisma_exp_mult\":1.1611599999999997,\"company_rep_mult\":1.1611599999999997,\"faction_rep_mult\":1.1611599999999997,\"money\":-1981730.1893883776,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":0.4354349999999999,\"onlineTimeSeconds\":46806.00000002746,\"ram\":1,\"totalMoneyGenerated\":20380.97060999386,\"name\":\"hacknet-node-0\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1611599999999997,\"crime_success_mult\":1.1611599999999997,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":1800000,\"work_money_mult\":1.1611599999999997,\"hacknet_node_money_mult\":1.1611599999999997,\"hacknet_node_purchase_cost_mult\":0.83916,\"hacknet_node_ram_cost_mult\":0.83916,\"hacknet_node_core_cost_mult\":0.83916,\"hacknet_node_level_cost_mult\":0.83916,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":3,\"lastUpdate\":1642840419403,\"totalPlaytime\":2620929000,\"playtimeSinceLastAug\":46831200,\"playtimeSinceLastBitnode\":46831200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2002272,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":20380.97060999386,\"hacknet_expenses\":-839.16,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-1982730.1893883767,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2002272,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":20380.97060999386,\"hacknet_expenses\":-839.16,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-1982730.1893883767,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641675126871},{\"ID\":\"NITESEC\",\"unlockedOn\":1641675126890},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641675126893},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641675126897},{\"ID\":\"SF1.1\",\"unlockedOn\":1641675126901},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641675126906},{\"ID\":\"NS2\",\"unlockedOn\":1641675126910},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641675126915},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641675126920},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641675126925},{\"ID\":\"TOR\",\"unlockedOn\":1641675126930},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641675126934},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641683001577},{\"ID\":\"WORKOUT\",\"unlockedOn\":1641683661513},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641699444909},{\"ID\":\"N00DLES\",\"unlockedOn\":1641699444911},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641711726317},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641713166320},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641748014946},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641858253775},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641872767788},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641941669460},{\"ID\":\"4S\",\"unlockedOn\":1641943349663},{\"ID\":\"DONATION\",\"unlockedOn\":1642017508846},{\"ID\":\"FROZE\",\"unlockedOn\":1642193609462},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1642523664057},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642573834102},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642619100874},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642634100595},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642697584734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642717768356},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642723230131},{\"ID\":\"SF4.1\",\"unlockedOn\":1642793617209},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642793617217}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"98.8.9.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"ramUsed\":15.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27430.999200000046,\"onlineMoneyMade\":0,\"onlineRunningTime\":31923.209999999155,\"pid\":2208,\"ramUsage\":15.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///49621f2c-c146-457e-b3ca-5e797051ae33\",\"moduleSequenceNumber\":725},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///e6014a2f-02c2-40b6-8c88-0e0379fadb34\",\"moduleSequenceNumber\":694},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d475c119-8438-4767-ad34-9c0d5273dde4\",\"moduleSequenceNumber\":714},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e5060c42-cf12-4c9e-b431-5f60eeb3bd1a\",\"moduleSequenceNumber\":696},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///5e6c0625-2bc3-4146-9d10-d39434866638\",\"moduleSequenceNumber\":695},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///0a83fe66-895a-4c06-8538-344ae8716382\",\"moduleSequenceNumber\":850}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DEFAULT_PORT, LOCALHOST_PREFIX } from '/utils/misc.js';\\n\\nconst GITHUB_SCRIPTS_FOLDER =\\n  'https://raw.githubusercontent.com/phantomesse/bitburner/master/';\\nconst SCRIPTS_TXT = 'scripts.txt';\\n\\n/**\\n * Copy this file to the bitburner game to sync the rest of the scripts:\\n *\\n * ```\\n * wget https://raw.githubusercontent.com/phantomesse/bitburner/main/scripts/sync.js sync.js\\n * ```\\n *\\n * @example run sync.js <port>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  let port = ns.args[0];\\n  port = typeof port !== 'number' ? DEFAULT_PORT : port;\\n\\n  // Check if local server is running and set scripts prefix accordingly.\\n  let scriptsPrefix;\\n  try {\\n    scriptsPrefix = `${LOCALHOST_PREFIX}:${port}/`;\\n    await fetch(scriptsPrefix + SCRIPTS_TXT);\\n    ns.tprint('syncing to local server');\\n  } catch (_) {\\n    ns.tprint('no local server running, so syncing from github');\\n    scriptsPrefix = GITHUB_SCRIPTS_FOLDER;\\n  }\\n\\n  // Get list of scripts to download and download each script.\\n  let currentScripts = await getScripts(scriptsPrefix);\\n  for await (const script of currentScripts) {\\n    await script.download(ns, scriptsPrefix);\\n  }\\n\\n  // Watch for any changes in scripts every second and download newer copies.\\n  while (true) {\\n    let latestScripts = await getScripts(scriptsPrefix);\\n    for await (const latestScript of latestScripts) {\\n      const currentScript = currentScripts.find(\\n        script => script.fileName === latestScript.fileName\\n      );\\n      if (\\n        currentScript === undefined ||\\n        latestScript.lastModifiedTime !== currentScript.lastModifiedTime\\n      ) {\\n        await latestScript.download(ns, scriptsPrefix);\\n      }\\n    }\\n\\n    // Delete any files that were in the current scripts but are not in the\\n    // latest scripts.\\n    for await (const currentScript of currentScripts) {\\n      const latestScript = latestScripts.find(\\n        script => script.fileName === currentScript.fileName\\n      );\\n      if (latestScript === undefined) {\\n        ns.rm(currentScript.fileName);\\n        ns.tprint(`removed ${currentScript.fileName}`);\\n      }\\n    }\\n\\n    currentScripts = latestScripts;\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\nclass Script {\\n  /**\\n   * @param {string} fileName,\\n   * @param {number} lastModifiedTime\\n   */\\n  constructor(fileName, lastModifiedTime) {\\n    this.fileName = fileName;\\n    this.lastModifiedTime = lastModifiedTime;\\n  }\\n\\n  /**\\n   * @param {import('index').NS } ns\\n   * @param {string} scriptsPrefix\\n   */\\n  async download(ns, scriptsPrefix) {\\n    const contents = await getFileContents(scriptsPrefix, this.fileName);\\n    await ns.write('/' + this.fileName, contents, 'w');\\n    ns.tprint(`downloaded ${this.fileName}`);\\n  }\\n}\\n\\n/** @param {string} scriptsPrefix */\\nasync function getScripts(scriptsPrefix) {\\n  return (await getFileContents(scriptsPrefix, SCRIPTS_TXT))\\n    .split('\\\\n')\\n    .map(line => line.split('\\\\t'))\\n    .map(args => new Script(args[0], parseFloat(args[1])));\\n}\\n\\n/**\\n * @param {string} scriptsPrefix\\n * @param {string} fileName\\n */\\nasync function getFileContents(scriptsPrefix, fileName) {\\n  const response = await fetch(scriptsPrefix + 'scripts/' + fileName);\\n  return await response.text();\\n}\\n\",\"filename\":\"sync.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":194025},{\"filename\":\"sync.js\",\"url\":\"blob:file:///590b0768-58f4-4b3b-9396-178fa84126f6\",\"moduleSequenceNumber\":194071}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"5ee6ae55677672bee2cba1d9c424dc6b1eb1f013e7ebc3f7f8c6be059cfad9e8\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend } from '/utils/misc.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['sleep', 'getServerMoneyAvailable'];\\n\\n/**\\n * Manages buying and upgrading hacknet nodes.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    // Buy new nodes if we can.\\n    const moneyToSpend = getMoneyToSpend(ns);\\n    let nodesPurchased = 0;\\n    while (ns.hacknet.getPurchaseNodeCost() < moneyToSpend) {\\n      if (ns.hacknet.purchaseNode() === -1) break;\\n      nodesPurchased++;\\n    }\\n    if (nodesPurchased > 0) {\\n      ns.print(`purchased ${nodesPurchased} new hacknet nodes`);\\n    }\\n\\n    // Upgrade nodes.\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      // Upgrade cores.\\n      const coresUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getCoreUpgradeCost,\\n        ns.hacknet.upgradeCore\\n      );\\n      if (coresUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} cores ${coresUpgraded} times`);\\n      }\\n\\n      // Upgrade RAM.\\n      const ramUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getRamUpgradeCost,\\n        ns.hacknet.upgradeRam\\n      );\\n      if (ramUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} RAM ${ramUpgraded} times`);\\n      }\\n\\n      // Upgrade level.\\n      const levelsUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getLevelUpgradeCost,\\n        ns.hacknet.upgradeLevel\\n      );\\n      if (levelsUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} levels ${levelsUpgraded} times`);\\n      }\\n\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\\n\\n/**\\n * Calculates the cost of upgrading an aspect of a node.\\n *\\n * @callback UpgradeCostFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {number} cost of upgrade\\n */\\n\\n/**\\n * Upgrades an aspect of a node.\\n *\\n * @callback UpgradeFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {boolean} whether the upgrade was successful\\n */\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {number} nodeIndex\\n * @param {UpgradeCostFn} getUpgradeCostFn\\n * @param {UpgradeFn} upgradeFn\\n * @returns {number} number of upgrades successful\\n */\\nfunction upgrade(ns, nodeIndex, getUpgradeCostFn, upgradeFn) {\\n  const moneyToSpend = getMoneyToSpend(ns);\\n  let upgradeCount = 0;\\n  while (getUpgradeCostFn(nodeIndex, ++upgradeCount) < moneyToSpend);\\n  if (upgradeCount === 0) return 0;\\n  return upgradeFn(nodeIndex, upgradeCount) ? upgradeCount : 0;\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d475c119-8438-4767-ad34-9c0d5273dde4\",\"moduleSequenceNumber\":714},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e5060c42-cf12-4c9e-b431-5f60eeb3bd1a\",\"moduleSequenceNumber\":696},{\"filename\":\"manage-hacknet.js\",\"url\":\"blob:file:///227fb1fe-83f0-4be4-ac9d-78605604b152\",\"moduleSequenceNumber\":975}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"668ac2cd1df76bb0088f74b8f2ead30c105c850c694e5ac5a35293a6f5eaca8f\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":976}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///811e7329-360f-4fbf-8763-8fe3c1641519\",\"moduleSequenceNumber\":194294}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a5262895-a16c-4f80-979f-083d0c6d4b16\",\"moduleSequenceNumber\":194319}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MANAGE_SERVERS_TO_MANAGE_HACKING_PORT } from '/utils/ports.js';\\nimport { getMoneyToSpend, sort } from '/utils/misc.js';\\nimport { PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\nimport { formatNumber } from '/utils/format.js';\\n\\nconst MIN_POWER = 3; // Min RAM that we want is at least 8GB\\nconst MAX_POWER = 20; // Max RAM is 2^20\\n\\n/**\\n * Continuously try to buy more servers and sells any old servers with less RAM\\n * than we could get with a new server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  const purchasedServerLimit = ns.getPurchasedServerLimit();\\n  let lowestRamAcceptable = Math.pow(2, MIN_POWER);\\n\\n  while (true) {\\n    // Buy / upgrade servers.\\n    for (let power = MAX_POWER; power >= MIN_POWER; power--) {\\n      const ram = Math.pow(2, power);\\n      if (ram < lowestRamAcceptable) continue;\\n      const cost = ns.getPurchasedServerCost(ram);\\n      if (getMoneyToSpend(ns) < cost) continue;\\n\\n      // Delete lowest RAM server if over server limit.\\n      if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n        const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n        const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n        if (ram <= lowestRam) continue;\\n        ns.killall(lowestRamServerName);\\n        if (ns.deleteServer(lowestRamServerName)) {\\n          ns.toast(\\n            `deleted server ${lowestRamServerName} which had ${lowestRam}GB RAM`\\n          );\\n          await ns.writePort(\\n            MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n            JSON.stringify({ remove: lowestRamServerName })\\n          );\\n        }\\n      }\\n\\n      // Buy server.\\n      const server = ns.purchaseServer(PURCHASED_SERVER_PREFIX, ram);\\n      if (server !== '') {\\n        ns.toast(`bought server (${server}) with ${formatNumber(ram)}GB RAM`);\\n        await ns.writePort(\\n          MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n          JSON.stringify({ add: server })\\n        );\\n\\n        // Update lowest RAM acceptable.\\n        if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n          const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n          const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n          if (lowestRam > lowestRamAcceptable) {\\n            lowestRamAcceptable = lowestRam;\\n            ns.toast(`now only buying servers >= ${lowestRamAcceptable}GB RAM`);\\n          }\\n        }\\n      }\\n    }\\n\\n    // Wait 30 seconds before buying another server.\\n    await ns.sleep(1000 * 30);\\n  }\\n}\\n\\nfunction getPurchasedServerNames(ns) {\\n  return ns\\n    .scan()\\n    .filter(serverName => serverName.startsWith(PURCHASED_SERVER_PREFIX));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getLowestRamPurchasedServer(ns) {\\n  const purchasedServerNames = getPurchasedServerNames(ns);\\n  sort(purchasedServerNames, ns.getServerMaxRam);\\n  return purchasedServerNames[0];\\n}\\n\",\"filename\":\"manage-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///e6014a2f-02c2-40b6-8c88-0e0379fadb34\",\"moduleSequenceNumber\":694},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d475c119-8438-4767-ad34-9c0d5273dde4\",\"moduleSequenceNumber\":714},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e5060c42-cf12-4c9e-b431-5f60eeb3bd1a\",\"moduleSequenceNumber\":696},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///49621f2c-c146-457e-b3ca-5e797051ae33\",\"moduleSequenceNumber\":725},{\"filename\":\"manage-servers.js\",\"url\":\"blob:file:///2fbf1997-f7af-4d55-9ca9-4498be401b58\",\"moduleSequenceNumber\":849}],\"dependents\":[],\"ramUsage\":7.25,\"server\":\"home\",\"_hash\":\"f350c6b09307105977aa72deb76168265bd2f2bdcd8bcb3f1c1736e2cb7ea5d2\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend, getNetWorth, sort } from '/utils/misc.js';\\nimport { formatMoney, formatPercent } from '/utils/format.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { getForecast } from './utils/stock';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  NULL_PORT_DATA,\\n} from './utils/ports';\\nimport { getStockSymbol } from './utils/organizations';\\n\\nconst COMMISSION_FEE = 100000;\\nconst PERCENT_OF_NET_WORTH_IN_STOCK = 0.99;\\n\\n/**\\n * Manages buying and selling stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols;\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    // No stock exchange API.\\n    return;\\n  }\\n\\n  while (true) {\\n    const manageHackingMessage = ns.readPort(\\n      MANAGE_HACKING_TO_MANAGE_STOCKS_PORT\\n    );\\n    if (manageHackingMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageHackingMessage);\\n      if (response.buy) {\\n        const symbol = getStockSymbol(response.buy);\\n        if (symbol !== undefined) {\\n          buyStock(ns, symbol, ns.getServerMoneyAvailable(HOME_SERVER_NAME));\\n        }\\n      }\\n      if (response.sell) {\\n        const symbol = getStockSymbol(response.sell);\\n        if (symbol !== undefined) sellStock(ns, symbol);\\n      }\\n    }\\n\\n    const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n    const netWorth = getNetWorth(ns);\\n    if (cash / netWorth < 1 - PERCENT_OF_NET_WORTH_IN_STOCK) {\\n      ns.print(\\n        `\\\\nnot buying any stock because we want only ${formatPercent(\\n          PERCENT_OF_NET_WORTH_IN_STOCK\\n        )} of our net worth in stocks and we currently have ${formatMoney(\\n          cash,\\n          true\\n        )} in cash which is ${formatPercent(\\n          cash / netWorth\\n        )} of our net worth (${formatMoney(netWorth, true)})`\\n      );\\n    } else {\\n      // Sort stock symbols sorted from lowest to highest ask price and buy stock\\n      // starting with the cheapest stock.\\n      let moneyToSpend = cash - (1 - PERCENT_OF_NET_WORTH_IN_STOCK) * netWorth;\\n      ns.print(`\\\\ncan spend ${formatMoney(moneyToSpend)}`);\\n      sort(symbols, ns.stock.getAskPrice);\\n      for (const symbol of symbols) {\\n        if (moneyToSpend <= COMMISSION_FEE) break;\\n        moneyToSpend -= buyStock(ns, symbol, moneyToSpend);\\n      }\\n    }\\n\\n    // Sort stock symbols sorted from highest to lowest bid price and sell stock\\n    // starting at the most expensive stock.\\n    sort(symbols, ns.stock.getBidPrice);\\n    for (const symbol of symbols) sellStock(ns, symbol);\\n\\n    await ns.sleep(6000); // Sleep for 6 seconds.\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n * @param {number} moneyToSpend\\n * @returns {number} how much we spent\\n */\\nfunction buyStock(ns, symbol, moneyToSpend) {\\n  const ownedShareCount = ns.stock.getPosition(symbol)[0];\\n  let sharesToBuy = Math.min(\\n    Math.floor((moneyToSpend - COMMISSION_FEE) / ns.stock.getAskPrice(symbol)),\\n    ns.stock.getMaxShares(symbol) - ownedShareCount\\n  );\\n  if (sharesToBuy <= 0) return 0;\\n\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast < 0.5) return 0;\\n  sharesToBuy = Math.ceil(forecast * sharesToBuy);\\n\\n  const sharePrice = ns.stock.buy(symbol, sharesToBuy);\\n  ns.print(\\n    `bought ${sharesToBuy} shares of ${symbol} at ${formatMoney(sharePrice)}`\\n  );\\n\\n  return sharePrice * sharesToBuy + COMMISSION_FEE;\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n */\\nfunction sellStock(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  const ownedShareCount = position[0];\\n  if (ownedShareCount === 0) return; // Nothing to sell.\\n\\n  // Panic sell.\\n  if (getForecast(ns, symbol) < 0.15) {\\n    const sharesToSell = ns.stock.getPosition(symbol)[0];\\n    ns.stock.sell(symbol, sharesToSell);\\n    ns.print(`panic sold ${sharesToSell} shares of ${symbol}`);\\n  }\\n\\n  const ownedAvgSharePrice = position[1];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  if (bidPrice < ownedAvgSharePrice) return; // We won't make a profit.\\n\\n  // Determine how much to sell.\\n  let sharesToSell = ownedShareCount;\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast > 0.5) return; // Stock will go up.\\n  sharesToSell = Math.ceil((forecast / 0.5) * sharesToSell);\\n\\n  if (sharesToSell === 0) return; // Nothing to sell.\\n  const gain = ns.stock.getSaleGain(symbol, sharesToSell, 'Long');\\n  const profit =\\n    (gain - ownedAvgSharePrice * ownedShareCount) /\\n    (ownedAvgSharePrice * ownedShareCount);\\n  if (profit < 0) return; // We won't make a profit.\\n\\n  const sharePrice = ns.stock.sell(symbol, sharesToSell);\\n  ns.print(\\n    `sold ${sharesToSell} shares of ${symbol} at ${formatMoney(\\n      sharePrice\\n    )} with profit of ${formatPercent(profit)}`\\n  );\\n}\\n\",\"filename\":\"manage-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///ec2baacc-4427-4f3d-b20c-9c6d8464e212\",\"moduleSequenceNumber\":194067},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///7db555f0-857b-4fca-95ce-66e2b3d99586\",\"moduleSequenceNumber\":194054},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":194023},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":194025},{\"filename\":\"manage-stocks.js\",\"url\":\"blob:file:///909605be-8d0e-4a10-a6c4-4cdf59ae3426\",\"moduleSequenceNumber\":194077}],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"_hash\":\"67967b49a7dd161625c2ca1d07c8a3ec6672b5d5e4a116564c6417dbd84ce857\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for formatting numbers. */\\n\\n/**\\n * @param {number} money\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatMoney(money, isCompact) {\\n  return money.toLocaleString('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n    notation: isCompact ? 'compact' : 'standard',\\n  });\\n}\\n\\n/**\\n * @param {number} number\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatNumber(number, isCompact) {\\n  return Intl.NumberFormat('en', {\\n    notation: isCompact ? 'compact' : 'standard',\\n  }).format(number);\\n}\\n\\n/**\\n * Formats a percentage within two decimals.\\n *\\n * @param {number} percent\\n * @returns {string}\\n */\\nexport function formatPercent(percent) {\\n  return (percent * 100).toFixed(2) + '%';\\n}\\n\\n/**\\n * Formats time with minutes and seconds.\\n *\\n * @param {number} timeMs\\n * @returns {string} e.g. \\\"43s\\\", \\\"4m 0s\\\", \\\"3m 32s\\\"\\n */\\nexport function formatTime(timeMs) {\\n  const hours = Math.floor(timeMs / 1000 / 60 / 60);\\n  const minutes = Math.floor((timeMs - hours * 1000 * 60 * 60) / 1000 / 60);\\n  const seconds = Math.floor(\\n    (timeMs - hours * 1000 * 60 * 60 - minutes * 1000 * 60) / 1000\\n  );\\n  return (\\n    (hours > 0 ? `${formatNumber(hours)}h ` : '') +\\n    (minutes > 0 ? `${minutes}m ` : '') +\\n    `${seconds}s`\\n  );\\n}\\n\",\"filename\":\"/utils/format.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"2edf8f46ea83666c8efabac9644a7a57ba8e7523e911340efe3b90ab61e64391\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for hacking servers. */\\nimport { HOME_SERVER_NAME, PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\n\\nexport const GROW_SCRIPT = 'grow.js';\\nexport const WEAKEN_SCRIPT = 'weaken.js';\\nexport const HACK_SCRIPT = 'hack.js';\\n\\n/**\\n * Returns whether a server is hackable.\\n *\\n * Note that we are using {@link PURCHASED_SERVER_PREFIX} instead of getting the\\n * purchased servers list here in order to save on 2.25GB of RAM. This requires\\n * that all purchased servers have the same prefix.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if the server is hackable, false if otherwise\\n */\\nexport function isHackable(ns, serverName) {\\n  return (\\n    serverName !== HOME_SERVER_NAME &&\\n    !serverName.startsWith(PURCHASED_SERVER_PREFIX) &&\\n    ns.getServerMaxMoney(serverName) > 0 &&\\n    ns.hasRootAccess(serverName) &&\\n    ns.getServerRequiredHackingLevel(serverName) <= ns.getHackingLevel()\\n  );\\n}\\n\\n/**\\n * A heuristic that determines how hackable a server is.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {number} higher number means better to hack\\n */\\nexport function getHackingHeuristic(ns, serverName) {\\n  let heuristic =\\n    (ns.hackAnalyzeChance(serverName) *\\n      ns.hackAnalyze(serverName) *\\n      ns.getServerMoneyAvailable(serverName)) /\\n    ns.getHackTime(serverName);\\n  try {\\n    heuristic *= ns.formulas.hacking.hackExp(\\n      ns.getServer(serverName),\\n      ns.getPlayer()\\n    );\\n  } catch (_) {}\\n  return heuristic;\\n}\\n\",\"filename\":\"/utils/hacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"_hash\":\"2d9501a3638029920ab5ffd79a6b08672381d1fe45b026e1ffd907c16c0926a1\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Miscellaneous utils that don't fit anywhere else. */\\n\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nexport const DEFAULT_PORT = 1337;\\nexport const LOCALHOST_PREFIX = 'http://localhost';\\n\\n/**\\n * Sorts an array given a function to call on each item of the array.\\n *\\n * @param {any[]} array\\n * @param {} fn\\n * @param {boolean} [reverse=false]\\n */\\nexport function sort(array, fn, reverse) {\\n  array.sort((a, b) => {\\n    const first = fn(reverse ? b : a);\\n    const second = fn(reverse ? a : b);\\n    if (typeof first === 'string') return first.localeCompare(second);\\n    return first - second;\\n  });\\n}\\n\\n/**\\n * This function allows us to reserve a certain amount of money so we don't end\\n * up spending all our money buying things.\\n *\\n * @param {import('../index').NS} ns\\n * @returns {number} money that we want to spend purchasing things\\n */\\nexport function getMoneyToSpend(ns) {\\n  return ns.getServerMoneyAvailable(HOME_SERVER_NAME) / 2;\\n}\\n\\n/**\\n * @param {import ('../index').NS} ns\\n * @returns {number} net worth including cash on hand and stocks\\n */\\nexport function getNetWorth(ns) {\\n  return (\\n    ns.getServerMoneyAvailable(HOME_SERVER_NAME) +\\n    ns.stock\\n      .getSymbols()\\n      .map(symbol => getStockWorth(ns, symbol))\\n      .reduce((a, b) => a + b)\\n  );\\n}\\n\",\"filename\":\"/utils/misc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///a6fdad3e-cbfd-48f7-95e8-e667a743adc9\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ee932550-e5cb-49f2-946d-d8811d6ec59e\"}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"_hash\":\"a71eedebfa90df311ceefaf82c6ce1d055029652c90e0fe55f02aaa7e4ea25b3\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for servers. */\\n\\nexport const HOME_SERVER_NAME = 'home';\\nexport const PURCHASED_SERVER_PREFIX = 'lauren';\\n\\n/**\\n * Retrieves all servers including personal servers and {@link HOME_SERVER_NAME}.\\n *\\n * @example getAllServers(ns)\\n * @param {import('../index').NS } ns\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} names of all servers including {@link HOME_SERVER_NAME}\\n */\\nexport function getAllServerNames(ns, root, parent) {\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  const servers = [...children];\\n  for (const child of children) {\\n    servers.push(...getAllServerNames(ns, child, root));\\n  }\\n  return [...new Set(servers)];\\n}\\n\\n/**\\n * Gets the connection path to a server.\\n *\\n * @example getPath(ns, 'silver-helix')\\n * @param {import('../index').NS} ns\\n * @param {string} server server to get path to\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} connection to server where the last item is the name of\\n *                     the server to get the path to (e.g. if the server is\\n *                     silver-helix, then the path is\\n *                     [\\\"foodnstuff\\\",\\\"zer0\\\",\\\"silver-helix\\\"])\\n */\\nexport function getPath(ns, server, root, parent) {\\n  if (parent === undefined) parent = 'home';\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  if (children.includes(server)) return [server];\\n  for (const child of children) {\\n    const path = getPath(ns, server, child, root);\\n    if (path.length > 0) return [child, ...path];\\n  }\\n  return [];\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(getPath(ns, 'silver-helix'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string} serverName\\n * @returns {number} GB of free RAM\\n */\\nexport function getFreeRam(ns, serverName) {\\n  if (!ns.hasRootAccess(serverName)) return 0;\\n  return ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n}\\n\",\"filename\":\"/utils/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"5603a4f076bf668e39a9034a9b798647098b43f88cb67cc832bc04883a931d18\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPTS_TO_RUN = [\\n  'sync.js',\\n  'manage-hacking.js',\\n  'manage-hacknet.js',\\n  'manage-life.js',\\n  'manage-programs.js',\\n  'manage-servers.js',\\n  'manage-stocks.js',\\n];\\n\\n/**\\n * Script that starts up all managing scripts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport const main = ns => SCRIPTS_TO_RUN.forEach(script => ns.run(script, 1));\\n\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///1eee4e65-1f66-4bb0-bf6d-dc1e78bd978d\",\"moduleSequenceNumber\":194070}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"f618d19def433b5f4dcaf46df1a7c615406da84ef4d0238170aa1517a75fdfc6\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  GROW_SCRIPT,\\n  WEAKEN_SCRIPT,\\n  HACK_SCRIPT,\\n  getHackingHeuristic,\\n  isHackable,\\n} from '/utils/hacking.js';\\nimport { HOME_SERVER_NAME, getAllServerNames } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n  NULL_PORT_DATA,\\n} from '/utils/ports.js';\\n\\nconst HACKING_SCRIPTS = [GROW_SCRIPT, WEAKEN_SCRIPT, HACK_SCRIPT];\\nconst MIN_HACK_CHANCE = 0.6;\\nconst MIN_AVAILABLE_MONEY = 5000000;\\n\\nlet homeReservedRam;\\n\\n/**\\n * Manages hacking servers.\\n *\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  homeReservedRam = ns.args[0];\\n  ns.disableLog('ALL');\\n\\n  let allServerNames = getAllServerNames(ns);\\n\\n  while (true) {\\n    // Update all server names based on servers that we've added or deleted from\\n    // the manage-servers.js script.\\n    const manageServersMessage = ns.readPort(\\n      MANAGE_SERVERS_TO_MANAGE_HACKING_PORT\\n    );\\n    if (manageServersMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageServersMessage);\\n      if (response.add && !allServerNames.includes(response.add)) {\\n        allServerNames.push(response.add);\\n      }\\n      if (response.remove && allServerNames.includes(response.remove)) {\\n        allServerNames = allServerNames.filter(\\n          serverName => serverName !== response.remove\\n        );\\n      }\\n    }\\n\\n    // Get all servers where we have root access including home.\\n    const rootAccessServerNames = allServerNames.filter(serverName =>\\n      gainRootAccess(ns, serverName)\\n    );\\n\\n    // Copy scripts to every root access server.\\n    for await (const serverName of rootAccessServerNames) {\\n      if (serverName === HOME_SERVER_NAME) continue;\\n      await copyScriptsToServer(ns, serverName);\\n    }\\n\\n    // Check if we have any free RAM to do anything.\\n    if (!hasFreeRam(ns, rootAccessServerNames)) continue;\\n\\n    // Get hackable servers sorted by hacking heuristic.\\n    const hackableServerNames = rootAccessServerNames.filter(serverName =>\\n      isHackable(ns, serverName)\\n    );\\n    sort(\\n      hackableServerNames,\\n      serverName => getHackingHeuristic(ns, serverName),\\n      true\\n    );\\n\\n    // Grow, weaken, and hack.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Tell the manage-stock script to sell if we are close to maxing out the\\n      // server's money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney / maxMoney > 0.99) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ sell: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-growing the server.\\n      if (availableMoney === maxMoney) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          GROW_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} reached max money; killed ` +\\n            `${killedServerCount} servers that were still trying to grow`\\n        );\\n      }\\n\\n      // Grow the server until MIN_AVAILABLE_MONEY.\\n      if (availableMoney < MIN_AVAILABLE_MONEY) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(MIN_AVAILABLE_MONEY)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames, MIN_AVAILABLE_MONEY);\\n      }\\n\\n      // Check that we are not over-weakening the server.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (hackChance === 1 || securityLevel === minSecurityLevel) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          WEAKEN_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached min security; killed ` +\\n            `${killedServerCount} servers that were still trying to weaken`\\n        );\\n      }\\n\\n      // Weaken the server until MIN_HACK_CHANCE or until lowest security level.\\n      if (hackChance < MIN_HACK_CHANCE && securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${formatPercent(\\n            hackChance\\n          )} to ${formatPercent(MIN_HACK_CHANCE)} hack chance`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Tell the manage-stock script to buy if we are close to hacking all of\\n      // the target server's money.\\n      if (availableMoney / maxMoney < 0.01) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ buy: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-hacking the server.\\n      if (availableMoney === 0) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          HACK_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached $0; killed ` +\\n            `${killedServerCount} servers that were still trying to hack`\\n        );\\n      }\\n\\n      // Hack the server if server has MIN_AVAILABLE_MONEY and MIN_HACK_CHANCE.\\n      if (\\n        availableMoney >= MIN_AVAILABLE_MONEY &&\\n        hackChance >= MIN_HACK_CHANCE\\n      ) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    // If we have any extra free RAM, grow and weaken hackable servers to the\\n    // max money and min security level.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Grow the server until max money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney < maxMoney) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(maxMoney)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Weaken the server until min security level.\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${securityLevel.toFixed(\\n            2\\n          )} to ${minSecurityLevel} security level`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Hack server that has >0% hack chance until no money.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      if (availableMoney > 0 && hackChance > 0) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    if (\\n      ns.fileExists('Formulas.exe') &&\\n      hasFreeRam(ns, rootAccessServerNames)\\n    ) {\\n      // Get server with the most hack exp.\\n      const hackableServerNamesSortedByHackExp = [...hackableServerNames];\\n      const player = ns.getPlayer();\\n      sort(\\n        hackableServerNamesSortedByHackExp,\\n        /** @type {string} */ serverName =>\\n          ns.formulas.hacking.hackExp(ns.getServer(serverName), player) /\\n          ns.getWeakenTime(serverName)\\n      );\\n      const targetServerName = hackableServerNamesSortedByHackExp[0];\\n\\n      for (const rootAccessServerName of rootAccessServerNames) {\\n        const threadCount = getAvailableThreadCount(\\n          ns,\\n          rootAccessServerName,\\n          WEAKEN_SCRIPT\\n        );\\n        if (threadCount === 0) continue;\\n        const pid = ns.exec(\\n          WEAKEN_SCRIPT,\\n          rootAccessServerName,\\n          threadCount,\\n          targetServerName,\\n          1\\n        );\\n        if (pid > 0) {\\n          ns.print(\\n            `weakening ${targetServerName} on ${rootAccessServerName} with ${formatNumber(\\n              threadCount\\n            )} threads`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(3000); // Wait for 3 seconds.\\n  }\\n}\\n\\n/**\\n * Open all the ports that we can open and attempt to gain root access to a\\n * given server.\\n *\\n * @param {import('index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if we now have root access and false if otherwise\\n */\\nfunction gainRootAccess(ns, serverName) {\\n  const server = ns.getServer(serverName);\\n\\n  // Attempt to open all ports even if we already have root access.\\n  if (ns.fileExists('BruteSSH.exe') && !server.sshPortOpen) {\\n    ns.brutessh(serverName);\\n  }\\n  if (ns.fileExists('FTPCrack.exe') && !server.ftpPortOpen) {\\n    ns.ftpcrack(serverName);\\n  }\\n  if (ns.fileExists('relaySMTP.exe') && !server.smtpPortOpen) {\\n    ns.relaysmtp(serverName);\\n  }\\n  if (ns.fileExists('HTTPWorm.exe') && !server.httpPortOpen) {\\n    ns.httpworm(serverName);\\n  }\\n  if (ns.fileExists('SQLInject.exe') && !server.sqlPortOpen) {\\n    ns.sqlinject(serverName);\\n  }\\n\\n  if (ns.hasRootAccess(serverName)) return true;\\n  try {\\n    ns.nuke(serverName);\\n  } catch (_) {\\n    return false;\\n  }\\n}\\n\\n/**\\n * Copies grow, hack, and weaken scripts to a given server and deletes any other\\n * js scripts from that server.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n */\\nasync function copyScriptsToServer(ns, serverName) {\\n  // Copy scripts over.\\n  await ns.scp(HACKING_SCRIPTS, HOME_SERVER_NAME, serverName);\\n\\n  // Delete any other scripts on the server.\\n  const otherScripts = ns\\n    .ls(serverName)\\n    .filter(\\n      script => script.endsWith('.js') && !HACKING_SCRIPTS.includes(script)\\n    );\\n  for (const script of otherScripts) ns.rm(script, serverName);\\n}\\n\\n/**\\n * Get amount of free RAM from list of servers or a single server.\\n *\\n * @param {import('index').NS} ns\\n * @param {(string[]|string)} serverNames\\n * @returns {number} GB of free RAM\\n */\\nfunction getFreeRam(ns, serverNames) {\\n  if (typeof serverNames === 'string') {\\n    // Return free RAM for a single server.\\n    const serverName = serverNames;\\n    const freeRam =\\n      ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n    if (serverName !== HOME_SERVER_NAME) return freeRam;\\n\\n    if (homeReservedRam !== undefined) {\\n      return Math.max(freeRam - homeReservedRam, 0);\\n    }\\n\\n    // If home server, make sure to reserve RAM to run other scripts.\\n    const scripts = ns\\n      .ls(HOME_SERVER_NAME)\\n      .filter(\\n        fileName => fileName.endsWith('.js') && !fileName.startsWith('/')\\n      );\\n    let reservedRam = Math.max(\\n      ...scripts.map(script => ns.getScriptRam(script))\\n    );\\n    return Math.max(freeRam - reservedRam, 0);\\n  }\\n  return serverNames\\n    .map(serverName => getFreeRam(ns, serverName))\\n    .reduce((a, b) => a + b);\\n}\\n\\n/**\\n * Get minimum amount of RAM to execute one of grow, weaken, or hack scripts.\\n *\\n * @param {import('index').NS} ns\\n * @returns {number} GB of RAM\\n */\\nfunction getMinRam(ns) {\\n  return Math.min(\\n    ...HACKING_SCRIPTS.map(script => ns.getScriptRam(script, HOME_SERVER_NAME))\\n  );\\n}\\n\\n/**\\n * Checks if we have any free RAM to do anything.\\n *\\n * @param {import('index').NS} ns\\n * @param {string[]} rootAccessServerNames\\n * @returns {boolean} true if we have free RAM\\n */\\nfunction hasFreeRam(ns, rootAccessServerNames) {\\n  const freeRam = getFreeRam(ns, rootAccessServerNames);\\n  if (getFreeRam(ns, rootAccessServerNames) < getMinRam(ns)) {\\n    ns.print(\\n      `all servers are currently busy (only ${freeRam} GB RAM available)`\\n    );\\n    return false;\\n  }\\n  return true;\\n}\\n\\n/**\\n * Grow until min money.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n * @param {number} [minMoneyAvailable] if not set, then will grow until max\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t money\\n */\\nfunction grow(ns, targetServerName, rootAccessServerNames, minMoneyAvailable) {\\n  const maxMoney = ns.getServerMaxMoney(targetServerName);\\n  if (minMoneyAvailable === undefined) minMoneyAvailable = maxMoney;\\n  const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n\\n  // Get number of threads needed to get money to get to the min available money\\n  const growthAmount =\\n    availableMoney === 0 ? 2 : minMoneyAvailable / availableMoney;\\n  let estimatedThreadCount = Math.round(\\n    ns.growthAnalyze(targetServerName, growthAmount)\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to grow ${targetServerName} ${formatPercent(\\n      growthAmount\\n    )}`\\n  );\\n\\n  // Use only the estimated thread count to grow the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      GROW_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * Weaken until min security level.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction weaken(ns, targetServerName, rootAccessServerNames) {\\n  const currentSecurityLevel = ns.getServerSecurityLevel(targetServerName);\\n  const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n\\n  // Get number of threads needed to get hack chance to get to minimum security\\n  // level.\\n  let estimatedThreadCount = 1;\\n  do {\\n    estimatedThreadCount++;\\n  } while (\\n    currentSecurityLevel - ns.weakenAnalyze(estimatedThreadCount) >\\n    minSecurityLevel\\n  );\\n  if (estimatedThreadCount === 0) return;\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to weaken ` +\\n      `${targetServerName} from ${currentSecurityLevel} to ${minSecurityLevel}`\\n  );\\n\\n  // Use only the estimated thread count to weaken the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      WEAKEN_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction hack(ns, targetServerName, rootAccessServerNames) {\\n  // Get number of threads needed to hack all the money from the server.\\n  let estimatedThreadCount = Math.round(\\n    ns.hackAnalyzeThreads(\\n      targetServerName,\\n      ns.getServerMoneyAvailable(targetServerName)\\n    )\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to hack ${targetServerName}`\\n  );\\n\\n  // Use only the estimated thread count to hack the target srver.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      HACK_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n * @param {string} scriptName\\n * @param {number} threadCount\\n * @param  {...any} args\\n * @returns {number} number of threads that we were able to run the script at\\n */\\nfunction runScript(ns, serverName, scriptName, threadCount, ...args) {\\n  if (ns.isRunning(scriptName, serverName, ...args)) {\\n    const script = ns.getRunningScript(scriptName, serverName, ...args);\\n    ns.print(\\n      `already running ${scriptName} ${args} on ${serverName} with ` +\\n        `${script.threads} threads`\\n    );\\n    return 0;\\n  }\\n\\n  const availableThreadCount = getAvailableThreadCount(\\n    ns,\\n    serverName,\\n    scriptName\\n  );\\n  const actualThreadCount =\\n    availableThreadCount > threadCount ? threadCount : availableThreadCount;\\n  if (actualThreadCount <= 0) return 0;\\n  const success = ns.exec(scriptName, serverName, actualThreadCount, ...args);\\n  if (success === 0) return 0;\\n  ns.print(\\n    `running ${scriptName} ${args} on ${serverName} with ${actualThreadCount} threads`\\n  );\\n  return actualThreadCount;\\n}\\n\\nfunction getAvailableThreadCount(ns, serverName, scriptName) {\\n  return Math.floor(getFreeRam(ns, serverName) / ns.getScriptRam(scriptName));\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string[]} serverNames\\n * @param {string} scriptName\\n * @param  {...any} args\\n * @returns {number} number of servers that we killed\\n */\\nfunction killScript(ns, serverNames, scriptName, ...args) {\\n  let killedServerCount = 0;\\n  for (const serverName of serverNames) {\\n    if (\\n      ns.isRunning(scriptName, serverName, ...args) &&\\n      ns.kill(scriptName, serverName, ...args)\\n    ) {\\n      killedServerCount++;\\n    }\\n  }\\n  return killedServerCount;\\n}\\n\",\"filename\":\"manage-hacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///49621f2c-c146-457e-b3ca-5e797051ae33\",\"moduleSequenceNumber\":725},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///e6014a2f-02c2-40b6-8c88-0e0379fadb34\",\"moduleSequenceNumber\":694},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d475c119-8438-4767-ad34-9c0d5273dde4\",\"moduleSequenceNumber\":714},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e5060c42-cf12-4c9e-b431-5f60eeb3bd1a\",\"moduleSequenceNumber\":696},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///5e6c0625-2bc3-4146-9d10-d39434866638\",\"moduleSequenceNumber\":695},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///0a83fe66-895a-4c06-8538-344ae8716382\",\"moduleSequenceNumber\":850}],\"dependents\":[],\"ramUsage\":15.15,\"server\":\"home\",\"_hash\":\"bb0a6f095badb1d9361284145104fe5ca5d6133d6882ddd59d18ab27b2d9aec0\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index exactly.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} input\\n * @returns {number} 1 if can reach the end, 0 if not\\n */\\nexport function arrayJumpingGame(input) {\\n  return _getPathToLastIndex(input).length === 0 ? 0 : 1;\\n}\\n\\n/**\\n * @param {number[]} maxJumps List of numbers where each number represents max jump.\\n * @param {number} [currentIndex=0]\\n * @returns {string[]} The path to the last index where each member of the array is\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\tthe jump. Empty if no path.\\n */\\nfunction _getPathToLastIndex(maxJumps, currentIndex) {\\n  currentIndex = currentIndex || 0;\\n  if (currentIndex === maxJumps.length - 1) return ['end'];\\n\\n  const maxJump = maxJumps[currentIndex];\\n  for (let n = 1; n <= maxJump; n++) {\\n    const path = _getPathToLastIndex(maxJumps, currentIndex + n);\\n    if (path.length > 0)\\n      return [\\n        `jump from ${currentIndex} to ${\\n          currentIndex + n\\n        } (max jump is ${maxJump})`,\\n        ...path,\\n      ];\\n  }\\n\\n  return [];\\n}\\n\",\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"2feadad6c9c3bef4df0b60380d6f7e2136c7cd17813055df6906cb2a3bdbd2d6\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const OPERATORS = ['+', '-', '*'];\\n\\n/**\\n * Find All Valid Math Expressions\\n *\\n * Return all possible ways you can add the +, -, and * operators to the string\\n * such that it evaluates to the target number.\\n *\\n * @param {any[]} input\\n * @returns {string[]}\\n */\\nexport function findValidMathExpressions(input) {\\n  /** @type {string} */ const digits = input[0];\\n  /** @type {number} */ const targetNumber = input[1];\\n\\n  /**\\n   * Index is the index of the digit in the digits string.\\n   *\\n   * @type {string[][]}\\n   */\\n  const combinations = Array(digits.length);\\n  for (let i = digits.length - 1; i >= 0; i--) {\\n    const digit = digits.substring(i, i + 1);\\n\\n    // Fill in the last slot of the combinations array.\\n    if (i === digits.length - 1) {\\n      combinations[i] = [digit];\\n      continue;\\n    }\\n\\n    // Fill in the other combinations.\\n    combinations[i] = [];\\n    for (const expression of combinations[i + 1]) {\\n      combinations[i].push(digit + expression);\\n      if (\\n        expression.startsWith('0') &&\\n        expression.split(/[\\\\+\\\\-\\\\*]/g)[0] !== '0'\\n      ) {\\n        continue;\\n      }\\n      OPERATORS.forEach(operator =>\\n        combinations[i].push(digit + operator + expression)\\n      );\\n    }\\n  }\\n\\n  // Get valid expressions.\\n  return combinations[0].filter(\\n    expression => evaluate(expression) === targetNumber\\n  );\\n}\\n\\n/**\\n * @param {string} expression\\n * @returns {number}\\n */\\nfunction evaluate(expression) {\\n  // Split + and - into an array of addends.\\n  const addParts = expression.split('+');\\n  const addends = [];\\n  for (const addPart of addParts) {\\n    if (addPart.includes('-')) {\\n      const subtractParts = addPart.split('-');\\n      addends.push(subtractParts[0]);\\n      for (let i = 1; i < subtractParts.length; i++) {\\n        addends.push('-' + subtractParts[i]);\\n      }\\n    } else {\\n      addends.push(addPart);\\n    }\\n  }\\n\\n  // Resolve multiplications within each addend and sum.\\n  let sum = 0;\\n  for (const addend of addends) {\\n    if (addend.includes('*')) {\\n      const factors = addend.split('*');\\n      if (factors.includes('0')) continue;\\n      const product = factors\\n        .filter(factor => factor !== '1')\\n        .map(factor => parseInt(factor))\\n        .reduce((a, b) => a * b);\\n      sum += product;\\n    } else {\\n      sum += parseInt(addend);\\n    }\\n  }\\n  return sum;\\n}\\n\",\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e60a956a9f1f2c8e855494c69fbca65956aefe1e41d241f04fb2a1641c2d32ed\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the input.\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function generateIpAddresses(input) {\\n  return _getAddresses(input).filter(\\n    address => address.split('.').length === 4\\n  );\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} [depth]\\n * @returns {string[]}\\n */\\nfunction _getAddresses(str, depth) {\\n  if (depth === undefined) depth = 0;\\n  if (depth === 4) return [];\\n  const beginningSections = _getBeginningSections(str);\\n  const addresses = [];\\n  for (const beginningSection of beginningSections) {\\n    const restOfStr = str.substring(beginningSection.toString().length);\\n    if (restOfStr === '') {\\n      addresses.push(...beginningSections);\\n    } else {\\n      const addressVariants = _getAddresses(restOfStr, depth + 1);\\n      for (const variant of addressVariants) {\\n        if (variant.replaceAll('.', '') === restOfStr) {\\n          addresses.push(beginningSection + '.' + variant);\\n        }\\n      }\\n    }\\n  }\\n  return [...new Set(addresses)];\\n}\\n\\n/**\\n * A section is the first 1-3 characters of the {@link str} where there cannot\\n * be a leading zero nor can there be a leading zero after the section. The\\n * section must also be a number between 0 and 255.\\n *\\n * @param {string} str\\n */\\nfunction _getBeginningSections(str) {\\n  if (str.length === 0) return [];\\n  return [1, 2, 3]\\n    .filter(length => length === 1 || str[0] !== '0') // cannot be a leading zero after the section\\n    .map(length => parseInt(str.substring(0, length)))\\n    .filter(section => section >= 0 && section <= 255)\\n    .map(section => section.toString());\\n}\\n\",\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"0f8ead77c485ea6b40daebdc532c4a27d1d48eaa1fd2e51e4567dbc41a48de72\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *\\n *  3 + 1\\n *  2 + 2\\n *  2 + 1 + 1\\n *  1 + 1 + 1 + 1\\n *\\n * How many different ways can the input number be written as a sum of at least\\n * two positive integers?\\n *\\n * @param {number} input\\n * @returns {number} number of ways to sum\\n */\\nexport function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"8a68acbe2492a05c86e6546f54c823867bf6cff25d4d2e86d552aff1098d18db\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime\\n * factor of the input?\\n *\\n * @param {number} input\\n * @returns {number} largest prime factor\\n */\\nexport function findLargestPrimeFactor(input) {\\n  /** @type {Object.<number, boolean>} */\\n  const cachedPrimeNumberMap = {};\\n\\n  const primes = [];\\n  for (let i = 1; i <= input; i++) {\\n    if (input % i !== 0) continue;\\n    if (_isPrime(i, cachedPrimeNumberMap)) primes.push(i);\\n  }\\n  return primes.slice(-1)[0];\\n}\\n\\n/**\\n * Checks if a number is prime.\\n *\\n * @param {number} number\\n * @param {Object.<number, boolean>} cachedPrimeNumberMap\\n */\\nfunction _isPrime(number, cachedPrimeNumberMap) {\\n  if (number in cachedPrimeNumberMap) return cachedPrimeNumberMap[number];\\n  for (let i = 2; i < number; i++) {\\n    if (number % i === 0) {\\n      cachedPrimeNumberMap[number] = false;\\n      return false;\\n    }\\n  }\\n  cachedPrimeNumberMap[number] = true;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"adaa0db1e11a934a70dc2e8e62ddd1dafa5485848c0fc539ce14dfcc5307e512\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 112,61,181,149,39,17,143,192,196,120,151\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {string} input\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderI(input) {\\n  let maxProfit = 0;\\n  for (let day = 0; day < input.length - 1; day++) {\\n    const profit = Math.max(...input.slice(day + 1)) - input[day];\\n    if (profit > maxProfit) maxProfit = profit;\\n  }\\n  return maxProfit;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderI([112, 61, 181, 149, 39, 17, 143, 192, 196, 120, 151])\\n);\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e2816fc708994620ac4a831daf31fe7c7e085d179d3b45f7fdbd3ec249c19d5f\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i.\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {int[]} stockPrices\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  let profit = 0;\\n\\n  let day = -1;\\n  while (day < stockPrices.length) {\\n    day++;\\n    if (stockPrices[day + 1] > stockPrices[day]) {\\n      let minPrice = stockPrices[day];\\n      day++;\\n\\n      while (\\n        day < stockPrices.length &&\\n        stockPrices[day + 1] > stockPrices[day]\\n      ) {\\n        day++;\\n      }\\n      let maxPrice = stockPrices[day];\\n      profit += maxPrice - minPrice;\\n    }\\n  }\\n\\n  return profit;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"408d4f1e8f53592e4245048ecddbcdf5cbfa68ccea591735e28c2a10fca59457\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/algorithmic-stock-trader-iii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\",\"moduleSequenceNumber\":707}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/unique-paths-in-a-grid-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\",\"moduleSequenceNumber\":708}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * @param {number[]} input\\n * @returns {number}\\n */\\nexport function subarrayWithMaximumSum(input) {\\n  let maxSum = input[0];\\n  for (let startIndex = 0; startIndex < input.length; startIndex++) {\\n    for (let endIndex = startIndex + 1; endIndex <= input.length; endIndex++) {\\n      const subarray = input.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b);\\n      maxSum = Math.max(maxSum, sum);\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"5cdf8f48468f4da70baeb04591bb73878aae85e5d0541f20b982457c69806d53\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  if (_isValid(input)) return [input];\\n\\n  let parenthesesToRemove = 1;\\n  let variants = [];\\n  while (parenthesesToRemove <= input.length) {\\n    variants = [...new Set(_getVariants(input, parenthesesToRemove))].filter(\\n      _isValid\\n    );\\n    if (variants.length > 0) break;\\n    parenthesesToRemove++;\\n  }\\n  return variants;\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} parenthesesToRemove\\n * @returns {string[]}\\n */\\nfunction _getVariants(str, parenthesesToRemove) {\\n  if (parenthesesToRemove === 0) return [str];\\n  const variants = [];\\n  for (let i = 0; i < str.length; i++) {\\n    if (str.charAt(i) !== '(' && str.charAt(i) !== ')') continue;\\n    const variant = str.substring(0, i) + str.substring(i + 1, str.length);\\n    if (parenthesesToRemove === 1) {\\n      variants.push(variant);\\n    } else {\\n      const furtherVariants = _getVariants(variant, parenthesesToRemove - 1);\\n      for (const furtherVariant of furtherVariants) {\\n        if (variants.includes(furtherVariant)) continue;\\n        variants.push(furtherVariant);\\n      }\\n    }\\n  }\\n  return variants;\\n}\\n\\nfunction _isValid(str) {\\n  if (str === '') return true;\\n  const stack = [];\\n  const characters = str.split('');\\n  for (const character of characters) {\\n    if (character === '(') stack.push(character);\\n    else if (character === ')' && stack.pop() !== '(') return false;\\n  }\\n  return stack.length === 0;\\n}\\n\",\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"62149e986e689565cc9daaea888f5d6c8e3f0d01af3d0e963079f1ea60b4d6b7\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of a grid.\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {int[][]} input\\n */\\nexport function uniquePathsInAGridII(input) {\\n  return new Set(getUniquePaths(input, 0, 0, '')).size;\\n}\\n\\n/**\\n * @param {int[][]} grid\\n * @param {int} startX\\n * @param {int} startY\\n * @returns {string[]} list of instructions (e.g. \\\"DDRR\\\")\\n */\\nexport function getUniquePaths(grid, startX, startY, instructionsThusFar) {\\n  if (startX === grid[0].length - 1 && startY === grid.length - 1) {\\n    return [instructionsThusFar];\\n  }\\n  const allInstructions = [];\\n  if (_canMoveRight(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX + 1, startY, instructionsThusFar + 'R')\\n    );\\n  }\\n  if (_canMoveDown(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX, startY + 1, instructionsThusFar + 'D')\\n    );\\n  }\\n  return allInstructions;\\n}\\n\\nfunction _canMoveRight(grid, x, y) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\nfunction _canMoveDown(grid, x, y) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"46f788491f931079774091844bc994940b3a5e29a2c9dcd8b2ab13715a41cf4c\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SOURCE_COLUMN_HEADER = 'Source';\\nconst MONEY_COLUMN_HEADER = 'Money';\\nconst MONEY_ABBR_COLUMN_HEADER = 'Money (Abbr.)';\\nconst PERCENT_NET_WORTH_COLUMN_HEADER = '% net worth';\\n\\n/**\\n * Prints out net worth along with breakdown on how much of net worth is in each\\n * stock and in cash.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let stocks = [];\\n  try {\\n    stocks = ns.stock\\n      .getSymbols()\\n      .map(symbol => new Stock(ns, symbol))\\n      .filter(stock => stock.worth > 0);\\n    sort(stocks, stock => stock.symbol);\\n    sort(stocks, stock => stock.worth);\\n  } catch (_) {}\\n\\n  const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n  const netWorth =\\n    cash + stocks.map(stock => stock.worth).reduce((a, b) => a + b, 0);\\n\\n  const sections = [\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Cash',\\n        [MONEY_COLUMN_HEADER]: formatMoney(cash),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(cash, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(cash / netWorth),\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Net worth',\\n        [MONEY_COLUMN_HEADER]: formatMoney(netWorth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(netWorth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n  ];\\n  if (stocks.length > 0) {\\n    sections.unshift(\\n      stocks.map(stock => ({\\n        [SOURCE_COLUMN_HEADER]: stock.symbol,\\n        [MONEY_COLUMN_HEADER]: formatMoney(stock.worth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(stock.worth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(\\n          stock.worth / netWorth\\n        ),\\n      }))\\n    );\\n  }\\n  printTable(\\n    ns,\\n    {\\n      [MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MONEY_ABBR_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_NET_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...sections\\n  );\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.worth = getStockWorth(ns, symbol);\\n  }\\n}\\n\",\"filename\":\"get-net-worth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///a134bb8b-1aa7-40a4-8901-b8d57e2fae2f\",\"moduleSequenceNumber\":21837},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":21832},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":21830},{\"filename\":\"get-net-worth.js\",\"url\":\"blob:file:///449222ac-af0e-40c9-95e2-54b91f22c66a\",\"moduleSequenceNumber\":154578}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"_hash\":\"808af31cf036be749f7db8413971ad21e883c085cd797aa2023756737e7cadc4\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, RowColor, printTable } from '/utils/table.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { sort } from '/utils/misc.js';\\nimport {\\n  getAllServerNames,\\n  getFreeRam,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server Name';\\nconst FREE_RAM_COLUMN_HEADER = 'Free RAM';\\nconst MAX_RAM_COLUMN_HEADER = 'Max RAM';\\n\\n/**\\n * Prints out free RAM from all servers that have any RAM.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.freeRam > 0);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const totalFreeRam = servers\\n    .map(server => server.freeRam)\\n    .reduce((a, b) => a + b);\\n  const totalMaxRam = servers\\n    .map(server => server.maxRam)\\n    .reduce((a, b) => a + b);\\n\\n  printTable(\\n    ns,\\n    {\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    servers.map(server => ({\\n      [SERVER_NAME_COLUMN_HEADER]: server.name,\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(server.freeRam) + ' GB',\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(server.maxRam) + ' GB',\\n      rowColor: server.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    })),\\n    [\\n      {\\n        [SERVER_NAME_COLUMN_HEADER]: 'Total free RAM',\\n        [FREE_RAM_COLUMN_HEADER]: formatNumber(totalFreeRam) + ' GB',\\n        [MAX_RAM_COLUMN_HEADER]: formatNumber(totalMaxRam) + ' GB',\\n      },\\n    ]\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.name = serverName;\\n    this.freeRam = getFreeRam(ns, serverName);\\n    this.maxRam = ns.getServerMaxRam(serverName);\\n    this.isPurchased = serverName.startsWith(PURCHASED_SERVER_PREFIX);\\n  }\\n}\\n\",\"filename\":\"get-free-ram.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":11884},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":11884},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":11885},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":11881},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":11879},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///a134bb8b-1aa7-40a4-8901-b8d57e2fae2f\",\"moduleSequenceNumber\":11886},{\"filename\":\"get-free-ram.js\",\"url\":\"blob:file:///a0ad9e2a-fc72-45c4-a6ce-7704f45cb8d0\",\"moduleSequenceNumber\":16687}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"7c26dcb443ebca8174c811dfd3f5981d041f317059672535ca3bfcb150a4b6a2\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const COMMISSION_FEE = 100000;\\nconst MIN_PRICE_HISTORY_MILLIS = 5 * 6 * 1000; // Min 5 ticks of history.\\nconst MAX_PRICE_HISTORY_MILLIS = 10 * 60 * 1000; // Max 10 minutes of history.\\n\\n/**\\n * Map of timestamp to price.\\n *\\n * @typedef {Object.<string, number>} PriceHistory\\n */\\n\\n/** @type {Object.<string, PriceHistory>} */\\nconst symbolToAskPriceHistoryMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMaxAskPriceMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMinAskPriceMap = {};\\n\\n/**\\n * Gets how much a stock is worth based on how much of it we own and how much\\n * the bid price is.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n */\\nexport function getStockWorth(ns, symbol) {\\n  const ownedShares = ns.stock.getPosition(symbol)[0];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  return ownedShares * bidPrice - COMMISSION_FEE;\\n}\\n\\n/**\\n * Gets the real forecast or get a predicted forecast for a given stock symbol.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nexport function getForecast(ns, symbol) {\\n  try {\\n    return ns.stock.getForecast(symbol);\\n  } catch (_) {\\n    return predictForecast(ns, symbol);\\n  }\\n}\\n\\n/**\\n * Predicts the forecast based on how many times the ask price has increased or\\n * decreased in the past.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nfunction predictForecast(ns, symbol) {\\n  const currentTimestamp = Date.now();\\n  const currentAskPrice = ns.stock.getAskPrice(symbol);\\n  if (!(symbol in symbolToAskPriceHistoryMap)) {\\n    symbolToAskPriceHistoryMap[symbol] = {\\n      [currentTimestamp]: currentAskPrice,\\n    };\\n    return 0.5;\\n  }\\n  symbolToAskPriceHistoryMap[symbol][currentTimestamp] = currentAskPrice;\\n  const askPrices = Object.values(symbolToAskPriceHistoryMap[symbol]);\\n  symbolToMaxAskPriceMap[symbol] = Math.max(...askPrices);\\n  symbolToMinAskPriceMap[symbol] = Math.min(...askPrices);\\n\\n  // Not enough data.\\n  let timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const historyMillis = currentTimestamp - Math.min(...timestamps);\\n  if (historyMillis < MIN_PRICE_HISTORY_MILLIS) return 0.5;\\n\\n  if (historyMillis > MAX_PRICE_HISTORY_MILLIS) {\\n    // Trim out any data points that we no longer need.\\n    for (const timestamp of timestamps) {\\n      if (currentTimestamp - timestamp > MAX_PRICE_HISTORY_MILLIS) {\\n        delete symbolToAskPriceHistoryMap[symbol][timestamp];\\n      }\\n    }\\n  }\\n\\n  timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const askPriceHistory = symbolToAskPriceHistoryMap[symbol];\\n  let noChangeCount = 0;\\n  let increaseCount = 0;\\n  let decreaseCount = 0;\\n  for (let i = 1; i < timestamps.length; i++) {\\n    const askPriceDiff =\\n      askPriceHistory[timestamps[i]] - askPriceHistory[timestamps[i - 1]];\\n    if (askPriceDiff > 0) increaseCount++;\\n    else if (askPriceDiff < 0) decreaseCount++;\\n    else if (timestamps[i] - timestamps[i - 1] >= 6000) noChangeCount++;\\n  }\\n\\n  const totalCount = noChangeCount + increaseCount + decreaseCount;\\n  let forecast = 0.5 + increaseCount / totalCount - decreaseCount / totalCount;\\n  for (let i = 0; i < noChangeCount; i++) {\\n    if (forecast < 0.5) forecast += noChangeCount / totalCount;\\n    if (forecast > 0.5) forecast -= noChangeCount / totalCount;\\n  }\\n  if (symbolToMaxAskPriceMap[symbol] === currentAskPrice) forecast /= 2;\\n  if (symbolToMinAskPriceMap[symbol] === currentAskPrice) forecast *= 2;\\n  return forecast;\\n}\\n\\n/**\\n * @param {string} symbol\\n * @returns {number[]}\\n */\\nfunction getAskPriceHistoryTimestamps(symbol) {\\n  const timestamps = Object.keys(symbolToAskPriceHistoryMap[symbol]).map(\\n    timestamp => parseInt(timestamp)\\n  );\\n  timestamps.sort();\\n  return timestamps;\\n}\\n\",\"filename\":\"/utils/stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"_hash\":\"54c0d8d5338c659cb1b9446c193097d28553efe2e46f5f58adf0dff2c99b4c64\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sell all stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const symbols = ns.stock.getSymbols();\\n  for (const symbol of symbols) {\\n    ns.stock.sell(symbol, ns.stock.getPosition(symbol)[0]);\\n  }\\n}\\n\",\"filename\":\"sell-all-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell-all-stocks.js\",\"url\":\"blob:file:///93be0ac8-7f50-4308-94e2-3cf6841a9e2a\",\"moduleSequenceNumber\":193331}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"_hash\":\"969b0f01584407efec3f1c21529ee242c87d002f07ce3f2a9c822e470a6e2b99\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { arrayJumpingGame } from '/contracts/array-jumping-game.js';\\nimport { findValidMathExpressions } from './contracts/find-valid-math-solutions.js';\\nimport { findLargestPrimeFactor } from '/contracts/find-largest-prime-factor.js';\\nimport { generateIpAddresses } from '/contracts/generate-ip-addresses.js';\\nimport { mergeOverlappingIntervals } from '/contracts/merge-overlapping-intervals.js';\\nimport { minimumPathSumInATriangle } from '/contracts/minimum-path-sum-in-a-triangle.js';\\nimport { sanitizeParenthesesInExpression } from '/contracts/sanitize-parentheses-in-expression.js';\\nimport { spiralizeMatrix } from '/contracts/spiralize-matrix.js';\\nimport { subarrayWithMaximumSum } from '/contracts/subarray-with-maximum-sum.js';\\nimport { totalWaysToSum } from '/contracts/total-ways-to-sum.js';\\nimport {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n  algorithmicStockTraderIII,\\n  algorithmicStockTraderIV,\\n} from '/contracts/algorithmic-stock-trader.js';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from '/contracts/unique-paths-in-a-grid.js';\\nimport {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n} from '/utils/servers.js';\\n\\nconst CONTRACT_TYPE_TO_SOLVER_FN_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Find All Valid Math Expressions': findValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIpAddresses,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\\n/**\\n * Finds all the contracts across all servers and solves any that we can solve\\n * as we go. Print out all unsolved contracts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns).filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n\\n  // Get all contracts.\\n  const allContracts = [];\\n  for (const serverName of serverNames) {\\n    const contracts = ns\\n      .ls(serverName)\\n      .filter(fileName => fileName.endsWith('.cct'))\\n      .map(fileName => new Contract(fileName, serverName));\\n    allContracts.push(...contracts);\\n  }\\n\\n  // Attempt to solve contracts.\\n  const unsolvedContracts = allContracts.filter(\\n    contract => !contract.attemptToSolve(ns)\\n  );\\n\\n  if (unsolvedContracts.length === 0) {\\n    ns.tprintf('\\\\nno unsolved contracts available at the moment');\\n  }\\n}\\n\\nclass Contract {\\n  constructor(fileName, serverName) {\\n    this.fileName = fileName;\\n    this.serverName = serverName;\\n  }\\n\\n  /**\\n   * Attemps to solve a contract.\\n   *\\n   * @param {import('index').NS} ns\\n   * @returns {boolean} true if successfully solved\\n   */\\n  attemptToSolve(ns) {\\n    const contractType = ns.codingcontract.getContractType(\\n      this.fileName,\\n      this.serverName\\n    );\\n    if (!(contractType in CONTRACT_TYPE_TO_SOLVER_FN_MAP)) {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns)\\n      );\\n      return false;\\n    }\\n\\n    const input = ns.codingcontract.getData(this.fileName, this.serverName);\\n    let answer;\\n    try {\\n      answer = CONTRACT_TYPE_TO_SOLVER_FN_MAP[contractType](input);\\n    } catch (exception) {\\n      ns.tprint('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          exception: exception,\\n        })\\n      );\\n      return false;\\n    }\\n    const response = ns.codingcontract.attempt(\\n      answer,\\n      this.fileName,\\n      this.serverName,\\n      { returnReward: true }\\n    );\\n    if (response === '') {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          attemptedAnswer: answer,\\n        })\\n      );\\n      return false;\\n    }\\n\\n    ns.tprintf(\\n      '\\\\nsolved %s: %s\\\\n%s\\\\n',\\n      contractType,\\n      response,\\n      JSON.stringify({\\n        input: input,\\n        output: answer,\\n      })\\n    );\\n    return true;\\n  }\\n\\n  getPath(ns) {\\n    return (\\n      getPath(ns, this.serverName)\\n        .map(path => `connect ${path}`)\\n        .join('; ') + `; run ${this.fileName}`\\n    );\\n  }\\n}\\n\",\"filename\":\"find-contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194320},{\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"blob:file:///ed588bd0-a927-4719-9eea-995b202491ec\",\"moduleSequenceNumber\":194311},{\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"blob:file:///4cbe6768-e7b8-493a-b562-8579998aed74\",\"moduleSequenceNumber\":194300},{\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"blob:file:///e0a46e31-5feb-4416-aa45-f6a7c155f88c\",\"moduleSequenceNumber\":194310},{\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"blob:file:///357c7417-eefc-4156-882a-e88dbf61bea0\",\"moduleSequenceNumber\":194309},{\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"blob:file:///9b25e6f4-5f47-42a1-bf81-7e6bc1b3c325\",\"moduleSequenceNumber\":194308},{\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"blob:file:///9bec6f57-525f-4fa9-a9db-a6a67b440636\",\"moduleSequenceNumber\":194307},{\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"blob:file:///767c053f-f6c5-47f1-95cc-677f9d58dfc1\",\"moduleSequenceNumber\":194306},{\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"blob:file:///e3b58d04-a51b-4975-aad3-1e0ec9cefd05\",\"moduleSequenceNumber\":194305},{\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"blob:file:///c49848af-6369-447c-bc33-6a973563a64e\",\"moduleSequenceNumber\":194304},{\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"blob:file:///81e55bae-a9d9-4824-bd12-4e6f836a47a7\",\"moduleSequenceNumber\":194302},{\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"blob:file:///b1e6604e-61e2-4a20-aadc-d84a1fcf7115\",\"moduleSequenceNumber\":194303},{\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"blob:file:///8671a856-3f1f-4197-ac93-99bc3a5ce913\",\"moduleSequenceNumber\":194301},{\"filename\":\"find-contracts.js\",\"url\":\"blob:file:///13eff9d4-2539-4f5f-8ed4-8fe2c0e40bad\",\"moduleSequenceNumber\":225717}],\"dependents\":[],\"ramUsage\":22.05,\"server\":\"home\",\"_hash\":\"2fd40bbd41cb4f81527a04f0552b2231f1ff6ed86765f96d77d24dd62522b067\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['scan', 'sleep', 'getHackingLevel'];\\n\\n/**\\n * Finds any servers that do not have backdoor installed and can have backdoor\\n * installed.\\n *\\n * Run this script with `--tail`.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  const hackableServerNames = getAllServerNames(ns).filter(\\n    server =>\\n      server !== HOME_SERVER_NAME && !server.startsWith(PURCHASED_SERVER_PREFIX)\\n  );\\n\\n  // If we have SF4, then we can automatically run the backdoors.\\n  try {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n    for (const serverName of serverNames) {\\n      _connectTo(ns, serverName, ns.getCurrentServer());\\n      await ns.installBackdoor();\\n    }\\n    _connectTo(ns, HOME_SERVER_NAME, ns.getCurrentServer());\\n  } catch (_) {\\n    // No Source File 4 API\\n  }\\n\\n  while (true) {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n\\n    if (serverNames.length === 0) {\\n      ns.print('No servers that we can install backdoor available.');\\n      ns.tprint('No servers that we can install backdoor available.');\\n      return;\\n    }\\n\\n    ns.clearLog();\\n    ns.print(\\n      '\\\\n' +\\n        serverNames\\n          .map(\\n            serverName =>\\n              `${serverName}\\\\n${[\\n                'home',\\n                ...getPath(ns, serverName).map(path => `connect ${path}`),\\n                'backdoor',\\n              ].join('; ')}`\\n          )\\n          .join('\\\\n\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _getBackdoorableServerNames(ns, hackableServerNames) {\\n  return hackableServerNames.filter(serverName => {\\n    const server = ns.getServer(serverName);\\n    return (\\n      server.hasAdminRights &&\\n      !server.backdoorInstalled &&\\n      server.requiredHackingSkill <= ns.getHackingLevel()\\n    );\\n  });\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _connectTo(ns, serverName, lastServerName) {\\n  const path = getPath(ns, serverName, lastServerName, '');\\n  for (const server of path) ns.connect(server);\\n}\\n\",\"filename\":\"find-backdoors.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":353},{\"filename\":\"find-backdoors.js\",\"url\":\"blob:file:///d7c6a3ed-e532-4ca7-87aa-564601902c3a\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":99.85,\"server\":\"home\",\"_hash\":\"1fa72ed546c8e0b9e667ab27c57f7e22fc31369c404b7a1d4297663b244f2e11\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCurrentServer\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\nimport {\\n  isHackable,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst GROWING_COLUMN_HEADER = 'Growing';\\nconst WEAKENING_COLUMN_HEADER = 'Weakening';\\nconst HACKING_COLUMN_HEADER = 'Hacking';\\nconst MAX_RAM_COLUMN_HEADER = 'Max ram';\\nconst USED_RAM_COLUMN_HEADER = 'Used ram';\\nconst FREE_RAM_COLUMN_HEADER = 'Free ram';\\n\\n/**\\n * Prints out information about all servers that we have root access to and\\n * which scripts they're running.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.hasRootAccess);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam, true);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const hackableServerNames = servers\\n    .filter(server => isHackable(ns, server.name))\\n    .map(server => server.name);\\n  sort(hackableServerNames, serverName => serverName);\\n  for (const server of servers) {\\n    for (const targetServerName of hackableServerNames) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        server.growing.push({\\n          targetServerName: targetServerName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        server.weakening.push({\\n          targetServerName: targetServerName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        server.hacking.push({\\n          targetServerName: targetServerName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  servers = servers.filter(server => server.maxRam > 0);\\n  printTable(\\n    ns,\\n    {\\n      [GROWING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [WEAKENING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACKING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [USED_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...servers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    const server = ns.getServer(serverName);\\n    this.hasRootAccess = server.hasAdminRights;\\n    if (!this.hasRootAccess) return;\\n\\n    this.isPurchased = server.purchasedByPlayer;\\n\\n    // RAM information.\\n    this.maxRam = server.maxRam;\\n    this.usedRam = server.ramUsed;\\n    this.freeRam = this.maxRam - this.usedRam;\\n\\n    this.growing = [];\\n    this.weakening = [];\\n    this.hacking = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n    sort(scripts, script => script.threadCount, true);\\n    return scripts\\n      .map(\\n        script =>\\n          script.targetServerName +\\n          ` (${formatNumber(script.threadCount, true)})`\\n      )\\n      .join('\\\\n');\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SERVER_NAME_COLUMN_HEADER]: this.name,\\n      [GROWING_COLUMN_HEADER]: this._formatScripts(this.growing),\\n      [WEAKENING_COLUMN_HEADER]: this._formatScripts(this.weakening),\\n      [HACKING_COLUMN_HEADER]: this._formatScripts(this.hacking),\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(this.maxRam, true) + ' GB',\\n      [USED_RAM_COLUMN_HEADER]: formatNumber(this.usedRam, true) + ' GB',\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(this.freeRam, true) + ' GB',\\n      rowColor: this.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    };\\n  }\\n}\\n\",\"filename\":\"get-servers-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///9e8f911f-1f26-4b07-a686-5f6a0d45d826\",\"moduleSequenceNumber\":137942},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///1d75221b-a36a-4019-89de-a7bf7ef23243\",\"moduleSequenceNumber\":137933},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///6dcb2154-1124-4216-b3b5-13efb7bbda17\",\"moduleSequenceNumber\":137932},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d42224ab-1a6b-4890-8fde-036f3e6230e8\",\"moduleSequenceNumber\":137941},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ae61acb1-b47b-47b6-80f3-368c51d28d77\",\"moduleSequenceNumber\":137937},{\"filename\":\"get-servers-info.js\",\"url\":\"blob:file:///01e7ab26-6bc3-43f9-8c52-225cd7774e2f\",\"moduleSequenceNumber\":165711}],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"_hash\":\"613ab5c851562e617a1ae6bb50baede41b0257dcb48404a4ef4a917b334c93a8\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport {\\n  formatMoney,\\n  formatNumber,\\n  formatPercent,\\n  formatTime,\\n} from '/utils/format.js';\\nimport {\\n  getHackingHeuristic,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  isHackable,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { sort } from '/utils/misc.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst AVAILABLE_MONEY_COLUMN_HEADER = 'Available money';\\nconst SECURITY_LEVEL_COLUMN_HEADER = 'Security level';\\nconst HACK_CHANCE_COLUMN_HEADER = 'Hack chance';\\nconst BEING_GROWN_COLUMN_HEADER = 'Growing by';\\nconst BEING_WEAKENED_COLUMN_HEADER = 'Weakening by';\\nconst BEING_HACKED_COLUMN_HEADER = 'Hacked by';\\nconst HACK_EXP_HEADER = 'Hack exp';\\n\\n/**\\n * Prints out information about all hackable servers.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const allServerNames = getAllServerNames(ns);\\n\\n  const hackableServers = allServerNames\\n    .filter(serverName => isHackable(ns, serverName))\\n    .map(serverName => new Server(ns, serverName));\\n  sort(hackableServers, server => getHackingHeuristic(ns, server.name));\\n\\n  const rootAccessServerNames = allServerNames.filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n  for (const serverName of rootAccessServerNames) {\\n    for (const targetServer of hackableServers) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        targetServer.beingGrownBy.push({\\n          serverName: serverName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        targetServer.beingWeakenedBy.push({\\n          serverName: serverName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        targetServer.beingHackedBy.push({\\n          serverName: serverName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  printTable(\\n    ns,\\n    {\\n      [AVAILABLE_MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_CHANCE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_GROWN_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_WEAKENED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_HACKED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_EXP_HEADER]: Alignment.RIGHT,\\n    },\\n    ...hackableServers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    this.hackHeuristic = getHackingHeuristic(ns, serverName);\\n\\n    this.availableMoney = ns.getServerMoneyAvailable(serverName);\\n    this.percentMaxMoney =\\n      this.availableMoney / ns.getServerMaxMoney(serverName);\\n\\n    this.securityLevel = ns.getServerSecurityLevel(serverName);\\n    this.minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    this.hackChance = ns.hackAnalyzeChance(serverName);\\n\\n    this.growTime = ns.getGrowTime(serverName);\\n    this.weakenTime = ns.getWeakenTime(serverName);\\n    this.hackTime = ns.getHackTime(serverName);\\n\\n    try {\\n      this.hackExp = ns.formulas.hacking.hackExp(\\n        ns.getServer(serverName),\\n        ns.getPlayer()\\n      );\\n    } catch (_) {\\n      // No Formulas.exe\\n    }\\n\\n    this.beingGrownBy = [];\\n    this.beingWeakenedBy = [];\\n    this.beingHackedBy = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n\\n    const totalThreadCount = scripts\\n      .map(script => script.threadCount)\\n      .reduce((a, b) => a + b);\\n    const totalServerCount = scripts.length;\\n    return `${totalServerCount} servers\\\\n${formatNumber(\\n      totalThreadCount,\\n      true\\n    )} threads`;\\n  }\\n\\n  _getRowColor() {\\n    const attackPoints = [\\n      this.beingGrownBy.length > 0 ? 1 : 0,\\n      this.beingWeakenedBy.length > 0 ? 1 : 0,\\n      this.beingHackedBy.length > 0 ? 1 : 0,\\n    ].reduce((a, b) => a + b);\\n    switch (attackPoints) {\\n      case 3:\\n        return RowColor.ERROR;\\n      case 2:\\n        return RowColor.WARN;\\n      case 1:\\n        return RowColor.NORMAL;\\n      case 0:\\n        return RowColor.INFO;\\n    }\\n  }\\n\\n  getTableRow() {\\n    const row = {\\n      [SERVER_NAME_COLUMN_HEADER]:\\n        this.name +\\n        `\\\\nHack heuristic: ${formatNumber(this.hackHeuristic, true)}`,\\n      [AVAILABLE_MONEY_COLUMN_HEADER]:\\n        formatMoney(this.availableMoney, true) +\\n        ` (${formatPercent(\\n          this.percentMaxMoney\\n        )} of max)\\\\nGrow time: ${formatTime(this.growTime)}`,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: `${this.securityLevel.toFixed(\\n        2\\n      )} (out of ${this.minSecurityLevel})\\\\nWeaken time: ${formatTime(\\n        this.weakenTime\\n      )}`,\\n      [HACK_CHANCE_COLUMN_HEADER]: `${formatPercent(\\n        this.hackChance\\n      )}\\\\nHack time: ${formatTime(this.hackTime)}`,\\n      [BEING_GROWN_COLUMN_HEADER]: this._formatScripts(this.beingGrownBy),\\n      [BEING_WEAKENED_COLUMN_HEADER]: this._formatScripts(this.beingWeakenedBy),\\n      [BEING_HACKED_COLUMN_HEADER]: this._formatScripts(this.beingHackedBy),\\n    };\\n    if (this.hackExp) row[HACK_EXP_HEADER] = formatNumber(this.hackExp, true);\\n    row.rowColor = this._getRowColor();\\n    return row;\\n  }\\n}\\n\",\"filename\":\"get-hacking-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":21832},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///6946cc80-ee4c-49ff-90ca-bac4334b5937\",\"moduleSequenceNumber\":21831},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":21830},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///a134bb8b-1aa7-40a4-8901-b8d57e2fae2f\",\"moduleSequenceNumber\":21837},{\"filename\":\"get-hacking-info.js\",\"url\":\"blob:file:///eb56c522-4ad9-42f4-9696-6ee8002fbbd1\",\"moduleSequenceNumber\":59167}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"_hash\":\"a2200d433d9b7c84a62ba22143ad157c55cc3fde27f94e9b8611dfe4bd95a366\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SYMBOL_COLUMN_HEADER = 'Symbol';\\nconst ASK_PRICE_COLUMN_HEADER = 'Ask price';\\nconst BID_PRICE_COLUMN_HEADER = 'Bid price';\\nconst OWNED_SHARE_COUNT_COLUMN_HEADER = 'Owned shares';\\nconst MAX_SHARE_COUNT_COLUMN_HEADER = 'Max shares';\\nconst PERCENT_MAX_SHARE_COLUMN_HEADER = '% of max';\\nconst SHARES_WORTH_COLUMN_HEADER = 'Worth';\\nconst SHARES_PROFIT_COLUMN_HEADER = 'Profit';\\nconst FORECAST_COLUMN_HEADER = 'Forecast';\\n\\n/**\\n * Prints out stock info.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const stocks = ns.stock.getSymbols().map(symbol => new Stock(ns, symbol));\\n  sort(stocks, stock => stock.profit, true);\\n\\n  printTable(\\n    ns,\\n    {\\n      [ASK_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BID_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_PROFIT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FORECAST_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    stocks.map(stock => stock.getTableRow())\\n  );\\n\\n  // ns.tprint(table);\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.askPrice = ns.stock.getAskPrice(symbol);\\n    this.bidPrice = ns.stock.getBidPrice(symbol);\\n    this.maxShareCount = ns.stock.getMaxShares(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    this.ownedShareCount = position[0];\\n    this.ownedShareAvgPrice = position[1];\\n    this.sharesWorth = getStockWorth(ns, symbol);\\n    this.profit =\\n      (this.sharesWorth - this.ownedShareCount * this.ownedShareAvgPrice) /\\n      (this.ownedShareCount * this.ownedShareAvgPrice);\\n\\n    this.forecast = ns.stock.getForecast(symbol);\\n  }\\n\\n  _getForecast() {\\n    if (this.forecast > 0.8) return '+++';\\n    if (this.forecast > 0.64) return '++';\\n    if (this.forecast >= 0.5) return '+';\\n    if (this.forecast > 0.32) return '-';\\n    if (this.forecast > 0.16) return '--';\\n    return '---';\\n  }\\n\\n  _getRowColor() {\\n    if (this.profit === 0) return RowColor.WARN;\\n    return this.profit > 0 ? RowColor.NORMAL : RowColor.ERROR;\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SYMBOL_COLUMN_HEADER]: this.symbol,\\n      [ASK_PRICE_COLUMN_HEADER]: formatMoney(this.askPrice),\\n      [BID_PRICE_COLUMN_HEADER]: formatMoney(this.bidPrice),\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: formatNumber(\\n        this.ownedShareCount,\\n        true\\n      ),\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: formatNumber(this.maxShareCount, true),\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: formatPercent(\\n        this.ownedShareCount / this.maxShareCount\\n      ),\\n      [SHARES_WORTH_COLUMN_HEADER]:\\n        this.ownedShareCount === 0 ? '--' : formatMoney(this.sharesWorth, true),\\n      [SHARES_PROFIT_COLUMN_HEADER]:\\n        this.ownedShareCount === 0\\n          ? '--'\\n          : (this.profit > 0 ? '+' : '') + formatPercent(this.profit),\\n      [FORECAST_COLUMN_HEADER]: this._getForecast(),\\n      rowColor: this._getRowColor(),\\n    };\\n  }\\n}\\n\",\"filename\":\"get-stock-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///9c3264f6-993b-4338-9da0-c144b8e64bc4\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///8ce78e3e-5b38-4745-9208-49a558120b99\"},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///5aaf1f10-1d28-48f5-bef3-b91f6f0029d4\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///ad4050d6-1fed-4597-8ada-d32cc43213f1\"},{\"filename\":\"get-stock-info.js\",\"url\":\"blob:file:///38c6bdee-8bbc-492b-b73d-605b0e8c795b\"}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"_hash\":\"f3bbc46e80bfd4c6386e22c95a62972d37bbd7348daf690e020321d6af4b1349\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef Alignment\\n */\\n\\n/**\\n * Enum for cell alignment.\\n *\\n * @readonly\\n * @enum {Alignment}\\n */\\nexport const Alignment = Object.freeze({ LEFT: 'left', RIGHT: 'right' });\\n\\n/**\\n * @typedef RowColor\\n */\\n\\n/**\\n * Enum for color of row.\\n *\\n * @readonly\\n * @enum {RowColor}\\n */\\nexport const RowColor = Object.freeze({\\n  INFO: 'INFO  ',\\n  WARN: 'WARN  ',\\n  ERROR: 'ERROR ',\\n  NORMAL: '      ',\\n});\\n\\nconst PIPE = '┊';\\nconst DASH = '—';\\nconst JOIN = '+';\\n\\n/**\\n * Utils for printing a table in the terminal.\\n *\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n *        if a column header is not specified in this map, then it is assumed\\n *        that it will be left-aligned\\n * @param {...Object.<string, any>[]} sections\\n *        sections contain rows that are divided by a divider; all rows must\\n *        have the same keys (which are used for column headers)\\n */\\nexport function printTable(ns, columnHeaderToAlignmentMap, ...sections) {\\n  // Fill in any missing alignments. Note that the alignments are not guaranteed\\n  // to be in the same order as the column headers, so we cannot rely on the\\n  // order.\\n  const columnHeaders = Object.keys(sections[0][0]).filter(\\n    key => key !== 'rowColor'\\n  );\\n  if (!columnHeaderToAlignmentMap) columnHeaderToAlignmentMap = {};\\n  for (const columnHeader of columnHeaders) {\\n    if (!(columnHeader in columnHeaderToAlignmentMap)) {\\n      columnHeaderToAlignmentMap[columnHeader] = Alignment.LEFT;\\n    }\\n  }\\n\\n  // Get width of each column.\\n  const columnHeaderToWidthMap = columnHeaders.reduce(\\n    (map, columnHeader) => ({ ...map, [columnHeader]: columnHeader.length }),\\n    {}\\n  );\\n  for (const columnHeader of columnHeaders) {\\n    for (const rows of sections) {\\n      for (const row of rows) {\\n        const lines = row[columnHeader].toString().split('\\\\n');\\n        columnHeaderToWidthMap[columnHeader] = Math.max(\\n          columnHeaderToWidthMap[columnHeader],\\n          ...lines.map(line => line.length)\\n        );\\n      }\\n    }\\n  }\\n\\n  // Print the column headers.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n\\n  // Print each section.\\n  for (let i = 0; i < sections.length; i++) {\\n    for (let j = 0; j < sections[i].length; j++) {\\n      _printRow(\\n        ns,\\n        sections[i][j],\\n        columnHeaders,\\n        columnHeaderToAlignmentMap,\\n        columnHeaderToWidthMap,\\n        j === sections[i].length - 1 && i !== sections.length - 1\\n      );\\n    }\\n  }\\n\\n  // Print the column headers at the end again.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, any>} row\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @param {boolean} shouldAddDivider\\n */\\nfunction _printRow(\\n  ns,\\n  row,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap,\\n  shouldAddDivider\\n) {\\n  const height = Math.max(\\n    ...Object.values(row).map(value => value.toString().split('\\\\n').length)\\n  );\\n\\n  const contents = new Array(height).fill('');\\n  for (const columnHeader of columnHeaders) {\\n    const lines = row[columnHeader].split('\\\\n');\\n    const width = columnHeaderToWidthMap[columnHeader];\\n\\n    for (let i = 0; i < contents.length; i++) {\\n      let line = lines[i] || '';\\n      line =\\n        columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n          ? line.padStart(width)\\n          : line.padEnd(width);\\n      contents[i] += `${PIPE} ${line} `;\\n    }\\n  }\\n  for (let i = 0; i < contents.length; i++) {\\n    contents[i] =\\n      (i === 0 && row.rowColor ? row.rowColor : RowColor.NORMAL) +\\n      contents[i] +\\n      PIPE;\\n  }\\n  if (shouldAddDivider) {\\n    contents.push(\\n      RowColor.NORMAL + _getDivider(columnHeaders, columnHeaderToWidthMap)\\n    );\\n  }\\n\\n  ns.tprintf('%s', contents.join('\\\\n'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printColumnHeaders(\\n  ns,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap\\n) {\\n  const contents = columnHeaders\\n    .map(columnHeader => {\\n      const width = columnHeaderToWidthMap[columnHeader];\\n      return columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n        ? columnHeader.padStart(width)\\n        : columnHeader.padEnd(width);\\n    })\\n    .join(` ${PIPE} `)\\n    .toUpperCase();\\n  const divider = _getDivider(columnHeaders, columnHeaderToWidthMap);\\n  ns.tprintf(\\n    '%s',\\n    [\\n      RowColor.INFO + divider,\\n      RowColor.NORMAL + PIPE + ` ${contents} ` + PIPE,\\n      RowColor.NORMAL + divider,\\n    ].join('\\\\n')\\n  );\\n}\\n\\n/**\\n * @param {import('..').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printDivider(ns, columnHeaders, columnHeaderToWidthMap) {\\n  ns.tprintf(\\n    '%s%s',\\n    RowColor.INFO,\\n    _getDivider(columnHeaders, columnHeaderToWidthMap)\\n  );\\n}\\n\\n/**\\n * Gets just the divider string without the row color print.\\n *\\n * This function does not print anything.\\n *\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @returns {string}\\n */\\nfunction _getDivider(columnHeaders, columnHeaderToWidthMap) {\\n  const contents = columnHeaders\\n    .map(columnHeader => ''.padEnd(columnHeaderToWidthMap[columnHeader], DASH))\\n    .join(DASH + JOIN + DASH);\\n  return [JOIN, DASH, contents, DASH, JOIN].join('');\\n}\\n\",\"filename\":\"/utils/table.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e6e0f0dac4daafd7cb1872f980a02b2d7ddaffe54f6741be2e57a9e3aaf08b0c\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport { sort } from '/utils/misc.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nconst SCRIPT_NAME_COLUMN_HEADER = 'Script name';\\nconst RAM_COLUMN_HEADER = 'RAM';\\nconst IS_RUNNING_COLUMN_HEADER = 'Is running';\\n\\n/**\\n * Prints out how much RAM each script takes up.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const scriptNames = ns\\n    .ls(HOME_SERVER_NAME)\\n    .filter(fileName => fileName.endsWith('.js') && !fileName.startsWith('/'));\\n  sort(scriptNames, scriptName => scriptName);\\n  const scripts = scriptNames.map(fileName => ({\\n    [SCRIPT_NAME_COLUMN_HEADER]: fileName,\\n    [RAM_COLUMN_HEADER]: ns.getScriptRam(fileName) + ' GB',\\n    [IS_RUNNING_COLUMN_HEADER]: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? 'true'\\n      : '--',\\n    rowColor: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? RowColor.NORMAL\\n      : RowColor.INFO,\\n  }));\\n\\n  printTable(\\n    ns,\\n    {\\n      [RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [IS_RUNNING_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    scripts,\\n    [\\n      {\\n        [SCRIPT_NAME_COLUMN_HEADER]: 'Total',\\n        [RAM_COLUMN_HEADER]:\\n          scriptNames\\n            .map(scriptName => ns.getScriptRam(scriptName, HOME_SERVER_NAME))\\n            .reduce((a, b) => a + b)\\n            .toFixed(2) + ' GB',\\n        [IS_RUNNING_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ]\\n  );\\n}\\n\",\"filename\":\"get-scripts-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":4395},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":4395},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d42224ab-1a6b-4890-8fde-036f3e6230e8\",\"moduleSequenceNumber\":4396},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ae61acb1-b47b-47b6-80f3-368c51d28d77\",\"moduleSequenceNumber\":4392},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///9e8f911f-1f26-4b07-a686-5f6a0d45d826\",\"moduleSequenceNumber\":4397},{\"filename\":\"get-scripts-info.js\",\"url\":\"blob:file:///3d02d3af-1a04-43ed-8f3b-e41702e0a35a\",\"moduleSequenceNumber\":12982}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"_hash\":\"22a7af45c38cd14eb6c8f6dd6dc5cf0ccaabb9c565942e7005e1c8a468995be0\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of array of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @param {number[][]} input\\n */\\nexport function mergeOverlappingIntervals(input) {\\n  return _mergeOverlappingIntervals(input);\\n}\\n\\n/**\\n * @param {number[][]} intervals\\n * @returns {number[][]} merged intervals\\n */\\nfunction _mergeOverlappingIntervals(intervals) {\\n  // Sort by second number and then by first number.\\n  intervals.sort((a, b) => a[1] - b[1]);\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  // Find any overlaps.\\n  let overlappingIntervals = [];\\n  let mergedInterval;\\n  for (let i = 0; i < intervals.length - 1; i++) {\\n    for (let j = i + 1; j < intervals.length; j++) {\\n      if (_hasOverlap(intervals[i], intervals[j])) {\\n        overlappingIntervals.push(intervals[i], intervals[j]);\\n        mergedInterval = _merge(intervals[i], intervals[j]);\\n        break;\\n      }\\n    }\\n    if (mergedInterval) break;\\n  }\\n\\n  if (mergedInterval === undefined) return intervals;\\n  intervals = [\\n    mergedInterval,\\n    ...intervals.filter(interval => {\\n      for (const overlappingInterval of overlappingIntervals) {\\n        if (_equal(overlappingInterval, interval)) return false;\\n      }\\n      return true;\\n    }),\\n  ];\\n  return _mergeOverlappingIntervals(intervals);\\n}\\n\\n/**\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {boolean} true if has overlap\\n */\\nfunction _hasOverlap(a, b) {\\n  if (a[0] === b[0] || a[1] === b[1]) return true;\\n  return a[0] < b[0] ? b[0] <= a[1] : a[0] <= b[1];\\n}\\n\\n/**\\n * Merge overlapping intervals. Intervals **must** be overlapping.\\n *\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {number[]} merged interval\\n */\\nfunction _merge(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\\nfunction _equal(a, b) {\\n  return a[0] === b[0] && a[1] === b[1];\\n}\\n\",\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e1a3fee96bfcb47b06fcf82a1625a24dfaec6e621278b577b1318efb365181e1\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *             [5],\\n *            [4,5],\\n *           [7,4,6],\\n *          [9,6,4,3],\\n *         [7,4,9,7,8],\\n *        [6,2,7,9,4,2],\\n *       [5,2,3,8,1,5,1],\\n *      [8,4,9,7,1,1,1,2],\\n *     [4,8,1,8,1,3,9,8,6],\\n *    [7,1,1,7,5,8,3,5,3,6],\\n *   [4,6,3,6,4,7,8,5,9,5,8]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} input\\n */\\nexport function minimumPathSumInATriangle(input) {\\n  let rootNode = new Node(input, 0, 0);\\n  return Math.min(\\n    ..._getPaths(rootNode, '').map(path => path.reduce((a, b) => a + b))\\n  );\\n}\\n\\nfunction _getPaths(rootNode, pathThusFar) {\\n  pathThusFar = [...pathThusFar, rootNode.number];\\n  if (rootNode.nextNodes.length === 0) {\\n    return [pathThusFar];\\n  }\\n  const paths = [];\\n  for (const nextNode of rootNode.nextNodes) {\\n    paths.push(..._getPaths(nextNode, pathThusFar));\\n  }\\n  return paths;\\n}\\n\\nclass Node {\\n  constructor(input, row, column) {\\n    this.number = input[row][column];\\n    this.row = row;\\n    this.column = column;\\n\\n    if (this.row === input.length - 1) {\\n      this.nextNodes = [];\\n    } else {\\n      this.nextNodes = [\\n        new Node(input, row + 1, column),\\n        new Node(input, row + 1, column + 1),\\n      ];\\n    }\\n  }\\n}\\n\",\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"b58fab38dc5a586f5c6c2795100c671d9b3302ba8dfd4d490d994f3f4e9d159f\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const MANAGE_SERVERS_TO_MANAGE_HACKING_PORT = 1;\\nexport const MANAGE_HACKING_TO_MANAGE_STOCKS_PORT = 2;\\n\\nexport const NULL_PORT_DATA = 'NULL PORT DATA';\\n\",\"filename\":\"/utils/ports.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"42d5972a2164f7240d5da41c0ba94b9d48bcf741587306fa984ce2e6023f732d\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath, HOME_SERVER_NAME } from '/utils/servers.js';\\n\\n/**\\n * Prints the command to go to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint(`usage: run get-path.js <server name>`);\\n    return;\\n  }\\n  const path = [\\n    HOME_SERVER_NAME,\\n    ...getPath(ns, serverName).map(path => 'connect ' + path),\\n  ].join('; ');\\n  ns.tprintf('%s', path);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"get-path.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///ea81aace-66fa-4f06-a948-467185a1a9c7\"},{\"filename\":\"get-path.js\",\"url\":\"blob:file:///86602310-0503-4980-8c4f-4e0bc875b482\"}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"_hash\":\"5d4680d9f7dbc8846cc1c53692a347168f5a7ad8703e441fb1237de6726247a8\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderI = input => _getMaxProfit(1, input);\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderII = input =>\\n  _getMaxProfit(input.length, input);\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIII = input => _getMaxProfit(2, input);\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * @param {any[]} input where the first element is the number of trade counts\\n *                      and the second element is the stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIV = input =>\\n  _getMaxProfit(input[0], input[1]);\\n\\n/**\\n * @param {number} maxTradeCount\\n * @param {number[]} stockPrices\\n * @returns {number} max profit\\n */\\nfunction _getMaxProfit(maxTradeCount, stockPrices) {\\n  const tradesWithPositiveProfits = Array(stockPrices.length); // Index is buy day\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    tradesWithPositiveProfits[buyDay] = _getTradesWithPositiveProfit(\\n      stockPrices,\\n      buyDay\\n    );\\n  }\\n\\n  const tradePermutations = Array(stockPrices.length); // Index is buy day.\\n  for (let buyDay = stockPrices.length - 1; buyDay >= 0; buyDay--) {\\n    const availableTrades = tradesWithPositiveProfits[buyDay];\\n    tradePermutations[buyDay] = availableTrades.map(trade => [trade]);\\n\\n    if (buyDay === stockPrices.length - 1) continue;\\n\\n    const futureTradePermutations = tradePermutations[buyDay + 1];\\n    for (const futureTradePermutation of futureTradePermutations) {\\n      tradePermutations[buyDay].push(futureTradePermutation);\\n      if (futureTradePermutation.length === maxTradeCount) continue;\\n\\n      for (const availableTrade of availableTrades) {\\n        if (availableTrade.sellDay <= futureTradePermutation[0].buyDay) {\\n          tradePermutations[buyDay].push([\\n            availableTrade,\\n            ...futureTradePermutation,\\n          ]);\\n        }\\n      }\\n    }\\n\\n    // Trim permutations so that only one permutation of each length and\\n    // buy day (where the chosen permutation is the one with the max profit)\\n    /** @type {Object.<number, Permutation[]>} */\\n    const buyDayToPermutationsMap = {};\\n    for (const permutation of tradePermutations[buyDay]) {\\n      const key = permutation[0].buyDay;\\n      if (!(key in buyDayToPermutationsMap)) buyDayToPermutationsMap[key] = [];\\n      buyDayToPermutationsMap[key].push(permutation);\\n    }\\n    const permutationsToKeep = [];\\n    for (const permutations of Object.values(buyDayToPermutationsMap)) {\\n      const lengthToBestPermutationMap = {};\\n      const lengthToMaxProfitMap = {};\\n      for (const permutation of permutations) {\\n        const length = permutation.length;\\n        const profit = permutation\\n          .map(trade => trade.profit)\\n          .reduce((a, b) => a + b, 0);\\n        if (\\n          !(length in lengthToMaxProfitMap) ||\\n          profit > lengthToMaxProfitMap[length]\\n        ) {\\n          lengthToMaxProfitMap[length] = profit;\\n          lengthToBestPermutationMap[length] = permutation;\\n        }\\n      }\\n      permutationsToKeep.push(...Object.values(lengthToBestPermutationMap));\\n    }\\n    tradePermutations[buyDay] = permutationsToKeep;\\n  }\\n\\n  return Math.max(\\n    ...tradePermutations[0].map(trades =>\\n      trades.map(trade => trade.profit).reduce((a, b) => a + b, 0)\\n    )\\n  );\\n}\\n\\n/**\\n * @typedef {Trade[]} Permutation\\n */\\n\\n/**\\n * @typedef {Object} Trade\\n * @property {number} buyDay\\n * @property {number} sellDay\\n * @property {number} profit\\n */\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {number} buyDay\\n * @returns {Trade[]} trades with positive profit\\n */\\nfunction _getTradesWithPositiveProfit(stockPrices, buyDay) {\\n  const buyPrice = stockPrices[buyDay];\\n  const trades = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const sellPrice = stockPrices[sellDay];\\n    const profit = sellPrice - buyPrice;\\n    if (profit > 0) {\\n      trades.push({ buyDay: buyDay, sellDay: sellDay, profit: profit });\\n    }\\n  }\\n  return trades;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"8f1ce73f1ee6a0f7e5a26f84082207c53ce4a1febf88bc9ead2dfcc6c03fcc69\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order\\n *\\n * @param {number[][]} input\\n * @returns {number[]}\\n */\\nexport function spiralizeMatrix(input) {\\n  const visitedMatrix = Array.from({ length: input.length }, () =>\\n    Array(input[0].length).fill(false)\\n  );\\n  return _getPath(input, visitedMatrix, 0, 0, Direction.RIGHT, []);\\n}\\n\\n/**\\n * @typedef {number} Direction\\n */\\n\\n/**\\n * @readonly\\n * @enum {Direction}\\n */\\nconst Direction = Object.freeze({\\n  RIGHT: 0,\\n  DOWN: 1,\\n  LEFT: 2,\\n  UP: 3,\\n});\\n\\n/**\\n * @param {number[][]} matrix\\n * @param {boolean[][]} visitedMatrix copy of matrix for marking which cells we've visited\\n * @param {number} currentX\\n * @param {number} currentY\\n * @param {Direction} currentDirection\\n * @param {number[]} pathThusFar\\n */\\nfunction _getPath(\\n  matrix,\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection,\\n  pathThusFar\\n) {\\n  pathThusFar.push(matrix[currentY][currentX]);\\n  visitedMatrix[currentY][currentX] = true;\\n\\n  // Check if we have visited all cells.\\n  if (_visitedAll(visitedMatrix)) return pathThusFar;\\n\\n  const nextDirection = _getNextDirection(\\n    visitedMatrix,\\n    currentX,\\n    currentY,\\n    currentDirection\\n  );\\n  return _getPath(\\n    matrix,\\n    visitedMatrix,\\n    _getNextX(currentX, nextDirection),\\n    _getNextY(currentY, nextDirection),\\n    nextDirection,\\n    pathThusFar\\n  );\\n}\\n\\nfunction _getNextDirection(\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection\\n) {\\n  if (_canMove(visitedMatrix, currentX, currentY, currentDirection)) {\\n    return currentDirection;\\n  }\\n  return (currentDirection + 1) % Object.keys(Direction).length;\\n}\\n\\nfunction _canMove(visitedMatrix, currentX, currentY, nextDirection) {\\n  const x = _getNextX(currentX, nextDirection);\\n  const y = _getNextY(currentY, nextDirection);\\n  if (x < 0 || x >= visitedMatrix[0].length) return false;\\n  if (y < 0 || y >= visitedMatrix.length) return false;\\n  return !visitedMatrix[y][x];\\n}\\n\\nfunction _getNextX(currentX, nextDirection) {\\n  if (nextDirection === Direction.LEFT) return currentX - 1;\\n  if (nextDirection === Direction.RIGHT) return currentX + 1;\\n  return currentX;\\n}\\n\\nfunction _getNextY(currentY, nextDirection) {\\n  if (nextDirection === Direction.UP) return currentY - 1;\\n  if (nextDirection === Direction.DOWN) return currentY + 1;\\n  return currentY;\\n}\\n\\nfunction _visitedAll(visitedMatrix) {\\n  for (let y = 0; y < visitedMatrix.length; y++) {\\n    for (let x = 0; x < visitedMatrix[y].length; x++) {\\n      if (!visitedMatrix[y][x]) return false;\\n    }\\n  }\\n  return true;\\n}\\n\",\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e4811fbcb4e08d87e2f6b7535abe9a79be10092ade4a3c606f43b16279aa517e\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with N rows and M columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns.\\n *\\n * @param {number[]} input array representing number of rows and columns\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const rowCount = input[0];\\n  const columnCount = input[1];\\n  const grid = Array(columnCount).fill(Array(rowCount).fill(0));\\n  return _getUniquePathCount(grid);\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * @param {number[][]} input grid\\n * @returns {number} number of unique paths\\n */\\nexport const uniquePathsInAGridII = _getUniquePathCount;\\n\\n/**\\n * String that is the Object {x: x, y: y} stringified.\\n *\\n * @typedef {string} Coordinates\\n */\\n\\n/**\\n * String containing of only 'D' and 'R' where 'D' represents moving down and\\n * 'R' represents moving right.\\n *\\n * @typedef {string} Path\\n */\\n\\n/**\\n * @param {number[][]} grid\\n * @returns {number} number of unique paths\\n */\\nfunction _getUniquePathCount(grid) {\\n  /** @type {Object.<Coordinates, Path[]>} */\\n  const coordinatesToUniquePathsMap = {};\\n\\n  const columnCount = grid.length;\\n  const rowCount = grid[0].length;\\n  for (let y = columnCount - 1; y >= 0; y--) {\\n    for (let x = rowCount - 1; x >= 0; x--) {\\n      const coordinates = JSON.stringify({ x: x, y: y });\\n      const uniquePaths = _getUniquePaths(\\n        x,\\n        y,\\n        grid,\\n        coordinatesToUniquePathsMap\\n      );\\n      coordinatesToUniquePathsMap[coordinates] = uniquePaths;\\n    }\\n  }\\n\\n  return coordinatesToUniquePathsMap[JSON.stringify({ x: 0, y: 0 })].length;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Object.<Coordinates, Path[]>} coordinatesToUniquePathsMap\\n * @returns {Path[]}\\n */\\nfunction _getUniquePaths(x, y, grid, coordinatesToUniquePathsMap) {\\n  if (y === grid.length - 1 && x === grid[0].length - 1) return [''];\\n\\n  const allPaths = [];\\n\\n  // Get paths if we moved right.\\n  if (_canMoveRight(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x + 1, y: y });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'R' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  // Get paths if we moved down.\\n  if (_canMoveDown(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x, y: y + 1 });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'D' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  return allPaths;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveRight(x, y, grid) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveDown(x, y, grid) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"f28c78bf6d9946291215c40e2fea083e70af5c3a45d8320cde91ac933b45b830\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const STOCK_EXCHANGE_API = 'Stock Exchange API';\\nexport const STOCK_MARKET_DATA_API = 'Stock Market Data API';\\nexport const SF4_API = 'SF4 API';\\n\",\"filename\":\"/utils/apis.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"bedec2aa15c0ed8f32f7d33bb1c1e3e1e3e742d78dd1765250809a0a9c92aeb3\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/utils/api.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath } from '/utils/servers.js';\\n\\n/**\\n * Connects to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  if (typeof ns.args[0] !== 'string') {\\n    ns.tprint(`usage: run connect.js <server name>`);\\n    return;\\n  }\\n  const path = getPath(ns, ns.args[0]);\\n  for (const server of path) ns.connect(server);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///647e6763-e234-4c4d-9a01-7f5600c6442e\",\"moduleSequenceNumber\":697},{\"filename\":\"connect.js\",\"url\":\"blob:file:///16b4b2f9-e45d-4f1e-a84f-ee2e6054cb5a\",\"moduleSequenceNumber\":39077}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"_hash\":\"630533065cffaa6689959d488806cdaede0e456c0811ac6148d496b1db5728b0\",\"moduleSequenceNumber\":39077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  formatPercent,\\n  formatMoney,\\n  formatNumber,\\n  formatTime,\\n} from '/utils/format.js';\\n\\n/**\\n * Monitors a single server in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint('usage: run monitor-server.js <server name> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(serverName);\\n\\n    const availableMoney = ns.getServerMoneyAvailable(serverName);\\n    const percentMaxMoney = availableMoney / ns.getServerMaxMoney(serverName);\\n    ns.print(\\n      `\\\\navailable money: ${formatMoney(availableMoney)} (${formatPercent(\\n        percentMaxMoney\\n      )} of max)`\\n    );\\n\\n    const securityLevel = ns.getServerSecurityLevel(serverName);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    ns.print(\\n      `security level:  ${formatNumber(securityLevel)} (min is ${formatNumber(\\n        minSecurityLevel\\n      )})`\\n    );\\n\\n    ns.print(`hack chance: ${formatPercent(ns.hackAnalyzeChance(serverName))}`);\\n\\n    ns.print(\\n      '\\\\n' +\\n        [\\n          `time to hack:   ${formatTime(ns.getHackTime(serverName))}`,\\n          `time to grow:   ${formatTime(ns.getGrowTime(serverName))}`,\\n          `time to weaken: ${formatTime(ns.getWeakenTime(serverName))}`,\\n        ].join('\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"monitor-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///625064d1-46ee-427d-bd07-ad9ba932eb85\"},{\"filename\":\"monitor-server.js\",\"url\":\"blob:file:///6a6a2172-87d7-4941-9392-8db1b856cc38\"}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"_hash\":\"45b6a42f6e2cc9bd77d3789b9e1fa5dfac2e81d8add5f155e670d20935793d2f\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const PROGRAMS = [\\n  'SQLInject.exe',\\n  'HTTPWorm.exe',\\n  'relaySMTP.exe',\\n  'FTPCrack.exe',\\n  'BruteSSH.exe',\\n  'Formulas.exe',\\n];\\n\\n/**\\n * Buys TOR router and programs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const player = ns.getPlayer();\\n\\n  // Buy TOR router.\\n  if (!player.tor) {\\n    while (!ns.purchaseTor()) await ns.sleep(1000);\\n    ns.toast('Bought TOR');\\n  }\\n\\n  // Buy programs.\\n  let programsToBuy;\\n  do {\\n    programsToBuy = PROGRAMS.filter(program => !ns.fileExists(program));\\n\\n    for (const program of programsToBuy) {\\n      if (ns.isBusy() && ns.getPlayer().createProgramName === program) {\\n        continue;\\n      }\\n      const success = ns.purchaseProgram(program);\\n      if (success) ns.toast('Bought ' + program);\\n    }\\n\\n    await ns.sleep(1000);\\n  } while (programsToBuy.length > 0);\\n}\\n\",\"filename\":\"manage-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manage-programs.js\",\"url\":\"blob:file:///7d69cd28-e0b9-4efd-aee1-95450973ab60\",\"moduleSequenceNumber\":194075}],\"dependents\":[],\"ramUsage\":74.2,\"server\":\"home\",\"_hash\":\"0a1a3edc774c4e50505c968ddb851560ba22c940ebdd09e78df9e2a6894f2242\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const DISABLE_LOGGING_FUNCTIONS = ['sleep'];\\n\\nconst WORKING_WORK_TYPES = [\\n  'Working for Company part-time',\\n  'Working for Company',\\n];\\n\\n/**\\n * Manages life when we're not busy playing.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    const player = ns.getPlayer();\\n\\n    if (\\n      ns.isBusy() &&\\n      (WORKING_WORK_TYPES.includes(player.workType) ||\\n        player.crimeType !== '' ||\\n        player.createProgramName !== '' ||\\n        player.currentWorkFactionName !== '')\\n    ) {\\n      // Working at a job or doing a crime, so keep on working.\\n      await ns.sleep(10000);\\n      continue;\\n    }\\n\\n    const lowestSkill = Math.min(\\n      player.hacking,\\n      player.charisma,\\n      player.strength,\\n      player.defense,\\n      player.dexterity,\\n      player.agility\\n    );\\n    if (ns.isBusy() && player.workType.startsWith('Study')) {\\n      // Studying or Taking a class at university\\n      switch (player.className) {\\n        case 'training your strength at a gym':\\n          if (lowestSkill != player.strength) ns.stopAction();\\n          break;\\n        case 'training your defense at a gym':\\n          if (lowestSkill != player.defense) ns.stopAction();\\n          break;\\n        case 'training your dexterity at a gym':\\n          if (lowestSkill != player.dexterity) ns.stopAction();\\n          break;\\n        case 'training your agility at a gym':\\n          if (lowestSkill != player.agility) ns.stopAction();\\n          break;\\n        case 'taking a Leadership course':\\n          if (lowestSkill != player.charisma) ns.stopAction();\\n          break;\\n        case 'taking an Algorithms course':\\n          if (lowestSkill != player.hacking) ns.stopAction();\\n          break;\\n        default:\\n          // Not sure what class we're taking, but stop it!\\n          ns.stopAction();\\n      }\\n      if (ns.isBusy()) {\\n        await ns.sleep(10000);\\n        continue;\\n      }\\n    }\\n\\n    // Player is no longer busy, so start learning something!\\n    switch (lowestSkill) {\\n      case player.strength:\\n        ns.gymWorkout('powerhouse gym', 'strength');\\n        break;\\n      case player.defense:\\n        ns.gymWorkout('powerhouse gym', 'defense');\\n        break;\\n      case player.dexterity:\\n        ns.gymWorkout('powerhouse gym', 'dexterity');\\n        break;\\n      case player.agility:\\n        ns.gymWorkout('powerhouse gym', 'agility');\\n        break;\\n      case player.charisma:\\n        ns.universityCourse('rothman university', 'Leadership');\\n        break;\\n      case player.hacking:\\n        ns.universityCourse('rothman university', 'Algorithms');\\n        break;\\n      default:\\n        // Should never get here.\\n        ns.universityCourse('rothman university', 'Leadership');\\n    }\\n    await ns.sleep(10000);\\n  }\\n}\\n\",\"filename\":\"manage-life.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manage-life.js\",\"url\":\"blob:file:///04cd2fd0-481b-4ddd-9780-9e57560c18ff\",\"moduleSequenceNumber\":194074}],\"dependents\":[],\"ramUsage\":90.1,\"server\":\"home\",\"_hash\":\"502d1493ca2b7caa2b126c91c507ce13be99ed9fd0bc924c707efe26401cc7b5\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getForecast } from '/utils/stock.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\n\\n/**\\n * Monitors a single stock in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols = [];\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    ns.tprint('stock API not bought yet');\\n    return;\\n  }\\n\\n  const symbol = ns.args[0];\\n  if (typeof symbol !== 'string' || !symbols.includes(symbol)) {\\n    ns.tprint('usage: run monitor-stock.js <stock symbol> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    const ownedShareCount = position[0];\\n    const ownedAvgSharePrice = position[1];\\n    ns.print('owned shared count:     ', formatNumber(ownedShareCount));\\n    ns.print('owned avg. share price: ', formatMoney(ownedAvgSharePrice));\\n\\n    const askPrice = ns.stock.getAskPrice(symbol);\\n    const bidPrice = ns.stock.getBidPrice(symbol);\\n    ns.print('ask price: ', formatMoney(askPrice));\\n    ns.print('bid price: ', formatMoney(bidPrice), '\\\\n');\\n    ns.print('forecast: ', formatPercent(getForecast(ns, symbol)));\\n\\n    await ns.sleep(6000);\\n  }\\n}\\n\",\"filename\":\"monitor-stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///273103e9-03ca-40d0-a58e-4c0bfa94c8dc\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///3f4be85e-f1c5-42f3-a813-8922f8bac344\"},{\"filename\":\"monitor-stock.js\",\"url\":\"blob:file:///fef1cf13-fcfa-4ae5-a748-0a7c15157192\"}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"_hash\":\"049233dae835648710e421548d0d39f0a5940cccdde4876058c91940a10804b1\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServerNames } from '/utils/servers.js';\\n\\nconst COMPANY_NAMES = {\\n  ECorp: { stockSymbol: 'ECP' },\\n  MegaCorp: { stockSymbol: 'MGCP' },\\n  'Blade Industries': { stockSymbol: 'BLD' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK' },\\n  'Four Sigma': { stockSymbol: 'FSIG' },\\n  'KuaiGong International': { stockSymbol: 'KGI' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM' },\\n  'Storm Technologies': { stockSymbol: 'STM' },\\n  DefComm: { stockSymbol: 'DCOMM' },\\n  'Helios Labs': { stockSymbol: 'HLS' },\\n  VitaLife: { stockSymbol: 'VITA' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS' },\\n  'Universal Energy': { stockSymbol: 'UNV' },\\n  AeroCorp: { stockSymbol: 'AERO' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH' },\\n  'Nova Medical': { stockSymbol: 'NVMD' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO' },\\n  'Rho Construction': { stockSymbol: 'RHOC' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE' },\\n  'SysCore Securities': { stockSymbol: 'SYSC' },\\n  CompuTek: { stockSymbol: 'CTK' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK' },\\n  'Omega Software': { stockSymbol: 'OMGA' },\\n  FoodNStuff: { stockSymbol: 'FNS' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN' },\\n  'Titan Laboratories': { stockSymbol: 'TITN' },\\n};\\n\\nexport function main(ns) {\\n  // ns.tprint(Object.keys(COMPANY_NAMES).length);\\n  // ns.tprint(ns.stock.getSymbols().length);\\n  const serverNames = getAllServerNames(ns);\\n  for (const serverName of serverNames) {\\n    ns.tprint(ns.getServer(serverName).organizationName);\\n  }\\n}\\n\",\"filename\":\"/utils/companies.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/companies.js\",\"url\":\"blob:file:///1286c66f-cb85-4d0a-8f25-beba3ad005cb\"}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"_hash\":\"e794661723ab1af3726d0ee386e3e10b8c6e5d84afe5dad138446185ab3a4d4b\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ORGANIZATIONS = {\\n  ECorp: { stockSymbol: 'ECP', serverName: 'ecorp' },\\n  MegaCorp: { stockSymbol: 'MGCP', serverName: 'megacorp' },\\n  'Blade Industries': { stockSymbol: 'BLD', serverName: 'blade' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK', serverName: 'clarkinc' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK', serverName: 'omnitek' },\\n  'Four Sigma': { stockSymbol: 'FSIG', serverName: '4sigma' },\\n  'KuaiGong International': { stockSymbol: 'KGI', serverName: 'kuai-gong' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM', serverName: 'fulcrumtech' },\\n  'Storm Technologies': { stockSymbol: 'STM', serverName: 'stormtech' },\\n  DefComm: { stockSymbol: 'DCOMM', serverName: 'defcomm' },\\n  'Helios Labs': { stockSymbol: 'HLS', serverName: 'helios' },\\n  VitaLife: { stockSymbol: 'VITA', serverName: 'vitalife' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS', serverName: 'icarus' },\\n  'Universal Energy': { stockSymbol: 'UNV', serverName: 'univ-energy' },\\n  AeroCorp: { stockSymbol: 'AERO', serverName: 'aerocorp' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN', serverName: 'omnia' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS', serverName: 'solaris' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH', serverName: 'global-pharm' },\\n  'Nova Medical': { stockSymbol: 'NVMD', serverName: 'nova-med' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO', serverName: 'lexo-corp' },\\n  'Rho Construction': { stockSymbol: 'RHOC', serverName: 'rho-construction' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE', serverName: 'alpha-ent' },\\n  'SysCore Securities': { stockSymbol: 'SYSC', serverName: 'syscore' },\\n  CompuTek: { stockSymbol: 'CTK', serverName: 'comptek' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK', serverName: 'netlink' },\\n  'Omega Software': { stockSymbol: 'OMGA', serverName: 'omega-net' },\\n  FoodNStuff: { stockSymbol: 'FNS', serverName: 'foodnstuff' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC', serverName: 'sigma-cosmetics' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN', serverName: 'joesguns' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS', serverName: 'catalyst' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN', serverName: 'microdyne' },\\n  'Titan Laboratories': { stockSymbol: 'TITN', serverName: 'titan-labs' },\\n};\\n\\n/**\\n * @param {string} serverName\\n * @returns {string|undefined} stock symbol\\n */\\nexport function getStockSymbol(serverName) {\\n  const organizations = Object.values(ORGANIZATIONS);\\n  const organization = organizations.find(\\n    organization => organization.serverName === serverName\\n  );\\n  return organization === undefined ? undefined : organization.stockSymbol;\\n}\\n\",\"filename\":\"/utils/organizations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///e98eb0ff-a686-41d3-9223-a2ac132a04dd\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"87c11a870fd8c62ffd2783a85ca99f5023b43d9b5d1922aaf0ad763d3a0eb9dc\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumber, formatTime } from '/utils/format.js';\\n\\nconst HISTORY_LENGTH = 100;\\nconst HISTORY_SECONDS = 10;\\n\\n/**\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const targetLevel = ns.args[0];\\n  if (typeof targetLevel !== 'number') {\\n    ns.tprint(`usage: run get-hacking-skill-progress.js <target level>`);\\n    return;\\n  }\\n  if (!ns.fileExists('Formulas.exe')) {\\n    ns.tprint('Need Formulas.exe');\\n    return;\\n  }\\n  const player = ns.getPlayer();\\n  const targetExp = ns.formulas.skills.calculateExp(9000, player.hacking_mult);\\n\\n  // Get current rate of exp growth.\\n  const expHistory = [];\\n  for (let i = 0; i < HISTORY_LENGTH; i++) {\\n    expHistory.push(getCurrentExp(ns));\\n    await ns.sleep((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  }\\n  const expDiffs = [];\\n  for (let i = 1; i < expHistory.length; i++) {\\n    expDiffs.push(expHistory[i] - expHistory[i - 1]);\\n  }\\n  const averageGrowth = expDiffs.reduce((a, b) => a + b) / HISTORY_LENGTH;\\n  const averageGrowthPerMs =\\n    averageGrowth / ((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  const currentExp = getCurrentExp(ns);\\n  const timeLeftMs = (targetExp - currentExp) / averageGrowthPerMs;\\n\\n  ns.tprintf('Current hacking experience: ' + formatNumber(currentExp, true));\\n  ns.tprintf('Target hacking experience: ' + formatNumber(targetExp, true));\\n  ns.tprintf(\\n    'Average exp growth per second: ' +\\n      formatNumber(averageGrowthPerMs * 1000, true)\\n  );\\n  ns.tprintf('Time to reach target: ' + formatTime(timeLeftMs));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getCurrentExp(ns) {\\n  const player = ns.getPlayer();\\n  return ns.formulas.skills.calculateExp(player.hacking, player.hacking_mult);\\n}\\n\",\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":156243},{\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"blob:file:///27db7ff0-7b0b-4145-ae9a-9ad7ecef722e\",\"moduleSequenceNumber\":191611}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"_hash\":\"c12132038d1dccdd6809c6332588105a4c1105ded343fe02c3ed7e2a8112ad26\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServerNames} from '/utils/servers.js'\\nimport {sort} from '/utils/misc.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns);\\n  sort(serverNames, serverName => getWeakenAbility(ns, serverName), true)\\n  \\n  ns.tprint(serverNames[0]);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getWeakenAbility(ns, serverName) {\\n  return ns.formulas.hacking.hackExp(ns.getServer(serverName), ns.getPlayer()) / Math.max(500, ns.getWeakenTime(serverName));\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194320},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194321},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":194314},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194320},{\"filename\":\"test.js\",\"url\":\"blob:file:///d4d19970-5e79-41e6-a8d3-c02e55692fd1\",\"moduleSequenceNumber\":196519}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"_hash\":\"3554a6554bbd5b080c2fae53d06f3bb362a956a25abb3a34be5848dbf4d06aa9\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":27.956000000000035,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"13.6.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":8670146311.2,\"moneyMax\":43350731556.00001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1227,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-770228.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"82.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9739463564.2,\"moneyMax\":48697317821.00001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1319,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"61.0.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":5094588425.2,\"moneyMax\":25472942126,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":964,\"serverGrowth\":70}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731335.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[27,35,16,35,11,17,26,46,45,11,16,35,2],[15,19,26,42,28,29,42,15,2,32,33,23,19],[49,30,36,41,1,37,31,38,38,26,35,36,30],[26,14,1,22,7,12,22,5,5,16,25,6,9],[43,25,47,13,34,33,7,17,23,39,31,10,8],[23,17,9,11,39,11,11,43,29,7,37,40,44],[22,6,43,45,11,29,9,23,39,37,13,25,34],[50,31,13,50,21,23,9,47,32,4,39,25,39],[33,14,16,21,1,4,29,48,19,11,24,45,7]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"44.8.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":7985632453.200001,\"moneyMax\":39928162266.00001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1136,\"serverGrowth\":55}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"45.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":4584638340.2,\"moneyMax\":22923191701,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1082,\"serverGrowth\":70}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"70.0.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":3213889067.8,\"moneyMax\":16069445339,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1199,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"86.4.6.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":2873152999.4,\"moneyMax\":14365764997,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":963,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"8.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":3755203202.2000003,\"moneyMax\":18776016011,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":905,\"serverGrowth\":93}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"88.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":4520580911.2,\"moneyMax\":22602904556,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1295,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"90.1.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":293967827.8,\"moneyMax\":1469839139,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1206,\"serverGrowth\":97}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"91.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1346,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276388.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,16],[21,26],[7,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"26.6.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":221753534.8,\"moneyMax\":1108767674,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":933,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"26.5.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":162577323.8,\"moneyMax\":812886619.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":982,\"serverGrowth\":52}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"99.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":123860215.80000001,\"moneyMax\":619301079.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":944,\"serverGrowth\":58}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"83.1.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":128313181,\"moneyMax\":641565905,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":852,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"83.3.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":150287408.4,\"moneyMax\":751437042,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":841,\"serverGrowth\":68}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"96.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":183298066,\"moneyMax\":916490330,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"71.6.0.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":223728168.4,\"moneyMax\":1118640842,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":804,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"83.9.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":166695766.8,\"moneyMax\":833478834.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":839,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"44.2.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":104019869.60000001,\"moneyMax\":520099348,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":863,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"87.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":175099762,\"moneyMax\":875498810,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":932,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367591.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"9.0.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":151227113.8,\"moneyMax\":756135569.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":865,\"serverGrowth\":74}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"91.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":226781414.60000002,\"moneyMax\":1133907073.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":908,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"64.1.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":192652012.60000002,\"moneyMax\":963260063.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":928,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"89.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":200229805.60000002,\"moneyMax\":1001149028.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":809,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"14.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":192540139.8,\"moneyMax\":962700699,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":799,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"52.4.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":167283522.60000002,\"moneyMax\":836417613.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":848,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"70.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":293569409.40000004,\"moneyMax\":1467847047.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":815,\"serverGrowth\":63}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691243.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,12],[19,25],[5,11],[19,26],[10,11],[16,21],[5,12],[22,26],[6,12],[15,24],[5,6],[22,31],[9,15]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"33.2.1.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":345087776.40000004,\"moneyMax\":1725438882,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":791,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"77.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":228407824,\"moneyMax\":1142039120,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":782,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"51.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":290593568.2,\"moneyMax\":1452967841,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":803,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"44.0.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":217835584.60000002,\"moneyMax\":1089177923.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":805,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"14.6.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":142179676.8,\"moneyMax\":710898384.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":728,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"72.1.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":134254559,\"moneyMax\":671272795,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":505,\"serverGrowth\":47}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"38.4.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":128887339.4,\"moneyMax\":644436697,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":574,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"48.8.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":73071250.2,\"moneyMax\":365356251,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":424,\"serverGrowth\":39}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"3.7.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":48268440.400000006,\"moneyMax\":241342202.00000006,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":421,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"84.3.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":172459501.20000002,\"moneyMax\":862297506,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":736,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"20.4.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":49936244.800000004,\"moneyMax\":249681224,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":465,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"3.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":80323268.2,\"moneyMax\":401616341,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":558,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"45.7.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":73575163.4,\"moneyMax\":367875817.00000006,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":424,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"68.0.2.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21312.610000000124,\"pid\":2615,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":45309}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":36666056.800000004,\"moneyMax\":183330284.00000003,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":300,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298822.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"14515230190\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"95.3.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":44947454,\"moneyMax\":224737270,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":388,\"serverGrowth\":65}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"53.1.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":418,\"serverGrowth\":70}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298095.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,6,7,10,-10,-8,-4,1,-9,2,-5,-7,7,7,6,-10,-5,0,-5,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"69.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":14062039.200000001,\"moneyMax\":70310196,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":283,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"49.3.1.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2604,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":893}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":893}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"81.8.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2605,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":894}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":894}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":45.59200000000104,\"minDifficulty\":3,\"moneyAvailable\":465867.5155225163,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"13.5.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2606,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":895}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":895}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":37.94400000000059,\"minDifficulty\":3,\"moneyAvailable\":587956.0620953743,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"80.2.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2607,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":896}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":896}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":30.7880000000003,\"minDifficulty\":5,\"moneyAvailable\":646773.9143872585,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"3.1.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2618,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41660}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41660}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":41660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":41644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":41645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"70.9.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2610,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":899}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":899}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"38.9.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2620,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41662}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41662}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":41662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":41656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":41657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"7.4.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21312.610000000124,\"pid\":2614,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":45308}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"14.8.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2608,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":897}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":897}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"42.9.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28515.81000000015,\"pid\":2609,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":898}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":898}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"51.7.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21312.610000000124,\"pid\":2611,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":45305}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"84.5.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2617,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41659}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41659}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":41659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":41638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":41639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"17.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21312.610000000124,\"pid\":2612,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":45306}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":13003609.4,\"moneyMax\":65018047,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":197,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"54.0.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":10733025.600000001,\"moneyMax\":53665128.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":248,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"9.7.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2616,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41658}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41658}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":41658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":41632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":41633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"60.5.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":508,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"68.0.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1098,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"35.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":706,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"93.7.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":515,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"14.6.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":341,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"40.3.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21312.610000000124,\"pid\":2613,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":45307}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":45307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":45285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":45286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"63.6.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":537,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-844743.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"70.6.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2619,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41661}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6caa0960-a6b9-4e18-8610-08b9dee41dbc\",\"moduleSequenceNumber\":41661}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"moduleSequenceNumber\":41661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"moduleSequenceNumber\":41650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"moduleSequenceNumber\":41651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"25.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"99.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":100,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":70,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"'Input', Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642808466259","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642840419531"}}