{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":419,\"hp\":40,\"max_hp\":40,\"strength\":293,\"defense\":300,\"dexterity\":339,\"agility\":306,\"charisma\":296,\"intelligence\":0,\"hacking_chance_mult\":1.51612154422013,\"hacking_speed_mult\":1.4883818418569346,\"hacking_money_mult\":1.3751669335329977,\"hacking_grow_mult\":1.3751669335329977,\"hacking_exp\":5942050.013084703,\"strength_exp\":222556.9210314651,\"defense_exp\":146857.08921764238,\"dexterity_exp\":81293.7052945762,\"agility_exp\":160899.55066514818,\"charisma_exp\":142740.65079455465,\"intelligence_exp\":0,\"hacking_mult\":1.7520300565007827,\"strength_mult\":1.5126836268862973,\"defense_mult\":1.663951989574927,\"dexterity_mult\":2.0965795068644084,\"agility_mult\":1.667733698642143,\"charisma_mult\":1.6502003202395972,\"hacking_exp_mult\":1.826565479465204,\"strength_exp_mult\":1.739586170919242,\"defense_exp_mult\":1.739586170919242,\"dexterity_exp_mult\":2.000524096557128,\"agility_exp_mult\":1.739586170919242,\"charisma_exp_mult\":1.739586170919242,\"company_rep_mult\":1.5126836268862973,\"faction_rep_mult\":1.5126836268862973,\"money\":53135106.39196146,\"city\":\"Sector-12\",\"location\":\"National Security Agency\",\"jobs\":{\"Universal Energy\":\"Software Engineering Intern\",\"National Security Agency\":\"Field Agent\"},\"companyName\":\"National Security Agency\",\"currentServer\":\"home\",\"purchasedServers\":[\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\",\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-14\",\"lauren-18\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":6816.182375240884,\"onlineTimeSeconds\":103330.39999968348,\"ram\":64,\"totalMoneyGenerated\":481812137.6873808,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":6816.182375240884,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":483259586.0963577,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":6816.182375240884,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":491679522.50505805,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":6437.5055766163905,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":460695532.27353483,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":6437.5055766163905,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":537364899.4292204,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":6816.182375240884,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":485436760.7421076,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":6437.5055766163905,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":473304397.60616773,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":13,\"level\":200,\"moneyGainRatePerSecond\":6816.182375240884,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":492689755.21575916,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":6437.5055766163905,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":460192187.0280492,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":12,\"level\":200,\"moneyGainRatePerSecond\":6437.5055766163905,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":469693688.02801925,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":14,\"level\":200,\"moneyGainRatePerSecond\":7194.859173865376,\"onlineTimeSeconds\":103327.39999968352,\"ram\":64,\"totalMoneyGenerated\":472593094.67788666,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":80301.39999993578,\"ram\":64,\"totalMoneyGenerated\":471478404.2654257,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":73431.19999993003,\"ram\":64,\"totalMoneyGenerated\":543297614.2589368,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":69550.59999991627,\"ram\":64,\"totalMoneyGenerated\":534985801.0606925,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":66570.19999990448,\"ram\":64,\"totalMoneyGenerated\":520385169.332426,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":63440.39999989424,\"ram\":64,\"totalMoneyGenerated\":429905911.6617223,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":7952.212771114364,\"onlineTimeSeconds\":58220.79999988425,\"ram\":64,\"totalMoneyGenerated\":395920059.2348832,\"name\":\"hacknet-node-16\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"MegaCorp\",\"Blade Industries\",\"Netburners\",\"CyberSec\",\"Slum Snakes\",\"The Syndicate\",\"Sector-12\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Neurotrainer II\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":0,\"karma\":-23721.449999999884,\"crime_money_mult\":2.3635681670098396,\"crime_success_mult\":1.3751669335329977,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Company\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0.14612523835721633,\"workStrExpGainRate\":0.2783337873470787,\"workDefExpGainRate\":0.2783337873470787,\"workDexExpGainRate\":0.3200838554491405,\"workAgiExpGainRate\":0.2783337873470787,\"workChaExpGainRate\":0.1739586170919242,\"workRepGainRate\":0.9969816160351548,\"workMoneyGainRate\":226.9025440329446,\"workMoneyLossRate\":0,\"workHackExpGained\":7359.772980146498,\"workStrExpGained\":14018.615200281203,\"workDefExpGained\":14018.615200281203,\"workDexExpGained\":16121.407480323236,\"workAgiExpGained\":14018.615200281203,\"workChaExpGained\":8761.634500175061,\"workRepGained\":49350.52609067523,\"workMoneyGained\":11428218.91327165,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":10117000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.3751669335329977,\"hacknet_node_money_mult\":3.4682999282702407,\"hacknet_node_purchase_cost_mult\":0.5411336207724426,\"hacknet_node_ram_cost_mult\":0.7073642101600558,\"hacknet_node_core_cost_mult\":0.7073642101600558,\"hacknet_node_level_cost_mult\":0.6012595786360475,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Lauren Corp\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Agriculture Division\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":28433.79240262079,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Bulk Purchasing\":true,\"Drones\":true,\"AutoPartyManager\":true,\"AutoBrew\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":598.0047758061974,\"popularity\":140.61541321276601,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":73.92591374972064,\"upgrades\":[144,6],\"state\":\"START\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s8d0HD9\",\"mor\":100,\"hap\":99.99892539034482,\"ene\":99.99892539034482,\"int\":76,\"cha\":64,\"exp\":216.6609999995849,\"cre\":53,\"eff\":98,\"sal\":1137,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Y0TkaE1\",\"mor\":100,\"hap\":99.99710308256701,\"ene\":99.99710308256701,\"int\":94,\"cha\":50,\"exp\":200.66099999966067,\"cre\":53,\"eff\":61,\"sal\":990,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"H7jnanj\",\"mor\":100,\"hap\":99.99773255882269,\"ene\":99.99773255882269,\"int\":89,\"cha\":88,\"exp\":216.6609999995849,\"cre\":83,\"eff\":70,\"sal\":1254,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"61tbHxH\",\"mor\":100,\"hap\":99.99752975517292,\"ene\":99.99752975517292,\"int\":90,\"cha\":85.20971922033486,\"exp\":161.69471922017905,\"cre\":69,\"eff\":61.20971922033482,\"sal\":1098,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2lXxQ1V\",\"mor\":100,\"hap\":99.99763828684125,\"ene\":99.99763828684125,\"int\":70,\"cha\":95,\"exp\":184.48499999973623,\"cre\":96,\"eff\":84,\"sal\":1287,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TQL0GZm\",\"mor\":100,\"hap\":99.9977089444077,\"ene\":99.9977089444077,\"int\":65,\"cha\":90.02249652045863,\"exp\":214.50749652008383,\"cre\":71,\"eff\":71.02249652045892,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wYeCHh9\",\"mor\":100,\"hap\":99.99832045653127,\"ene\":99.99832045653127,\"int\":63,\"cha\":65,\"exp\":122.75400000000113,\"cre\":57,\"eff\":99,\"sal\":1131,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zTy6zh9\",\"mor\":100,\"hap\":99.99870276559882,\"ene\":99.99870276559882,\"int\":83,\"cha\":83,\"exp\":127.75400000000113,\"cre\":85,\"eff\":98,\"sal\":1341,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2qazTpr\",\"mor\":100,\"hap\":99.99876437906943,\"ene\":99.99876437906943,\"int\":85,\"cha\":72.85458251060072,\"exp\":102.60858251060185,\"cre\":77,\"eff\":73.85458251060072,\"sal\":1065,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BXz08WB\",\"mor\":100,\"hap\":99.9998341387184,\"ene\":99.9998341387184,\"int\":50,\"cha\":91.8149976766153,\"exp\":79.49999767661602,\"cre\":50,\"eff\":60.81499767661537,\"sal\":918,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IOpgtR3\",\"mor\":100,\"hap\":99.99898515886518,\"ene\":99.99898515886518,\"int\":87,\"cha\":88.85474323693275,\"exp\":106.53974323693342,\"cre\":74,\"eff\":94.85474323693275,\"sal\":1275,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RL3lgRD\",\"mor\":100,\"hap\":99.998874957297,\"ene\":99.998874957297,\"int\":97,\"cha\":66.86116721014282,\"exp\":83.54616721014348,\"cre\":64,\"eff\":55.8611672101428,\"sal\":1023,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wRfC0c8\",\"mor\":100,\"hap\":99.99821256849096,\"ene\":99.99821256849096,\"int\":56,\"cha\":77.86219660411116,\"exp\":81.54719660411182,\"cre\":92,\"eff\":75.86219660411116,\"sal\":1071,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9KTOZjt\",\"mor\":100,\"hap\":99.99940482250443,\"ene\":99.99940482250443,\"int\":54,\"cha\":91.9024605091599,\"exp\":91.58746050916056,\"cre\":65,\"eff\":58.90246050915979,\"sal\":1005,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ySwd3by\",\"mor\":100,\"hap\":99.99783895450174,\"ene\":99.99783895450174,\"int\":80,\"cha\":78.8518376830228,\"exp\":82.53683768302345,\"cre\":52,\"eff\":63.85183768302306,\"sal\":993,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Nd0HdB0\",\"mor\":100,\"hap\":99.99709555608021,\"ene\":99.99709555608021,\"int\":50,\"cha\":93.81441281079596,\"exp\":98.49941281079663,\"cre\":60,\"eff\":56.81441281079598,\"sal\":999,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DJKwVtZ\",\"mor\":100,\"hap\":99.99897462734101,\"ene\":99.99897462734101,\"int\":67,\"cha\":101.89926124997876,\"exp\":106.58426124997943,\"cre\":86,\"eff\":81.89926124997876,\"sal\":1251,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zVeD026\",\"mor\":100,\"hap\":99.99938911738823,\"ene\":99.99938911738823,\"int\":74,\"cha\":79.82439450694811,\"exp\":109.50939450694878,\"cre\":61,\"eff\":96.82439450694811,\"sal\":1185,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9BZq6Ih\",\"mor\":100,\"hap\":99.99923187492712,\"ene\":99.99923187492712,\"int\":92,\"cha\":86,\"exp\":106.68500000000067,\"cre\":93,\"eff\":92,\"sal\":1356,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DHTY2va\",\"mor\":100,\"hap\":99.99795192020933,\"ene\":99.99795192020933,\"int\":66,\"cha\":73,\"exp\":113.68500000000067,\"cre\":88,\"eff\":93,\"sal\":1248,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1Eg0AS7\",\"mor\":100,\"hap\":99.99994094423387,\"ene\":99.99994094423387,\"int\":73,\"cha\":78,\"exp\":106.68500000000067,\"cre\":77,\"eff\":59,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":2169.172850522143,\"Engineer\":2477.6113267316373,\"Business\":1410.170504270443,\"Management\":1148.4979948503437,\"Research & Development\":1790.9563464236485,\"total\":8996.409022798214,\"Unassigned\":0,\"Training\":0},\"loc\":\"Aevum\",\"size\":21}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XqzK3JX\",\"mor\":100,\"hap\":99.99771633709533,\"ene\":99.99771633709533,\"int\":52,\"cha\":89.00378590870625,\"exp\":167.23378590852295,\"cre\":57,\"eff\":73.00378590870625,\"sal\":1113,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vJNJ6HV\",\"mor\":100,\"hap\":99.99989687060182,\"ene\":99.99989687060182,\"int\":50,\"cha\":109.15898586302009,\"exp\":133.38898586299706,\"cre\":51,\"eff\":73.15898586301994,\"sal\":939,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"R00WLsT\",\"mor\":100,\"hap\":99.99831373555746,\"ene\":99.99831373555746,\"int\":50,\"cha\":91.83965646040693,\"exp\":171.06965646021106,\"cre\":95,\"eff\":79.83965646040693,\"sal\":1146,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SPZ43C7\",\"mor\":100,\"hap\":99.99847569402756,\"ene\":99.99847569402756,\"int\":79,\"cha\":99.74458525563395,\"exp\":122.96758525563551,\"cre\":76,\"eff\":91.74458525563395,\"sal\":1278,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TVFFKYh\",\"mor\":100,\"hap\":99.99969816789161,\"ene\":99.99969816789161,\"int\":96,\"cha\":66.79945297845741,\"exp\":104.02245297845899,\"cre\":53,\"eff\":55.79945297845744,\"sal\":996,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iixtKp6\",\"mor\":100,\"hap\":99.99966567851713,\"ene\":99.99966567851713,\"int\":65,\"cha\":95.75342450207134,\"exp\":95.976424502073,\"cre\":78,\"eff\":54.75342450207145,\"sal\":1038,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SYiVag3\",\"mor\":100,\"hap\":99.99892645801486,\"ene\":99.99892645801486,\"int\":70,\"cha\":73.76766503084919,\"exp\":137.99066503080343,\"cre\":75,\"eff\":82.76766503084919,\"sal\":1188,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qCoH9SG\",\"mor\":100,\"hap\":99.9990171022952,\"ene\":99.9990171022952,\"int\":78,\"cha\":50.747158341006134,\"exp\":138.97015834095575,\"cre\":96,\"eff\":55.747158341006134,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C5iFmWW\",\"mor\":100,\"hap\":99.99793454575273,\"ene\":99.99793454575273,\"int\":100,\"cha\":57.79712705848726,\"exp\":139.02012705843677,\"cre\":73,\"eff\":97.79712705848742,\"sal\":1272,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gaEyezF\",\"mor\":100,\"hap\":99.99740915437317,\"ene\":99.99740915437317,\"int\":70,\"cha\":92.76396731226436,\"exp\":141.98696731219965,\"cre\":68,\"eff\":83.76396731226436,\"sal\":1239,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CY3bFS4\",\"mor\":100,\"hap\":99.9993832640866,\"ene\":99.9993832640866,\"int\":72,\"cha\":95.79466091082892,\"exp\":99.01766091083064,\"cre\":93,\"eff\":80.79466091082892,\"sal\":1191,\"loc\":\"\",\"pos\":\"Unassigned\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jZ36uMj\",\"mor\":100,\"hap\":99.99795877740821,\"ene\":99.99795877740821,\"int\":70,\"cha\":52,\"exp\":123.22300000000156,\"cre\":60,\"eff\":91,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XQmK34s\",\"mor\":100,\"hap\":99.99705682144639,\"ene\":99.99705682144639,\"int\":51,\"cha\":99,\"exp\":126.22000000000156,\"cre\":66,\"eff\":73,\"sal\":1122,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3G7nWTP\",\"mor\":100,\"hap\":99.99960601105818,\"ene\":99.99960601105818,\"int\":56,\"cha\":88,\"exp\":108.22000000000156,\"cre\":92,\"eff\":71,\"sal\":1122,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qH46miQ\",\"mor\":100,\"hap\":99.99996599282716,\"ene\":99.99996599282716,\"int\":94,\"cha\":51,\"exp\":130.21999999999105,\"cre\":63,\"eff\":71,\"sal\":1104,\"loc\":\"\",\"pos\":\"Operations\"}}],\"employeeProd\":{\"Operations\":800.1866830384486,\"Engineer\":889.4523803756405,\"Business\":591.3170406998189,\"Management\":532.9283966018804,\"Research & Development\":3088.4391060011453,\"total\":5902.323606716933,\"Unassigned\":0,\"Training\":0},\"loc\":\"Chongqing\",\"size\":15}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xBFsfor\",\"mor\":100,\"hap\":99.99873843250826,\"ene\":99.99873843250826,\"int\":83,\"cha\":96,\"exp\":436.03499999855364,\"cre\":98,\"eff\":97,\"sal\":1419,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LfgJdA4\",\"mor\":100,\"hap\":99.99725000539433,\"ene\":99.99725000539433,\"int\":76,\"cha\":75,\"exp\":396.0349999987431,\"cre\":81,\"eff\":51,\"sal\":1026,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4dAjFsU\",\"mor\":100,\"hap\":99.9972519752886,\"ene\":99.9972519752886,\"int\":78,\"cha\":51,\"exp\":427.0349999985963,\"cre\":74,\"eff\":84,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xkQFqq8\",\"mor\":100,\"hap\":99.99969395173201,\"ene\":99.99969395173201,\"int\":82,\"cha\":80,\"exp\":424.5839999986078,\"cre\":61,\"eff\":65,\"sal\":1134,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rmC5gZ7\",\"mor\":100,\"hap\":99.99896740355598,\"ene\":99.99896740355598,\"int\":66,\"cha\":82,\"exp\":396.5839999987404,\"cre\":61,\"eff\":71,\"sal\":1026,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ddGlhA6\",\"mor\":100,\"hap\":99.99974990627317,\"ene\":99.99974990627317,\"int\":95,\"cha\":114.88839621920457,\"exp\":427.4723962178515,\"cre\":83,\"eff\":123.88839621920457,\"sal\":1224,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4HRfhxi\",\"mor\":100,\"hap\":99.99807214521103,\"ene\":99.99807214521103,\"int\":93,\"cha\":88,\"exp\":239.27499999947943,\"cre\":73,\"eff\":89,\"sal\":1230,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Va58QZb\",\"mor\":100,\"hap\":99.99763560319653,\"ene\":99.99763560319653,\"int\":92,\"cha\":96,\"exp\":236.27499999949364,\"cre\":95,\"eff\":96,\"sal\":1329,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NflyWlP\",\"mor\":100,\"hap\":99.99875483151277,\"ene\":99.99875483151277,\"int\":55,\"cha\":61,\"exp\":250.2749999994273,\"cre\":98,\"eff\":70,\"sal\":1086,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u6hd2yV\",\"mor\":100,\"hap\":99.99710056728688,\"ene\":99.99710056728688,\"int\":90,\"cha\":96,\"exp\":237.6229999994867,\"cre\":68,\"eff\":51,\"sal\":1155,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wP5I4d3\",\"mor\":100,\"hap\":99.99785587971472,\"ene\":99.99785587971472,\"int\":97,\"cha\":88,\"exp\":245.6229999994488,\"cre\":67,\"eff\":84,\"sal\":1272,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zLIxguW\",\"mor\":100,\"hap\":99.99853382247073,\"ene\":99.99853382247073,\"int\":55,\"cha\":90,\"exp\":222.62299999955775,\"cre\":54,\"eff\":65,\"sal\":987,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iwxnJB6\",\"mor\":100,\"hap\":99.9978191811307,\"ene\":99.9978191811307,\"int\":55,\"cha\":74,\"exp\":244.71599999945275,\"cre\":53,\"eff\":73,\"sal\":1053,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cO3vpVV\",\"mor\":100,\"hap\":99.99783856170552,\"ene\":99.99783856170552,\"int\":93,\"cha\":92,\"exp\":226.715999999538,\"cre\":73,\"eff\":67,\"sal\":1209,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1EOFDoP\",\"mor\":100,\"hap\":99.99910099245392,\"ene\":99.99910099245392,\"int\":64,\"cha\":74,\"exp\":216.7159999995854,\"cre\":51,\"eff\":62,\"sal\":957,\"loc\":\"\",\"pos\":\"Business\"}}],\"employeeProd\":{\"Operations\":2766.3542373273017,\"Engineer\":3346.552442405059,\"Business\":2336.569386498853,\"Management\":0,\"Research & Development\":0,\"total\":8449.476066231213,\"Unassigned\":0,\"Training\":0},\"loc\":\"Sector-12\",\"size\":15}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":1324970.0126701633,\"lastCycleExpenses\":465673.9287940239,\"thisCycleRevenue\":0,\"thisCycleExpenses\":580140,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":1405.5562903225807,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":118.1,\"loc\":\"Aevum\",\"size\":1500,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":71.46339083857669,\"dmdR\":[65,85],\"cmp\":49.32509250786514,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":59.05,\"sll\":0,\"prd\":-59.05,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1497.4885836592389,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":88.19081076061485,\"dmdR\":[80,99],\"cmp\":78.28586565279832,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":59.05,\"sll\":0,\"prd\":-59.05,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2289.724875078613,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":1180.516129032258,\"qlt\":196.14814938526118,\"dmd\":84.84239217797301,\"dmdR\":[70,90],\"cmp\":72.09839218765724,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":118.1,\"imp\":0,\"exp\":[{\"ind\":\"Agriculture Division\",\"city\":\"Sector-12\",\"amt\":\"MAX/2\"}],\"totalExp\":118.0516129032258,\"bCost\":3273.6200157529333,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":1180.516129032258,\"qlt\":196.14814938526118,\"dmd\":69.77153563128394,\"dmdR\":[20,90],\"cmp\":40.574075972147966,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":118.1,\"imp\":0,\"exp\":[{\"ind\":\"Agriculture Division\",\"city\":\"Sector-12\",\"amt\":\"MAX/2\"}],\"totalExp\":118.0516129032258,\"bCost\":4479.690956734599,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.1252903043445,\"dmdR\":[80,90],\"cmp\":73.52218078685941,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7252.506864046223,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":107367.72795065014,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":92.73822762427149,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16896.686278361718,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":262223,\"qlt\":0,\"dmd\":36.736502789386876,\"dmdR\":[5,99],\"cmp\":37.127774198526275,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":323319.5674722068,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":9,\"sizeUsed\":1349.9642542972206,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Chongqing\",\"size\":1350,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":531,\"qlt\":0,\"dmd\":81.33737977322016,\"dmdR\":[65,85],\"cmp\":52.989273622283335,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1582.4784234284143,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":531,\"qlt\":0,\"dmd\":98.46361721355117,\"dmdR\":[80,99],\"cmp\":70.84028037260006,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2283.779753127799,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":15846.928178715258,\"qlt\":141.12255242749796,\"dmd\":84.52538235901683,\"dmdR\":[70,90],\"cmp\":43.91187975980032,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6661.053475379445,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":15846.928178715258,\"qlt\":141.12255242749796,\"dmd\":48.765127221794536,\"dmdR\":[20,90],\"cmp\":65.47455732862937,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3053.5825694185028,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":82.15338686302253,\"dmdR\":[80,90],\"cmp\":89.67085021551604,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8894.288663679577,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":64020.27438926195,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":86.48992709236492,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":21353.85848329109,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":10070,\"qlt\":0,\"dmd\":72.28600278648858,\"dmdR\":[5,99],\"cmp\":57.86601899247084,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74824.27227200949,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":2761.756205762435,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":110.1,\"loc\":\"Sector-12\",\"size\":2850,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":78.6382658963258,\"dmdR\":[65,85],\"cmp\":51.64985993532021,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":54.85,\"sll\":0,\"prd\":-54.85,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1328.2240829140171,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":81.85379410430731,\"dmdR\":[80,99],\"cmp\":93.47747246539456,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":54.85,\"sll\":0,\"prd\":-54.85,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2026.8346965855937,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":1180.516129032258,\"qlt\":196.14814938526118,\"dmd\":89.35677413750038,\"dmdR\":[70,90],\"cmp\":65.52938166126263,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":227.7032258064516,\"prd\":109.7,\"imp\":118.0516129032258,\"exp\":[],\"totalExp\":0,\"bCost\":4833.54109891758,\"sCost\":\"MP+10\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":1180.516129032258,\"qlt\":196.14814938526118,\"dmd\":25.73473265904279,\"dmdR\":[20,90],\"cmp\":66.55388713255749,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":227.7032258064516,\"prd\":109.7,\"imp\":118.0516129032258,\"exp\":[],\"totalExp\":0,\"bCost\":934.9662270491077,\"sCost\":\"MP+10\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.19681562370958,\"dmdR\":[80,90],\"cmp\":67.97485224739901,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11218.154694839748,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":24091.708521034147,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":212.89915439854164,\"qlt\":0,\"dmd\":94.90715552426842,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0.31392304492361994,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":27127.133224196397,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":529205,\"qlt\":0,\"dmd\":20.545409540741474,\"dmdR\":[5,99],\"cmp\":25.606072690177967,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":317584.1809289187,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":3538593574.4408865,\"revenue\":1324970.0126701633,\"expenses\":465673.9287940239,\"fundingRound\":4,\"public\":true,\"totalShares\":1560000000,\"numShares\":106300000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":51700000,\"sharePrice\":14.371238322663013,\"storedCycles\":21273,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":1}},\"unlockUpgrades\":[1,1,1,1,1,0,0,0,0],\"upgrades\":[5,5,2,2,3,10,5,11,10,2],\"upgradeMultipliers\":[1.15,1.5,1.002,1.01,1.3,2,1.5,2.1,1.1,1.1]}},\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":3,\"lastUpdate\":1644009622854,\"totalPlaytime\":3790130800,\"playtimeSinceLastAug\":103339600,\"playtimeSinceLastBitnode\":1216033000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-61363104,\"codingcontract\":1012500000,\"corporation\":0,\"crime\":121023553.53153011,\"gang\":0,\"hacking\":98622875.07048523,\"hacknet\":8204694521.223329,\"hacknet_expenses\":-2785424643.474891,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-18617788.7466566,\"total\":52135106.39196097,\"work\":16839289.70859988,\"servers\":-6536139596.8,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-230422752,\"codingcontract\":17925000000,\"corporation\":-40948920.07793427,\"crime\":1519386048.0000436,\"gang\":0,\"hacking\":681257956.4143745,\"hacknet\":13204414389.148766,\"hacknet_expenses\":-4211336003.808964,\"hospitalization\":-1745591.1844155397,\"infiltration\":39818848.72757816,\"sleeves\":0,\"stock\":-1022022271.4204298,\"total\":127183346.65706693,\"work\":96927865.73083544,\"servers\":-18455011522.331284,\"other\":-2168427990.645193,\"augmentations\":-7209706709.534941}},\"scriptProdSinceLastAug\":91605063,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641675126871},{\"ID\":\"NITESEC\",\"unlockedOn\":1641675126890},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641675126893},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641675126897},{\"ID\":\"SF1.1\",\"unlockedOn\":1641675126901},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641675126906},{\"ID\":\"NS2\",\"unlockedOn\":1641675126910},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641675126915},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641675126920},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641675126925},{\"ID\":\"TOR\",\"unlockedOn\":1641675126930},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641675126934},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641683001577},{\"ID\":\"WORKOUT\",\"unlockedOn\":1641683661513},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641699444909},{\"ID\":\"N00DLES\",\"unlockedOn\":1641699444911},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641711726317},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641713166320},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641748014946},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641858253775},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641872767788},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641941669460},{\"ID\":\"4S\",\"unlockedOn\":1641943349663},{\"ID\":\"DONATION\",\"unlockedOn\":1642017508846},{\"ID\":\"FROZE\",\"unlockedOn\":1642193609462},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1642523664057},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642573834102},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642619100874},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642634100595},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642697584734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642717768356},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642723230131},{\"ID\":\"SF4.1\",\"unlockedOn\":1642793617209},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642793617217},{\"ID\":\"CORPORATION\",\"unlockedOn\":1642881865050}],\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"98.8.9.1\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"ramUsed\":1023.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":546.8099999999874,\"pid\":888,\"ramUsage\":15.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///c732b782-2623-41b9-bbf8-0d7c79f0153b\",\"moduleSequenceNumber\":250},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///18a5ec6c-0e8e-4d95-813e-0ebf24285f9f\",\"moduleSequenceNumber\":219},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///40e807e7-9f0f-4103-a7b0-0f60520352a2\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///50cf4429-6290-4b81-87db-2bdaa48f3c5b\",\"moduleSequenceNumber\":239},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///c3638442-923d-4afc-ad34-e944bf44065b\",\"moduleSequenceNumber\":221},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///3d0c84f1-61d3-4534-a906-2210e657503a\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///5489208f-7330-40d0-af88-42e527328aea\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///9e8f3743-aadf-4f8d-a406-a6ad8bdc0392\",\"moduleSequenceNumber\":220},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///e9b8c35f-10c6-4107-87f5-71fa12afe2de\",\"moduleSequenceNumber\":424}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10960,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":576,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7bcb412b-985c-46d0-a83e-2b7c1f331300\",\"moduleSequenceNumber\":425}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DEFAULT_PORT, LOCALHOST_PREFIX } from '/utils/misc.js';\\n\\nconst GITHUB_SCRIPTS_FOLDER =\\n  'https://raw.githubusercontent.com/phantomesse/bitburner/master/';\\nconst SCRIPTS_TXT = 'scripts.txt';\\n\\n/**\\n * Copy this file to the bitburner game to sync the rest of the scripts:\\n *\\n * ```\\n * wget https://raw.githubusercontent.com/phantomesse/bitburner/main/scripts/sync.js sync.js\\n * ```\\n *\\n * @example run sync.js <port>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  let port = ns.args[0];\\n  port = typeof port !== 'number' ? DEFAULT_PORT : port;\\n\\n  // Check if local server is running and set scripts prefix accordingly.\\n  let scriptsPrefix;\\n  try {\\n    scriptsPrefix = `${LOCALHOST_PREFIX}:${port}/`;\\n    await fetch(scriptsPrefix + SCRIPTS_TXT);\\n    ns.tprint('syncing to local server');\\n  } catch (_) {\\n    ns.tprint('no local server running, so syncing from github');\\n    scriptsPrefix = GITHUB_SCRIPTS_FOLDER;\\n  }\\n\\n  // Get list of scripts to download and download each script.\\n  let currentScripts = await getScripts(scriptsPrefix);\\n  for await (const script of currentScripts) {\\n    await script.download(ns, scriptsPrefix);\\n  }\\n\\n  // Watch for any changes in scripts every second and download newer copies.\\n  while (true) {\\n    let latestScripts = await getScripts(scriptsPrefix);\\n    for await (const latestScript of latestScripts) {\\n      const currentScript = currentScripts.find(\\n        script => script.fileName === latestScript.fileName\\n      );\\n      if (\\n        currentScript === undefined ||\\n        latestScript.lastModifiedTime !== currentScript.lastModifiedTime\\n      ) {\\n        await latestScript.download(ns, scriptsPrefix);\\n      }\\n    }\\n\\n    // Delete any files that were in the current scripts but are not in the\\n    // latest scripts.\\n    for await (const currentScript of currentScripts) {\\n      const latestScript = latestScripts.find(\\n        script => script.fileName === currentScript.fileName\\n      );\\n      if (latestScript === undefined) {\\n        ns.rm(currentScript.fileName);\\n        ns.tprint(`removed ${currentScript.fileName}`);\\n      }\\n    }\\n\\n    currentScripts = latestScripts;\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\nclass Script {\\n  /**\\n   * @param {string} fileName,\\n   * @param {number} lastModifiedTime\\n   */\\n  constructor(fileName, lastModifiedTime) {\\n    this.fileName = fileName;\\n    this.lastModifiedTime = lastModifiedTime;\\n  }\\n\\n  /**\\n   * @param {import('index').NS } ns\\n   * @param {string} scriptsPrefix\\n   */\\n  async download(ns, scriptsPrefix) {\\n    const contents = await getFileContents(scriptsPrefix, this.fileName);\\n    await ns.write('/' + this.fileName, contents, 'w');\\n    ns.tprint(`downloaded ${this.fileName}`);\\n  }\\n}\\n\\n/** @param {string} scriptsPrefix */\\nasync function getScripts(scriptsPrefix) {\\n  return (await getFileContents(scriptsPrefix, SCRIPTS_TXT))\\n    .split('\\\\n')\\n    .map(line => line.split('\\\\t'))\\n    .map(args => new Script(args[0], parseFloat(args[1])));\\n}\\n\\n/**\\n * @param {string} scriptsPrefix\\n * @param {string} fileName\\n */\\nasync function getFileContents(scriptsPrefix, fileName) {\\n  const response = await fetch(scriptsPrefix + 'scripts/' + fileName);\\n  return await response.text();\\n}\\n\",\"filename\":\"sync.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///dd7fb959-cceb-4e3c-9b14-4a8133c2f8b5\",\"moduleSequenceNumber\":598377},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///b4ce7e76-ea18-4e22-a413-b6b336426a39\",\"moduleSequenceNumber\":598394},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e4b18378-ed90-4d91-b201-6528d2b3c997\",\"moduleSequenceNumber\":598376},{\"filename\":\"sync.js\",\"url\":\"blob:file:///303ec601-0ce0-43af-8b3c-98d248200e75\",\"moduleSequenceNumber\":772465}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":212,\"_hash\":\"5ee6ae55677672bee2cba1d9c424dc6b1eb1f013e7ebc3f7f8c6be059cfad9e8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend } from '/utils/misc.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['sleep', 'getServerMoneyAvailable'];\\n\\n/**\\n * Manages buying and upgrading hacknet nodes.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    // Buy new nodes if we can.\\n    const moneyToSpend = getMoneyToSpend(ns);\\n    let nodesPurchased = 0;\\n    while (ns.hacknet.getPurchaseNodeCost() < moneyToSpend) {\\n      if (ns.hacknet.purchaseNode() === -1) break;\\n      nodesPurchased++;\\n    }\\n    if (nodesPurchased > 0) {\\n      ns.print(`purchased ${nodesPurchased} new hacknet nodes`);\\n    }\\n\\n    // Upgrade nodes.\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      // Upgrade cores.\\n      const coresUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getCoreUpgradeCost,\\n        ns.hacknet.upgradeCore\\n      );\\n      if (coresUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} cores ${coresUpgraded} times`);\\n      }\\n\\n      // Upgrade RAM.\\n      const ramUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getRamUpgradeCost,\\n        ns.hacknet.upgradeRam\\n      );\\n      if (ramUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} RAM ${ramUpgraded} times`);\\n      }\\n\\n      // Upgrade level.\\n      const levelsUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getLevelUpgradeCost,\\n        ns.hacknet.upgradeLevel\\n      );\\n      if (levelsUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} levels ${levelsUpgraded} times`);\\n      }\\n\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\\n\\n/**\\n * Calculates the cost of upgrading an aspect of a node.\\n *\\n * @callback UpgradeCostFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {number} cost of upgrade\\n */\\n\\n/**\\n * Upgrades an aspect of a node.\\n *\\n * @callback UpgradeFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {boolean} whether the upgrade was successful\\n */\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {number} nodeIndex\\n * @param {UpgradeCostFn} getUpgradeCostFn\\n * @param {UpgradeFn} upgradeFn\\n * @returns {number} number of upgrades successful\\n */\\nfunction upgrade(ns, nodeIndex, getUpgradeCostFn, upgradeFn) {\\n  const moneyToSpend = getMoneyToSpend(ns);\\n  let upgradeCount = 0;\\n  while (getUpgradeCostFn(nodeIndex, ++upgradeCount) < moneyToSpend);\\n  if (upgradeCount === 0) return 0;\\n  return upgradeFn(nodeIndex, upgradeCount) ? upgradeCount : 0;\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///30610993-3ebe-43bc-8717-69e426ed9e87\",\"moduleSequenceNumber\":1328474},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///00687eae-d439-48a2-9f2d-80c751a4399a\",\"moduleSequenceNumber\":1328491},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///4105eda2-36f0-46c3-91b7-4ffaf1e30708\",\"moduleSequenceNumber\":1328473},{\"filename\":\"manage-hacknet.js\",\"url\":\"blob:file:///61e10db7-afa7-41fe-9b30-0708c0ac7e65\",\"moduleSequenceNumber\":1328606}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":213,\"_hash\":\"668ac2cd1df76bb0088f74b8f2ead30c105c850c694e5ac5a35293a6f5eaca8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7bcb412b-985c-46d0-a83e-2b7c1f331300\",\"moduleSequenceNumber\":425}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":425,\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///02945be1-17a1-4f65-8ca1-d3d3bc682b77\",\"moduleSequenceNumber\":1354537}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":215,\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///2f16de2b-55ce-469d-9112-97078c72dce0\",\"moduleSequenceNumber\":1328699}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":216,\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MANAGE_SERVERS_TO_MANAGE_HACKING_PORT } from '/utils/ports.js';\\nimport { getMoneyToSpend, sort } from '/utils/misc.js';\\nimport { PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\nimport { formatNumber } from '/utils/format.js';\\n\\nconst MIN_POWER = 3; // Min RAM that we want is at least 8GB\\nconst MAX_POWER = 20; // Max RAM is 2^20\\n\\n/**\\n * Continuously try to buy more servers and sells any old servers with less RAM\\n * than we could get with a new server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  const purchasedServerLimit = ns.getPurchasedServerLimit();\\n  let lowestRamAcceptable = Math.pow(2, MIN_POWER);\\n\\n  while (true) {\\n    // Buy / upgrade servers.\\n    for (let power = MAX_POWER; power >= MIN_POWER; power--) {\\n      const ram = Math.pow(2, power);\\n      if (ram < lowestRamAcceptable) continue;\\n      const cost = ns.getPurchasedServerCost(ram);\\n      if (getMoneyToSpend(ns) < cost) continue;\\n\\n      // Delete lowest RAM server if over server limit.\\n      if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n        const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n        const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n        if (ram <= lowestRam) continue;\\n        ns.killall(lowestRamServerName);\\n        if (ns.deleteServer(lowestRamServerName)) {\\n          ns.toast(\\n            `deleted server ${lowestRamServerName} which had ${lowestRam}GB RAM`\\n          );\\n          await ns.writePort(\\n            MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n            JSON.stringify({ remove: lowestRamServerName })\\n          );\\n        }\\n      }\\n\\n      // Buy server.\\n      const server = ns.purchaseServer(PURCHASED_SERVER_PREFIX, ram);\\n      if (server !== '') {\\n        ns.toast(`bought server (${server}) with ${formatNumber(ram)}GB RAM`);\\n        await ns.writePort(\\n          MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n          JSON.stringify({ add: server })\\n        );\\n\\n        // Update lowest RAM acceptable.\\n        if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n          const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n          const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n          if (lowestRam > lowestRamAcceptable) {\\n            lowestRamAcceptable = lowestRam;\\n            ns.toast(`now only buying servers >= ${lowestRamAcceptable}GB RAM`);\\n          }\\n        }\\n      }\\n    }\\n\\n    // Wait 30 seconds before buying another server.\\n    await ns.sleep(1000 * 30);\\n  }\\n}\\n\\nfunction getPurchasedServerNames(ns) {\\n  return ns\\n    .scan()\\n    .filter(serverName => serverName.startsWith(PURCHASED_SERVER_PREFIX));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getLowestRamPurchasedServer(ns) {\\n  const purchasedServerNames = getPurchasedServerNames(ns);\\n  sort(purchasedServerNames, ns.getServerMaxRam);\\n  return purchasedServerNames[0];\\n}\\n\",\"filename\":\"manage-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///8008748f-b2f2-44ee-ae6e-f7c2a2323328\",\"moduleSequenceNumber\":219},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///3621cf38-df7d-4e29-8b2f-e45470529c25\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///69f3e89f-87e3-4d5e-923c-93aeb910ff40\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///3818a952-0c88-4188-b5c5-daf17c634b9b\",\"moduleSequenceNumber\":239},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///efffdafa-0b77-4c8d-ab17-38a83f58e55b\",\"moduleSequenceNumber\":221},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///44d0fbc1-4f9b-479c-b70e-e48483811948\",\"moduleSequenceNumber\":250},{\"filename\":\"manage-servers.js\",\"url\":\"blob:file:///e4801e7a-ff3a-473e-9689-fe1f950d17c8\",\"moduleSequenceNumber\":423}],\"dependents\":[],\"ramUsage\":7.25,\"server\":\"home\",\"moduleSequenceNumber\":423,\"_hash\":\"f350c6b09307105977aa72deb76168265bd2f2bdcd8bcb3f1c1736e2cb7ea5d2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend, getNetWorth, sort } from '/utils/misc.js';\\nimport { formatMoney, formatPercent } from '/utils/format.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { getForecast } from './utils/stock';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  NULL_PORT_DATA,\\n} from './utils/ports';\\nimport { getStockSymbol } from './utils/organizations';\\n\\nconst COMMISSION_FEE = 100000;\\nconst PERCENT_OF_NET_WORTH_IN_STOCK = 0.99;\\n\\n/**\\n * Manages buying and selling stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols;\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    // No stock exchange API.\\n    return;\\n  }\\n\\n  while (true) {\\n    const manageHackingMessage = ns.readPort(\\n      MANAGE_HACKING_TO_MANAGE_STOCKS_PORT\\n    );\\n    if (manageHackingMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageHackingMessage);\\n      if (response.buy) {\\n        const symbol = getStockSymbol(response.buy);\\n        if (symbol !== undefined) {\\n          buyStock(ns, symbol, ns.getServerMoneyAvailable(HOME_SERVER_NAME));\\n        }\\n      }\\n      if (response.sell) {\\n        const symbol = getStockSymbol(response.sell);\\n        if (symbol !== undefined) sellStock(ns, symbol);\\n      }\\n    }\\n\\n    const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n    const netWorth = getNetWorth(ns);\\n    if (cash / netWorth < 1 - PERCENT_OF_NET_WORTH_IN_STOCK) {\\n      ns.print(\\n        `\\\\nnot buying any stock because we want only ${formatPercent(\\n          PERCENT_OF_NET_WORTH_IN_STOCK\\n        )} of our net worth in stocks and we currently have ${formatMoney(\\n          cash,\\n          true\\n        )} in cash which is ${formatPercent(\\n          cash / netWorth\\n        )} of our net worth (${formatMoney(netWorth, true)})`\\n      );\\n    } else {\\n      // Sort stock symbols sorted from lowest to highest ask price and buy stock\\n      // starting with the cheapest stock.\\n      let moneyToSpend = cash - (1 - PERCENT_OF_NET_WORTH_IN_STOCK) * netWorth;\\n      ns.print(`\\\\ncan spend ${formatMoney(moneyToSpend)}`);\\n      sort(symbols, ns.stock.getAskPrice);\\n      for (const symbol of symbols) {\\n        if (moneyToSpend <= COMMISSION_FEE) break;\\n        moneyToSpend -= buyStock(ns, symbol, moneyToSpend);\\n      }\\n    }\\n\\n    // Sort stock symbols sorted from highest to lowest bid price and sell stock\\n    // starting at the most expensive stock.\\n    sort(symbols, ns.stock.getBidPrice);\\n    for (const symbol of symbols) sellStock(ns, symbol);\\n\\n    await ns.sleep(6000); // Sleep for 6 seconds.\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n * @param {number} moneyToSpend\\n * @returns {number} how much we spent\\n */\\nfunction buyStock(ns, symbol, moneyToSpend) {\\n  const ownedShareCount = ns.stock.getPosition(symbol)[0];\\n  let sharesToBuy = Math.min(\\n    Math.floor((moneyToSpend - COMMISSION_FEE) / ns.stock.getAskPrice(symbol)),\\n    ns.stock.getMaxShares(symbol) - ownedShareCount\\n  );\\n  if (sharesToBuy <= 0) return 0;\\n\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast < 0.5) return 0;\\n  sharesToBuy = Math.ceil(forecast * sharesToBuy);\\n\\n  const sharePrice = ns.stock.buy(symbol, sharesToBuy);\\n  ns.print(\\n    `bought ${sharesToBuy} shares of ${symbol} at ${formatMoney(sharePrice)}`\\n  );\\n\\n  return sharePrice * sharesToBuy + COMMISSION_FEE;\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n */\\nfunction sellStock(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  const ownedShareCount = position[0];\\n  if (ownedShareCount === 0) return; // Nothing to sell.\\n\\n  // Panic sell.\\n  if (getForecast(ns, symbol) < 0.15) {\\n    const sharesToSell = ns.stock.getPosition(symbol)[0];\\n    ns.stock.sell(symbol, sharesToSell);\\n    ns.print(`panic sold ${sharesToSell} shares of ${symbol}`);\\n  }\\n\\n  const ownedAvgSharePrice = position[1];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  if (bidPrice < ownedAvgSharePrice) return; // We won't make a profit.\\n\\n  // Determine how much to sell.\\n  let sharesToSell = ownedShareCount;\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast > 0.5) return; // Stock will go up.\\n  sharesToSell = Math.ceil((forecast / 0.5) * sharesToSell);\\n\\n  if (sharesToSell === 0) return; // Nothing to sell.\\n  const gain = ns.stock.getSaleGain(symbol, sharesToSell, 'Long');\\n  const profit =\\n    (gain - ownedAvgSharePrice * ownedShareCount) /\\n    (ownedAvgSharePrice * ownedShareCount);\\n  if (profit < 0) return; // We won't make a profit.\\n\\n  const sharePrice = ns.stock.sell(symbol, sharesToSell);\\n  ns.print(\\n    `sold ${sharesToSell} shares of ${symbol} at ${formatMoney(\\n      sharePrice\\n    )} with profit of ${formatPercent(profit)}`\\n  );\\n}\\n\",\"filename\":\"manage-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///ec2baacc-4427-4f3d-b20c-9c6d8464e212\",\"moduleSequenceNumber\":194067},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///7db555f0-857b-4fca-95ce-66e2b3d99586\",\"moduleSequenceNumber\":194054},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":194023},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":194025},{\"filename\":\"manage-stocks.js\",\"url\":\"blob:file:///909605be-8d0e-4a10-a6c4-4cdf59ae3426\",\"moduleSequenceNumber\":194077}],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":218,\"_hash\":\"67967b49a7dd161625c2ca1d07c8a3ec6672b5d5e4a116564c6417dbd84ce857\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for formatting numbers. */\\n\\n/**\\n * @param {number} money\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatMoney(money, isCompact) {\\n  return money.toLocaleString('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n    notation: isCompact ? 'compact' : 'standard',\\n  });\\n}\\n\\n/**\\n * @param {number} number\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatNumber(number, isCompact) {\\n  return Intl.NumberFormat('en', {\\n    notation: isCompact ? 'compact' : 'standard',\\n  }).format(number);\\n}\\n\\n/**\\n * Formats a percentage within two decimals.\\n *\\n * @param {number} percent\\n * @returns {string}\\n */\\nexport function formatPercent(percent) {\\n  return (percent * 100).toFixed(2) + '%';\\n}\\n\\n/**\\n * Formats time with minutes and seconds.\\n *\\n * @param {number} timeMs\\n * @returns {string} e.g. \\\"43s\\\", \\\"4m 0s\\\", \\\"3m 32s\\\"\\n */\\nexport function formatTime(timeMs) {\\n  const hours = Math.floor(timeMs / 1000 / 60 / 60);\\n  const minutes = Math.floor((timeMs - hours * 1000 * 60 * 60) / 1000 / 60);\\n  const seconds = Math.floor(\\n    (timeMs - hours * 1000 * 60 * 60 - minutes * 1000 * 60) / 1000\\n  );\\n  return (\\n    (hours > 0 ? `${formatNumber(hours)}h ` : '') +\\n    (minutes > 0 ? `${minutes}m ` : '') +\\n    `${seconds}s`\\n  );\\n}\\n\",\"filename\":\"/utils/format.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":219,\"_hash\":\"2edf8f46ea83666c8efabac9644a7a57ba8e7523e911340efe3b90ab61e64391\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for hacking servers. */\\nimport { HOME_SERVER_NAME, PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\n\\nexport const GROW_SCRIPT = 'grow.js';\\nexport const WEAKEN_SCRIPT = 'weaken.js';\\nexport const HACK_SCRIPT = 'hack.js';\\n\\n/**\\n * Returns whether a server is hackable.\\n *\\n * Note that we are using {@link PURCHASED_SERVER_PREFIX} instead of getting the\\n * purchased servers list here in order to save on 2.25GB of RAM. This requires\\n * that all purchased servers have the same prefix.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if the server is hackable, false if otherwise\\n */\\nexport function isHackable(ns, serverName) {\\n  return (\\n    serverName !== HOME_SERVER_NAME &&\\n    !serverName.startsWith(PURCHASED_SERVER_PREFIX) &&\\n    ns.getServerMaxMoney(serverName) > 0 &&\\n    ns.hasRootAccess(serverName) &&\\n    ns.getServerRequiredHackingLevel(serverName) <= ns.getHackingLevel()\\n  );\\n}\\n\\n/**\\n * A heuristic that determines how hackable a server is.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {number} higher number means better to hack\\n */\\nexport function getHackingHeuristic(ns, serverName) {\\n  let heuristic =\\n    (ns.hackAnalyzeChance(serverName) *\\n      ns.hackAnalyze(serverName) *\\n      ns.getServerMoneyAvailable(serverName)) /\\n    ns.getHackTime(serverName);\\n  try {\\n    heuristic *= ns.formulas.hacking.hackExp(\\n      ns.getServer(serverName),\\n      ns.getPlayer()\\n    );\\n  } catch (_) {}\\n  return heuristic;\\n}\\n\",\"filename\":\"/utils/hacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":220,\"_hash\":\"2d9501a3638029920ab5ffd79a6b08672381d1fe45b026e1ffd907c16c0926a1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Miscellaneous utils that don't fit anywhere else. */\\n\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nexport const DEFAULT_PORT = 1337;\\nexport const LOCALHOST_PREFIX = 'http://localhost';\\n\\n/**\\n * Sorts an array given a function to call on each item of the array.\\n *\\n * @param {any[]} array\\n * @param {} fn\\n * @param {boolean} [reverse=false]\\n */\\nexport function sort(array, fn, reverse) {\\n  array.sort((a, b) => {\\n    const first = fn(reverse ? b : a);\\n    const second = fn(reverse ? a : b);\\n    if (typeof first === 'string') return first.localeCompare(second);\\n    return first - second;\\n  });\\n}\\n\\n/**\\n * This function allows us to reserve a certain amount of money so we don't end\\n * up spending all our money buying things.\\n *\\n * @param {import('../index').NS} ns\\n * @returns {number} money that we want to spend purchasing things\\n */\\nexport function getMoneyToSpend(ns) {\\n  return ns.getServerMoneyAvailable(HOME_SERVER_NAME) / 2;\\n}\\n\\n/**\\n * @param {import ('../index').NS} ns\\n * @returns {number} net worth including cash on hand and stocks\\n */\\nexport function getNetWorth(ns) {\\n  return (\\n    ns.getServerMoneyAvailable(HOME_SERVER_NAME) +\\n    ns.stock\\n      .getSymbols()\\n      .map(symbol => getStockWorth(ns, symbol))\\n      .reduce((a, b) => a + b)\\n  );\\n}\\n\",\"filename\":\"/utils/misc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///a6fdad3e-cbfd-48f7-95e8-e667a743adc9\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ee932550-e5cb-49f2-946d-d8811d6ec59e\"}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":221,\"_hash\":\"a71eedebfa90df311ceefaf82c6ce1d055029652c90e0fe55f02aaa7e4ea25b3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for servers. */\\n\\nexport const HOME_SERVER_NAME = 'home';\\nexport const PURCHASED_SERVER_PREFIX = 'lauren';\\n\\n/**\\n * Retrieves all servers including personal servers and {@link HOME_SERVER_NAME}.\\n *\\n * @example getAllServers(ns)\\n * @param {import('../index').NS } ns\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} names of all servers including {@link HOME_SERVER_NAME}\\n */\\nexport function getAllServerNames(ns, root, parent) {\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  const servers = [...children];\\n  for (const child of children) {\\n    servers.push(...getAllServerNames(ns, child, root));\\n  }\\n  return [...new Set(servers)];\\n}\\n\\n/**\\n * Gets the connection path to a server.\\n *\\n * @example getPath(ns, 'silver-helix')\\n * @param {import('../index').NS} ns\\n * @param {string} server server to get path to\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} connection to server where the last item is the name of\\n *                     the server to get the path to (e.g. if the server is\\n *                     silver-helix, then the path is\\n *                     [\\\"foodnstuff\\\",\\\"zer0\\\",\\\"silver-helix\\\"])\\n */\\nexport function getPath(ns, server, root, parent) {\\n  if (parent === undefined) parent = 'home';\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  if (children.includes(server)) return [server];\\n  for (const child of children) {\\n    const path = getPath(ns, server, child, root);\\n    if (path.length > 0) return [child, ...path];\\n  }\\n  return [];\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(getPath(ns, 'silver-helix'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string} serverName\\n * @returns {number} GB of free RAM\\n */\\nexport function getFreeRam(ns, serverName) {\\n  if (!ns.hasRootAccess(serverName)) return 0;\\n  return ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n}\\n\",\"filename\":\"/utils/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":222,\"_hash\":\"5603a4f076bf668e39a9034a9b798647098b43f88cb67cc832bc04883a931d18\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPTS_TO_RUN = [\\n  'sync.js',\\n  'manage-hacking.js',\\n  'manage-hacknet.js',\\n  'manage-life.js',\\n  'manage-programs.js',\\n  'manage-servers.js',\\n  'manage-stocks.js',\\n];\\n\\n/**\\n * Script that starts up all managing scripts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport const main = ns => SCRIPTS_TO_RUN.forEach(script => ns.run(script, 1));\\n\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///1eee4e65-1f66-4bb0-bf6d-dc1e78bd978d\",\"moduleSequenceNumber\":194070}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":223,\"_hash\":\"f618d19def433b5f4dcaf46df1a7c615406da84ef4d0238170aa1517a75fdfc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  GROW_SCRIPT,\\n  WEAKEN_SCRIPT,\\n  HACK_SCRIPT,\\n  getHackingHeuristic,\\n  isHackable,\\n} from '/utils/hacking.js';\\nimport { HOME_SERVER_NAME, getAllServerNames } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n  NULL_PORT_DATA,\\n} from '/utils/ports.js';\\n\\nconst HACKING_SCRIPTS = [GROW_SCRIPT, WEAKEN_SCRIPT, HACK_SCRIPT];\\nconst MIN_HACK_CHANCE = 0.6;\\nconst MIN_AVAILABLE_MONEY = 5000000;\\n\\nlet homeReservedRam;\\n\\n/**\\n * Manages hacking servers.\\n *\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  homeReservedRam = ns.args[0];\\n  ns.disableLog('ALL');\\n\\n  let allServerNames = getAllServerNames(ns);\\n\\n  while (true) {\\n    // Update all server names based on servers that we've added or deleted from\\n    // the manage-servers.js script.\\n    const manageServersMessage = ns.readPort(\\n      MANAGE_SERVERS_TO_MANAGE_HACKING_PORT\\n    );\\n    if (manageServersMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageServersMessage);\\n      if (response.add && !allServerNames.includes(response.add)) {\\n        allServerNames.push(response.add);\\n      }\\n      if (response.remove && allServerNames.includes(response.remove)) {\\n        allServerNames = allServerNames.filter(\\n          serverName => serverName !== response.remove\\n        );\\n      }\\n    }\\n\\n    // Get all servers where we have root access including home.\\n    const rootAccessServerNames = allServerNames.filter(serverName =>\\n      gainRootAccess(ns, serverName)\\n    );\\n\\n    // Copy scripts to every root access server.\\n    for await (const serverName of rootAccessServerNames) {\\n      if (serverName === HOME_SERVER_NAME) continue;\\n      await copyScriptsToServer(ns, serverName);\\n    }\\n\\n    // Check if we have any free RAM to do anything.\\n    if (!hasFreeRam(ns, rootAccessServerNames)) continue;\\n\\n    // Get hackable servers sorted by hacking heuristic.\\n    const hackableServerNames = rootAccessServerNames.filter(serverName =>\\n      isHackable(ns, serverName)\\n    );\\n    sort(\\n      hackableServerNames,\\n      serverName => getHackingHeuristic(ns, serverName),\\n      true\\n    );\\n\\n    // Grow, weaken, and hack.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Tell the manage-stock script to sell if we are close to maxing out the\\n      // server's money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney / maxMoney > 0.99) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ sell: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-growing the server.\\n      if (availableMoney === maxMoney) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          GROW_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} reached max money; killed ` +\\n            `${killedServerCount} servers that were still trying to grow`\\n        );\\n      }\\n\\n      // Grow the server until MIN_AVAILABLE_MONEY.\\n      if (availableMoney < MIN_AVAILABLE_MONEY) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(MIN_AVAILABLE_MONEY)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames, MIN_AVAILABLE_MONEY);\\n      }\\n\\n      // Check that we are not over-weakening the server.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (hackChance === 1 || securityLevel === minSecurityLevel) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          WEAKEN_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached min security; killed ` +\\n            `${killedServerCount} servers that were still trying to weaken`\\n        );\\n      }\\n\\n      // Weaken the server until MIN_HACK_CHANCE or until lowest security level.\\n      if (hackChance < MIN_HACK_CHANCE && securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${formatPercent(\\n            hackChance\\n          )} to ${formatPercent(MIN_HACK_CHANCE)} hack chance`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Tell the manage-stock script to buy if we are close to hacking all of\\n      // the target server's money.\\n      if (availableMoney / maxMoney < 0.01) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ buy: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-hacking the server.\\n      if (availableMoney === 0) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          HACK_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached $0; killed ` +\\n            `${killedServerCount} servers that were still trying to hack`\\n        );\\n      }\\n\\n      // Hack the server if server has MIN_AVAILABLE_MONEY and MIN_HACK_CHANCE.\\n      if (\\n        availableMoney >= MIN_AVAILABLE_MONEY &&\\n        hackChance >= MIN_HACK_CHANCE\\n      ) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    // If we have any extra free RAM, grow and weaken hackable servers to the\\n    // max money and min security level.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Grow the server until max money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney < maxMoney) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(maxMoney)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Weaken the server until min security level.\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${securityLevel.toFixed(\\n            2\\n          )} to ${minSecurityLevel} security level`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Hack server that has >0% hack chance until no money.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      if (availableMoney > 0 && hackChance > 0) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    if (\\n      ns.fileExists('Formulas.exe') &&\\n      hasFreeRam(ns, rootAccessServerNames)\\n    ) {\\n      // Get server with the most hack exp.\\n      const hackableServerNamesSortedByHackExp = [...hackableServerNames];\\n      const player = ns.getPlayer();\\n      sort(\\n        hackableServerNamesSortedByHackExp,\\n        /** @type {string} */ serverName =>\\n          ns.formulas.hacking.hackExp(ns.getServer(serverName), player) /\\n          ns.getWeakenTime(serverName)\\n      );\\n      const targetServerName = hackableServerNamesSortedByHackExp[0];\\n\\n      for (const rootAccessServerName of rootAccessServerNames) {\\n        const threadCount = getAvailableThreadCount(\\n          ns,\\n          rootAccessServerName,\\n          WEAKEN_SCRIPT\\n        );\\n        if (threadCount === 0) continue;\\n        const pid = ns.exec(\\n          WEAKEN_SCRIPT,\\n          rootAccessServerName,\\n          threadCount,\\n          targetServerName,\\n          1\\n        );\\n        if (pid > 0) {\\n          ns.print(\\n            `weakening ${targetServerName} on ${rootAccessServerName} with ${formatNumber(\\n              threadCount\\n            )} threads`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(3000); // Wait for 3 seconds.\\n  }\\n}\\n\\n/**\\n * Open all the ports that we can open and attempt to gain root access to a\\n * given server.\\n *\\n * @param {import('index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if we now have root access and false if otherwise\\n */\\nfunction gainRootAccess(ns, serverName) {\\n  const server = ns.getServer(serverName);\\n\\n  // Attempt to open all ports even if we already have root access.\\n  if (ns.fileExists('BruteSSH.exe') && !server.sshPortOpen) {\\n    ns.brutessh(serverName);\\n  }\\n  if (ns.fileExists('FTPCrack.exe') && !server.ftpPortOpen) {\\n    ns.ftpcrack(serverName);\\n  }\\n  if (ns.fileExists('relaySMTP.exe') && !server.smtpPortOpen) {\\n    ns.relaysmtp(serverName);\\n  }\\n  if (ns.fileExists('HTTPWorm.exe') && !server.httpPortOpen) {\\n    ns.httpworm(serverName);\\n  }\\n  if (ns.fileExists('SQLInject.exe') && !server.sqlPortOpen) {\\n    ns.sqlinject(serverName);\\n  }\\n\\n  if (ns.hasRootAccess(serverName)) return true;\\n  try {\\n    ns.nuke(serverName);\\n  } catch (_) {\\n    return false;\\n  }\\n}\\n\\n/**\\n * Copies grow, hack, and weaken scripts to a given server and deletes any other\\n * js scripts from that server.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n */\\nasync function copyScriptsToServer(ns, serverName) {\\n  // Copy scripts over.\\n  await ns.scp(HACKING_SCRIPTS, HOME_SERVER_NAME, serverName);\\n\\n  // Delete any other scripts on the server.\\n  const otherScripts = ns\\n    .ls(serverName)\\n    .filter(\\n      script => script.endsWith('.js') && !HACKING_SCRIPTS.includes(script)\\n    );\\n  for (const script of otherScripts) ns.rm(script, serverName);\\n}\\n\\n/**\\n * Get amount of free RAM from list of servers or a single server.\\n *\\n * @param {import('index').NS} ns\\n * @param {(string[]|string)} serverNames\\n * @returns {number} GB of free RAM\\n */\\nfunction getFreeRam(ns, serverNames) {\\n  if (typeof serverNames === 'string') {\\n    // Return free RAM for a single server.\\n    const serverName = serverNames;\\n    const freeRam =\\n      ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n    if (serverName !== HOME_SERVER_NAME) return freeRam;\\n\\n    if (homeReservedRam !== undefined) {\\n      return Math.max(freeRam - homeReservedRam, 0);\\n    }\\n\\n    // If home server, make sure to reserve RAM to run other scripts.\\n    const scripts = ns\\n      .ls(HOME_SERVER_NAME)\\n      .filter(\\n        fileName => fileName.endsWith('.js') && !fileName.startsWith('/')\\n      );\\n    let reservedRam = Math.max(\\n      ...scripts.map(script => ns.getScriptRam(script))\\n    );\\n    return Math.max(freeRam - reservedRam, 0);\\n  }\\n  return serverNames\\n    .map(serverName => getFreeRam(ns, serverName))\\n    .reduce((a, b) => a + b);\\n}\\n\\n/**\\n * Get minimum amount of RAM to execute one of grow, weaken, or hack scripts.\\n *\\n * @param {import('index').NS} ns\\n * @returns {number} GB of RAM\\n */\\nfunction getMinRam(ns) {\\n  return Math.min(\\n    ...HACKING_SCRIPTS.map(script => ns.getScriptRam(script, HOME_SERVER_NAME))\\n  );\\n}\\n\\n/**\\n * Checks if we have any free RAM to do anything.\\n *\\n * @param {import('index').NS} ns\\n * @param {string[]} rootAccessServerNames\\n * @returns {boolean} true if we have free RAM\\n */\\nfunction hasFreeRam(ns, rootAccessServerNames) {\\n  const freeRam = getFreeRam(ns, rootAccessServerNames);\\n  if (getFreeRam(ns, rootAccessServerNames) < getMinRam(ns)) {\\n    ns.print(\\n      `all servers are currently busy (only ${freeRam} GB RAM available)`\\n    );\\n    return false;\\n  }\\n  return true;\\n}\\n\\n/**\\n * Grow until min money.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n * @param {number} [minMoneyAvailable] if not set, then will grow until max\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t money\\n */\\nfunction grow(ns, targetServerName, rootAccessServerNames, minMoneyAvailable) {\\n  const maxMoney = ns.getServerMaxMoney(targetServerName);\\n  if (minMoneyAvailable === undefined) minMoneyAvailable = maxMoney;\\n  const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n\\n  // Get number of threads needed to get money to get to the min available money\\n  const growthAmount =\\n    availableMoney === 0 ? 2 : minMoneyAvailable / availableMoney;\\n  let estimatedThreadCount = Math.round(\\n    ns.growthAnalyze(targetServerName, growthAmount)\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to grow ${targetServerName} ${formatPercent(\\n      growthAmount\\n    )}`\\n  );\\n\\n  // Use only the estimated thread count to grow the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      GROW_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * Weaken until min security level.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction weaken(ns, targetServerName, rootAccessServerNames) {\\n  const currentSecurityLevel = ns.getServerSecurityLevel(targetServerName);\\n  const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n\\n  // Get number of threads needed to get hack chance to get to minimum security\\n  // level.\\n  let estimatedThreadCount = 1;\\n  do {\\n    estimatedThreadCount++;\\n  } while (\\n    currentSecurityLevel - ns.weakenAnalyze(estimatedThreadCount) >\\n    minSecurityLevel\\n  );\\n  if (estimatedThreadCount === 0) return;\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to weaken ` +\\n      `${targetServerName} from ${currentSecurityLevel} to ${minSecurityLevel}`\\n  );\\n\\n  // Use only the estimated thread count to weaken the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      WEAKEN_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction hack(ns, targetServerName, rootAccessServerNames) {\\n  // Get number of threads needed to hack all the money from the server.\\n  let estimatedThreadCount = Math.round(\\n    ns.hackAnalyzeThreads(\\n      targetServerName,\\n      ns.getServerMoneyAvailable(targetServerName)\\n    )\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to hack ${targetServerName}`\\n  );\\n\\n  // Use only the estimated thread count to hack the target srver.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      HACK_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n * @param {string} scriptName\\n * @param {number} threadCount\\n * @param  {...any} args\\n * @returns {number} number of threads that we were able to run the script at\\n */\\nfunction runScript(ns, serverName, scriptName, threadCount, ...args) {\\n  if (ns.isRunning(scriptName, serverName, ...args)) {\\n    const script = ns.getRunningScript(scriptName, serverName, ...args);\\n    ns.print(\\n      `already running ${scriptName} ${args} on ${serverName} with ` +\\n        `${script.threads} threads`\\n    );\\n    return 0;\\n  }\\n\\n  const availableThreadCount = getAvailableThreadCount(\\n    ns,\\n    serverName,\\n    scriptName\\n  );\\n  const actualThreadCount =\\n    availableThreadCount > threadCount ? threadCount : availableThreadCount;\\n  if (actualThreadCount <= 0) return 0;\\n  const success = ns.exec(scriptName, serverName, actualThreadCount, ...args);\\n  if (success === 0) return 0;\\n  ns.print(\\n    `running ${scriptName} ${args} on ${serverName} with ${actualThreadCount} threads`\\n  );\\n  return actualThreadCount;\\n}\\n\\nfunction getAvailableThreadCount(ns, serverName, scriptName) {\\n  return Math.floor(getFreeRam(ns, serverName) / ns.getScriptRam(scriptName));\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string[]} serverNames\\n * @param {string} scriptName\\n * @param  {...any} args\\n * @returns {number} number of servers that we killed\\n */\\nfunction killScript(ns, serverNames, scriptName, ...args) {\\n  let killedServerCount = 0;\\n  for (const serverName of serverNames) {\\n    if (\\n      ns.isRunning(scriptName, serverName, ...args) &&\\n      ns.kill(scriptName, serverName, ...args)\\n    ) {\\n      killedServerCount++;\\n    }\\n  }\\n  return killedServerCount;\\n}\\n\",\"filename\":\"manage-hacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///c732b782-2623-41b9-bbf8-0d7c79f0153b\",\"moduleSequenceNumber\":250},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///18a5ec6c-0e8e-4d95-813e-0ebf24285f9f\",\"moduleSequenceNumber\":219},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///40e807e7-9f0f-4103-a7b0-0f60520352a2\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///50cf4429-6290-4b81-87db-2bdaa48f3c5b\",\"moduleSequenceNumber\":239},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///c3638442-923d-4afc-ad34-e944bf44065b\",\"moduleSequenceNumber\":221},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///3d0c84f1-61d3-4534-a906-2210e657503a\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///5489208f-7330-40d0-af88-42e527328aea\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///9e8f3743-aadf-4f8d-a406-a6ad8bdc0392\",\"moduleSequenceNumber\":220},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///e9b8c35f-10c6-4107-87f5-71fa12afe2de\",\"moduleSequenceNumber\":424}],\"dependents\":[],\"ramUsage\":15.15,\"server\":\"home\",\"moduleSequenceNumber\":424,\"_hash\":\"bb0a6f095badb1d9361284145104fe5ca5d6133d6882ddd59d18ab27b2d9aec0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index exactly.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} input\\n * @returns {number} 1 if can reach the end, 0 if not\\n */\\nexport function arrayJumpingGame(input) {\\n  return _getPathToLastIndex(input).length === 0 ? 0 : 1;\\n}\\n\\n/**\\n * @param {number[]} maxJumps List of numbers where each number represents max jump.\\n * @param {number} [currentIndex=0]\\n * @returns {string[]} The path to the last index where each member of the array is\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\tthe jump. Empty if no path.\\n */\\nfunction _getPathToLastIndex(maxJumps, currentIndex) {\\n  currentIndex = currentIndex || 0;\\n  if (currentIndex === maxJumps.length - 1) return ['end'];\\n\\n  const maxJump = maxJumps[currentIndex];\\n  for (let n = 1; n <= maxJump; n++) {\\n    const path = _getPathToLastIndex(maxJumps, currentIndex + n);\\n    if (path.length > 0)\\n      return [\\n        `jump from ${currentIndex} to ${\\n          currentIndex + n\\n        } (max jump is ${maxJump})`,\\n        ...path,\\n      ];\\n  }\\n\\n  return [];\\n}\\n\",\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":225,\"_hash\":\"2feadad6c9c3bef4df0b60380d6f7e2136c7cd17813055df6906cb2a3bdbd2d6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const OPERATORS = ['+', '-', '*'];\\n\\n/**\\n * Find All Valid Math Expressions\\n *\\n * Return all possible ways you can add the +, -, and * operators to the string\\n * such that it evaluates to the target number.\\n *\\n * @param {any[]} input\\n * @returns {string[]}\\n */\\nexport function findValidMathExpressions(input) {\\n  /** @type {string} */ const digits = input[0];\\n  /** @type {number} */ const targetNumber = input[1];\\n\\n  /**\\n   * Index is the index of the digit in the digits string.\\n   *\\n   * @type {string[][]}\\n   */\\n  const combinations = Array(digits.length);\\n  for (let i = digits.length - 1; i >= 0; i--) {\\n    const digit = digits.substring(i, i + 1);\\n\\n    // Fill in the last slot of the combinations array.\\n    if (i === digits.length - 1) {\\n      combinations[i] = [digit];\\n      continue;\\n    }\\n\\n    // Fill in the other combinations.\\n    combinations[i] = [];\\n    for (const expression of combinations[i + 1]) {\\n      combinations[i].push(digit + expression);\\n      if (\\n        expression.startsWith('0') &&\\n        expression.split(/[\\\\+\\\\-\\\\*]/g)[0] !== '0'\\n      ) {\\n        continue;\\n      }\\n      OPERATORS.forEach(operator =>\\n        combinations[i].push(digit + operator + expression)\\n      );\\n    }\\n  }\\n\\n  // Get valid expressions.\\n  return combinations[0].filter(\\n    expression => evaluate(expression) === targetNumber\\n  );\\n}\\n\\n/**\\n * @param {string} expression\\n * @returns {number}\\n */\\nfunction evaluate(expression) {\\n  // Split + and - into an array of addends.\\n  const addParts = expression.split('+');\\n  const addends = [];\\n  for (const addPart of addParts) {\\n    if (addPart.includes('-')) {\\n      const subtractParts = addPart.split('-');\\n      addends.push(subtractParts[0]);\\n      for (let i = 1; i < subtractParts.length; i++) {\\n        addends.push('-' + subtractParts[i]);\\n      }\\n    } else {\\n      addends.push(addPart);\\n    }\\n  }\\n\\n  // Resolve multiplications within each addend and sum.\\n  let sum = 0;\\n  for (const addend of addends) {\\n    if (addend.includes('*')) {\\n      const factors = addend.split('*');\\n      if (factors.includes('0')) continue;\\n      const product = factors\\n        .filter(factor => factor !== '1')\\n        .map(factor => parseInt(factor))\\n        .reduce((a, b) => a * b, 1);\\n      sum += product;\\n    } else {\\n      sum += parseInt(addend);\\n    }\\n  }\\n  return sum;\\n}\\n\",\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":226,\"_hash\":\"e60a956a9f1f2c8e855494c69fbca65956aefe1e41d241f04fb2a1641c2d32ed\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the input.\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function generateIpAddresses(input) {\\n  return _getAddresses(input).filter(\\n    address => address.split('.').length === 4\\n  );\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} [depth]\\n * @returns {string[]}\\n */\\nfunction _getAddresses(str, depth) {\\n  if (depth === undefined) depth = 0;\\n  if (depth === 4) return [];\\n  const beginningSections = _getBeginningSections(str);\\n  const addresses = [];\\n  for (const beginningSection of beginningSections) {\\n    const restOfStr = str.substring(beginningSection.toString().length);\\n    if (restOfStr === '') {\\n      addresses.push(...beginningSections);\\n    } else {\\n      const addressVariants = _getAddresses(restOfStr, depth + 1);\\n      for (const variant of addressVariants) {\\n        if (variant.replaceAll('.', '') === restOfStr) {\\n          addresses.push(beginningSection + '.' + variant);\\n        }\\n      }\\n    }\\n  }\\n  return [...new Set(addresses)];\\n}\\n\\n/**\\n * A section is the first 1-3 characters of the {@link str} where there cannot\\n * be a leading zero nor can there be a leading zero after the section. The\\n * section must also be a number between 0 and 255.\\n *\\n * @param {string} str\\n */\\nfunction _getBeginningSections(str) {\\n  if (str.length === 0) return [];\\n  return [1, 2, 3]\\n    .filter(length => length === 1 || str[0] !== '0') // cannot be a leading zero after the section\\n    .map(length => parseInt(str.substring(0, length)))\\n    .filter(section => section >= 0 && section <= 255)\\n    .map(section => section.toString());\\n}\\n\",\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":227,\"_hash\":\"0f8ead77c485ea6b40daebdc532c4a27d1d48eaa1fd2e51e4567dbc41a48de72\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *\\n *  3 + 1\\n *  2 + 2\\n *  2 + 1 + 1\\n *  1 + 1 + 1 + 1\\n *\\n * How many different ways can the input number be written as a sum of at least\\n * two positive integers?\\n *\\n * @param {number} input\\n * @returns {number} number of ways to sum\\n */\\nexport function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":228,\"_hash\":\"8a68acbe2492a05c86e6546f54c823867bf6cff25d4d2e86d552aff1098d18db\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime\\n * factor of the input?\\n *\\n * @param {number} input\\n * @returns {number} largest prime factor\\n */\\nexport function findLargestPrimeFactor(input) {\\n  /** @type {Object.<number, boolean>} */\\n  const cachedPrimeNumberMap = {};\\n\\n  const primes = [];\\n  for (let i = 1; i <= input; i++) {\\n    if (input % i !== 0) continue;\\n    if (_isPrime(i, cachedPrimeNumberMap)) primes.push(i);\\n  }\\n  return primes.slice(-1)[0];\\n}\\n\\n/**\\n * Checks if a number is prime.\\n *\\n * @param {number} number\\n * @param {Object.<number, boolean>} cachedPrimeNumberMap\\n */\\nfunction _isPrime(number, cachedPrimeNumberMap) {\\n  if (number in cachedPrimeNumberMap) return cachedPrimeNumberMap[number];\\n  for (let i = 2; i < number; i++) {\\n    if (number % i === 0) {\\n      cachedPrimeNumberMap[number] = false;\\n      return false;\\n    }\\n  }\\n  cachedPrimeNumberMap[number] = true;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":229,\"_hash\":\"adaa0db1e11a934a70dc2e8e62ddd1dafa5485848c0fc539ce14dfcc5307e512\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 112,61,181,149,39,17,143,192,196,120,151\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {string} input\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderI(input) {\\n  let maxProfit = 0;\\n  for (let day = 0; day < input.length - 1; day++) {\\n    const profit = Math.max(...input.slice(day + 1)) - input[day];\\n    if (profit > maxProfit) maxProfit = profit;\\n  }\\n  return maxProfit;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderI([112, 61, 181, 149, 39, 17, 143, 192, 196, 120, 151])\\n);\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":230,\"_hash\":\"e2816fc708994620ac4a831daf31fe7c7e085d179d3b45f7fdbd3ec249c19d5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i.\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {int[]} stockPrices\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  let profit = 0;\\n\\n  let day = -1;\\n  while (day < stockPrices.length) {\\n    day++;\\n    if (stockPrices[day + 1] > stockPrices[day]) {\\n      let minPrice = stockPrices[day];\\n      day++;\\n\\n      while (\\n        day < stockPrices.length &&\\n        stockPrices[day + 1] > stockPrices[day]\\n      ) {\\n        day++;\\n      }\\n      let maxPrice = stockPrices[day];\\n      profit += maxPrice - minPrice;\\n    }\\n  }\\n\\n  return profit;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":231,\"_hash\":\"408d4f1e8f53592e4245048ecddbcdf5cbfa68ccea591735e28c2a10fca59457\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/algorithmic-stock-trader-iii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":232,\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/unique-paths-in-a-grid-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":233,\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * @param {number[]} input\\n * @returns {number}\\n */\\nexport function subarrayWithMaximumSum(input) {\\n  let maxSum = input[0];\\n  for (let startIndex = 0; startIndex < input.length; startIndex++) {\\n    for (let endIndex = startIndex + 1; endIndex <= input.length; endIndex++) {\\n      const subarray = input.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b);\\n      maxSum = Math.max(maxSum, sum);\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":234,\"_hash\":\"5cdf8f48468f4da70baeb04591bb73878aae85e5d0541f20b982457c69806d53\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  if (_isValid(input)) return [input];\\n\\n  let parenthesesToRemove = 1;\\n  let variants = [];\\n  while (parenthesesToRemove <= input.length) {\\n    variants = [...new Set(_getVariants(input, parenthesesToRemove))].filter(\\n      _isValid\\n    );\\n    if (variants.length > 0) break;\\n    parenthesesToRemove++;\\n  }\\n  return variants;\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} parenthesesToRemove\\n * @returns {string[]}\\n */\\nfunction _getVariants(str, parenthesesToRemove) {\\n  if (parenthesesToRemove === 0) return [str];\\n  const variants = [];\\n  for (let i = 0; i < str.length; i++) {\\n    if (str.charAt(i) !== '(' && str.charAt(i) !== ')') continue;\\n    const variant = str.substring(0, i) + str.substring(i + 1, str.length);\\n    if (parenthesesToRemove === 1) {\\n      variants.push(variant);\\n    } else {\\n      const furtherVariants = _getVariants(variant, parenthesesToRemove - 1);\\n      for (const furtherVariant of furtherVariants) {\\n        if (variants.includes(furtherVariant)) continue;\\n        variants.push(furtherVariant);\\n      }\\n    }\\n  }\\n  return variants;\\n}\\n\\nfunction _isValid(str) {\\n  if (str === '') return true;\\n  const stack = [];\\n  const characters = str.split('');\\n  for (const character of characters) {\\n    if (character === '(') stack.push(character);\\n    else if (character === ')' && stack.pop() !== '(') return false;\\n  }\\n  return stack.length === 0;\\n}\\n\",\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":235,\"_hash\":\"62149e986e689565cc9daaea888f5d6c8e3f0d01af3d0e963079f1ea60b4d6b7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of a grid.\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {int[][]} input\\n */\\nexport function uniquePathsInAGridII(input) {\\n  return new Set(getUniquePaths(input, 0, 0, '')).size;\\n}\\n\\n/**\\n * @param {int[][]} grid\\n * @param {int} startX\\n * @param {int} startY\\n * @returns {string[]} list of instructions (e.g. \\\"DDRR\\\")\\n */\\nexport function getUniquePaths(grid, startX, startY, instructionsThusFar) {\\n  if (startX === grid[0].length - 1 && startY === grid.length - 1) {\\n    return [instructionsThusFar];\\n  }\\n  const allInstructions = [];\\n  if (_canMoveRight(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX + 1, startY, instructionsThusFar + 'R')\\n    );\\n  }\\n  if (_canMoveDown(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX, startY + 1, instructionsThusFar + 'D')\\n    );\\n  }\\n  return allInstructions;\\n}\\n\\nfunction _canMoveRight(grid, x, y) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\nfunction _canMoveDown(grid, x, y) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":236,\"_hash\":\"46f788491f931079774091844bc994940b3a5e29a2c9dcd8b2ab13715a41cf4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SOURCE_COLUMN_HEADER = 'Source';\\nconst MONEY_COLUMN_HEADER = 'Money';\\nconst MONEY_ABBR_COLUMN_HEADER = 'Money (Abbr.)';\\nconst PERCENT_NET_WORTH_COLUMN_HEADER = '% net worth';\\n\\n/**\\n * Prints out net worth along with breakdown on how much of net worth is in each\\n * stock and in cash.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let stocks = [];\\n  try {\\n    stocks = ns.stock\\n      .getSymbols()\\n      .map(symbol => new Stock(ns, symbol))\\n      .filter(stock => stock.worth > 0);\\n    sort(stocks, stock => stock.symbol);\\n    sort(stocks, stock => stock.worth);\\n  } catch (_) {}\\n\\n  const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n  const netWorth =\\n    cash + stocks.map(stock => stock.worth).reduce((a, b) => a + b, 0);\\n\\n  const sections = [\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Cash',\\n        [MONEY_COLUMN_HEADER]: formatMoney(cash),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(cash, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(cash / netWorth),\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Net worth',\\n        [MONEY_COLUMN_HEADER]: formatMoney(netWorth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(netWorth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n  ];\\n  if (stocks.length > 0) {\\n    sections.unshift(\\n      stocks.map(stock => ({\\n        [SOURCE_COLUMN_HEADER]: stock.symbol,\\n        [MONEY_COLUMN_HEADER]: formatMoney(stock.worth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(stock.worth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(\\n          stock.worth / netWorth\\n        ),\\n      }))\\n    );\\n  }\\n  printTable(\\n    ns,\\n    {\\n      [MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MONEY_ABBR_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_NET_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...sections\\n  );\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.worth = getStockWorth(ns, symbol);\\n  }\\n}\\n\",\"filename\":\"get-net-worth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///a134bb8b-1aa7-40a4-8901-b8d57e2fae2f\",\"moduleSequenceNumber\":21837},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":21832},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":21830},{\"filename\":\"get-net-worth.js\",\"url\":\"blob:file:///449222ac-af0e-40c9-95e2-54b91f22c66a\",\"moduleSequenceNumber\":154578}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":237,\"_hash\":\"808af31cf036be749f7db8413971ad21e883c085cd797aa2023756737e7cadc4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, RowColor, printTable } from '/utils/table.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { sort } from '/utils/misc.js';\\nimport {\\n  getAllServerNames,\\n  getFreeRam,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server Name';\\nconst FREE_RAM_COLUMN_HEADER = 'Free RAM';\\nconst MAX_RAM_COLUMN_HEADER = 'Max RAM';\\n\\n/**\\n * Prints out free RAM from all servers that have any RAM.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.freeRam > 0);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const totalFreeRam = servers\\n    .map(server => server.freeRam)\\n    .reduce((a, b) => a + b);\\n  const totalMaxRam = servers\\n    .map(server => server.maxRam)\\n    .reduce((a, b) => a + b);\\n\\n  printTable(\\n    ns,\\n    {\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    servers.map(server => ({\\n      [SERVER_NAME_COLUMN_HEADER]: server.name,\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(server.freeRam) + ' GB',\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(server.maxRam) + ' GB',\\n      rowColor: server.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    })),\\n    [\\n      {\\n        [SERVER_NAME_COLUMN_HEADER]: 'Total free RAM',\\n        [FREE_RAM_COLUMN_HEADER]: formatNumber(totalFreeRam) + ' GB',\\n        [MAX_RAM_COLUMN_HEADER]: formatNumber(totalMaxRam) + ' GB',\\n      },\\n    ]\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.name = serverName;\\n    this.freeRam = getFreeRam(ns, serverName);\\n    this.maxRam = ns.getServerMaxRam(serverName);\\n    this.isPurchased = serverName.startsWith(PURCHASED_SERVER_PREFIX);\\n  }\\n}\\n\",\"filename\":\"get-free-ram.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///ee201e1a-92e2-40d6-81c9-41fba55d4859\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///847bed29-1996-4a2a-92f6-68c695ec0291\",\"moduleSequenceNumber\":222},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ac0b2840-462c-4bf2-96a2-aad57b3e9d38\",\"moduleSequenceNumber\":239},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///43301771-01bb-4b9d-927d-08cb6b9c3ec5\",\"moduleSequenceNumber\":221},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///6e34cb7d-74a3-43b0-bd36-6cce03a483f8\",\"moduleSequenceNumber\":219},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///9900c859-204e-4488-8ce1-72ec0866e788\",\"moduleSequenceNumber\":246},{\"filename\":\"get-free-ram.js\",\"url\":\"blob:file:///c6a92c1c-6aa8-4a6c-9002-97740df7d8e1\",\"moduleSequenceNumber\":500}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":500,\"_hash\":\"7c26dcb443ebca8174c811dfd3f5981d041f317059672535ca3bfcb150a4b6a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const COMMISSION_FEE = 100000;\\nconst MIN_PRICE_HISTORY_MILLIS = 5 * 6 * 1000; // Min 5 ticks of history.\\nconst MAX_PRICE_HISTORY_MILLIS = 10 * 60 * 1000; // Max 10 minutes of history.\\n\\n/**\\n * Map of timestamp to price.\\n *\\n * @typedef {Object.<string, number>} PriceHistory\\n */\\n\\n/** @type {Object.<string, PriceHistory>} */\\nconst symbolToAskPriceHistoryMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMaxAskPriceMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMinAskPriceMap = {};\\n\\n/**\\n * Gets how much a stock is worth based on how much of it we own and how much\\n * the bid price is.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n */\\nexport function getStockWorth(ns, symbol) {\\n  const ownedShares = ns.stock.getPosition(symbol)[0];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  return ownedShares * bidPrice - COMMISSION_FEE;\\n}\\n\\n/**\\n * Gets the real forecast or get a predicted forecast for a given stock symbol.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nexport function getForecast(ns, symbol) {\\n  try {\\n    return ns.stock.getForecast(symbol);\\n  } catch (_) {\\n    return predictForecast(ns, symbol);\\n  }\\n}\\n\\n/**\\n * Predicts the forecast based on how many times the ask price has increased or\\n * decreased in the past.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nfunction predictForecast(ns, symbol) {\\n  const currentTimestamp = Date.now();\\n  const currentAskPrice = ns.stock.getAskPrice(symbol);\\n  if (!(symbol in symbolToAskPriceHistoryMap)) {\\n    symbolToAskPriceHistoryMap[symbol] = {\\n      [currentTimestamp]: currentAskPrice,\\n    };\\n    return 0.5;\\n  }\\n  symbolToAskPriceHistoryMap[symbol][currentTimestamp] = currentAskPrice;\\n  const askPrices = Object.values(symbolToAskPriceHistoryMap[symbol]);\\n  symbolToMaxAskPriceMap[symbol] = Math.max(...askPrices);\\n  symbolToMinAskPriceMap[symbol] = Math.min(...askPrices);\\n\\n  // Not enough data.\\n  let timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const historyMillis = currentTimestamp - Math.min(...timestamps);\\n  if (historyMillis < MIN_PRICE_HISTORY_MILLIS) return 0.5;\\n\\n  if (historyMillis > MAX_PRICE_HISTORY_MILLIS) {\\n    // Trim out any data points that we no longer need.\\n    for (const timestamp of timestamps) {\\n      if (currentTimestamp - timestamp > MAX_PRICE_HISTORY_MILLIS) {\\n        delete symbolToAskPriceHistoryMap[symbol][timestamp];\\n      }\\n    }\\n  }\\n\\n  timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const askPriceHistory = symbolToAskPriceHistoryMap[symbol];\\n  let noChangeCount = 0;\\n  let increaseCount = 0;\\n  let decreaseCount = 0;\\n  for (let i = 1; i < timestamps.length; i++) {\\n    const askPriceDiff =\\n      askPriceHistory[timestamps[i]] - askPriceHistory[timestamps[i - 1]];\\n    if (askPriceDiff > 0) increaseCount++;\\n    else if (askPriceDiff < 0) decreaseCount++;\\n    else if (timestamps[i] - timestamps[i - 1] >= 6000) noChangeCount++;\\n  }\\n\\n  const totalCount = noChangeCount + increaseCount + decreaseCount;\\n  let forecast = 0.5 + increaseCount / totalCount - decreaseCount / totalCount;\\n  for (let i = 0; i < noChangeCount; i++) {\\n    if (forecast < 0.5) forecast += noChangeCount / totalCount;\\n    if (forecast > 0.5) forecast -= noChangeCount / totalCount;\\n  }\\n  if (symbolToMaxAskPriceMap[symbol] === currentAskPrice) forecast /= 2;\\n  if (symbolToMinAskPriceMap[symbol] === currentAskPrice) forecast *= 2;\\n  return forecast;\\n}\\n\\n/**\\n * @param {string} symbol\\n * @returns {number[]}\\n */\\nfunction getAskPriceHistoryTimestamps(symbol) {\\n  const timestamps = Object.keys(symbolToAskPriceHistoryMap[symbol]).map(\\n    timestamp => parseInt(timestamp)\\n  );\\n  timestamps.sort();\\n  return timestamps;\\n}\\n\",\"filename\":\"/utils/stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":239,\"_hash\":\"54c0d8d5338c659cb1b9446c193097d28553efe2e46f5f58adf0dff2c99b4c64\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sell all stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const symbols = ns.stock.getSymbols();\\n  for (const symbol of symbols) {\\n    ns.stock.sell(symbol, ns.stock.getPosition(symbol)[0]);\\n  }\\n}\\n\",\"filename\":\"sell-all-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell-all-stocks.js\",\"url\":\"blob:file:///93be0ac8-7f50-4308-94e2-3cf6841a9e2a\",\"moduleSequenceNumber\":193331}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"moduleSequenceNumber\":240,\"_hash\":\"969b0f01584407efec3f1c21529ee242c87d002f07ce3f2a9c822e470a6e2b99\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { arrayJumpingGame } from '/contracts/array-jumping-game.js';\\nimport { findValidMathExpressions } from './contracts/find-valid-math-solutions.js';\\nimport { findLargestPrimeFactor } from '/contracts/find-largest-prime-factor.js';\\nimport { generateIpAddresses } from '/contracts/generate-ip-addresses.js';\\nimport { mergeOverlappingIntervals } from '/contracts/merge-overlapping-intervals.js';\\nimport { minimumPathSumInATriangle } from '/contracts/minimum-path-sum-in-a-triangle.js';\\nimport { sanitizeParenthesesInExpression } from '/contracts/sanitize-parentheses-in-expression.js';\\nimport { spiralizeMatrix } from '/contracts/spiralize-matrix.js';\\nimport { subarrayWithMaximumSum } from '/contracts/subarray-with-maximum-sum.js';\\nimport { totalWaysToSum } from '/contracts/total-ways-to-sum.js';\\nimport {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n  algorithmicStockTraderIII,\\n  algorithmicStockTraderIV,\\n} from '/contracts/algorithmic-stock-trader.js';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from '/contracts/unique-paths-in-a-grid.js';\\nimport {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n} from '/utils/servers.js';\\n\\nconst CONTRACT_TYPE_TO_SOLVER_FN_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Find All Valid Math Expressions': findValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIpAddresses,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\\n/**\\n * Finds all the contracts across all servers and solves any that we can solve\\n * as we go. Print out all unsolved contracts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns).filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n\\n  // Get all contracts.\\n  const allContracts = [];\\n  for (const serverName of serverNames) {\\n    const contracts = ns\\n      .ls(serverName)\\n      .filter(fileName => fileName.endsWith('.cct'))\\n      .map(fileName => new Contract(fileName, serverName));\\n    allContracts.push(...contracts);\\n  }\\n\\n  // Attempt to solve contracts.\\n  const unsolvedContracts = allContracts.filter(\\n    contract => !contract.attemptToSolve(ns)\\n  );\\n\\n  if (unsolvedContracts.length === 0) {\\n    ns.tprintf('\\\\nno unsolved contracts available at the moment');\\n  }\\n}\\n\\nclass Contract {\\n  constructor(fileName, serverName) {\\n    this.fileName = fileName;\\n    this.serverName = serverName;\\n  }\\n\\n  /**\\n   * Attemps to solve a contract.\\n   *\\n   * @param {import('index').NS} ns\\n   * @returns {boolean} true if successfully solved\\n   */\\n  attemptToSolve(ns) {\\n    const contractType = ns.codingcontract.getContractType(\\n      this.fileName,\\n      this.serverName\\n    );\\n    if (!(contractType in CONTRACT_TYPE_TO_SOLVER_FN_MAP)) {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns)\\n      );\\n      return false;\\n    }\\n\\n    const input = ns.codingcontract.getData(this.fileName, this.serverName);\\n    let answer;\\n    try {\\n      answer = CONTRACT_TYPE_TO_SOLVER_FN_MAP[contractType](input);\\n    } catch (exception) {\\n      ns.tprint('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          exception: exception,\\n        })\\n      );\\n      return false;\\n    }\\n    const response = ns.codingcontract.attempt(\\n      answer,\\n      this.fileName,\\n      this.serverName,\\n      { returnReward: true }\\n    );\\n    if (response === '') {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          attemptedAnswer: answer,\\n        })\\n      );\\n      return false;\\n    }\\n\\n    ns.tprintf(\\n      '\\\\nsolved %s: %s\\\\n%s\\\\n',\\n      contractType,\\n      response,\\n      JSON.stringify({\\n        input: input,\\n        output: answer,\\n      })\\n    );\\n    return true;\\n  }\\n\\n  getPath(ns) {\\n    return (\\n      getPath(ns, this.serverName)\\n        .map(path => `connect ${path}`)\\n        .join('; ') + `; run ${this.fileName}`\\n    );\\n  }\\n}\\n\",\"filename\":\"find-contracts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///5b6d90f7-7c34-4da0-8450-5ca5890d225a\",\"moduleSequenceNumber\":222},{\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"blob:file:///a97408c1-e880-4829-8831-c188bfab7bd7\",\"moduleSequenceNumber\":254},{\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"blob:file:///923eac11-551c-4e35-ab64-804fc9d3e117\",\"moduleSequenceNumber\":252},{\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"blob:file:///e958c2a8-4c59-4869-88f8-3c3ba0e0d717\",\"moduleSequenceNumber\":228},{\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"blob:file:///1fd9478f-8067-430c-8991-77fb15d45eb4\",\"moduleSequenceNumber\":234},{\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"blob:file:///a8e2373f-cbed-4c09-a06e-344953231fdc\",\"moduleSequenceNumber\":253},{\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"blob:file:///adf71411-d568-41fd-a843-a520938c290c\",\"moduleSequenceNumber\":235},{\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"blob:file:///ea788996-6b30-4fd4-b09d-b19d6bafdd07\",\"moduleSequenceNumber\":249},{\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"blob:file:///bedea0ac-61af-459e-a467-b2a5dc0c890d\",\"moduleSequenceNumber\":248},{\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"blob:file:///04abebf0-a8bc-444e-b589-1fe8ea695b0d\",\"moduleSequenceNumber\":227},{\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"blob:file:///675b078f-7f2d-459a-9e1f-55d44ce40019\",\"moduleSequenceNumber\":229},{\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"blob:file:///9b3e6f50-9224-4bff-8018-02b2b8815f66\",\"moduleSequenceNumber\":226},{\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"blob:file:///3d75a790-3732-44ac-9363-46053a983ef2\",\"moduleSequenceNumber\":225},{\"filename\":\"find-contracts.js\",\"url\":\"blob:file:///758dd001-67d5-47f8-be5a-ca29f65bbd76\",\"moduleSequenceNumber\":499}],\"dependents\":[],\"ramUsage\":22.05,\"server\":\"home\",\"moduleSequenceNumber\":499,\"_hash\":\"2fd40bbd41cb4f81527a04f0552b2231f1ff6ed86765f96d77d24dd62522b067\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['scan', 'sleep', 'getHackingLevel'];\\n\\n/**\\n * Finds any servers that do not have backdoor installed and can have backdoor\\n * installed.\\n *\\n * Run this script with `--tail`.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  const hackableServerNames = getAllServerNames(ns).filter(\\n    server =>\\n      server !== HOME_SERVER_NAME && !server.startsWith(PURCHASED_SERVER_PREFIX)\\n  );\\n\\n  // If we have SF4, then we can automatically run the backdoors.\\n  try {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n    for (const serverName of serverNames) {\\n      _connectTo(ns, serverName, ns.getCurrentServer());\\n      await ns.installBackdoor();\\n    }\\n    _connectTo(ns, HOME_SERVER_NAME, ns.getCurrentServer());\\n  } catch (_) {\\n    // No Source File 4 API\\n  }\\n\\n  while (true) {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n\\n    if (serverNames.length === 0) {\\n      ns.print('No servers that we can install backdoor available.');\\n      ns.tprint('No servers that we can install backdoor available.');\\n      return;\\n    }\\n\\n    ns.clearLog();\\n    ns.print(\\n      '\\\\n' +\\n        serverNames\\n          .map(\\n            serverName =>\\n              `${serverName}\\\\n${[\\n                'home',\\n                ...getPath(ns, serverName).map(path => `connect ${path}`),\\n                'backdoor',\\n              ].join('; ')}`\\n          )\\n          .join('\\\\n\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _getBackdoorableServerNames(ns, hackableServerNames) {\\n  return hackableServerNames.filter(serverName => {\\n    const server = ns.getServer(serverName);\\n    return (\\n      server.hasAdminRights &&\\n      !server.backdoorInstalled &&\\n      server.requiredHackingSkill <= ns.getHackingLevel()\\n    );\\n  });\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _connectTo(ns, serverName, lastServerName) {\\n  const path = getPath(ns, serverName, lastServerName, '');\\n  for (const server of path) ns.connect(server);\\n}\\n\",\"filename\":\"find-backdoors.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e8fc18ae-6bb5-4afc-a134-11685c2230c7\",\"moduleSequenceNumber\":222},{\"filename\":\"find-backdoors.js\",\"url\":\"blob:file:///a9242b0f-62df-47d1-b597-10119e0c1f0e\",\"moduleSequenceNumber\":498}],\"dependents\":[],\"ramUsage\":99.85,\"server\":\"home\",\"moduleSequenceNumber\":498,\"_hash\":\"1fa72ed546c8e0b9e667ab27c57f7e22fc31369c404b7a1d4297663b244f2e11\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCurrentServer\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\nimport {\\n  isHackable,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst GROWING_COLUMN_HEADER = 'Growing';\\nconst WEAKENING_COLUMN_HEADER = 'Weakening';\\nconst HACKING_COLUMN_HEADER = 'Hacking';\\nconst MAX_RAM_COLUMN_HEADER = 'Max ram';\\nconst USED_RAM_COLUMN_HEADER = 'Used ram';\\nconst FREE_RAM_COLUMN_HEADER = 'Free ram';\\n\\n/**\\n * Prints out information about all servers that we have root access to and\\n * which scripts they're running.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.hasRootAccess);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam, true);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const hackableServerNames = servers\\n    .filter(server => isHackable(ns, server.name))\\n    .map(server => server.name);\\n  sort(hackableServerNames, serverName => serverName);\\n  for (const server of servers) {\\n    for (const targetServerName of hackableServerNames) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        server.growing.push({\\n          targetServerName: targetServerName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        server.weakening.push({\\n          targetServerName: targetServerName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        server.hacking.push({\\n          targetServerName: targetServerName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  servers = servers.filter(server => server.maxRam > 0);\\n  printTable(\\n    ns,\\n    {\\n      [GROWING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [WEAKENING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACKING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [USED_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...servers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    const server = ns.getServer(serverName);\\n    this.hasRootAccess = server.hasAdminRights;\\n    if (!this.hasRootAccess) return;\\n\\n    this.isPurchased = server.purchasedByPlayer;\\n\\n    // RAM information.\\n    this.maxRam = server.maxRam;\\n    this.usedRam = server.ramUsed;\\n    this.freeRam = this.maxRam - this.usedRam;\\n\\n    this.growing = [];\\n    this.weakening = [];\\n    this.hacking = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n    sort(scripts, script => script.threadCount, true);\\n    return scripts\\n      .map(\\n        script =>\\n          script.targetServerName +\\n          ` (${formatNumber(script.threadCount, true)})`\\n      )\\n      .join('\\\\n');\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SERVER_NAME_COLUMN_HEADER]: this.name,\\n      [GROWING_COLUMN_HEADER]: this._formatScripts(this.growing),\\n      [WEAKENING_COLUMN_HEADER]: this._formatScripts(this.weakening),\\n      [HACKING_COLUMN_HEADER]: this._formatScripts(this.hacking),\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(this.maxRam, true) + ' GB',\\n      [USED_RAM_COLUMN_HEADER]: formatNumber(this.usedRam, true) + ' GB',\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(this.freeRam, true) + ' GB',\\n      rowColor: this.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    };\\n  }\\n}\\n\",\"filename\":\"get-servers-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///9e8f911f-1f26-4b07-a686-5f6a0d45d826\",\"moduleSequenceNumber\":137942},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///1d75221b-a36a-4019-89de-a7bf7ef23243\",\"moduleSequenceNumber\":137933},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///6dcb2154-1124-4216-b3b5-13efb7bbda17\",\"moduleSequenceNumber\":137932},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d42224ab-1a6b-4890-8fde-036f3e6230e8\",\"moduleSequenceNumber\":137941},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ae61acb1-b47b-47b6-80f3-368c51d28d77\",\"moduleSequenceNumber\":137937},{\"filename\":\"get-servers-info.js\",\"url\":\"blob:file:///01e7ab26-6bc3-43f9-8c52-225cd7774e2f\",\"moduleSequenceNumber\":165711}],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":243,\"_hash\":\"613ab5c851562e617a1ae6bb50baede41b0257dcb48404a4ef4a917b334c93a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport {\\n  formatMoney,\\n  formatNumber,\\n  formatPercent,\\n  formatTime,\\n} from '/utils/format.js';\\nimport {\\n  getHackingHeuristic,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  isHackable,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { sort } from '/utils/misc.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst AVAILABLE_MONEY_COLUMN_HEADER = 'Available money';\\nconst SECURITY_LEVEL_COLUMN_HEADER = 'Security level';\\nconst HACK_CHANCE_COLUMN_HEADER = 'Hack chance';\\nconst BEING_GROWN_COLUMN_HEADER = 'Growing by';\\nconst BEING_WEAKENED_COLUMN_HEADER = 'Weakening by';\\nconst BEING_HACKED_COLUMN_HEADER = 'Hacked by';\\nconst HACK_EXP_HEADER = 'Hack exp';\\n\\n/**\\n * Prints out information about all hackable servers.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const allServerNames = getAllServerNames(ns);\\n\\n  const hackableServers = allServerNames\\n    .filter(serverName => isHackable(ns, serverName))\\n    .map(serverName => new Server(ns, serverName));\\n  sort(hackableServers, server => getHackingHeuristic(ns, server.name));\\n\\n  const rootAccessServerNames = allServerNames.filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n  for (const serverName of rootAccessServerNames) {\\n    for (const targetServer of hackableServers) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        targetServer.beingGrownBy.push({\\n          serverName: serverName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        targetServer.beingWeakenedBy.push({\\n          serverName: serverName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        targetServer.beingHackedBy.push({\\n          serverName: serverName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  printTable(\\n    ns,\\n    {\\n      [AVAILABLE_MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_CHANCE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_GROWN_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_WEAKENED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_HACKED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_EXP_HEADER]: Alignment.RIGHT,\\n    },\\n    ...hackableServers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    this.hackHeuristic = getHackingHeuristic(ns, serverName);\\n\\n    this.availableMoney = ns.getServerMoneyAvailable(serverName);\\n    this.percentMaxMoney =\\n      this.availableMoney / ns.getServerMaxMoney(serverName);\\n\\n    this.securityLevel = ns.getServerSecurityLevel(serverName);\\n    this.minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    this.hackChance = ns.hackAnalyzeChance(serverName);\\n\\n    this.growTime = ns.getGrowTime(serverName);\\n    this.weakenTime = ns.getWeakenTime(serverName);\\n    this.hackTime = ns.getHackTime(serverName);\\n\\n    try {\\n      this.hackExp = ns.formulas.hacking.hackExp(\\n        ns.getServer(serverName),\\n        ns.getPlayer()\\n      );\\n    } catch (_) {\\n      // No Formulas.exe\\n    }\\n\\n    this.beingGrownBy = [];\\n    this.beingWeakenedBy = [];\\n    this.beingHackedBy = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n\\n    const totalThreadCount = scripts\\n      .map(script => script.threadCount)\\n      .reduce((a, b) => a + b);\\n    const totalServerCount = scripts.length;\\n    return `${totalServerCount} servers\\\\n${formatNumber(\\n      totalThreadCount,\\n      true\\n    )} threads`;\\n  }\\n\\n  _getRowColor() {\\n    const attackPoints = [\\n      this.beingGrownBy.length > 0 ? 1 : 0,\\n      this.beingWeakenedBy.length > 0 ? 1 : 0,\\n      this.beingHackedBy.length > 0 ? 1 : 0,\\n    ].reduce((a, b) => a + b);\\n    switch (attackPoints) {\\n      case 3:\\n        return RowColor.ERROR;\\n      case 2:\\n        return RowColor.WARN;\\n      case 1:\\n        return RowColor.NORMAL;\\n      case 0:\\n        return RowColor.INFO;\\n    }\\n  }\\n\\n  getTableRow() {\\n    const row = {\\n      [SERVER_NAME_COLUMN_HEADER]:\\n        this.name +\\n        `\\\\nHack heuristic: ${formatNumber(this.hackHeuristic, true)}`,\\n      [AVAILABLE_MONEY_COLUMN_HEADER]:\\n        formatMoney(this.availableMoney, true) +\\n        ` (${formatPercent(\\n          this.percentMaxMoney\\n        )} of max)\\\\nGrow time: ${formatTime(this.growTime)}`,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: `${this.securityLevel.toFixed(\\n        2\\n      )} (out of ${this.minSecurityLevel})\\\\nWeaken time: ${formatTime(\\n        this.weakenTime\\n      )}`,\\n      [HACK_CHANCE_COLUMN_HEADER]: `${formatPercent(\\n        this.hackChance\\n      )}\\\\nHack time: ${formatTime(this.hackTime)}`,\\n      [BEING_GROWN_COLUMN_HEADER]: this._formatScripts(this.beingGrownBy),\\n      [BEING_WEAKENED_COLUMN_HEADER]: this._formatScripts(this.beingWeakenedBy),\\n      [BEING_HACKED_COLUMN_HEADER]: this._formatScripts(this.beingHackedBy),\\n    };\\n    if (this.hackExp) row[HACK_EXP_HEADER] = formatNumber(this.hackExp, true);\\n    row.rowColor = this._getRowColor();\\n    return row;\\n  }\\n}\\n\",\"filename\":\"get-hacking-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e637d569-173c-404f-b10e-1e4f28552dba\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///57ce0fd8-b7dc-493e-abdb-9b1b96378be8\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///e586792f-1851-4b02-93a6-ad2e3a48f475\",\"moduleSequenceNumber\":139},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///d85e71ad-c063-48e7-b614-f184ccce14f8\",\"moduleSequenceNumber\":121},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///7027ad72-770d-4312-af3e-4bc48358c8ca\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///a424e95e-97e5-4a78-9e04-84d5f1af65fa\",\"moduleSequenceNumber\":120},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///25339bc6-ebed-4255-96a4-bfe6359dc1b6\",\"moduleSequenceNumber\":119},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///3430fb6c-2270-46ad-909d-7fc65a866935\",\"moduleSequenceNumber\":146},{\"filename\":\"get-hacking-info.js\",\"url\":\"blob:file:///e81a3bb3-f3ac-48a3-9042-e16803380156\",\"moduleSequenceNumber\":118602}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":244,\"_hash\":\"a2200d433d9b7c84a62ba22143ad157c55cc3fde27f94e9b8611dfe4bd95a366\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SYMBOL_COLUMN_HEADER = 'Symbol';\\nconst ASK_PRICE_COLUMN_HEADER = 'Ask price';\\nconst BID_PRICE_COLUMN_HEADER = 'Bid price';\\nconst OWNED_SHARE_COUNT_COLUMN_HEADER = 'Owned shares';\\nconst MAX_SHARE_COUNT_COLUMN_HEADER = 'Max shares';\\nconst PERCENT_MAX_SHARE_COLUMN_HEADER = '% of max';\\nconst SHARES_WORTH_COLUMN_HEADER = 'Worth';\\nconst SHARES_PROFIT_COLUMN_HEADER = 'Profit';\\nconst FORECAST_COLUMN_HEADER = 'Forecast';\\n\\n/**\\n * Prints out stock info.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const stocks = ns.stock.getSymbols().map(symbol => new Stock(ns, symbol));\\n  sort(stocks, stock => stock.profit, true);\\n\\n  printTable(\\n    ns,\\n    {\\n      [ASK_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BID_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_PROFIT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FORECAST_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    stocks.map(stock => stock.getTableRow())\\n  );\\n\\n  // ns.tprint(table);\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.askPrice = ns.stock.getAskPrice(symbol);\\n    this.bidPrice = ns.stock.getBidPrice(symbol);\\n    this.maxShareCount = ns.stock.getMaxShares(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    this.ownedShareCount = position[0];\\n    this.ownedShareAvgPrice = position[1];\\n    this.sharesWorth = getStockWorth(ns, symbol);\\n    this.profit =\\n      (this.sharesWorth - this.ownedShareCount * this.ownedShareAvgPrice) /\\n      (this.ownedShareCount * this.ownedShareAvgPrice);\\n\\n    this.forecast = ns.stock.getForecast(symbol);\\n  }\\n\\n  _getForecast() {\\n    if (this.forecast > 0.8) return '+++';\\n    if (this.forecast > 0.64) return '++';\\n    if (this.forecast >= 0.5) return '+';\\n    if (this.forecast > 0.32) return '-';\\n    if (this.forecast > 0.16) return '--';\\n    return '---';\\n  }\\n\\n  _getRowColor() {\\n    if (this.profit === 0) return RowColor.WARN;\\n    return this.profit > 0 ? RowColor.NORMAL : RowColor.ERROR;\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SYMBOL_COLUMN_HEADER]: this.symbol,\\n      [ASK_PRICE_COLUMN_HEADER]: formatMoney(this.askPrice),\\n      [BID_PRICE_COLUMN_HEADER]: formatMoney(this.bidPrice),\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: formatNumber(\\n        this.ownedShareCount,\\n        true\\n      ),\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: formatNumber(this.maxShareCount, true),\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: formatPercent(\\n        this.ownedShareCount / this.maxShareCount\\n      ),\\n      [SHARES_WORTH_COLUMN_HEADER]:\\n        this.ownedShareCount === 0 ? '--' : formatMoney(this.sharesWorth, true),\\n      [SHARES_PROFIT_COLUMN_HEADER]:\\n        this.ownedShareCount === 0\\n          ? '--'\\n          : (this.profit > 0 ? '+' : '') + formatPercent(this.profit),\\n      [FORECAST_COLUMN_HEADER]: this._getForecast(),\\n      rowColor: this._getRowColor(),\\n    };\\n  }\\n}\\n\",\"filename\":\"get-stock-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///9c3264f6-993b-4338-9da0-c144b8e64bc4\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///8ce78e3e-5b38-4745-9208-49a558120b99\"},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///5aaf1f10-1d28-48f5-bef3-b91f6f0029d4\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///ad4050d6-1fed-4597-8ada-d32cc43213f1\"},{\"filename\":\"get-stock-info.js\",\"url\":\"blob:file:///38c6bdee-8bbc-492b-b73d-605b0e8c795b\"}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":245,\"_hash\":\"f3bbc46e80bfd4c6386e22c95a62972d37bbd7348daf690e020321d6af4b1349\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef Alignment\\n */\\n\\n/**\\n * Enum for cell alignment.\\n *\\n * @readonly\\n * @enum {Alignment}\\n */\\nexport const Alignment = Object.freeze({ LEFT: 'left', RIGHT: 'right' });\\n\\n/**\\n * @typedef RowColor\\n */\\n\\n/**\\n * Enum for color of row.\\n *\\n * @readonly\\n * @enum {RowColor}\\n */\\nexport const RowColor = Object.freeze({\\n  INFO: 'INFO  ',\\n  WARN: 'WARN  ',\\n  ERROR: 'ERROR ',\\n  NORMAL: '      ',\\n});\\n\\nconst PIPE = '┊';\\nconst DASH = '—';\\nconst JOIN = '+';\\n\\n/**\\n * Utils for printing a table in the terminal.\\n *\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n *        if a column header is not specified in this map, then it is assumed\\n *        that it will be left-aligned\\n * @param {...Object.<string, any>[]} sections\\n *        sections contain rows that are divided by a divider; all rows must\\n *        have the same keys (which are used for column headers)\\n */\\nexport function printTable(ns, columnHeaderToAlignmentMap, ...sections) {\\n  // Fill in any missing alignments. Note that the alignments are not guaranteed\\n  // to be in the same order as the column headers, so we cannot rely on the\\n  // order.\\n  const columnHeaders = Object.keys(sections[0][0]).filter(\\n    key => key !== 'rowColor'\\n  );\\n  if (!columnHeaderToAlignmentMap) columnHeaderToAlignmentMap = {};\\n  for (const columnHeader of columnHeaders) {\\n    if (!(columnHeader in columnHeaderToAlignmentMap)) {\\n      columnHeaderToAlignmentMap[columnHeader] = Alignment.LEFT;\\n    }\\n  }\\n\\n  // Get width of each column.\\n  const columnHeaderToWidthMap = columnHeaders.reduce(\\n    (map, columnHeader) => ({ ...map, [columnHeader]: columnHeader.length }),\\n    {}\\n  );\\n  for (const columnHeader of columnHeaders) {\\n    for (const rows of sections) {\\n      for (const row of rows) {\\n        const lines = row[columnHeader].toString().split('\\\\n');\\n        columnHeaderToWidthMap[columnHeader] = Math.max(\\n          columnHeaderToWidthMap[columnHeader],\\n          ...lines.map(line => line.length)\\n        );\\n      }\\n    }\\n  }\\n\\n  // Print the column headers.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n\\n  // Print each section.\\n  for (let i = 0; i < sections.length; i++) {\\n    for (let j = 0; j < sections[i].length; j++) {\\n      _printRow(\\n        ns,\\n        sections[i][j],\\n        columnHeaders,\\n        columnHeaderToAlignmentMap,\\n        columnHeaderToWidthMap,\\n        j === sections[i].length - 1 && i !== sections.length - 1\\n      );\\n    }\\n  }\\n\\n  // Print the column headers at the end again.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, any>} row\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @param {boolean} shouldAddDivider\\n */\\nfunction _printRow(\\n  ns,\\n  row,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap,\\n  shouldAddDivider\\n) {\\n  const height = Math.max(\\n    ...Object.values(row).map(value => value.toString().split('\\\\n').length)\\n  );\\n\\n  const contents = new Array(height).fill('');\\n  for (const columnHeader of columnHeaders) {\\n    const lines = row[columnHeader].split('\\\\n');\\n    const width = columnHeaderToWidthMap[columnHeader];\\n\\n    for (let i = 0; i < contents.length; i++) {\\n      let line = lines[i] || '';\\n      line =\\n        columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n          ? line.padStart(width)\\n          : line.padEnd(width);\\n      contents[i] += `${PIPE} ${line} `;\\n    }\\n  }\\n  for (let i = 0; i < contents.length; i++) {\\n    contents[i] =\\n      (i === 0 && row.rowColor ? row.rowColor : RowColor.NORMAL) +\\n      contents[i] +\\n      PIPE;\\n  }\\n  if (shouldAddDivider) {\\n    contents.push(\\n      RowColor.NORMAL + _getDivider(columnHeaders, columnHeaderToWidthMap)\\n    );\\n  }\\n\\n  ns.tprintf('%s', contents.join('\\\\n'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printColumnHeaders(\\n  ns,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap\\n) {\\n  const contents = columnHeaders\\n    .map(columnHeader => {\\n      const width = columnHeaderToWidthMap[columnHeader];\\n      return columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n        ? columnHeader.padStart(width)\\n        : columnHeader.padEnd(width);\\n    })\\n    .join(` ${PIPE} `)\\n    .toUpperCase();\\n  const divider = _getDivider(columnHeaders, columnHeaderToWidthMap);\\n  ns.tprintf(\\n    '%s',\\n    [\\n      RowColor.INFO + divider,\\n      RowColor.NORMAL + PIPE + ` ${contents} ` + PIPE,\\n      RowColor.NORMAL + divider,\\n    ].join('\\\\n')\\n  );\\n}\\n\\n/**\\n * @param {import('..').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printDivider(ns, columnHeaders, columnHeaderToWidthMap) {\\n  ns.tprintf(\\n    '%s%s',\\n    RowColor.INFO,\\n    _getDivider(columnHeaders, columnHeaderToWidthMap)\\n  );\\n}\\n\\n/**\\n * Gets just the divider string without the row color print.\\n *\\n * This function does not print anything.\\n *\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @returns {string}\\n */\\nfunction _getDivider(columnHeaders, columnHeaderToWidthMap) {\\n  const contents = columnHeaders\\n    .map(columnHeader => ''.padEnd(columnHeaderToWidthMap[columnHeader], DASH))\\n    .join(DASH + JOIN + DASH);\\n  return [JOIN, DASH, contents, DASH, JOIN].join('');\\n}\\n\",\"filename\":\"/utils/table.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":246,\"_hash\":\"e6e0f0dac4daafd7cb1872f980a02b2d7ddaffe54f6741be2e57a9e3aaf08b0c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport { sort } from '/utils/misc.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nconst SCRIPT_NAME_COLUMN_HEADER = 'Script name';\\nconst RAM_COLUMN_HEADER = 'RAM';\\nconst IS_RUNNING_COLUMN_HEADER = 'Is running';\\n\\n/**\\n * Prints out how much RAM each script takes up.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const scriptNames = ns\\n    .ls(HOME_SERVER_NAME)\\n    .filter(fileName => fileName.endsWith('.js') && !fileName.startsWith('/'));\\n  sort(scriptNames, scriptName => scriptName);\\n  const scripts = scriptNames.map(fileName => ({\\n    [SCRIPT_NAME_COLUMN_HEADER]: fileName,\\n    [RAM_COLUMN_HEADER]: ns.getScriptRam(fileName) + ' GB',\\n    [IS_RUNNING_COLUMN_HEADER]: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? 'true'\\n      : '--',\\n    rowColor: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? RowColor.NORMAL\\n      : RowColor.INFO,\\n  }));\\n\\n  printTable(\\n    ns,\\n    {\\n      [RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [IS_RUNNING_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    scripts,\\n    [\\n      {\\n        [SCRIPT_NAME_COLUMN_HEADER]: 'Total',\\n        [RAM_COLUMN_HEADER]:\\n          scriptNames\\n            .map(scriptName => ns.getScriptRam(scriptName, HOME_SERVER_NAME))\\n            .reduce((a, b) => a + b)\\n            .toFixed(2) + ' GB',\\n        [IS_RUNNING_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ]\\n  );\\n}\\n\",\"filename\":\"get-scripts-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///eec09c77-77c0-4e72-a2bf-1493f392e65b\",\"moduleSequenceNumber\":454413},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///2d5c0813-1b86-46d0-bb31-36d7a49dd08d\",\"moduleSequenceNumber\":454413},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///5fe18efc-20d5-49d9-8e1a-6b6a5ddeb083\",\"moduleSequenceNumber\":454414},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///97888344-5e28-4a7a-b592-b12b4ca7e751\",\"moduleSequenceNumber\":454410},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///3cd1252e-9a6c-40c0-a656-27f678bac4a2\",\"moduleSequenceNumber\":454415},{\"filename\":\"get-scripts-info.js\",\"url\":\"blob:file:///379fa76c-d486-44ae-ae8b-d0becca1248d\",\"moduleSequenceNumber\":454416}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":247,\"_hash\":\"22a7af45c38cd14eb6c8f6dd6dc5cf0ccaabb9c565942e7005e1c8a468995be0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of array of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @param {number[][]} input\\n */\\nexport function mergeOverlappingIntervals(input) {\\n  return _mergeOverlappingIntervals(input);\\n}\\n\\n/**\\n * @param {number[][]} intervals\\n * @returns {number[][]} merged intervals\\n */\\nfunction _mergeOverlappingIntervals(intervals) {\\n  // Sort by second number and then by first number.\\n  intervals.sort((a, b) => a[1] - b[1]);\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  // Find any overlaps.\\n  let overlappingIntervals = [];\\n  let mergedInterval;\\n  for (let i = 0; i < intervals.length - 1; i++) {\\n    for (let j = i + 1; j < intervals.length; j++) {\\n      if (_hasOverlap(intervals[i], intervals[j])) {\\n        overlappingIntervals.push(intervals[i], intervals[j]);\\n        mergedInterval = _merge(intervals[i], intervals[j]);\\n        break;\\n      }\\n    }\\n    if (mergedInterval) break;\\n  }\\n\\n  if (mergedInterval === undefined) return intervals;\\n  intervals = [\\n    mergedInterval,\\n    ...intervals.filter(interval => {\\n      for (const overlappingInterval of overlappingIntervals) {\\n        if (_equal(overlappingInterval, interval)) return false;\\n      }\\n      return true;\\n    }),\\n  ];\\n  return _mergeOverlappingIntervals(intervals);\\n}\\n\\n/**\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {boolean} true if has overlap\\n */\\nfunction _hasOverlap(a, b) {\\n  if (a[0] === b[0] || a[1] === b[1]) return true;\\n  return a[0] < b[0] ? b[0] <= a[1] : a[0] <= b[1];\\n}\\n\\n/**\\n * Merge overlapping intervals. Intervals **must** be overlapping.\\n *\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {number[]} merged interval\\n */\\nfunction _merge(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\\nfunction _equal(a, b) {\\n  return a[0] === b[0] && a[1] === b[1];\\n}\\n\",\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":248,\"_hash\":\"e1a3fee96bfcb47b06fcf82a1625a24dfaec6e621278b577b1318efb365181e1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *             [5],\\n *            [4,5],\\n *           [7,4,6],\\n *          [9,6,4,3],\\n *         [7,4,9,7,8],\\n *        [6,2,7,9,4,2],\\n *       [5,2,3,8,1,5,1],\\n *      [8,4,9,7,1,1,1,2],\\n *     [4,8,1,8,1,3,9,8,6],\\n *    [7,1,1,7,5,8,3,5,3,6],\\n *   [4,6,3,6,4,7,8,5,9,5,8]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} input\\n */\\nexport function minimumPathSumInATriangle(input) {\\n  let rootNode = new Node(input, 0, 0);\\n  return Math.min(\\n    ..._getPaths(rootNode, '').map(path => path.reduce((a, b) => a + b))\\n  );\\n}\\n\\nfunction _getPaths(rootNode, pathThusFar) {\\n  pathThusFar = [...pathThusFar, rootNode.number];\\n  if (rootNode.nextNodes.length === 0) {\\n    return [pathThusFar];\\n  }\\n  const paths = [];\\n  for (const nextNode of rootNode.nextNodes) {\\n    paths.push(..._getPaths(nextNode, pathThusFar));\\n  }\\n  return paths;\\n}\\n\\nclass Node {\\n  constructor(input, row, column) {\\n    this.number = input[row][column];\\n    this.row = row;\\n    this.column = column;\\n\\n    if (this.row === input.length - 1) {\\n      this.nextNodes = [];\\n    } else {\\n      this.nextNodes = [\\n        new Node(input, row + 1, column),\\n        new Node(input, row + 1, column + 1),\\n      ];\\n    }\\n  }\\n}\\n\",\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":249,\"_hash\":\"b58fab38dc5a586f5c6c2795100c671d9b3302ba8dfd4d490d994f3f4e9d159f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const MANAGE_SERVERS_TO_MANAGE_HACKING_PORT = 1;\\nexport const MANAGE_HACKING_TO_MANAGE_STOCKS_PORT = 2;\\n\\nexport const NULL_PORT_DATA = 'NULL PORT DATA';\\n\",\"filename\":\"/utils/ports.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":250,\"_hash\":\"42d5972a2164f7240d5da41c0ba94b9d48bcf741587306fa984ce2e6023f732d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath, HOME_SERVER_NAME } from '/utils/servers.js';\\n\\n/**\\n * Prints the command to go to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint(`usage: run get-path.js <server name>`);\\n    return;\\n  }\\n  const path = [\\n    HOME_SERVER_NAME,\\n    ...getPath(ns, serverName).map(path => 'connect ' + path),\\n  ].join('; ');\\n  ns.tprintf('%s', path);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"get-path.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///3e8038f7-9cc4-454d-aa53-53e2ad0ee134\",\"moduleSequenceNumber\":122},{\"filename\":\"get-path.js\",\"url\":\"blob:file:///a89e6eab-7f6c-42d3-ae36-2cac9e23532f\",\"moduleSequenceNumber\":1471}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":251,\"_hash\":\"5d4680d9f7dbc8846cc1c53692a347168f5a7ad8703e441fb1237de6726247a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderI = input => _getMaxProfit(1, input);\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderII = input =>\\n  _getMaxProfit(input.length, input);\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIII = input => _getMaxProfit(2, input);\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * @param {any[]} input where the first element is the number of trade counts\\n *                      and the second element is the stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIV = input =>\\n  _getMaxProfit(input[0], input[1]);\\n\\n/**\\n * @param {number} maxTradeCount\\n * @param {number[]} stockPrices\\n * @returns {number} max profit\\n */\\nfunction _getMaxProfit(maxTradeCount, stockPrices) {\\n  const tradesWithPositiveProfits = Array(stockPrices.length); // Index is buy day\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    tradesWithPositiveProfits[buyDay] = _getTradesWithPositiveProfit(\\n      stockPrices,\\n      buyDay\\n    );\\n  }\\n\\n  const tradePermutations = Array(stockPrices.length); // Index is buy day.\\n  for (let buyDay = stockPrices.length - 1; buyDay >= 0; buyDay--) {\\n    const availableTrades = tradesWithPositiveProfits[buyDay];\\n    tradePermutations[buyDay] = availableTrades.map(trade => [trade]);\\n\\n    if (buyDay === stockPrices.length - 1) continue;\\n\\n    const futureTradePermutations = tradePermutations[buyDay + 1];\\n    for (const futureTradePermutation of futureTradePermutations) {\\n      tradePermutations[buyDay].push(futureTradePermutation);\\n      if (futureTradePermutation.length === maxTradeCount) continue;\\n\\n      for (const availableTrade of availableTrades) {\\n        if (availableTrade.sellDay <= futureTradePermutation[0].buyDay) {\\n          tradePermutations[buyDay].push([\\n            availableTrade,\\n            ...futureTradePermutation,\\n          ]);\\n        }\\n      }\\n    }\\n\\n    // Trim permutations so that only one permutation of each length and\\n    // buy day (where the chosen permutation is the one with the max profit)\\n    /** @type {Object.<number, Permutation[]>} */\\n    const buyDayToPermutationsMap = {};\\n    for (const permutation of tradePermutations[buyDay]) {\\n      const key = permutation[0].buyDay;\\n      if (!(key in buyDayToPermutationsMap)) buyDayToPermutationsMap[key] = [];\\n      buyDayToPermutationsMap[key].push(permutation);\\n    }\\n    const permutationsToKeep = [];\\n    for (const permutations of Object.values(buyDayToPermutationsMap)) {\\n      const lengthToBestPermutationMap = {};\\n      const lengthToMaxProfitMap = {};\\n      for (const permutation of permutations) {\\n        const length = permutation.length;\\n        const profit = permutation\\n          .map(trade => trade.profit)\\n          .reduce((a, b) => a + b, 0);\\n        if (\\n          !(length in lengthToMaxProfitMap) ||\\n          profit > lengthToMaxProfitMap[length]\\n        ) {\\n          lengthToMaxProfitMap[length] = profit;\\n          lengthToBestPermutationMap[length] = permutation;\\n        }\\n      }\\n      permutationsToKeep.push(...Object.values(lengthToBestPermutationMap));\\n    }\\n    tradePermutations[buyDay] = permutationsToKeep;\\n  }\\n\\n  return Math.max(\\n    ...tradePermutations[0].map(trades =>\\n      trades.map(trade => trade.profit).reduce((a, b) => a + b, 0)\\n    )\\n  );\\n}\\n\\n/**\\n * @typedef {Trade[]} Permutation\\n */\\n\\n/**\\n * @typedef {Object} Trade\\n * @property {number} buyDay\\n * @property {number} sellDay\\n * @property {number} profit\\n */\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {number} buyDay\\n * @returns {Trade[]} trades with positive profit\\n */\\nfunction _getTradesWithPositiveProfit(stockPrices, buyDay) {\\n  const buyPrice = stockPrices[buyDay];\\n  const trades = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const sellPrice = stockPrices[sellDay];\\n    const profit = sellPrice - buyPrice;\\n    if (profit > 0) {\\n      trades.push({ buyDay: buyDay, sellDay: sellDay, profit: profit });\\n    }\\n  }\\n  return trades;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":252,\"_hash\":\"8f1ce73f1ee6a0f7e5a26f84082207c53ce4a1febf88bc9ead2dfcc6c03fcc69\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order\\n *\\n * @param {number[][]} input\\n * @returns {number[]}\\n */\\nexport function spiralizeMatrix(input) {\\n  const visitedMatrix = Array.from({ length: input.length }, () =>\\n    Array(input[0].length).fill(false)\\n  );\\n  return _getPath(input, visitedMatrix, 0, 0, Direction.RIGHT, []);\\n}\\n\\n/**\\n * @typedef {number} Direction\\n */\\n\\n/**\\n * @readonly\\n * @enum {Direction}\\n */\\nconst Direction = Object.freeze({\\n  RIGHT: 0,\\n  DOWN: 1,\\n  LEFT: 2,\\n  UP: 3,\\n});\\n\\n/**\\n * @param {number[][]} matrix\\n * @param {boolean[][]} visitedMatrix copy of matrix for marking which cells we've visited\\n * @param {number} currentX\\n * @param {number} currentY\\n * @param {Direction} currentDirection\\n * @param {number[]} pathThusFar\\n */\\nfunction _getPath(\\n  matrix,\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection,\\n  pathThusFar\\n) {\\n  pathThusFar.push(matrix[currentY][currentX]);\\n  visitedMatrix[currentY][currentX] = true;\\n\\n  // Check if we have visited all cells.\\n  if (_visitedAll(visitedMatrix)) return pathThusFar;\\n\\n  const nextDirection = _getNextDirection(\\n    visitedMatrix,\\n    currentX,\\n    currentY,\\n    currentDirection\\n  );\\n  return _getPath(\\n    matrix,\\n    visitedMatrix,\\n    _getNextX(currentX, nextDirection),\\n    _getNextY(currentY, nextDirection),\\n    nextDirection,\\n    pathThusFar\\n  );\\n}\\n\\nfunction _getNextDirection(\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection\\n) {\\n  if (_canMove(visitedMatrix, currentX, currentY, currentDirection)) {\\n    return currentDirection;\\n  }\\n  return (currentDirection + 1) % Object.keys(Direction).length;\\n}\\n\\nfunction _canMove(visitedMatrix, currentX, currentY, nextDirection) {\\n  const x = _getNextX(currentX, nextDirection);\\n  const y = _getNextY(currentY, nextDirection);\\n  if (x < 0 || x >= visitedMatrix[0].length) return false;\\n  if (y < 0 || y >= visitedMatrix.length) return false;\\n  return !visitedMatrix[y][x];\\n}\\n\\nfunction _getNextX(currentX, nextDirection) {\\n  if (nextDirection === Direction.LEFT) return currentX - 1;\\n  if (nextDirection === Direction.RIGHT) return currentX + 1;\\n  return currentX;\\n}\\n\\nfunction _getNextY(currentY, nextDirection) {\\n  if (nextDirection === Direction.UP) return currentY - 1;\\n  if (nextDirection === Direction.DOWN) return currentY + 1;\\n  return currentY;\\n}\\n\\nfunction _visitedAll(visitedMatrix) {\\n  for (let y = 0; y < visitedMatrix.length; y++) {\\n    for (let x = 0; x < visitedMatrix[y].length; x++) {\\n      if (!visitedMatrix[y][x]) return false;\\n    }\\n  }\\n  return true;\\n}\\n\",\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":253,\"_hash\":\"e4811fbcb4e08d87e2f6b7535abe9a79be10092ade4a3c606f43b16279aa517e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with N rows and M columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns.\\n *\\n * @param {number[]} input array representing number of rows and columns\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const rowCount = input[0];\\n  const columnCount = input[1];\\n  const grid = Array(columnCount).fill(Array(rowCount).fill(0));\\n  return _getUniquePathCount(grid);\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * @param {number[][]} input grid\\n * @returns {number} number of unique paths\\n */\\nexport const uniquePathsInAGridII = _getUniquePathCount;\\n\\n/**\\n * String that is the Object {x: x, y: y} stringified.\\n *\\n * @typedef {string} Coordinates\\n */\\n\\n/**\\n * String containing of only 'D' and 'R' where 'D' represents moving down and\\n * 'R' represents moving right.\\n *\\n * @typedef {string} Path\\n */\\n\\n/**\\n * @param {number[][]} grid\\n * @returns {number} number of unique paths\\n */\\nfunction _getUniquePathCount(grid) {\\n  /** @type {Object.<Coordinates, Path[]>} */\\n  const coordinatesToUniquePathsMap = {};\\n\\n  const columnCount = grid.length;\\n  const rowCount = grid[0].length;\\n  for (let y = columnCount - 1; y >= 0; y--) {\\n    for (let x = rowCount - 1; x >= 0; x--) {\\n      const coordinates = JSON.stringify({ x: x, y: y });\\n      const uniquePaths = _getUniquePaths(\\n        x,\\n        y,\\n        grid,\\n        coordinatesToUniquePathsMap\\n      );\\n      coordinatesToUniquePathsMap[coordinates] = uniquePaths;\\n    }\\n  }\\n\\n  return coordinatesToUniquePathsMap[JSON.stringify({ x: 0, y: 0 })].length;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Object.<Coordinates, Path[]>} coordinatesToUniquePathsMap\\n * @returns {Path[]}\\n */\\nfunction _getUniquePaths(x, y, grid, coordinatesToUniquePathsMap) {\\n  if (y === grid.length - 1 && x === grid[0].length - 1) return [''];\\n\\n  const allPaths = [];\\n\\n  // Get paths if we moved right.\\n  if (_canMoveRight(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x + 1, y: y });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'R' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  // Get paths if we moved down.\\n  if (_canMoveDown(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x, y: y + 1 });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'D' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  return allPaths;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveRight(x, y, grid) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveDown(x, y, grid) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":254,\"_hash\":\"f28c78bf6d9946291215c40e2fea083e70af5c3a45d8320cde91ac933b45b830\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const STOCK_EXCHANGE_API = 'Stock Exchange API';\\nexport const STOCK_MARKET_DATA_API = 'Stock Market Data API';\\nexport const SF4_API = 'SF4 API';\\n\",\"filename\":\"/utils/apis.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":255,\"_hash\":\"bedec2aa15c0ed8f32f7d33bb1c1e3e1e3e742d78dd1765250809a0a9c92aeb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/utils/api.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":256,\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath } from '/utils/servers.js';\\n\\n/**\\n * Connects to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  if (typeof ns.args[0] !== 'string') {\\n    ns.tprint(`usage: run connect.js <server name>`);\\n    return;\\n  }\\n  const path = getPath(ns, ns.args[0]);\\n  for (const server of path) ns.connect(server);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///b2ecd93f-e761-41f8-9dab-3efd68e818ca\",\"moduleSequenceNumber\":122},{\"filename\":\"connect.js\",\"url\":\"blob:file:///77075a83-c349-4661-abd6-ffaf44aa8bc7\",\"moduleSequenceNumber\":1470}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"moduleSequenceNumber\":257,\"_hash\":\"630533065cffaa6689959d488806cdaede0e456c0811ac6148d496b1db5728b0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  formatPercent,\\n  formatMoney,\\n  formatNumber,\\n  formatTime,\\n} from '/utils/format.js';\\n\\n/**\\n * Monitors a single server in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint('usage: run monitor-server.js <server name> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(serverName);\\n\\n    const availableMoney = ns.getServerMoneyAvailable(serverName);\\n    const percentMaxMoney = availableMoney / ns.getServerMaxMoney(serverName);\\n    ns.print(\\n      `\\\\navailable money: ${formatMoney(availableMoney)} (${formatPercent(\\n        percentMaxMoney\\n      )} of max)`\\n    );\\n\\n    const securityLevel = ns.getServerSecurityLevel(serverName);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    ns.print(\\n      `security level:  ${formatNumber(securityLevel)} (min is ${formatNumber(\\n        minSecurityLevel\\n      )})`\\n    );\\n\\n    ns.print(`hack chance: ${formatPercent(ns.hackAnalyzeChance(serverName))}`);\\n\\n    ns.print(\\n      '\\\\n' +\\n        [\\n          `time to hack:   ${formatTime(ns.getHackTime(serverName))}`,\\n          `time to grow:   ${formatTime(ns.getGrowTime(serverName))}`,\\n          `time to weaken: ${formatTime(ns.getWeakenTime(serverName))}`,\\n        ].join('\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"monitor-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///625064d1-46ee-427d-bd07-ad9ba932eb85\"},{\"filename\":\"monitor-server.js\",\"url\":\"blob:file:///6a6a2172-87d7-4941-9392-8db1b856cc38\"}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":258,\"_hash\":\"45b6a42f6e2cc9bd77d3789b9e1fa5dfac2e81d8add5f155e670d20935793d2f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const PROGRAMS = [\\n  'SQLInject.exe',\\n  'HTTPWorm.exe',\\n  'relaySMTP.exe',\\n  'FTPCrack.exe',\\n  'BruteSSH.exe',\\n  'Formulas.exe',\\n];\\n\\n/**\\n * Buys TOR router and programs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const player = ns.getPlayer();\\n\\n  // Buy TOR router.\\n  if (!player.tor) {\\n    while (!ns.purchaseTor()) await ns.sleep(1000);\\n    ns.toast('Bought TOR');\\n  }\\n\\n  // Buy programs.\\n  let programsToBuy;\\n  do {\\n    programsToBuy = PROGRAMS.filter(program => !ns.fileExists(program));\\n\\n    for (const program of programsToBuy) {\\n      if (ns.isBusy() && ns.getPlayer().createProgramName === program) {\\n        continue;\\n      }\\n      const success = ns.purchaseProgram(program);\\n      if (success) ns.toast('Bought ' + program);\\n    }\\n\\n    await ns.sleep(1000);\\n  } while (programsToBuy.length > 0);\\n}\\n\",\"filename\":\"manage-programs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manage-programs.js\",\"url\":\"blob:file:///c09581aa-d60a-4680-80ff-e900aeff8e69\",\"moduleSequenceNumber\":598840}],\"dependents\":[],\"ramUsage\":74.2,\"server\":\"home\",\"moduleSequenceNumber\":259,\"_hash\":\"0a1a3edc774c4e50505c968ddb851560ba22c940ebdd09e78df9e2a6894f2242\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const DISABLE_LOGGING_FUNCTIONS = ['sleep'];\\n\\nconst WORKING_WORK_TYPES = [\\n  'Working for Company part-time',\\n  'Working for Company',\\n];\\n\\n/**\\n * Manages life when we're not busy playing.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    const player = ns.getPlayer();\\n\\n    if (\\n      ns.isBusy() &&\\n      (WORKING_WORK_TYPES.includes(player.workType) ||\\n        player.crimeType !== '' ||\\n        player.createProgramName !== '' ||\\n        player.currentWorkFactionName !== '')\\n    ) {\\n      // Working at a job or doing a crime, so keep on working.\\n      await ns.sleep(10000);\\n      continue;\\n    }\\n\\n    const lowestSkill = Math.min(\\n      player.hacking,\\n      player.charisma,\\n      player.strength,\\n      player.defense,\\n      player.dexterity,\\n      player.agility\\n    );\\n    if (ns.isBusy() && player.workType.startsWith('Study')) {\\n      // Studying or Taking a class at university\\n      switch (player.className) {\\n        case 'training your strength at a gym':\\n          if (lowestSkill != player.strength) ns.stopAction();\\n          break;\\n        case 'training your defense at a gym':\\n          if (lowestSkill != player.defense) ns.stopAction();\\n          break;\\n        case 'training your dexterity at a gym':\\n          if (lowestSkill != player.dexterity) ns.stopAction();\\n          break;\\n        case 'training your agility at a gym':\\n          if (lowestSkill != player.agility) ns.stopAction();\\n          break;\\n        case 'taking a Leadership course':\\n          if (lowestSkill != player.charisma) ns.stopAction();\\n          break;\\n        case 'taking an Algorithms course':\\n          if (lowestSkill != player.hacking) ns.stopAction();\\n          break;\\n        default:\\n          // Not sure what class we're taking, but stop it!\\n          ns.stopAction();\\n      }\\n      if (ns.isBusy()) {\\n        await ns.sleep(10000);\\n        continue;\\n      }\\n    }\\n\\n    // Player is no longer busy, so start learning something!\\n    switch (lowestSkill) {\\n      case player.strength:\\n        ns.gymWorkout('powerhouse gym', 'strength');\\n        break;\\n      case player.defense:\\n        ns.gymWorkout('powerhouse gym', 'defense');\\n        break;\\n      case player.dexterity:\\n        ns.gymWorkout('powerhouse gym', 'dexterity');\\n        break;\\n      case player.agility:\\n        ns.gymWorkout('powerhouse gym', 'agility');\\n        break;\\n      case player.charisma:\\n        ns.universityCourse('rothman university', 'Leadership');\\n        break;\\n      case player.hacking:\\n        ns.universityCourse('rothman university', 'Algorithms');\\n        break;\\n      default:\\n        // Should never get here.\\n        ns.universityCourse('rothman university', 'Leadership');\\n    }\\n    await ns.sleep(10000);\\n  }\\n}\\n\",\"filename\":\"manage-life.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manage-life.js\",\"url\":\"blob:file:///4dd8b46e-6a00-41b4-9c29-eb14de5c41c1\",\"moduleSequenceNumber\":1351439}],\"dependents\":[],\"ramUsage\":90.1,\"server\":\"home\",\"moduleSequenceNumber\":260,\"_hash\":\"502d1493ca2b7caa2b126c91c507ce13be99ed9fd0bc924c707efe26401cc7b5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getForecast } from '/utils/stock.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\n\\n/**\\n * Monitors a single stock in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols = [];\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    ns.tprint('stock API not bought yet');\\n    return;\\n  }\\n\\n  const symbol = ns.args[0];\\n  if (typeof symbol !== 'string' || !symbols.includes(symbol)) {\\n    ns.tprint('usage: run monitor-stock.js <stock symbol> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    const ownedShareCount = position[0];\\n    const ownedAvgSharePrice = position[1];\\n    ns.print('owned shared count:     ', formatNumber(ownedShareCount));\\n    ns.print('owned avg. share price: ', formatMoney(ownedAvgSharePrice));\\n\\n    const askPrice = ns.stock.getAskPrice(symbol);\\n    const bidPrice = ns.stock.getBidPrice(symbol);\\n    ns.print('ask price: ', formatMoney(askPrice));\\n    ns.print('bid price: ', formatMoney(bidPrice), '\\\\n');\\n    ns.print('forecast: ', formatPercent(getForecast(ns, symbol)));\\n\\n    await ns.sleep(6000);\\n  }\\n}\\n\",\"filename\":\"monitor-stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///273103e9-03ca-40d0-a58e-4c0bfa94c8dc\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///3f4be85e-f1c5-42f3-a813-8922f8bac344\"},{\"filename\":\"monitor-stock.js\",\"url\":\"blob:file:///fef1cf13-fcfa-4ae5-a748-0a7c15157192\"}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":261,\"_hash\":\"049233dae835648710e421548d0d39f0a5940cccdde4876058c91940a10804b1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServerNames } from '/utils/servers.js';\\n\\nconst COMPANY_NAMES = {\\n  ECorp: { stockSymbol: 'ECP' },\\n  MegaCorp: { stockSymbol: 'MGCP' },\\n  'Blade Industries': { stockSymbol: 'BLD' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK' },\\n  'Four Sigma': { stockSymbol: 'FSIG' },\\n  'KuaiGong International': { stockSymbol: 'KGI' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM' },\\n  'Storm Technologies': { stockSymbol: 'STM' },\\n  DefComm: { stockSymbol: 'DCOMM' },\\n  'Helios Labs': { stockSymbol: 'HLS' },\\n  VitaLife: { stockSymbol: 'VITA' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS' },\\n  'Universal Energy': { stockSymbol: 'UNV' },\\n  AeroCorp: { stockSymbol: 'AERO' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH' },\\n  'Nova Medical': { stockSymbol: 'NVMD' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO' },\\n  'Rho Construction': { stockSymbol: 'RHOC' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE' },\\n  'SysCore Securities': { stockSymbol: 'SYSC' },\\n  CompuTek: { stockSymbol: 'CTK' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK' },\\n  'Omega Software': { stockSymbol: 'OMGA' },\\n  FoodNStuff: { stockSymbol: 'FNS' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN' },\\n  'Titan Laboratories': { stockSymbol: 'TITN' },\\n};\\n\\nexport function main(ns) {\\n  // ns.tprint(Object.keys(COMPANY_NAMES).length);\\n  // ns.tprint(ns.stock.getSymbols().length);\\n  const serverNames = getAllServerNames(ns);\\n  for (const serverName of serverNames) {\\n    ns.tprint(ns.getServer(serverName).organizationName);\\n  }\\n}\\n\",\"filename\":\"/utils/companies.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/companies.js\",\"url\":\"blob:file:///1286c66f-cb85-4d0a-8f25-beba3ad005cb\"}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":262,\"_hash\":\"e794661723ab1af3726d0ee386e3e10b8c6e5d84afe5dad138446185ab3a4d4b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ORGANIZATIONS = {\\n  ECorp: { stockSymbol: 'ECP', serverName: 'ecorp' },\\n  MegaCorp: { stockSymbol: 'MGCP', serverName: 'megacorp' },\\n  'Blade Industries': { stockSymbol: 'BLD', serverName: 'blade' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK', serverName: 'clarkinc' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK', serverName: 'omnitek' },\\n  'Four Sigma': { stockSymbol: 'FSIG', serverName: '4sigma' },\\n  'KuaiGong International': { stockSymbol: 'KGI', serverName: 'kuai-gong' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM', serverName: 'fulcrumtech' },\\n  'Storm Technologies': { stockSymbol: 'STM', serverName: 'stormtech' },\\n  DefComm: { stockSymbol: 'DCOMM', serverName: 'defcomm' },\\n  'Helios Labs': { stockSymbol: 'HLS', serverName: 'helios' },\\n  VitaLife: { stockSymbol: 'VITA', serverName: 'vitalife' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS', serverName: 'icarus' },\\n  'Universal Energy': { stockSymbol: 'UNV', serverName: 'univ-energy' },\\n  AeroCorp: { stockSymbol: 'AERO', serverName: 'aerocorp' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN', serverName: 'omnia' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS', serverName: 'solaris' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH', serverName: 'global-pharm' },\\n  'Nova Medical': { stockSymbol: 'NVMD', serverName: 'nova-med' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO', serverName: 'lexo-corp' },\\n  'Rho Construction': { stockSymbol: 'RHOC', serverName: 'rho-construction' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE', serverName: 'alpha-ent' },\\n  'SysCore Securities': { stockSymbol: 'SYSC', serverName: 'syscore' },\\n  CompuTek: { stockSymbol: 'CTK', serverName: 'comptek' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK', serverName: 'netlink' },\\n  'Omega Software': { stockSymbol: 'OMGA', serverName: 'omega-net' },\\n  FoodNStuff: { stockSymbol: 'FNS', serverName: 'foodnstuff' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC', serverName: 'sigma-cosmetics' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN', serverName: 'joesguns' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS', serverName: 'catalyst' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN', serverName: 'microdyne' },\\n  'Titan Laboratories': { stockSymbol: 'TITN', serverName: 'titan-labs' },\\n};\\n\\n/**\\n * @param {string} serverName\\n * @returns {string|undefined} stock symbol\\n */\\nexport function getStockSymbol(serverName) {\\n  const organizations = Object.values(ORGANIZATIONS);\\n  const organization = organizations.find(\\n    organization => organization.serverName === serverName\\n  );\\n  return organization === undefined ? undefined : organization.stockSymbol;\\n}\\n\",\"filename\":\"/utils/organizations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///e98eb0ff-a686-41d3-9223-a2ac132a04dd\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":263,\"_hash\":\"87c11a870fd8c62ffd2783a85ca99f5023b43d9b5d1922aaf0ad763d3a0eb9dc\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumber, formatTime } from '/utils/format.js';\\n\\nconst HISTORY_LENGTH = 100;\\nconst HISTORY_SECONDS = 10;\\n\\n/**\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const targetLevel = ns.args[0];\\n  if (typeof targetLevel !== 'number') {\\n    ns.tprint(`usage: run get-hacking-skill-progress.js <target level>`);\\n    return;\\n  }\\n  if (!ns.fileExists('Formulas.exe')) {\\n    ns.tprint('Need Formulas.exe');\\n    return;\\n  }\\n  const player = ns.getPlayer();\\n  const targetExp = ns.formulas.skills.calculateExp(9000, player.hacking_mult);\\n\\n  // Get current rate of exp growth.\\n  const expHistory = [];\\n  for (let i = 0; i < HISTORY_LENGTH; i++) {\\n    expHistory.push(getCurrentExp(ns));\\n    await ns.sleep((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  }\\n  const expDiffs = [];\\n  for (let i = 1; i < expHistory.length; i++) {\\n    expDiffs.push(expHistory[i] - expHistory[i - 1]);\\n  }\\n  const averageGrowth = expDiffs.reduce((a, b) => a + b) / HISTORY_LENGTH;\\n  const averageGrowthPerMs =\\n    averageGrowth / ((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  const currentExp = getCurrentExp(ns);\\n  const timeLeftMs = (targetExp - currentExp) / averageGrowthPerMs;\\n\\n  ns.tprintf('Current hacking experience: ' + formatNumber(currentExp, true));\\n  ns.tprintf('Target hacking experience: ' + formatNumber(targetExp, true));\\n  ns.tprintf(\\n    'Average exp growth per second: ' +\\n      formatNumber(averageGrowthPerMs * 1000, true)\\n  );\\n  ns.tprintf('Time to reach target: ' + formatTime(timeLeftMs));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getCurrentExp(ns) {\\n  const player = ns.getPlayer();\\n  return ns.formulas.skills.calculateExp(player.hacking, player.hacking_mult);\\n}\\n\",\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":156243},{\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"blob:file:///27db7ff0-7b0b-4145-ae9a-9ad7ecef722e\",\"moduleSequenceNumber\":191611}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":264,\"_hash\":\"c12132038d1dccdd6809c6332588105a4c1105ded343fe02c3ed7e2a8112ad26\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServerNames} from '/utils/servers.js'\\nimport {sort} from '/utils/misc.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns);\\n  sort(serverNames, serverName => getWeakenAbility(ns, serverName), true)\\n  \\n  ns.tprint(serverNames[0]);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getWeakenAbility(ns, serverName) {\\n  return ns.formulas.hacking.hackExp(ns.getServer(serverName), ns.getPlayer()) / Math.max(500, ns.getWeakenTime(serverName));\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///24437277-1184-43f9-a54c-a0c79f7e047b\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///7c45a3cf-3f9e-45aa-b3f9-a0e0220b75d5\",\"moduleSequenceNumber\":139},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///345120fa-4688-47ed-b07d-f29996c2c264\",\"moduleSequenceNumber\":121},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e0974ad3-38af-4543-bf83-36f2f9958df7\",\"moduleSequenceNumber\":122},{\"filename\":\"test.js\",\"url\":\"blob:file:///d223fa19-643c-4afa-916b-dddf49786c43\",\"moduleSequenceNumber\":2028}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":265,\"_hash\":\"3554a6554bbd5b080c2fae53d06f3bb362a956a25abb3a34be5848dbf4d06aa9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFreeRam, HOME_SERVER_NAME } from '/utils/servers.js';\\n\\n/**\\n * Runs a script when we have enough RAM to do so.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const scriptName = /** @type {string} */ (ns.args[0]);\\n  const args = ns.args.slice(1);\\n  const scriptRam = ns.getScriptRam(scriptName);\\n\\n  while (true) {\\n    const freeRam = getFreeRam(ns, HOME_SERVER_NAME);\\n    if (freeRam > scriptRam) {\\n      ns.exec(scriptName, HOME_SERVER_NAME, 1, ...args);\\n      return;\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autcomplete = data => [...data.scripts];\\n\",\"filename\":\"run-script.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///05c1530e-2e70-4857-883c-9dd02d4fb940\",\"moduleSequenceNumber\":1328474},{\"filename\":\"run-script.js\",\"url\":\"blob:file:///d18173dc-2a66-4c71-8241-cdb8c5354407\",\"moduleSequenceNumber\":1328698}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"lauren-11\",\"lauren-12\",\"lauren-13\",\"lauren-15\",\"lauren-16\",\"lauren-17\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-22\",\"lauren-23\",\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-2\",\"lauren-3\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-7\",\"lauren-8\",\"lauren-9\",\"lauren-10\",\"lauren-14\",\"lauren-18\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":27.956000000000035,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890696.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[6,9],[1,5,5],[9,6,5,4],[1,7,8,1,5],[5,7,2,9,2,6],[5,3,5,9,9,1,9],[4,4,7,3,7,2,7,6],[3,1,5,3,8,8,1,8,5],[5,5,1,2,9,1,2,2,8,8],[9,5,2,3,6,8,5,5,6,4,9],[7,4,9,9,3,9,5,4,3,2,6,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"57.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11733095024.800001,\"moneyMax\":58665475124,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1388,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"74.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11138331669,\"moneyMax\":55691658345,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1214,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"66.3.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":4774590745,\"moneyMax\":23872953725,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1085,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"85.9.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":6702423706.200001,\"moneyMax\":33512118531.000008,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":934,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107699-UniversalEnergy.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[190,74,153,195,180,98,1,163,93,16,21,54,182,29,84,58,56,196,115,81,169,92,146,45,88,188,63,158,39,55,111,31,154,12,46,56,54,115,111,35,155,155,170,78,183,11,31]],\"reward\":{\"name\":\"Universal Energy\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"84.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7967338766.200001,\"moneyMax\":39836693831.00001,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1027,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"60.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":3188732159.2000003,\"moneyMax\":15943660796,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1194,\"serverGrowth\":56}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"6.1.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":3473905737,\"moneyMax\":17369528685,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1011,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555760.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,-5,5,-2,10,10,10,2,4,9,3,-9,-3,-4,4,2,-2,7,6,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"2.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":3597942844.4,\"moneyMax\":17989714222,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1129,\"serverGrowth\":78}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-610938-UniversalEnergy.cct\",\"type\":\"Total Ways to Sum\",\"data\":9,\"reward\":{\"name\":\"Universal Energy\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"48.9.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":5662679584.8,\"moneyMax\":28313397924,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1134,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"74.4.7.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":281534734,\"moneyMax\":1407673670,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1139,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"75.5.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1188,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298923.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"78.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":238741997.4,\"moneyMax\":1193709987,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":889,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-672126.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[147,28,63,101,176,7,103,141,93,63,15,141,185,155,38,111,175,200,177,172,130,97,97,121,38,85,142,33,88],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"7.5.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":177326678.8,\"moneyMax\":886633394,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":978,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"73.8.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":168013926.8,\"moneyMax\":840069634.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":903,\"serverGrowth\":38}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"80.9.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":146719655.4,\"moneyMax\":733598277,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":899,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"24.8.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":156246975.4,\"moneyMax\":781234877,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":800,\"serverGrowth\":74}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"89.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":198421103,\"moneyMax\":992105515,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":851,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-27616-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,0,2,0,0,3,9,6,9,8,8,5,0,0,3,0,3,0,9,0,4],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-326992.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[9,6],[9,8,7],[1,3,8,9],[6,6,6,9,3],[3,2,8,4,8,3],[1,9,3,1,5,3,9],[1,6,7,1,6,9,3,6],[1,2,7,7,5,8,6,1,8],[4,7,2,5,5,3,7,5,9,8],[5,3,1,1,9,2,5,4,3,7,8],[7,3,6,6,3,8,3,4,4,6,5,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"69.5.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":232920530.8,\"moneyMax\":1164602654,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":801,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-209284.cct\",\"type\":\"Total Ways to Sum\",\"data\":45,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"40.1.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":175470101.4,\"moneyMax\":877350507,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":848,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"36.9.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":119063077.80000001,\"moneyMax\":595315389.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":868,\"serverGrowth\":86}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"12.2.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":178555358.8,\"moneyMax\":892776794,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":868,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"97.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":156862504.20000002,\"moneyMax\":784312521.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":829,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-36417-UniversalEnergy.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[142,84,161,13,169,56,79,49,22,104,33,181,181,76,76,42,92,4,60,66,99,188,95,67,138,155,189,108,93,157,180,93,118,18,154,126,100],\"reward\":{\"name\":\"Universal Energy\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"68.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":203575398.8,\"moneyMax\":1017876994,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":873,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588369.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,7,0,0,5,4,3,4,8,8,5,0,8,7,2,6,7,0,3,10,0,8,0,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"76.7.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":196002607.20000002,\"moneyMax\":980013036,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":920,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"47.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":211838288.20000002,\"moneyMax\":1059191441,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":795,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"96.4.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":157316137,\"moneyMax\":786580685,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":827,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969753-NationalSecurityAgency.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"187711198814\",31],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"69.4.0.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":165172242.4,\"moneyMax\":825861212,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":778,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"52.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":319254378.8,\"moneyMax\":1596271894,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":898,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"28.9.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":348901144.40000004,\"moneyMax\":1744505722,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":768,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"88.8.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":226850457,\"moneyMax\":1134252285,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":835,\"serverGrowth\":66}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"98.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":284753409.8,\"moneyMax\":1423767049,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":810,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"39.4.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":218454486.60000002,\"moneyMax\":1092272433.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":804,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"43.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":159948991.8,\"moneyMax\":799744959.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":706,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"44.3.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10965,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ca85e11d-ae00-4527-8bed-36ebfcde7c38\",\"moduleSequenceNumber\":426}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ca85e11d-ae00-4527-8bed-36ebfcde7c38\",\"moduleSequenceNumber\":426}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///32e86676-05f4-40a6-8e9c-ace0b27fd381\",\"moduleSequenceNumber\":1409786}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0027c7f7-1504-4b32-8609-f7705d24ca28\",\"moduleSequenceNumber\":1393793}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":131394627.4,\"moneyMax\":656973137,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":484,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"90.6.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":140854019.4,\"moneyMax\":704270097,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":600,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"7.4.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":52294148.800000004,\"moneyMax\":261470744,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":410,\"serverGrowth\":38}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"2.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10971,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2f4d8103-88eb-4c99-8dbd-2f6795812f62\",\"moduleSequenceNumber\":427}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2f4d8103-88eb-4c99-8dbd-2f6795812f62\",\"moduleSequenceNumber\":427}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cf125da2-fa3d-4c00-8774-af2081d497f1\",\"moduleSequenceNumber\":1514072}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0441ee32-9e6e-48e9-9841-bdb5dc95d14b\",\"moduleSequenceNumber\":1393794}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":49051064.400000006,\"moneyMax\":245255322.00000006,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":401,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124230.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":775466644,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"43.2.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":168496804.20000002,\"moneyMax\":842484021.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":745,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"8.4.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10964,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3977d417-898f-4054-9aa3-b22125c36f0c\",\"moduleSequenceNumber\":428}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3977d417-898f-4054-9aa3-b22125c36f0c\",\"moduleSequenceNumber\":428}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///61f0ac18-e10b-4852-b648-41032fed8bb6\",\"moduleSequenceNumber\":1453143}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///457cdd64-bb31-4613-8c10-db6cedd33b93\",\"moduleSequenceNumber\":1393792}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":47062923.800000004,\"moneyMax\":235314619,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":441,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"2.8.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":95695694.4,\"moneyMax\":478478472,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":550,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"78.0.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10976,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7c8674c9-3a91-4b56-b625-f034ca8a9814\",\"moduleSequenceNumber\":429}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7c8674c9-3a91-4b56-b625-f034ca8a9814\",\"moduleSequenceNumber\":429}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3c2e8746-defa-4440-9e21-f5e73e7eb790\",\"moduleSequenceNumber\":1411879}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d91af1e5-f8c1-49fa-af1a-583406419ce0\",\"moduleSequenceNumber\":1393797}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":100082198,\"moneyMax\":500410990,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":419,\"serverGrowth\":28}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"38.0.7.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10974,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c797adaa-ee30-4c60-a21c-b3dafe801c2d\",\"moduleSequenceNumber\":430}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c797adaa-ee30-4c60-a21c-b3dafe801c2d\",\"moduleSequenceNumber\":430}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aaf4268d-6f5c-4849-b5b5-341237199e25\",\"moduleSequenceNumber\":1423002}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b888986b-bdac-4b7c-876f-21ec62a28dbb\",\"moduleSequenceNumber\":1359500}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":43,\"hackDifficulty\":15.888000000000002,\"minDifficulty\":14,\"moneyAvailable\":6522593.200000003,\"moneyMax\":150747811.00000003,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":319,\"serverGrowth\":45}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"72.9.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":48733330.2,\"moneyMax\":243666651,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":329,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"71.1.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10975,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c71db8e5-0d10-4637-bfd4-4329ec6d5e81\",\"moduleSequenceNumber\":431}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c71db8e5-0d10-4637-bfd4-4329ec6d5e81\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1dd473af-1077-47b8-ad65-63e7db50a2a9\",\"moduleSequenceNumber\":1409926}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///582dd6d7-9b46-4bb9-8cda-7abf840b2c59\",\"moduleSequenceNumber\":1393796}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":394,\"serverGrowth\":67}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"76.5.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":16097743.8,\"moneyMax\":80488719,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":282,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"20.5.0.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10919,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8f66ad36-78f6-4b3a-86fb-93235cca3e57\",\"moduleSequenceNumber\":432}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8f66ad36-78f6-4b3a-86fb-93235cca3e57\",\"moduleSequenceNumber\":432}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cadf20f3-684b-4bd5-84d1-b893d11c2ab4\",\"moduleSequenceNumber\":1513641}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///6efa0b99-b58d-41e5-bdc4-0af066147260\",\"moduleSequenceNumber\":1355228}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"45.7.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10920,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6ac331a9-b12f-4781-ae76-d4872636ae8f\",\"moduleSequenceNumber\":433}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6ac331a9-b12f-4781-ae76-d4872636ae8f\",\"moduleSequenceNumber\":433}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b626c8c0-a67e-4f7a-bb96-8eefec3b361f\",\"moduleSequenceNumber\":1496393}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5b1dae2e-81e0-4f3f-981d-1b134d244f24\",\"moduleSequenceNumber\":1355229}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":81.61600000000034,\"minDifficulty\":3,\"moneyAvailable\":519829.4957321544,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"20.8.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10921,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///186d5f4f-3d5a-45ee-bf43-b85d835b99c5\",\"moduleSequenceNumber\":434}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///186d5f4f-3d5a-45ee-bf43-b85d835b99c5\",\"moduleSequenceNumber\":434}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///14b8e93f-a975-4fb0-9073-1ca449e535fd\",\"moduleSequenceNumber\":1513639}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8d0c6337-ed5d-4984-8745-5013542703b8\",\"moduleSequenceNumber\":1355230}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":78.74200000000029,\"minDifficulty\":3,\"moneyAvailable\":734854.7004935932,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"67.1.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10922,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///973c7689-56ee-42fb-9086-141093e287cd\",\"moduleSequenceNumber\":435}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///973c7689-56ee-42fb-9086-141093e287cd\",\"moduleSequenceNumber\":435}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///508f880f-adff-4544-9bad-5cc594431ea6\",\"moduleSequenceNumber\":1496605}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c50d3695-01fc-4884-a39e-207ad3ee1f44\",\"moduleSequenceNumber\":1355231}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":80.52200000000134,\"minDifficulty\":5,\"moneyAvailable\":1705056.160650975,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"28.3.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10961,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///96bd5988-0e95-4bf6-8088-71d9d4408c20\",\"moduleSequenceNumber\":436}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///96bd5988-0e95-4bf6-8088-71d9d4408c20\",\"moduleSequenceNumber\":436}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c9337ccb-0eeb-49da-94a4-eae54f9e726c\",\"moduleSequenceNumber\":1411734}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///102a693a-e3a7-4e52-a056-bf614056195d\",\"moduleSequenceNumber\":1355235}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":75.47600000000173,\"minDifficulty\":8,\"moneyAvailable\":2635409.916858623,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"58.4.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10966,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///00ab68cf-d3fb-4d40-ba1a-2df2c77653c6\",\"moduleSequenceNumber\":437}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///00ab68cf-d3fb-4d40-ba1a-2df2c77653c6\",\"moduleSequenceNumber\":437}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///07ab8353-df8c-4a82-b4c7-5f30438a04bf\",\"moduleSequenceNumber\":1411735}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0eca399c-b5df-4e99-b7da-651d4e02e401\",\"moduleSequenceNumber\":1355236}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":73.32000000000019,\"minDifficulty\":7,\"moneyAvailable\":1459825.313676344,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"3.6.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10969,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///743d053a-f118-41f6-ab2c-e43bd3d627cd\",\"moduleSequenceNumber\":438}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///743d053a-f118-41f6-ab2c-e43bd3d627cd\",\"moduleSequenceNumber\":438}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c162a3dd-b288-451e-bad4-7768f3a0857a\",\"moduleSequenceNumber\":1411738}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///dabe71a9-9cb2-44c7-9af9-adcf45b08071\",\"moduleSequenceNumber\":1355239}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":70.11000000000018,\"minDifficulty\":8,\"moneyAvailable\":1775354.5205381184,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"24.0.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10973,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b31999c3-8908-47b8-9860-4f0371a7bd6f\",\"moduleSequenceNumber\":439}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b31999c3-8908-47b8-9860-4f0371a7bd6f\",\"moduleSequenceNumber\":439}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///06f9af5f-5065-4f97-9981-39a77da9e158\",\"moduleSequenceNumber\":1423001}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///aae79bf1-248c-476c-9a63-24afa0c4b4fd\",\"moduleSequenceNumber\":1359499}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"comptek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":64.60800000000009,\"minDifficulty\":10,\"moneyAvailable\":5053286.143954699,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"45.2.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10923,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///58533481-0b81-4a93-9ab8-a907364f01ed\",\"moduleSequenceNumber\":440}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///58533481-0b81-4a93-9ab8-a907364f01ed\",\"moduleSequenceNumber\":440}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4001bb9c-9c33-48a5-80b6-ca7caf2a418f\",\"moduleSequenceNumber\":1513644}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3a359b37-1d06-4b15-b04e-05f8ee8f27ca\",\"moduleSequenceNumber\":1355232}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":39.56200000000035,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"71.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10924,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///85998cc0-2425-4c54-9939-b491f1cb3931\",\"moduleSequenceNumber\":441}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///85998cc0-2425-4c54-9939-b491f1cb3931\",\"moduleSequenceNumber\":441}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7e2a0752-5c72-41ff-980a-36a0ebed4c1a\",\"moduleSequenceNumber\":1402278}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///42bb2cd3-a46f-4ce6-b163-86e4e0991c51\",\"moduleSequenceNumber\":1355233}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":24.638000000000375,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"79.6.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10970,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5ec34b3a-859d-4a8e-af8c-46c7b1b3615c\",\"moduleSequenceNumber\":442}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5ec34b3a-859d-4a8e-af8c-46c7b1b3615c\",\"moduleSequenceNumber\":442}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ee603e98-7ede-4cb5-872c-116422b7813d\",\"moduleSequenceNumber\":1402418}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4197b5f4-e155-463b-b221-f2777b9d29ec\",\"moduleSequenceNumber\":1359498}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":64.71600000000045,\"minDifficulty\":7,\"moneyAvailable\":4871386.372528138,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"47.5.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10967,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3619d6c5-10d2-49c2-a97a-c6a8f3282556\",\"moduleSequenceNumber\":443}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///3619d6c5-10d2-49c2-a97a-c6a8f3282556\",\"moduleSequenceNumber\":443}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b0af25f2-5a1a-4bd4-b0da-b811f0ac119c\",\"moduleSequenceNumber\":1411736}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0fd261b4-6544-4492-afe4-b1550f5082c3\",\"moduleSequenceNumber\":1355237}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":58.81200000000156,\"minDifficulty\":5,\"moneyAvailable\":2676892.647179824,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.3.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10962,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///73aba657-f26d-4c47-b64e-f09cbfc6b451\",\"moduleSequenceNumber\":444}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///73aba657-f26d-4c47-b64e-f09cbfc6b451\",\"moduleSequenceNumber\":444}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3597c54a-d94d-4109-a70b-882bd9042e3f\",\"moduleSequenceNumber\":1513645}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///edbd73ce-2a7f-4658-b903-e86005ea8e78\",\"moduleSequenceNumber\":1359496}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":26,\"hackDifficulty\":46.746000000000066,\"minDifficulty\":9,\"moneyAvailable\":5316320.004029745,\"moneyMax\":68482713.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":206,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"94.5.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":41.908000000000015,\"minDifficulty\":12,\"moneyAvailable\":2964301.4000000004,\"moneyMax\":45275902,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":226,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"64.4.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10925,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c71751e6-f37d-4e0d-a961-9769947f6ba2\",\"moduleSequenceNumber\":445}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c71751e6-f37d-4e0d-a961-9769947f6ba2\",\"moduleSequenceNumber\":445}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b439602e-e51a-447b-b883-4d8382f50a24\",\"moduleSequenceNumber\":1411878}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///36cbc0f5-6358-4fff-91dc-69cf1a34f90d\",\"moduleSequenceNumber\":1355234}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":68.97200000000005,\"minDifficulty\":10,\"moneyAvailable\":3447823.3617358045,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"98.0.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10972,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///10e23093-0399-47db-b0e3-c311efd74228\",\"moduleSequenceNumber\":446}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///10e23093-0399-47db-b0e3-c311efd74228\",\"moduleSequenceNumber\":446}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f12a957e-dfe2-4e8b-89d3-94c97617c3b2\",\"moduleSequenceNumber\":1514073}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7920b9cb-ac50-4c53-85ca-ffacc92465bc\",\"moduleSequenceNumber\":1393795}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":525,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-277017-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[157,23,14,181,66,99,102,170,189],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"78.6.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":977,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-957153-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())()a)(aa())(()aa(\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"4.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":682,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"88.3.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":529,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"79.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10977,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7f9deb7b-251f-40cf-87cd-151eb0e1a355\",\"moduleSequenceNumber\":447}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7f9deb7b-251f-40cf-87cd-151eb0e1a355\",\"moduleSequenceNumber\":447}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1274d89d-75a1-45a4-80b2-ef1aecd3db67\",\"moduleSequenceNumber\":1411880}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///39a17034-9c09-4e51-918b-27a7b1baccc7\",\"moduleSequenceNumber\":1393798}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"10.7.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10963,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///300762ed-f813-4974-8ac0-8520357dc4c5\",\"moduleSequenceNumber\":448}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///300762ed-f813-4974-8ac0-8520357dc4c5\",\"moduleSequenceNumber\":448}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1bca3f2c-f9d0-462c-8e4c-bd3fedfc7fdf\",\"moduleSequenceNumber\":1513646}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e8207b61-963a-42a6-acb4-664af7d09bf2\",\"moduleSequenceNumber\":1359497}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":217,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-714568-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[15,25],[17,20],[4,10],[10,12],[16,18],[12,17],[10,20]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-387987.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,3,0,6,0,6,0,2,0,2,10,8,0,4,7,1,0,0,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"46.4.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":3,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"35.1.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10968,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ed206b3-ecca-409d-a247-ec5ad40c23b1\",\"moduleSequenceNumber\":449}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9ed206b3-ecca-409d-a247-ec5ad40c23b1\",\"moduleSequenceNumber\":449}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a388c6cb-8c17-4d5c-bd12-05df26d7e71d\",\"moduleSequenceNumber\":1411737}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1357dd02-76f5-42ce-8097-8e591688daf2\",\"moduleSequenceNumber\":1355238}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"87.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"96.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"lauren-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-11\",\"httpPortOpen\":false,\"ip\":\"8.1.2.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10926,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"threads\":142,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///aab4a4d6-9a17-4516-bff4-93f836b5a06a\",\"moduleSequenceNumber\":453}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10936,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"threads\":1028,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///aab4a4d6-9a17-4516-bff4-93f836b5a06a\",\"moduleSequenceNumber\":453}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///aab4a4d6-9a17-4516-bff4-93f836b5a06a\",\"moduleSequenceNumber\":453}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-11\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d8d69b05-e3e8-4629-8687-04a70779cd6c\",\"moduleSequenceNumber\":1618025}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-11\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a350b489-8868-4249-87d7-f3b8fe289574\",\"moduleSequenceNumber\":1627603}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-11\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-12\",\"httpPortOpen\":false,\"ip\":\"59.1.2.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10937,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36b768a9-331c-4484-9e05-816bb32320be\",\"moduleSequenceNumber\":454}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36b768a9-331c-4484-9e05-816bb32320be\",\"moduleSequenceNumber\":454}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-12\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///466244c7-f4af-4cbd-a3c9-59b31b907b52\",\"moduleSequenceNumber\":1618269}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-12\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fefa5178-4373-4b98-8f3e-cb7500c16142\",\"moduleSequenceNumber\":1638178}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-12\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-13\",\"httpPortOpen\":false,\"ip\":\"57.9.7.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10938,\"ramUsage\":1.75,\"server\":\"lauren-13\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2ec98c95-1914-44df-832d-1346aa5a473d\",\"moduleSequenceNumber\":455}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2ec98c95-1914-44df-832d-1346aa5a473d\",\"moduleSequenceNumber\":455}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-13\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///98aa3bd8-dc94-4f1f-a003-c3c519d0123a\",\"moduleSequenceNumber\":1618270}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-13\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2d26be3c-b8cb-47d9-b49d-dc773c5af184\",\"moduleSequenceNumber\":1627604}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-13\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-15\",\"httpPortOpen\":false,\"ip\":\"75.4.6.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10939,\"ramUsage\":1.75,\"server\":\"lauren-15\",\"threads\":1170,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///15f66fa9-a4d9-4adf-85fe-4086a9ab405d\",\"moduleSequenceNumber\":457}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///15f66fa9-a4d9-4adf-85fe-4086a9ab405d\",\"moduleSequenceNumber\":457}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-15\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8f0e6a48-fe38-4dc9-991f-058d3f670dc0\",\"moduleSequenceNumber\":1632260}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-15\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1ac75118-23c2-4691-a817-0695219b7cc6\",\"moduleSequenceNumber\":1627817}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-15\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-16\",\"httpPortOpen\":false,\"ip\":\"78.4.5.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10940,\"ramUsage\":1.75,\"server\":\"lauren-16\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e6348477-2c08-4a9e-9fb0-15a8cc7b7acc\",\"moduleSequenceNumber\":458}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e6348477-2c08-4a9e-9fb0-15a8cc7b7acc\",\"moduleSequenceNumber\":458}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-16\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9e9f6525-8c0d-466d-b054-a8c8996046d6\",\"moduleSequenceNumber\":1632472}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-16\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///186c55e7-56da-48b9-a3e7-5ec5c6509a99\",\"moduleSequenceNumber\":1627818}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-16\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-17\",\"httpPortOpen\":false,\"ip\":\"54.4.5.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10941,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2e0a3e84-5d50-4faf-baa2-b69861cce852\",\"moduleSequenceNumber\":459}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2e0a3e84-5d50-4faf-baa2-b69861cce852\",\"moduleSequenceNumber\":459}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-17\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///648ccb91-de5b-48f4-9303-d3cf3196dfaf\",\"moduleSequenceNumber\":1618496}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-17\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///eff57996-9d58-4530-b7b9-1016ab3861f1\",\"moduleSequenceNumber\":1627819}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-17\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-19\",\"httpPortOpen\":false,\"ip\":\"81.3.6.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10942,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5ac0ca53-3843-4bc0-9865-701fd3860729\",\"moduleSequenceNumber\":461}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5ac0ca53-3843-4bc0-9865-701fd3860729\",\"moduleSequenceNumber\":461}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-19\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-19\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///edc6723b-43bc-49d6-8829-80d769b7a428\",\"moduleSequenceNumber\":1627821}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-19\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-20\",\"httpPortOpen\":false,\"ip\":\"35.2.4.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10943,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///424ab897-3a73-4f4f-9e48-4d5ff4f1c313\",\"moduleSequenceNumber\":462}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///424ab897-3a73-4f4f-9e48-4d5ff4f1c313\",\"moduleSequenceNumber\":462}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-20\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ed6d6cde-a22b-45d7-926e-109b68068139\",\"moduleSequenceNumber\":1630781}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-20\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///39d7afa4-ef09-4ec6-b909-984ceba4e8f5\",\"moduleSequenceNumber\":1627822}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-20\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-21\",\"httpPortOpen\":false,\"ip\":\"60.4.7.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10944,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4c377998-e338-4350-96f6-fedfcb92a16c\",\"moduleSequenceNumber\":463}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4c377998-e338-4350-96f6-fedfcb92a16c\",\"moduleSequenceNumber\":463}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-21\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ce197b09-858e-4dc6-ac38-e540cbfc0dbb\",\"moduleSequenceNumber\":1618722}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-21\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b1f5cd7a-3ade-46c7-ae3c-c141b6efb0a7\",\"moduleSequenceNumber\":1628246}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-21\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-22\",\"httpPortOpen\":false,\"ip\":\"51.6.9.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10945,\"ramUsage\":1.75,\"server\":\"lauren-22\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5201497b-7e40-42bb-999e-39c708a18320\",\"moduleSequenceNumber\":464}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5201497b-7e40-42bb-999e-39c708a18320\",\"moduleSequenceNumber\":464}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-22\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ae9b0d6c-8344-40db-8c6b-92cd52123526\",\"moduleSequenceNumber\":1635645}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-22\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9c724b70-f6f6-4a3b-9438-c71dc31e9aae\",\"moduleSequenceNumber\":1628247}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-22\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-23\",\"httpPortOpen\":false,\"ip\":\"3.7.2.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10946,\"ramUsage\":1.75,\"server\":\"lauren-23\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///09dd90a0-15b4-47ad-be9a-680503965cbf\",\"moduleSequenceNumber\":465}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///09dd90a0-15b4-47ad-be9a-680503965cbf\",\"moduleSequenceNumber\":465}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-23\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a40c3e14-4c85-44bf-b844-a3bd57b218a1\",\"moduleSequenceNumber\":1618941}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-23\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///d87a2937-4385-441b-8734-8b8552e66ded\",\"moduleSequenceNumber\":1628248}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-23\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":false,\"ip\":\"55.7.0.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10947,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///665d9421-0a02-4cff-a32b-9501d140aa8a\",\"moduleSequenceNumber\":466}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///665d9421-0a02-4cff-a32b-9501d140aa8a\",\"moduleSequenceNumber\":466}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0d4af2ea-0202-4164-80b5-96063dd6050a\",\"moduleSequenceNumber\":1627180}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///da2845ba-260e-4a77-bd72-5fadaae259e3\",\"moduleSequenceNumber\":1628034}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-0\",\"httpPortOpen\":false,\"ip\":\"94.8.1.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10948,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0184ea45-205c-46ef-ad76-c32c3cf75152\",\"moduleSequenceNumber\":467}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0184ea45-205c-46ef-ad76-c32c3cf75152\",\"moduleSequenceNumber\":467}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-0\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-0\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-0\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-1\",\"httpPortOpen\":false,\"ip\":\"65.2.5.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10927,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b545aa07-63d8-49f6-b974-e0ad91c1d904\",\"moduleSequenceNumber\":469}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10949,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b545aa07-63d8-49f6-b974-e0ad91c1d904\",\"moduleSequenceNumber\":469}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b545aa07-63d8-49f6-b974-e0ad91c1d904\",\"moduleSequenceNumber\":469}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-1\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-1\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-1\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-2\",\"httpPortOpen\":false,\"ip\":\"55.6.2.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10928,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cf67bbe4-ee34-4157-9266-fffb11545339\",\"moduleSequenceNumber\":471}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10950,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cf67bbe4-ee34-4157-9266-fffb11545339\",\"moduleSequenceNumber\":471}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cf67bbe4-ee34-4157-9266-fffb11545339\",\"moduleSequenceNumber\":471}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-2\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-2\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-2\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-3\",\"httpPortOpen\":false,\"ip\":\"90.6.7.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10929,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8e411fb1-537d-4d02-8f2d-fd325c163ed4\",\"moduleSequenceNumber\":473}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10951,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8e411fb1-537d-4d02-8f2d-fd325c163ed4\",\"moduleSequenceNumber\":473}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8e411fb1-537d-4d02-8f2d-fd325c163ed4\",\"moduleSequenceNumber\":473}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-3\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-3\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-3\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-4\",\"httpPortOpen\":false,\"ip\":\"8.5.7.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10930,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b6f26d4d-9a83-4fcd-9187-91fd062dd976\",\"moduleSequenceNumber\":475}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10952,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b6f26d4d-9a83-4fcd-9187-91fd062dd976\",\"moduleSequenceNumber\":475}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b6f26d4d-9a83-4fcd-9187-91fd062dd976\",\"moduleSequenceNumber\":475}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-4\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-4\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-4\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-5\",\"httpPortOpen\":false,\"ip\":\"22.5.3.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10931,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36435a08-77a3-4382-a01e-bcddd7baa783\",\"moduleSequenceNumber\":477}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10953,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36435a08-77a3-4382-a01e-bcddd7baa783\",\"moduleSequenceNumber\":477}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///36435a08-77a3-4382-a01e-bcddd7baa783\",\"moduleSequenceNumber\":477}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-5\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-5\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-5\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-6\",\"httpPortOpen\":false,\"ip\":\"58.8.7.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10932,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b7102f55-4b2e-4c9a-9f17-2a407fe15605\",\"moduleSequenceNumber\":479}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10954,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b7102f55-4b2e-4c9a-9f17-2a407fe15605\",\"moduleSequenceNumber\":479}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b7102f55-4b2e-4c9a-9f17-2a407fe15605\",\"moduleSequenceNumber\":479}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-6\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-6\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-6\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-7\",\"httpPortOpen\":false,\"ip\":\"79.2.7.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10933,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d59427c5-cd93-45fe-bc20-2f7f6fb91054\",\"moduleSequenceNumber\":481}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10955,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d59427c5-cd93-45fe-bc20-2f7f6fb91054\",\"moduleSequenceNumber\":481}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d59427c5-cd93-45fe-bc20-2f7f6fb91054\",\"moduleSequenceNumber\":481}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-7\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-7\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-7\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-8\",\"httpPortOpen\":false,\"ip\":\"88.2.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10934,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cea57c40-acc6-4e88-9a13-26945b2d198b\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10956,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cea57c40-acc6-4e88-9a13-26945b2d198b\",\"moduleSequenceNumber\":483}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cea57c40-acc6-4e88-9a13-26945b2d198b\",\"moduleSequenceNumber\":483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-8\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-8\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-8\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-9\",\"httpPortOpen\":false,\"ip\":\"17.1.1.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10957,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///39877546-a4ff-4ca5-92e9-794232c38d11\",\"moduleSequenceNumber\":497}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///39877546-a4ff-4ca5-92e9-794232c38d11\",\"moduleSequenceNumber\":497}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-9\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-9\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-9\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-10\",\"httpPortOpen\":false,\"ip\":\"82.2.0.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10958,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2fb2503f-3d38-47be-9c52-826633620cdc\",\"moduleSequenceNumber\":490}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2fb2503f-3d38-47be-9c52-826633620cdc\",\"moduleSequenceNumber\":490}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-10\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-10\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-10\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-14\",\"httpPortOpen\":false,\"ip\":\"32.0.4.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10959,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f69877bf-7e45-4ae9-8d0c-ec773b5b9ac4\",\"moduleSequenceNumber\":514}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f69877bf-7e45-4ae9-8d0c-ec773b5b9ac4\",\"moduleSequenceNumber\":514}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-14\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-14\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-14\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-18\",\"httpPortOpen\":false,\"ip\":\"63.1.0.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":10935,\"ramUsage\":1.75,\"server\":\"lauren-18\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e9714c89-9ff0-4793-aee1-67d3d4dcc483\",\"moduleSequenceNumber\":507}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e9714c89-9ff0-4793-aee1-67d3d4dcc483\",\"moduleSequenceNumber\":507}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-18\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-18\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-18\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":146.6667,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":164.4002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.7569,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":26026.977259379008,\"favor\":0.016,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30.6755,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.458,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":144575.90895362626,\"favor\":101.4118,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":121.6554,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":107.7529,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.016,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":127.6546,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":107103.77050454704}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":4.3139,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":8218.547241285807}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":83.7271,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":50856.48596564907}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":157.0812,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":78106.37235148798}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":23.2061,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":163.6515,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":80146.94037391111}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":46.7134,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":26095.1204686533}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":15.8558,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":116.1905,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":67409.04318481538}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":178.0172,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":123950.3255574628}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":50.506,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":170.2632,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":133022.54775925525}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":8201.549319390137,\"lastPrice\":8218.501994265991,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":22.608611220859146,\"otlkMagForecast\":28.262255681897628,\"cap\":363957525,\"spreadPerc\":0.1,\"shareTxForMovement\":66544,\"shareTxUntilMovement\":66544,\"totalShares\":138900000,\"maxShares\":27800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":17820.241762271362,\"lastPrice\":17779.90505654094,\"playerShares\":1163,\"playerAvgPx\":15922.4322843135,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":22.855600848746494,\"otlkMagForecast\":73.462772586095,\"cap\":567252762,\"spreadPerc\":0.4,\"shareTxForMovement\":49519,\"shareTxUntilMovement\":49426,\"totalShares\":85000000,\"maxShares\":17000000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":56142.04778987003,\"lastPrice\":56357.157649723005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":14.261668882868053,\"otlkMagForecast\":35.392210415365035,\"cap\":124980970,\"spreadPerc\":0.2,\"shareTxForMovement\":70682,\"shareTxUntilMovement\":70682,\"totalShares\":110100000,\"maxShares\":22000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":27200.458061279383,\"lastPrice\":27300.563472343132,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":8.658992825212236,\"otlkMagForecast\":58.01439840168904,\"cap\":259116035,\"spreadPerc\":0.2,\"shareTxForMovement\":88481,\"shareTxUntilMovement\":88481,\"totalShares\":87700000,\"maxShares\":17500000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":67196.725403185,\"lastPrice\":66973.87785676996,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":13.079065713905504,\"otlkMagForecast\":36.66889809694237,\"cap\":361326276,\"spreadPerc\":0.3,\"shareTxForMovement\":65695,\"shareTxUntilMovement\":65695,\"totalShares\":44400000,\"maxShares\":8900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":138880.76055389215,\"lastPrice\":139601.9307767217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":18.692851318538548,\"otlkMagForecast\":28.449672629254998,\"cap\":1018780313,\"spreadPerc\":0.8,\"shareTxForMovement\":41972,\"shareTxUntilMovement\":41972,\"totalShares\":26700000,\"maxShares\":5300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":24397.074671522085,\"lastPrice\":24305.174044564803,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":10.712709180095349,\"otlkMagForecast\":39.57798387022292,\"cap\":482038117,\"spreadPerc\":0.6,\"shareTxForMovement\":46943,\"shareTxUntilMovement\":46943,\"totalShares\":86400000,\"maxShares\":17300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":665.9759183497277,\"lastPrice\":670.0385025128259,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":24.357956296833933,\"otlkMagForecast\":73.62699793294325,\"cap\":41682493,\"spreadPerc\":0.5,\"shareTxForMovement\":64151,\"shareTxUntilMovement\":64151,\"totalShares\":62100000,\"maxShares\":12400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":33071.87923875375,\"lastPrice\":32937.37607713198,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":7.205887952152281,\"otlkMagForecast\":58.20582635292975,\"cap\":571078501,\"spreadPerc\":0.2,\"shareTxForMovement\":63996,\"shareTxUntilMovement\":63996,\"totalShares\":52400000,\"maxShares\":10500000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":4062.353727824181,\"lastPrice\":4048.2713115753118,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":11.148642813887461,\"otlkMagForecast\":61.38510064506276,\"cap\":151945586,\"spreadPerc\":0.5,\"shareTxForMovement\":95634,\"shareTxUntilMovement\":95634,\"totalShares\":99900000,\"maxShares\":20000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19192.66276431691,\"lastPrice\":19249.750881455748,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":7.180618368570597,\"otlkMagForecast\":56.48448070082384,\"cap\":232411434,\"spreadPerc\":0.7,\"shareTxForMovement\":55106,\"shareTxUntilMovement\":55106,\"totalShares\":65700000,\"maxShares\":13100000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13570.385859703527,\"lastPrice\":13521.984533774696,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.877715157781212,\"otlkMagForecast\":57.81047034070885,\"cap\":183628758,\"spreadPerc\":1,\"shareTxForMovement\":51910,\"shareTxUntilMovement\":51910,\"totalShares\":79500000,\"maxShares\":15900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":24352.360760073327,\"lastPrice\":24435.845761140354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":7.5130152093049585,\"otlkMagForecast\":41.59984935323157,\"cap\":225047463,\"spreadPerc\":0.3,\"shareTxForMovement\":100658,\"shareTxUntilMovement\":100658,\"totalShares\":33600000,\"maxShares\":6700000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":27809.000158400635,\"lastPrice\":27886.109419153614,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":8.117710306120339,\"otlkMagForecast\":41.60778331147457,\"cap\":544698205,\"spreadPerc\":0.5,\"shareTxForMovement\":41132,\"shareTxUntilMovement\":41132,\"totalShares\":39200000,\"maxShares\":7800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":29659.47600592687,\"lastPrice\":29749.192687162602,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":6.651655906687013,\"otlkMagForecast\":43.30489098809717,\"cap\":384092482,\"spreadPerc\":0.9,\"shareTxForMovement\":81021,\"shareTxUntilMovement\":81021,\"totalShares\":40900000,\"maxShares\":8200000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8315.979642247097,\"lastPrice\":8287.151752140646,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.353884135750667,\"otlkMagForecast\":44.83419071488197,\"cap\":76582574,\"spreadPerc\":0.5,\"shareTxForMovement\":44632,\"shareTxUntilMovement\":44632,\"totalShares\":54500000,\"maxShares\":10900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":34596.64246221974,\"lastPrice\":34466.32138169256,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":11.045695410523493,\"otlkMagForecast\":38.19581350314554,\"cap\":344151897,\"spreadPerc\":0.9,\"shareTxForMovement\":98894,\"shareTxUntilMovement\":98894,\"totalShares\":45000000,\"maxShares\":9000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":10358.740596763255,\"lastPrice\":10391.119126384017,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.433650535803771,\"otlkMagForecast\":60.112434620299034,\"cap\":31041170,\"spreadPerc\":1,\"shareTxForMovement\":93493,\"shareTxUntilMovement\":93493,\"totalShares\":29700000,\"maxShares\":5900000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":90864.33274361386,\"lastPrice\":91230.8056767984,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.478627424792731,\"otlkMagForecast\":57.040434110002096,\"cap\":342872447,\"spreadPerc\":0.7,\"shareTxForMovement\":117626,\"shareTxUntilMovement\":117626,\"totalShares\":30700000,\"maxShares\":6100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":534.0527648337446,\"lastPrice\":540.8376606611531,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":false,\"otlkMag\":10.09767718414388,\"otlkMagForecast\":41.219655106880644,\"cap\":68782190,\"spreadPerc\":0.7,\"shareTxForMovement\":27280,\"shareTxUntilMovement\":27280,\"totalShares\":111900000,\"maxShares\":22400000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6560.791127743356,\"lastPrice\":6603.128573841233,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":false,\"otlkMag\":3.8110268386598,\"otlkMagForecast\":47.28404434226987,\"cap\":33666780,\"spreadPerc\":0.7,\"shareTxForMovement\":54333,\"shareTxUntilMovement\":54333,\"totalShares\":39700000,\"maxShares\":7900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4094.055555128082,\"lastPrice\":4105.820423235362,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":1.2860414148938515,\"otlkMagForecast\":49.74346699645695,\"cap\":71961747,\"spreadPerc\":0.6,\"shareTxForMovement\":74577,\"shareTxUntilMovement\":74577,\"totalShares\":34500000,\"maxShares\":6900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":7332.517770025033,\"lastPrice\":7397.579299341056,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":false,\"otlkMag\":7.356314404400187,\"otlkMagForecast\":41.674587084467284,\"cap\":93904064,\"spreadPerc\":1.4,\"shareTxForMovement\":69860,\"shareTxUntilMovement\":69860,\"totalShares\":43500000,\"maxShares\":8700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":1279.4953339123806,\"lastPrice\":1289.1711686264096,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.5,\"b\":false,\"otlkMag\":8.666046711562883,\"otlkMagForecast\":40.14518097635116,\"cap\":66574263,\"spreadPerc\":0.8,\"shareTxForMovement\":63448,\"shareTxUntilMovement\":63448,\"totalShares\":38700000,\"maxShares\":7700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3347.1515168039873,\"lastPrice\":3333.706053672577,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":3.9402109733425164,\"otlkMagForecast\":48.818407405096,\"cap\":38707911,\"spreadPerc\":1.2,\"shareTxForMovement\":121937,\"shareTxUntilMovement\":121937,\"totalShares\":41100000,\"maxShares\":8200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":96622.08152855118,\"lastPrice\":97927.55983310282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.68,\"b\":true,\"otlkMag\":10.244829150564343,\"otlkMagForecast\":60.054512579758665,\"cap\":57726227,\"spreadPerc\":1.8,\"shareTxForMovement\":48122,\"shareTxUntilMovement\":48122,\"totalShares\":12300000,\"maxShares\":2500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6466.852545574628,\"lastPrice\":6499.129059991736,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":true,\"otlkMag\":6.208481688675817,\"otlkMagForecast\":56.892872329258005,\"cap\":77160172,\"spreadPerc\":0.7,\"shareTxForMovement\":71486,\"shareTxUntilMovement\":71486,\"totalShares\":8700000,\"maxShares\":1700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3079.896203610697,\"lastPrice\":3090.9205513760403,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.191516805296632,\"otlkMagForecast\":45.714660867466094,\"cap\":36001318,\"spreadPerc\":1,\"shareTxForMovement\":110339,\"shareTxUntilMovement\":110339,\"totalShares\":16500000,\"maxShares\":3300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1296.335092346418,\"lastPrice\":1279.371767198573,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.63,\"b\":true,\"otlkMag\":6.850911615716564,\"otlkMagForecast\":61.05008119919545,\"cap\":55677908,\"spreadPerc\":0.6,\"shareTxForMovement\":30246,\"shareTxUntilMovement\":30246,\"totalShares\":12800000,\"maxShares\":2600000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":15.279121532376129,\"lastPrice\":15.487871372586863,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.71,\"b\":true,\"otlkMag\":9.645410039547743,\"otlkMagForecast\":58.955618534861294,\"cap\":13733688,\"spreadPerc\":1,\"shareTxForMovement\":27736,\"shareTxUntilMovement\":27736,\"totalShares\":45300000,\"maxShares\":9100000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":604.0309410908535,\"lastPrice\":608.1724306374576,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.36,\"b\":false,\"otlkMag\":8.215572137350463,\"otlkMagForecast\":41.8458515427421,\"cap\":846790,\"spreadPerc\":1.2,\"shareTxForMovement\":52428,\"shareTxUntilMovement\":52428,\"totalShares\":396800000,\"maxShares\":79400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":60402.415347443,\"lastPrice\":60615.577855200405,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":7.266091907505715,\"otlkMagForecast\":43.71582155029572,\"cap\":478523057,\"spreadPerc\":0.5,\"shareTxForMovement\":188778,\"shareTxUntilMovement\":188778,\"totalShares\":13700000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":34833.01241869924,\"lastPrice\":34929.597978126265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":9.670545922365713,\"otlkMagForecast\":38.97671421541289,\"cap\":193616020,\"spreadPerc\":0.3,\"shareTxForMovement\":146928,\"shareTxUntilMovement\":146928,\"totalShares\":18300000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":155468,\"lastUpdate\":1644009621665,\"ticksUntilCycle\":34}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":100,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":70,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"'Input', Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":1,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644009605916","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644009622950"}}