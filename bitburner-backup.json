{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":303,\"hp\":10,\"max_hp\":10,\"strength\":5,\"defense\":5,\"dexterity\":181,\"agility\":118,\"charisma\":161,\"intelligence\":0,\"hacking_chance_mult\":1.2699435912301724,\"hacking_speed_mult\":1.3211223179567482,\"hacking_money_mult\":1.2699435912301724,\"hacking_grow_mult\":1.2699435912301724,\"hacking_exp\":2468319.0059154006,\"strength_exp\":56.57598698930417,\"defense_exp\":56.57598698930417,\"dexterity_exp\":35915.97317255568,\"agility_exp\":6685.046561415192,\"charisma_exp\":13686.985703005217,\"intelligence_exp\":0,\"hacking_mult\":1.4001128093312651,\"strength_mult\":1.2699435912301724,\"defense_mult\":1.2699435912301724,\"dexterity_mult\":1.333440770791681,\"agility_mult\":1.4001128093312651,\"charisma_mult\":1.5239323094762067,\"hacking_exp_mult\":1.3969379503531896,\"strength_exp_mult\":1.3969379503531896,\"defense_exp_mult\":1.3969379503531896,\"dexterity_exp_mult\":1.3969379503531896,\"agility_exp_mult\":1.3969379503531896,\"charisma_exp_mult\":1.3969379503531896,\"company_rep_mult\":1.2699435912301724,\"faction_rep_mult\":1.2699435912301724,\"money\":19267427.116079472,\"city\":\"Sector-12\",\"location\":\"MegaCorp\",\"jobs\":{\"Joe's Guns\":\"Employee\",\"National Security Agency\":\"Software Engineering Intern\",\"Blade Industries\":\"Software Engineering Intern\",\"MegaCorp\":\"Software Engineering Intern\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"home\",\"purchasedServers\":[\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-9\",\"lauren-10\",\"lauren-22\",\"lauren-3\",\"lauren-14\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-2\",\"lauren-7\",\"lauren-11\",\"lauren-13\",\"lauren-15\",\"lauren-23\",\"lauren-8\",\"lauren-12\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":115,\"moneyGainRatePerSecond\":96.95700642226255,\"onlineTimeSeconds\":93142.19999966763,\"ram\":8,\"totalMoneyGenerated\":8460227.842588002,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":115,\"moneyGainRatePerSecond\":84.49242966760126,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7346704.540403243,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":116,\"moneyGainRatePerSecond\":85.22714644731953,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7405766.12433775,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":115,\"moneyGainRatePerSecond\":84.49242966760126,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7335365.874913622,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":130,\"moneyGainRatePerSecond\":109.60357247734026,\"onlineTimeSeconds\":88288.1999996563,\"ram\":8,\"totalMoneyGenerated\":9616220.442854002,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":123,\"moneyGainRatePerSecond\":90.37016390534743,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7905324.242536282,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":119,\"moneyGainRatePerSecond\":87.43129678647433,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7630382.728773313,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":117,\"moneyGainRatePerSecond\":98.64321522960624,\"onlineTimeSeconds\":88288.1999996563,\"ram\":8,\"totalMoneyGenerated\":8590502.456284119,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":115,\"moneyGainRatePerSecond\":84.49242966760126,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7351129.48600693,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":113,\"moneyGainRatePerSecond\":77.50285524345,\"onlineTimeSeconds\":88288.1999996563,\"ram\":2,\"totalMoneyGenerated\":6747930.955954817,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":115,\"moneyGainRatePerSecond\":84.49242966760126,\"onlineTimeSeconds\":88288.1999996563,\"ram\":4,\"totalMoneyGenerated\":7339480.786994017,\"name\":\"hacknet-node-10\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"NiteSec\",\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":4}],\"numPeopleKilled\":0,\"karma\":-16174.300000000041,\"crime_money_mult\":1.3969379503531896,\"crime_success_mult\":1.2699435912301724,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Company\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0.20954069255297847,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0.08381627702119138,\"workRepGainRate\":0.33024422237180173,\"workMoneyGainRate\":31.43110388294677,\"workMoneyLossRate\":0,\"workHackExpGained\":8.465443979140334,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":3.3861775916561334,\"workRepGained\":13.341866583820801,\"workMoneyGained\":1269.816596871049,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":9800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.2699435912301724,\"hacknet_node_money_mult\":1.7671265071967852,\"hacknet_node_purchase_cost_mult\":0.5864391570497545,\"hacknet_node_ram_cost_mult\":0.7665871333983719,\"hacknet_node_core_cost_mult\":0.7665871333983719,\"hacknet_node_level_cost_mult\":0.6515990633886162,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Lauren Corp\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Agriculture Division\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":1410.895944302309,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Bulk Purchasing\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":158.66329802079426,\"popularity\":37.62064723739454,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":5.848213955846095,\"upgrades\":[119,5],\"state\":\"PRODUCTION\",\"newInd\":false,\"offices\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xBFsfor\",\"mor\":100,\"hap\":99.99749698090726,\"ene\":99.99749698090726,\"int\":83,\"cha\":96,\"exp\":206.33699999963298,\"cre\":98,\"eff\":97,\"sal\":1419,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LfgJdA4\",\"mor\":100,\"hap\":99.99932426033587,\"ene\":99.99932426033587,\"int\":76,\"cha\":75,\"exp\":166.33699999982247,\"cre\":81,\"eff\":51,\"sal\":1026,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4dAjFsU\",\"mor\":100,\"hap\":99.99990898677451,\"ene\":99.99990898677451,\"int\":78,\"cha\":51,\"exp\":197.3369999996756,\"cre\":74,\"eff\":84,\"sal\":1131,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xkQFqq8\",\"mor\":100,\"hap\":99.99735952500754,\"ene\":99.99735952500754,\"int\":82,\"cha\":80,\"exp\":194.88599999968713,\"cre\":61,\"eff\":65,\"sal\":1134,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rmC5gZ7\",\"mor\":100,\"hap\":99.99860680829272,\"ene\":99.99860680829272,\"int\":66,\"cha\":82,\"exp\":166.88599999981977,\"cre\":61,\"eff\":71,\"sal\":1026,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ddGlhA6\",\"mor\":100,\"hap\":99.9999879166125,\"ene\":99.9999879166125,\"int\":95,\"cha\":114.88839621920457,\"exp\":197.77439621893086,\"cre\":83,\"eff\":123.88839621920457,\"sal\":1224,\"loc\":\"\",\"pos\":\"Operations\"}}],\"employeeProd\":{\"Operations\":2032.5787108300162,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":374.44836621464003,\"total\":2407.0270770446564,\"Unassigned\":0,\"Training\":0},\"loc\":\"Sector-12\",\"size\":6}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":50123.3458386374,\"lastCycleExpenses\":20059.514333281695,\"thisCycleRevenue\":0,\"thisCycleExpenses\":200553.42177202375,\"warehouses\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":16,\"sizeUsed\":1819.9046934873472,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":6.524061876920483,\"loc\":\"Sector-12\",\"size\":2240,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.37744722779746,\"dmdR\":[65,85],\"cmp\":51.84787858727777,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":3.2619947973888856,\"sll\":0,\"prd\":-3.2619947973888856,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1588.8134574368394,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.93820584682501,\"dmdR\":[80,99],\"cmp\":70.05589005801686,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":3.2619947973888856,\"sll\":0,\"prd\":-3.2619947973888856,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2425.706181798865,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":65.23989594777771,\"qlt\":37.56070478857469,\"dmd\":87.79307962716653,\"dmdR\":[70,90],\"cmp\":60.75541798638282,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":6.5239822038419835,\"prd\":6.523989594777771,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5874.929649586406,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":65.23989594777771,\"qlt\":37.56070478857469,\"dmd\":43.24772049762585,\"dmdR\":[20,90],\"cmp\":64.61133559732299,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":6.5239822038419835,\"prd\":6.523989594777771,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1811.5627726604316,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":29903.09169685875,\"qlt\":0,\"dmd\":83.40932461390528,\"dmdR\":[80,90],\"cmp\":92.0084283762971,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6694.16809437319,\"sCost\":\"MP+10\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":64323.76834154644,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11638.180506524557,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":4100,\"qlt\":0,\"dmd\":71.36303503125038,\"dmdR\":[5,99],\"cmp\":73.17623387527783,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":255156.58265400343,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":128120889.16165985,\"revenue\":50123.3458386374,\"expenses\":20059.514333281695,\"fundingRound\":4,\"public\":true,\"totalShares\":1500000000,\"numShares\":100000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":0.7303398476865303,\"storedCycles\":4,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":3}},\"unlockUpgrades\":[1,1,1,1,1,0,0,0,0],\"upgrades\":[2,4,1,1,2,1,3,1,2,1],\"upgradeMultipliers\":[1.06,1.4,1.001,1.005,1.2,1.1,1.3,1.1,1.02,1.05]}},\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":3,\"lastUpdate\":1643239712401,\"totalPlaytime\":3020221000,\"playtimeSinceLastAug\":93159800,\"playtimeSinceLastBitnode\":446123200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1087500000,\"corporation\":0,\"crime\":103747438.46234311,\"gang\":0,\"hacking\":31625670.26594181,\"hacknet\":85729035.48084916,\"hacknet_expenses\":-10975058.218977312,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":19266427.11607959,\"work\":836461.1251713488,\"servers\":-998997120,\"other\":-280200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-3723168,\"codingcontract\":5925000000,\"corporation\":-38.630119048623996,\"crime\":400355853.34561026,\"gang\":0,\"hacking\":173104195.26594183,\"hacknet\":274955281.74340934,\"hacknet_expenses\":-513156006.10615003,\"hospitalization\":-367335.8184621486,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":56885463.229947075,\"work\":5547021.581450566,\"servers\":-3269266281.8224425,\"other\":-858599990.6451929,\"augmentations\":-2076964067.6799269}},\"scriptProdSinceLastAug\":31548771,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641675126871},{\"ID\":\"NITESEC\",\"unlockedOn\":1641675126890},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641675126893},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641675126897},{\"ID\":\"SF1.1\",\"unlockedOn\":1641675126901},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641675126906},{\"ID\":\"NS2\",\"unlockedOn\":1641675126910},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641675126915},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641675126920},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641675126925},{\"ID\":\"TOR\",\"unlockedOn\":1641675126930},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641675126934},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641683001577},{\"ID\":\"WORKOUT\",\"unlockedOn\":1641683661513},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641699444909},{\"ID\":\"N00DLES\",\"unlockedOn\":1641699444911},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641711726317},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641713166320},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641748014946},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641858253775},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641872767788},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641941669460},{\"ID\":\"4S\",\"unlockedOn\":1641943349663},{\"ID\":\"DONATION\",\"unlockedOn\":1642017508846},{\"ID\":\"FROZE\",\"unlockedOn\":1642193609462},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1642523664057},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642573834102},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642619100874},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642634100595},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642697584734},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642717768356},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642723230131},{\"ID\":\"SF4.1\",\"unlockedOn\":1642793617209},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642793617217},{\"ID\":\"CORPORATION\",\"unlockedOn\":1642881865050}],\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"98.8.9.1\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":510.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[0],\"dataMap\":{},\"filename\":\"manage-hacking.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13211.2641214475,\"onlineMoneyMade\":0,\"onlineRunningTime\":670.010000000012,\"pid\":454590,\"ramUsage\":15.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///76bb09f6-868e-4815-b657-09c38f551734\",\"moduleSequenceNumber\":378},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///97b9a006-ee93-4cd3-9a10-772110924a8d\",\"moduleSequenceNumber\":347},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///2d8ee1bf-65cf-4f35-ba1d-589bbfc16ac1\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///360212f9-b3eb-4c35-aa5f-7727dbbee3ad\",\"moduleSequenceNumber\":367},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///d0bb9a64-71db-45e7-a82a-751e7e4e6e64\",\"moduleSequenceNumber\":349},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///aba66703-62d9-44f7-b440-862e2c7073eb\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///eb70255b-d1a9-4393-937b-0d189dd29e16\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///5129abcc-ed69-43b7-9bd5-014a1a2cdf0b\",\"moduleSequenceNumber\":348},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///e342a53c-e38b-48cb-8f73-3fe87c8faf53\",\"moduleSequenceNumber\":680}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464299,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":283,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0d53d04f-f788-438a-b83c-174fb4edf8cb\",\"moduleSequenceNumber\":1507}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DEFAULT_PORT, LOCALHOST_PREFIX } from '/utils/misc.js';\\n\\nconst GITHUB_SCRIPTS_FOLDER =\\n  'https://raw.githubusercontent.com/phantomesse/bitburner/master/';\\nconst SCRIPTS_TXT = 'scripts.txt';\\n\\n/**\\n * Copy this file to the bitburner game to sync the rest of the scripts:\\n *\\n * ```\\n * wget https://raw.githubusercontent.com/phantomesse/bitburner/main/scripts/sync.js sync.js\\n * ```\\n *\\n * @example run sync.js <port>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  let port = ns.args[0];\\n  port = typeof port !== 'number' ? DEFAULT_PORT : port;\\n\\n  // Check if local server is running and set scripts prefix accordingly.\\n  let scriptsPrefix;\\n  try {\\n    scriptsPrefix = `${LOCALHOST_PREFIX}:${port}/`;\\n    await fetch(scriptsPrefix + SCRIPTS_TXT);\\n    ns.tprint('syncing to local server');\\n  } catch (_) {\\n    ns.tprint('no local server running, so syncing from github');\\n    scriptsPrefix = GITHUB_SCRIPTS_FOLDER;\\n  }\\n\\n  // Get list of scripts to download and download each script.\\n  let currentScripts = await getScripts(scriptsPrefix);\\n  for await (const script of currentScripts) {\\n    await script.download(ns, scriptsPrefix);\\n  }\\n\\n  // Watch for any changes in scripts every second and download newer copies.\\n  while (true) {\\n    let latestScripts = await getScripts(scriptsPrefix);\\n    for await (const latestScript of latestScripts) {\\n      const currentScript = currentScripts.find(\\n        script => script.fileName === latestScript.fileName\\n      );\\n      if (\\n        currentScript === undefined ||\\n        latestScript.lastModifiedTime !== currentScript.lastModifiedTime\\n      ) {\\n        await latestScript.download(ns, scriptsPrefix);\\n      }\\n    }\\n\\n    // Delete any files that were in the current scripts but are not in the\\n    // latest scripts.\\n    for await (const currentScript of currentScripts) {\\n      const latestScript = latestScripts.find(\\n        script => script.fileName === currentScript.fileName\\n      );\\n      if (latestScript === undefined) {\\n        ns.rm(currentScript.fileName);\\n        ns.tprint(`removed ${currentScript.fileName}`);\\n      }\\n    }\\n\\n    currentScripts = latestScripts;\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\nclass Script {\\n  /**\\n   * @param {string} fileName,\\n   * @param {number} lastModifiedTime\\n   */\\n  constructor(fileName, lastModifiedTime) {\\n    this.fileName = fileName;\\n    this.lastModifiedTime = lastModifiedTime;\\n  }\\n\\n  /**\\n   * @param {import('index').NS } ns\\n   * @param {string} scriptsPrefix\\n   */\\n  async download(ns, scriptsPrefix) {\\n    const contents = await getFileContents(scriptsPrefix, this.fileName);\\n    await ns.write('/' + this.fileName, contents, 'w');\\n    ns.tprint(`downloaded ${this.fileName}`);\\n  }\\n}\\n\\n/** @param {string} scriptsPrefix */\\nasync function getScripts(scriptsPrefix) {\\n  return (await getFileContents(scriptsPrefix, SCRIPTS_TXT))\\n    .split('\\\\n')\\n    .map(line => line.split('\\\\t'))\\n    .map(args => new Script(args[0], parseFloat(args[1])));\\n}\\n\\n/**\\n * @param {string} scriptsPrefix\\n * @param {string} fileName\\n */\\nasync function getFileContents(scriptsPrefix, fileName) {\\n  const response = await fetch(scriptsPrefix + 'scripts/' + fileName);\\n  return await response.text();\\n}\\n\",\"filename\":\"sync.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":194025},{\"filename\":\"sync.js\",\"url\":\"blob:file:///590b0768-58f4-4b3b-9396-178fa84126f6\",\"moduleSequenceNumber\":194071}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":340,\"_hash\":\"5ee6ae55677672bee2cba1d9c424dc6b1eb1f013e7ebc3f7f8c6be059cfad9e8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend } from '/utils/misc.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['sleep', 'getServerMoneyAvailable'];\\n\\n/**\\n * Manages buying and upgrading hacknet nodes.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    // Buy new nodes if we can.\\n    const moneyToSpend = getMoneyToSpend(ns);\\n    let nodesPurchased = 0;\\n    while (ns.hacknet.getPurchaseNodeCost() < moneyToSpend) {\\n      if (ns.hacknet.purchaseNode() === -1) break;\\n      nodesPurchased++;\\n    }\\n    if (nodesPurchased > 0) {\\n      ns.print(`purchased ${nodesPurchased} new hacknet nodes`);\\n    }\\n\\n    // Upgrade nodes.\\n    for (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n      // Upgrade cores.\\n      const coresUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getCoreUpgradeCost,\\n        ns.hacknet.upgradeCore\\n      );\\n      if (coresUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} cores ${coresUpgraded} times`);\\n      }\\n\\n      // Upgrade RAM.\\n      const ramUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getRamUpgradeCost,\\n        ns.hacknet.upgradeRam\\n      );\\n      if (ramUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} RAM ${ramUpgraded} times`);\\n      }\\n\\n      // Upgrade level.\\n      const levelsUpgraded = upgrade(\\n        ns,\\n        i,\\n        ns.hacknet.getLevelUpgradeCost,\\n        ns.hacknet.upgradeLevel\\n      );\\n      if (levelsUpgraded > 0) {\\n        ns.print(`upgraded hacknet-node-${i} levels ${levelsUpgraded} times`);\\n      }\\n\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\\n\\n/**\\n * Calculates the cost of upgrading an aspect of a node.\\n *\\n * @callback UpgradeCostFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {number} cost of upgrade\\n */\\n\\n/**\\n * Upgrades an aspect of a node.\\n *\\n * @callback UpgradeFn\\n * @param {number} nodeIndex\\n * @param {number} upgradeCount\\n * @returns {boolean} whether the upgrade was successful\\n */\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {number} nodeIndex\\n * @param {UpgradeCostFn} getUpgradeCostFn\\n * @param {UpgradeFn} upgradeFn\\n * @returns {number} number of upgrades successful\\n */\\nfunction upgrade(ns, nodeIndex, getUpgradeCostFn, upgradeFn) {\\n  const moneyToSpend = getMoneyToSpend(ns);\\n  let upgradeCount = 0;\\n  while (getUpgradeCostFn(nodeIndex, ++upgradeCount) < moneyToSpend);\\n  if (upgradeCount === 0) return 0;\\n  return upgradeFn(nodeIndex, upgradeCount) ? upgradeCount : 0;\\n}\\n\",\"filename\":\"manage-hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///dbbbf77d-a16e-46b0-8a3b-6f1bfa4531ce\",\"moduleSequenceNumber\":125},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///e8866599-4746-4f8d-8658-7239d12d997b\",\"moduleSequenceNumber\":142},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///5dc42748-46c3-415b-a056-60a617a3542d\",\"moduleSequenceNumber\":124},{\"filename\":\"manage-hacknet.js\",\"url\":\"blob:file:///8ed18763-d41a-404a-9124-3dd0047fd69d\",\"moduleSequenceNumber\":232}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":341,\"_hash\":\"668ac2cd1df76bb0088f74b8f2ead30c105c850c694e5ac5a35293a6f5eaca8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0d53d04f-f788-438a-b83c-174fb4edf8cb\",\"moduleSequenceNumber\":1507}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1507,\"_hash\":\"e945142ad6d997f0c79d01662eb0785d4bb6a43a9a159e5d20a9c96fdf5e6f34\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///db228fe4-3bc5-4bc1-984a-d3303756944f\",\"moduleSequenceNumber\":730}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":730,\"_hash\":\"23eeceade267c2508b3185b29f4a5dbbab36284c57f85a03b9b9c60b6a5fb855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///a55c08fa-8dc5-4253-b496-0a483bdf7ef3\",\"moduleSequenceNumber\":8324}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":8324,\"_hash\":\"cfeb253726dc037a133269588fceeb106b6eb044a1210133121a71433021c414\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MANAGE_SERVERS_TO_MANAGE_HACKING_PORT } from '/utils/ports.js';\\nimport { getMoneyToSpend, sort } from '/utils/misc.js';\\nimport { PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\nimport { formatNumber } from '/utils/format.js';\\n\\nconst MIN_POWER = 3; // Min RAM that we want is at least 8GB\\nconst MAX_POWER = 20; // Max RAM is 2^20\\n\\n/**\\n * Continuously try to buy more servers and sells any old servers with less RAM\\n * than we could get with a new server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  const purchasedServerLimit = ns.getPurchasedServerLimit();\\n  let lowestRamAcceptable = Math.pow(2, MIN_POWER);\\n\\n  while (true) {\\n    // Buy / upgrade servers.\\n    for (let power = MAX_POWER; power >= MIN_POWER; power--) {\\n      const ram = Math.pow(2, power);\\n      if (ram < lowestRamAcceptable) continue;\\n      const cost = ns.getPurchasedServerCost(ram);\\n      if (getMoneyToSpend(ns) < cost) continue;\\n\\n      // Delete lowest RAM server if over server limit.\\n      if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n        const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n        const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n        if (ram <= lowestRam) continue;\\n        ns.killall(lowestRamServerName);\\n        if (ns.deleteServer(lowestRamServerName)) {\\n          ns.toast(\\n            `deleted server ${lowestRamServerName} which had ${lowestRam}GB RAM`\\n          );\\n          await ns.writePort(\\n            MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n            JSON.stringify({ remove: lowestRamServerName })\\n          );\\n        }\\n      }\\n\\n      // Buy server.\\n      const server = ns.purchaseServer(PURCHASED_SERVER_PREFIX, ram);\\n      if (server !== '') {\\n        ns.toast(`bought server (${server}) with ${formatNumber(ram)}GB RAM`);\\n        await ns.writePort(\\n          MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n          JSON.stringify({ add: server })\\n        );\\n\\n        // Update lowest RAM acceptable.\\n        if (getPurchasedServerNames(ns).length === purchasedServerLimit) {\\n          const lowestRamServerName = getLowestRamPurchasedServer(ns);\\n          const lowestRam = ns.getServerMaxRam(lowestRamServerName);\\n          if (lowestRam > lowestRamAcceptable) {\\n            lowestRamAcceptable = lowestRam;\\n            ns.toast(`now only buying servers >= ${lowestRamAcceptable}GB RAM`);\\n          }\\n        }\\n      }\\n    }\\n\\n    // Wait 30 seconds before buying another server.\\n    await ns.sleep(1000 * 30);\\n  }\\n}\\n\\nfunction getPurchasedServerNames(ns) {\\n  return ns\\n    .scan()\\n    .filter(serverName => serverName.startsWith(PURCHASED_SERVER_PREFIX));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getLowestRamPurchasedServer(ns) {\\n  const purchasedServerNames = getPurchasedServerNames(ns);\\n  sort(purchasedServerNames, ns.getServerMaxRam);\\n  return purchasedServerNames[0];\\n}\\n\",\"filename\":\"manage-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///fede443b-5d78-4d04-99f3-5d96dde14f1f\",\"moduleSequenceNumber\":347},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///a0cb401e-ec3b-4c4c-a73f-ebda1311a2b1\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///d651fec2-cd56-4a52-bc3a-cccf05cd0fe2\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///7b669b73-35ad-4dfb-9b1a-8d59b4bbbc77\",\"moduleSequenceNumber\":367},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///e441a719-5b97-4483-b9b1-55f88bd71cd1\",\"moduleSequenceNumber\":349},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///23c519db-89bd-4667-802b-0b2e05a27f7e\",\"moduleSequenceNumber\":378},{\"filename\":\"manage-servers.js\",\"url\":\"blob:file:///01233ed0-cc76-479f-85c9-da07477b9c7c\",\"moduleSequenceNumber\":679}],\"dependents\":[],\"ramUsage\":7.25,\"server\":\"home\",\"moduleSequenceNumber\":679,\"_hash\":\"f350c6b09307105977aa72deb76168265bd2f2bdcd8bcb3f1c1736e2cb7ea5d2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getMoneyToSpend, getNetWorth, sort } from '/utils/misc.js';\\nimport { formatMoney, formatPercent } from '/utils/format.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { getForecast } from './utils/stock';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  NULL_PORT_DATA,\\n} from './utils/ports';\\nimport { getStockSymbol } from './utils/organizations';\\n\\nconst COMMISSION_FEE = 100000;\\nconst PERCENT_OF_NET_WORTH_IN_STOCK = 0.99;\\n\\n/**\\n * Manages buying and selling stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols;\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    // No stock exchange API.\\n    return;\\n  }\\n\\n  while (true) {\\n    const manageHackingMessage = ns.readPort(\\n      MANAGE_HACKING_TO_MANAGE_STOCKS_PORT\\n    );\\n    if (manageHackingMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageHackingMessage);\\n      if (response.buy) {\\n        const symbol = getStockSymbol(response.buy);\\n        if (symbol !== undefined) {\\n          buyStock(ns, symbol, ns.getServerMoneyAvailable(HOME_SERVER_NAME));\\n        }\\n      }\\n      if (response.sell) {\\n        const symbol = getStockSymbol(response.sell);\\n        if (symbol !== undefined) sellStock(ns, symbol);\\n      }\\n    }\\n\\n    const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n    const netWorth = getNetWorth(ns);\\n    if (cash / netWorth < 1 - PERCENT_OF_NET_WORTH_IN_STOCK) {\\n      ns.print(\\n        `\\\\nnot buying any stock because we want only ${formatPercent(\\n          PERCENT_OF_NET_WORTH_IN_STOCK\\n        )} of our net worth in stocks and we currently have ${formatMoney(\\n          cash,\\n          true\\n        )} in cash which is ${formatPercent(\\n          cash / netWorth\\n        )} of our net worth (${formatMoney(netWorth, true)})`\\n      );\\n    } else {\\n      // Sort stock symbols sorted from lowest to highest ask price and buy stock\\n      // starting with the cheapest stock.\\n      let moneyToSpend = cash - (1 - PERCENT_OF_NET_WORTH_IN_STOCK) * netWorth;\\n      ns.print(`\\\\ncan spend ${formatMoney(moneyToSpend)}`);\\n      sort(symbols, ns.stock.getAskPrice);\\n      for (const symbol of symbols) {\\n        if (moneyToSpend <= COMMISSION_FEE) break;\\n        moneyToSpend -= buyStock(ns, symbol, moneyToSpend);\\n      }\\n    }\\n\\n    // Sort stock symbols sorted from highest to lowest bid price and sell stock\\n    // starting at the most expensive stock.\\n    sort(symbols, ns.stock.getBidPrice);\\n    for (const symbol of symbols) sellStock(ns, symbol);\\n\\n    await ns.sleep(6000); // Sleep for 6 seconds.\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n * @param {number} moneyToSpend\\n * @returns {number} how much we spent\\n */\\nfunction buyStock(ns, symbol, moneyToSpend) {\\n  const ownedShareCount = ns.stock.getPosition(symbol)[0];\\n  let sharesToBuy = Math.min(\\n    Math.floor((moneyToSpend - COMMISSION_FEE) / ns.stock.getAskPrice(symbol)),\\n    ns.stock.getMaxShares(symbol) - ownedShareCount\\n  );\\n  if (sharesToBuy <= 0) return 0;\\n\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast < 0.5) return 0;\\n  sharesToBuy = Math.ceil(forecast * sharesToBuy);\\n\\n  const sharePrice = ns.stock.buy(symbol, sharesToBuy);\\n  ns.print(\\n    `bought ${sharesToBuy} shares of ${symbol} at ${formatMoney(sharePrice)}`\\n  );\\n\\n  return sharePrice * sharesToBuy + COMMISSION_FEE;\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} symbol\\n */\\nfunction sellStock(ns, symbol) {\\n  const position = ns.stock.getPosition(symbol);\\n  const ownedShareCount = position[0];\\n  if (ownedShareCount === 0) return; // Nothing to sell.\\n\\n  // Panic sell.\\n  if (getForecast(ns, symbol) < 0.15) {\\n    const sharesToSell = ns.stock.getPosition(symbol)[0];\\n    ns.stock.sell(symbol, sharesToSell);\\n    ns.print(`panic sold ${sharesToSell} shares of ${symbol}`);\\n  }\\n\\n  const ownedAvgSharePrice = position[1];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  if (bidPrice < ownedAvgSharePrice) return; // We won't make a profit.\\n\\n  // Determine how much to sell.\\n  let sharesToSell = ownedShareCount;\\n  const forecast = getForecast(ns, symbol);\\n  if (forecast > 0.5) return; // Stock will go up.\\n  sharesToSell = Math.ceil((forecast / 0.5) * sharesToSell);\\n\\n  if (sharesToSell === 0) return; // Nothing to sell.\\n  const gain = ns.stock.getSaleGain(symbol, sharesToSell, 'Long');\\n  const profit =\\n    (gain - ownedAvgSharePrice * ownedShareCount) /\\n    (ownedAvgSharePrice * ownedShareCount);\\n  if (profit < 0) return; // We won't make a profit.\\n\\n  const sharePrice = ns.stock.sell(symbol, sharesToSell);\\n  ns.print(\\n    `sold ${sharesToSell} shares of ${symbol} at ${formatMoney(\\n      sharePrice\\n    )} with profit of ${formatPercent(profit)}`\\n  );\\n}\\n\",\"filename\":\"manage-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///ec2baacc-4427-4f3d-b20c-9c6d8464e212\",\"moduleSequenceNumber\":194067},{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///7db555f0-857b-4fca-95ce-66e2b3d99586\",\"moduleSequenceNumber\":194054},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":194023},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":194026},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":194043},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":194025},{\"filename\":\"manage-stocks.js\",\"url\":\"blob:file:///909605be-8d0e-4a10-a6c4-4cdf59ae3426\",\"moduleSequenceNumber\":194077}],\"dependents\":[],\"ramUsage\":21.2,\"server\":\"home\",\"moduleSequenceNumber\":346,\"_hash\":\"67967b49a7dd161625c2ca1d07c8a3ec6672b5d5e4a116564c6417dbd84ce857\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for formatting numbers. */\\n\\n/**\\n * @param {number} money\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatMoney(money, isCompact) {\\n  return money.toLocaleString('en-US', {\\n    style: 'currency',\\n    currency: 'USD',\\n    notation: isCompact ? 'compact' : 'standard',\\n  });\\n}\\n\\n/**\\n * @param {number} number\\n * @param {boolean} [isCompact]\\n * @returns {string}\\n */\\nexport function formatNumber(number, isCompact) {\\n  return Intl.NumberFormat('en', {\\n    notation: isCompact ? 'compact' : 'standard',\\n  }).format(number);\\n}\\n\\n/**\\n * Formats a percentage within two decimals.\\n *\\n * @param {number} percent\\n * @returns {string}\\n */\\nexport function formatPercent(percent) {\\n  return (percent * 100).toFixed(2) + '%';\\n}\\n\\n/**\\n * Formats time with minutes and seconds.\\n *\\n * @param {number} timeMs\\n * @returns {string} e.g. \\\"43s\\\", \\\"4m 0s\\\", \\\"3m 32s\\\"\\n */\\nexport function formatTime(timeMs) {\\n  const hours = Math.floor(timeMs / 1000 / 60 / 60);\\n  const minutes = Math.floor((timeMs - hours * 1000 * 60 * 60) / 1000 / 60);\\n  const seconds = Math.floor(\\n    (timeMs - hours * 1000 * 60 * 60 - minutes * 1000 * 60) / 1000\\n  );\\n  return (\\n    (hours > 0 ? `${formatNumber(hours)}h ` : '') +\\n    (minutes > 0 ? `${minutes}m ` : '') +\\n    `${seconds}s`\\n  );\\n}\\n\",\"filename\":\"/utils/format.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":347,\"_hash\":\"2edf8f46ea83666c8efabac9644a7a57ba8e7523e911340efe3b90ab61e64391\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for hacking servers. */\\nimport { HOME_SERVER_NAME, PURCHASED_SERVER_PREFIX } from '/utils/servers.js';\\n\\nexport const GROW_SCRIPT = 'grow.js';\\nexport const WEAKEN_SCRIPT = 'weaken.js';\\nexport const HACK_SCRIPT = 'hack.js';\\n\\n/**\\n * Returns whether a server is hackable.\\n *\\n * Note that we are using {@link PURCHASED_SERVER_PREFIX} instead of getting the\\n * purchased servers list here in order to save on 2.25GB of RAM. This requires\\n * that all purchased servers have the same prefix.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if the server is hackable, false if otherwise\\n */\\nexport function isHackable(ns, serverName) {\\n  return (\\n    serverName !== HOME_SERVER_NAME &&\\n    !serverName.startsWith(PURCHASED_SERVER_PREFIX) &&\\n    ns.getServerMaxMoney(serverName) > 0 &&\\n    ns.hasRootAccess(serverName) &&\\n    ns.getServerRequiredHackingLevel(serverName) <= ns.getHackingLevel()\\n  );\\n}\\n\\n/**\\n * A heuristic that determines how hackable a server is.\\n *\\n * @param {import('../index').NS } ns\\n * @param {string} serverName\\n * @returns {number} higher number means better to hack\\n */\\nexport function getHackingHeuristic(ns, serverName) {\\n  let heuristic =\\n    (ns.hackAnalyzeChance(serverName) *\\n      ns.hackAnalyze(serverName) *\\n      ns.getServerMoneyAvailable(serverName)) /\\n    ns.getHackTime(serverName);\\n  try {\\n    heuristic *= ns.formulas.hacking.hackExp(\\n      ns.getServer(serverName),\\n      ns.getPlayer()\\n    );\\n  } catch (_) {}\\n  return heuristic;\\n}\\n\",\"filename\":\"/utils/hacking.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":348,\"_hash\":\"2d9501a3638029920ab5ffd79a6b08672381d1fe45b026e1ffd907c16c0926a1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Miscellaneous utils that don't fit anywhere else. */\\n\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nexport const DEFAULT_PORT = 1337;\\nexport const LOCALHOST_PREFIX = 'http://localhost';\\n\\n/**\\n * Sorts an array given a function to call on each item of the array.\\n *\\n * @param {any[]} array\\n * @param {} fn\\n * @param {boolean} [reverse=false]\\n */\\nexport function sort(array, fn, reverse) {\\n  array.sort((a, b) => {\\n    const first = fn(reverse ? b : a);\\n    const second = fn(reverse ? a : b);\\n    if (typeof first === 'string') return first.localeCompare(second);\\n    return first - second;\\n  });\\n}\\n\\n/**\\n * This function allows us to reserve a certain amount of money so we don't end\\n * up spending all our money buying things.\\n *\\n * @param {import('../index').NS} ns\\n * @returns {number} money that we want to spend purchasing things\\n */\\nexport function getMoneyToSpend(ns) {\\n  return ns.getServerMoneyAvailable(HOME_SERVER_NAME) / 2;\\n}\\n\\n/**\\n * @param {import ('../index').NS} ns\\n * @returns {number} net worth including cash on hand and stocks\\n */\\nexport function getNetWorth(ns) {\\n  return (\\n    ns.getServerMoneyAvailable(HOME_SERVER_NAME) +\\n    ns.stock\\n      .getSymbols()\\n      .map(symbol => getStockWorth(ns, symbol))\\n      .reduce((a, b) => a + b)\\n  );\\n}\\n\",\"filename\":\"/utils/misc.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///a6fdad3e-cbfd-48f7-95e8-e667a743adc9\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ee932550-e5cb-49f2-946d-d8811d6ec59e\"}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":349,\"_hash\":\"a71eedebfa90df311ceefaf82c6ce1d055029652c90e0fe55f02aaa7e4ea25b3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Utils for servers. */\\n\\nexport const HOME_SERVER_NAME = 'home';\\nexport const PURCHASED_SERVER_PREFIX = 'lauren';\\n\\n/**\\n * Retrieves all servers including personal servers and {@link HOME_SERVER_NAME}.\\n *\\n * @example getAllServers(ns)\\n * @param {import('../index').NS } ns\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} names of all servers including {@link HOME_SERVER_NAME}\\n */\\nexport function getAllServerNames(ns, root, parent) {\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  const servers = [...children];\\n  for (const child of children) {\\n    servers.push(...getAllServerNames(ns, child, root));\\n  }\\n  return [...new Set(servers)];\\n}\\n\\n/**\\n * Gets the connection path to a server.\\n *\\n * @example getPath(ns, 'silver-helix')\\n * @param {import('../index').NS} ns\\n * @param {string} server server to get path to\\n * @param {string} [root] name of server to start getting server names from\\n * @param {string} [parent] name of parent of the root server (where we came\\n *                          from)\\n * @returns {string[]} connection to server where the last item is the name of\\n *                     the server to get the path to (e.g. if the server is\\n *                     silver-helix, then the path is\\n *                     [\\\"foodnstuff\\\",\\\"zer0\\\",\\\"silver-helix\\\"])\\n */\\nexport function getPath(ns, server, root, parent) {\\n  if (parent === undefined) parent = 'home';\\n  const children = ns.scan(root).filter(child => child !== parent);\\n  if (children.includes(server)) return [server];\\n  for (const child of children) {\\n    const path = getPath(ns, server, child, root);\\n    if (path.length > 0) return [child, ...path];\\n  }\\n  return [];\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(getPath(ns, 'silver-helix'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string} serverName\\n * @returns {number} GB of free RAM\\n */\\nexport function getFreeRam(ns, serverName) {\\n  if (!ns.hasRootAccess(serverName)) return 0;\\n  return ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n}\\n\",\"filename\":\"/utils/servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":350,\"_hash\":\"5603a4f076bf668e39a9034a9b798647098b43f88cb67cc832bc04883a931d18\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPTS_TO_RUN = [\\n  'sync.js',\\n  'manage-hacking.js',\\n  'manage-hacknet.js',\\n  'manage-life.js',\\n  'manage-programs.js',\\n  'manage-servers.js',\\n  'manage-stocks.js',\\n];\\n\\n/**\\n * Script that starts up all managing scripts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport const main = ns => SCRIPTS_TO_RUN.forEach(script => ns.run(script, 1));\\n\",\"filename\":\"startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"startup.js\",\"url\":\"blob:file:///1eee4e65-1f66-4bb0-bf6d-dc1e78bd978d\",\"moduleSequenceNumber\":194070}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":351,\"_hash\":\"f618d19def433b5f4dcaf46df1a7c615406da84ef4d0238170aa1517a75fdfc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  GROW_SCRIPT,\\n  WEAKEN_SCRIPT,\\n  HACK_SCRIPT,\\n  getHackingHeuristic,\\n  isHackable,\\n} from '/utils/hacking.js';\\nimport { HOME_SERVER_NAME, getAllServerNames } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport {\\n  MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n  MANAGE_SERVERS_TO_MANAGE_HACKING_PORT,\\n  NULL_PORT_DATA,\\n} from '/utils/ports.js';\\n\\nconst HACKING_SCRIPTS = [GROW_SCRIPT, WEAKEN_SCRIPT, HACK_SCRIPT];\\nconst MIN_HACK_CHANCE = 0.6;\\nconst MIN_AVAILABLE_MONEY = 5000000;\\n\\nlet homeReservedRam;\\n\\n/**\\n * Manages hacking servers.\\n *\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  homeReservedRam = ns.args[0];\\n  ns.disableLog('ALL');\\n\\n  let allServerNames = getAllServerNames(ns);\\n\\n  while (true) {\\n    // Update all server names based on servers that we've added or deleted from\\n    // the manage-servers.js script.\\n    const manageServersMessage = ns.readPort(\\n      MANAGE_SERVERS_TO_MANAGE_HACKING_PORT\\n    );\\n    if (manageServersMessage !== NULL_PORT_DATA) {\\n      const response = JSON.parse(manageServersMessage);\\n      if (response.add && !allServerNames.includes(response.add)) {\\n        allServerNames.push(response.add);\\n      }\\n      if (response.remove && allServerNames.includes(response.remove)) {\\n        allServerNames = allServerNames.filter(\\n          serverName => serverName !== response.remove\\n        );\\n      }\\n    }\\n\\n    // Get all servers where we have root access including home.\\n    const rootAccessServerNames = allServerNames.filter(serverName =>\\n      gainRootAccess(ns, serverName)\\n    );\\n\\n    // Copy scripts to every root access server.\\n    for await (const serverName of rootAccessServerNames) {\\n      if (serverName === HOME_SERVER_NAME) continue;\\n      await copyScriptsToServer(ns, serverName);\\n    }\\n\\n    // Check if we have any free RAM to do anything.\\n    if (!hasFreeRam(ns, rootAccessServerNames)) continue;\\n\\n    // Get hackable servers sorted by hacking heuristic.\\n    const hackableServerNames = rootAccessServerNames.filter(serverName =>\\n      isHackable(ns, serverName)\\n    );\\n    sort(\\n      hackableServerNames,\\n      serverName => getHackingHeuristic(ns, serverName),\\n      true\\n    );\\n\\n    // Grow, weaken, and hack.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Tell the manage-stock script to sell if we are close to maxing out the\\n      // server's money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney / maxMoney > 0.99) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ sell: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-growing the server.\\n      if (availableMoney === maxMoney) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          GROW_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} reached max money; killed ` +\\n            `${killedServerCount} servers that were still trying to grow`\\n        );\\n      }\\n\\n      // Grow the server until MIN_AVAILABLE_MONEY.\\n      if (availableMoney < MIN_AVAILABLE_MONEY) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(MIN_AVAILABLE_MONEY)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames, MIN_AVAILABLE_MONEY);\\n      }\\n\\n      // Check that we are not over-weakening the server.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (hackChance === 1 || securityLevel === minSecurityLevel) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          WEAKEN_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached min security; killed ` +\\n            `${killedServerCount} servers that were still trying to weaken`\\n        );\\n      }\\n\\n      // Weaken the server until MIN_HACK_CHANCE or until lowest security level.\\n      if (hackChance < MIN_HACK_CHANCE && securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${formatPercent(\\n            hackChance\\n          )} to ${formatPercent(MIN_HACK_CHANCE)} hack chance`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Tell the manage-stock script to buy if we are close to hacking all of\\n      // the target server's money.\\n      if (availableMoney / maxMoney < 0.01) {\\n        await ns.writePort(\\n          MANAGE_HACKING_TO_MANAGE_STOCKS_PORT,\\n          JSON.stringify({ buy: targetServerName })\\n        );\\n      }\\n\\n      // Check that we are not over-hacking the server.\\n      if (availableMoney === 0) {\\n        const killedServerCount = killScript(\\n          ns,\\n          rootAccessServerNames,\\n          HACK_SCRIPT,\\n          targetServerName,\\n          1\\n        );\\n        ns.print(\\n          `${targetServerName} has reached $0; killed ` +\\n            `${killedServerCount} servers that were still trying to hack`\\n        );\\n      }\\n\\n      // Hack the server if server has MIN_AVAILABLE_MONEY and MIN_HACK_CHANCE.\\n      if (\\n        availableMoney >= MIN_AVAILABLE_MONEY &&\\n        hackChance >= MIN_HACK_CHANCE\\n      ) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    // If we have any extra free RAM, grow and weaken hackable servers to the\\n    // max money and min security level.\\n    for (const targetServerName of hackableServerNames) {\\n      // Check if we have any free RAM to do anything.\\n      if (!hasFreeRam(ns, rootAccessServerNames)) break;\\n\\n      // Grow the server until max money.\\n      const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n      const maxMoney = ns.getServerMaxMoney(targetServerName);\\n      if (availableMoney < maxMoney) {\\n        ns.print(\\n          `\\\\nattempting to grow ${targetServerName} from ${formatMoney(\\n            availableMoney\\n          )} to ${formatMoney(maxMoney)}`\\n        );\\n        grow(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Weaken the server until min security level.\\n      const securityLevel = ns.getServerSecurityLevel(targetServerName);\\n      const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n      if (securityLevel > minSecurityLevel) {\\n        ns.print(\\n          `\\\\nattempting to weaken ${targetServerName} from ${securityLevel.toFixed(\\n            2\\n          )} to ${minSecurityLevel} security level`\\n        );\\n        weaken(ns, targetServerName, rootAccessServerNames);\\n      }\\n\\n      // Hack server that has >0% hack chance until no money.\\n      const hackChance = ns.hackAnalyzeChance(targetServerName);\\n      if (availableMoney > 0 && hackChance > 0) {\\n        ns.print(\\n          `\\\\nattempting to hack ${targetServerName} with ${formatMoney(\\n            availableMoney\\n          )} and ${formatPercent(hackChance)} hack chance`\\n        );\\n        hack(ns, targetServerName, rootAccessServerNames);\\n      }\\n    }\\n\\n    if (\\n      ns.fileExists('Formulas.exe') &&\\n      hasFreeRam(ns, rootAccessServerNames)\\n    ) {\\n      // Get server with the most hack exp.\\n      const hackableServerNamesSortedByHackExp = [...hackableServerNames];\\n      const player = ns.getPlayer();\\n      sort(\\n        hackableServerNamesSortedByHackExp,\\n        /** @type {string} */ serverName =>\\n          ns.formulas.hacking.hackExp(ns.getServer(serverName), player) /\\n          ns.getWeakenTime(serverName)\\n      );\\n      const targetServerName = hackableServerNamesSortedByHackExp[0];\\n\\n      for (const rootAccessServerName of rootAccessServerNames) {\\n        const threadCount = getAvailableThreadCount(\\n          ns,\\n          rootAccessServerName,\\n          WEAKEN_SCRIPT\\n        );\\n        if (threadCount === 0) continue;\\n        const pid = ns.exec(\\n          WEAKEN_SCRIPT,\\n          rootAccessServerName,\\n          threadCount,\\n          targetServerName,\\n          1\\n        );\\n        if (pid > 0) {\\n          ns.print(\\n            `weakening ${targetServerName} on ${rootAccessServerName} with ${formatNumber(\\n              threadCount\\n            )} threads`\\n          );\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(3000); // Wait for 3 seconds.\\n  }\\n}\\n\\n/**\\n * Open all the ports that we can open and attempt to gain root access to a\\n * given server.\\n *\\n * @param {import('index').NS } ns\\n * @param {string} serverName\\n * @returns {boolean} true if we now have root access and false if otherwise\\n */\\nfunction gainRootAccess(ns, serverName) {\\n  const server = ns.getServer(serverName);\\n\\n  // Attempt to open all ports even if we already have root access.\\n  if (ns.fileExists('BruteSSH.exe') && !server.sshPortOpen) {\\n    ns.brutessh(serverName);\\n  }\\n  if (ns.fileExists('FTPCrack.exe') && !server.ftpPortOpen) {\\n    ns.ftpcrack(serverName);\\n  }\\n  if (ns.fileExists('relaySMTP.exe') && !server.smtpPortOpen) {\\n    ns.relaysmtp(serverName);\\n  }\\n  if (ns.fileExists('HTTPWorm.exe') && !server.httpPortOpen) {\\n    ns.httpworm(serverName);\\n  }\\n  if (ns.fileExists('SQLInject.exe') && !server.sqlPortOpen) {\\n    ns.sqlinject(serverName);\\n  }\\n\\n  if (ns.hasRootAccess(serverName)) return true;\\n  try {\\n    ns.nuke(serverName);\\n  } catch (_) {\\n    return false;\\n  }\\n}\\n\\n/**\\n * Copies grow, hack, and weaken scripts to a given server and deletes any other\\n * js scripts from that server.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n */\\nasync function copyScriptsToServer(ns, serverName) {\\n  // Copy scripts over.\\n  await ns.scp(HACKING_SCRIPTS, HOME_SERVER_NAME, serverName);\\n\\n  // Delete any other scripts on the server.\\n  const otherScripts = ns\\n    .ls(serverName)\\n    .filter(\\n      script => script.endsWith('.js') && !HACKING_SCRIPTS.includes(script)\\n    );\\n  for (const script of otherScripts) ns.rm(script, serverName);\\n}\\n\\n/**\\n * Get amount of free RAM from list of servers or a single server.\\n *\\n * @param {import('index').NS} ns\\n * @param {(string[]|string)} serverNames\\n * @returns {number} GB of free RAM\\n */\\nfunction getFreeRam(ns, serverNames) {\\n  if (typeof serverNames === 'string') {\\n    // Return free RAM for a single server.\\n    const serverName = serverNames;\\n    const freeRam =\\n      ns.getServerMaxRam(serverName) - ns.getServerUsedRam(serverName);\\n    if (serverName !== HOME_SERVER_NAME) return freeRam;\\n\\n    if (homeReservedRam !== undefined) {\\n      return Math.max(freeRam - homeReservedRam, 0);\\n    }\\n\\n    // If home server, make sure to reserve RAM to run other scripts.\\n    const scripts = ns\\n      .ls(HOME_SERVER_NAME)\\n      .filter(\\n        fileName => fileName.endsWith('.js') && !fileName.startsWith('/')\\n      );\\n    let reservedRam = Math.max(\\n      ...scripts.map(script => ns.getScriptRam(script))\\n    );\\n    return Math.max(freeRam - reservedRam, 0);\\n  }\\n  return serverNames\\n    .map(serverName => getFreeRam(ns, serverName))\\n    .reduce((a, b) => a + b);\\n}\\n\\n/**\\n * Get minimum amount of RAM to execute one of grow, weaken, or hack scripts.\\n *\\n * @param {import('index').NS} ns\\n * @returns {number} GB of RAM\\n */\\nfunction getMinRam(ns) {\\n  return Math.min(\\n    ...HACKING_SCRIPTS.map(script => ns.getScriptRam(script, HOME_SERVER_NAME))\\n  );\\n}\\n\\n/**\\n * Checks if we have any free RAM to do anything.\\n *\\n * @param {import('index').NS} ns\\n * @param {string[]} rootAccessServerNames\\n * @returns {boolean} true if we have free RAM\\n */\\nfunction hasFreeRam(ns, rootAccessServerNames) {\\n  const freeRam = getFreeRam(ns, rootAccessServerNames);\\n  if (getFreeRam(ns, rootAccessServerNames) < getMinRam(ns)) {\\n    ns.print(\\n      `all servers are currently busy (only ${freeRam} GB RAM available)`\\n    );\\n    return false;\\n  }\\n  return true;\\n}\\n\\n/**\\n * Grow until min money.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n * @param {number} [minMoneyAvailable] if not set, then will grow until max\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t money\\n */\\nfunction grow(ns, targetServerName, rootAccessServerNames, minMoneyAvailable) {\\n  const maxMoney = ns.getServerMaxMoney(targetServerName);\\n  if (minMoneyAvailable === undefined) minMoneyAvailable = maxMoney;\\n  const availableMoney = ns.getServerMoneyAvailable(targetServerName);\\n\\n  // Get number of threads needed to get money to get to the min available money\\n  const growthAmount =\\n    availableMoney === 0 ? 2 : minMoneyAvailable / availableMoney;\\n  let estimatedThreadCount = Math.round(\\n    ns.growthAnalyze(targetServerName, growthAmount)\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to grow ${targetServerName} ${formatPercent(\\n      growthAmount\\n    )}`\\n  );\\n\\n  // Use only the estimated thread count to grow the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      GROW_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * Weaken until min security level.\\n *\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction weaken(ns, targetServerName, rootAccessServerNames) {\\n  const currentSecurityLevel = ns.getServerSecurityLevel(targetServerName);\\n  const minSecurityLevel = ns.getServerMinSecurityLevel(targetServerName);\\n\\n  // Get number of threads needed to get hack chance to get to minimum security\\n  // level.\\n  let estimatedThreadCount = 1;\\n  do {\\n    estimatedThreadCount++;\\n  } while (\\n    currentSecurityLevel - ns.weakenAnalyze(estimatedThreadCount) >\\n    minSecurityLevel\\n  );\\n  if (estimatedThreadCount === 0) return;\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to weaken ` +\\n      `${targetServerName} from ${currentSecurityLevel} to ${minSecurityLevel}`\\n  );\\n\\n  // Use only the estimated thread count to weaken the target server.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      WEAKEN_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} targetServerName\\n * @param {string[]} rootAccessServerNames\\n */\\nfunction hack(ns, targetServerName, rootAccessServerNames) {\\n  // Get number of threads needed to hack all the money from the server.\\n  let estimatedThreadCount = Math.round(\\n    ns.hackAnalyzeThreads(\\n      targetServerName,\\n      ns.getServerMoneyAvailable(targetServerName)\\n    )\\n  );\\n  ns.print(\\n    `estimated ${estimatedThreadCount} threads to hack ${targetServerName}`\\n  );\\n\\n  // Use only the estimated thread count to hack the target srver.\\n  for (const serverName of rootAccessServerNames) {\\n    estimatedThreadCount -= runScript(\\n      ns,\\n      serverName,\\n      HACK_SCRIPT,\\n      estimatedThreadCount,\\n      targetServerName,\\n      1\\n    );\\n    if (estimatedThreadCount <= 0) return;\\n  }\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string} serverName\\n * @param {string} scriptName\\n * @param {number} threadCount\\n * @param  {...any} args\\n * @returns {number} number of threads that we were able to run the script at\\n */\\nfunction runScript(ns, serverName, scriptName, threadCount, ...args) {\\n  if (ns.isRunning(scriptName, serverName, ...args)) {\\n    const script = ns.getRunningScript(scriptName, serverName, ...args);\\n    ns.print(\\n      `already running ${scriptName} ${args} on ${serverName} with ` +\\n        `${script.threads} threads`\\n    );\\n    return 0;\\n  }\\n\\n  const availableThreadCount = getAvailableThreadCount(\\n    ns,\\n    serverName,\\n    scriptName\\n  );\\n  const actualThreadCount =\\n    availableThreadCount > threadCount ? threadCount : availableThreadCount;\\n  if (actualThreadCount <= 0) return 0;\\n  const success = ns.exec(scriptName, serverName, actualThreadCount, ...args);\\n  if (success === 0) return 0;\\n  ns.print(\\n    `running ${scriptName} ${args} on ${serverName} with ${actualThreadCount} threads`\\n  );\\n  return actualThreadCount;\\n}\\n\\nfunction getAvailableThreadCount(ns, serverName, scriptName) {\\n  return Math.floor(getFreeRam(ns, serverName) / ns.getScriptRam(scriptName));\\n}\\n\\n/**\\n * @param {import('index').NS} ns\\n * @param {string[]} serverNames\\n * @param {string} scriptName\\n * @param  {...any} args\\n * @returns {number} number of servers that we killed\\n */\\nfunction killScript(ns, serverNames, scriptName, ...args) {\\n  let killedServerCount = 0;\\n  for (const serverName of serverNames) {\\n    if (\\n      ns.isRunning(scriptName, serverName, ...args) &&\\n      ns.kill(scriptName, serverName, ...args)\\n    ) {\\n      killedServerCount++;\\n    }\\n  }\\n  return killedServerCount;\\n}\\n\",\"filename\":\"manage-hacking.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/ports.js\",\"url\":\"blob:file:///76bb09f6-868e-4815-b657-09c38f551734\",\"moduleSequenceNumber\":378},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///97b9a006-ee93-4cd3-9a10-772110924a8d\",\"moduleSequenceNumber\":347},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///2d8ee1bf-65cf-4f35-ba1d-589bbfc16ac1\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///360212f9-b3eb-4c35-aa5f-7727dbbee3ad\",\"moduleSequenceNumber\":367},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///d0bb9a64-71db-45e7-a82a-751e7e4e6e64\",\"moduleSequenceNumber\":349},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///aba66703-62d9-44f7-b440-862e2c7073eb\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///eb70255b-d1a9-4393-937b-0d189dd29e16\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///5129abcc-ed69-43b7-9bd5-014a1a2cdf0b\",\"moduleSequenceNumber\":348},{\"filename\":\"manage-hacking.js\",\"url\":\"blob:file:///e342a53c-e38b-48cb-8f73-3fe87c8faf53\",\"moduleSequenceNumber\":680}],\"dependents\":[],\"ramUsage\":15.15,\"server\":\"home\",\"moduleSequenceNumber\":680,\"_hash\":\"bb0a6f095badb1d9361284145104fe5ca5d6133d6882ddd59d18ab27b2d9aec0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Array Jumping Game\\n *\\n * Each element in the array represents your MAXIMUM jump length at that\\n * position. This means that if you are at position i and your maximum jump\\n * length is n, you can jump to any position from i to i+n.\\n *\\n * Assuming you are initially positioned at the start of the array, determine\\n * whether you are able to reach the last index exactly.\\n *\\n * Your answer should be submitted as 1 or 0, representing true and false\\n * respectively\\n *\\n * @param {number[]} input\\n * @returns {number} 1 if can reach the end, 0 if not\\n */\\nexport function arrayJumpingGame(input) {\\n  return _getPathToLastIndex(input).length === 0 ? 0 : 1;\\n}\\n\\n/**\\n * @param {number[]} maxJumps List of numbers where each number represents max jump.\\n * @param {number} [currentIndex=0]\\n * @returns {string[]} The path to the last index where each member of the array is\\n * \\t\\t\\t\\t\\t\\t\\t\\t\\tthe jump. Empty if no path.\\n */\\nfunction _getPathToLastIndex(maxJumps, currentIndex) {\\n  currentIndex = currentIndex || 0;\\n  if (currentIndex === maxJumps.length - 1) return ['end'];\\n\\n  const maxJump = maxJumps[currentIndex];\\n  for (let n = 1; n <= maxJump; n++) {\\n    const path = _getPathToLastIndex(maxJumps, currentIndex + n);\\n    if (path.length > 0)\\n      return [\\n        `jump from ${currentIndex} to ${\\n          currentIndex + n\\n        } (max jump is ${maxJump})`,\\n        ...path,\\n      ];\\n  }\\n\\n  return [];\\n}\\n\",\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":353,\"_hash\":\"2feadad6c9c3bef4df0b60380d6f7e2136c7cd17813055df6906cb2a3bdbd2d6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const OPERATORS = ['+', '-', '*'];\\n\\n/**\\n * Find All Valid Math Expressions\\n *\\n * Return all possible ways you can add the +, -, and * operators to the string\\n * such that it evaluates to the target number.\\n *\\n * @param {any[]} input\\n * @returns {string[]}\\n */\\nexport function findValidMathExpressions(input) {\\n  /** @type {string} */ const digits = input[0];\\n  /** @type {number} */ const targetNumber = input[1];\\n\\n  /**\\n   * Index is the index of the digit in the digits string.\\n   *\\n   * @type {string[][]}\\n   */\\n  const combinations = Array(digits.length);\\n  for (let i = digits.length - 1; i >= 0; i--) {\\n    const digit = digits.substring(i, i + 1);\\n\\n    // Fill in the last slot of the combinations array.\\n    if (i === digits.length - 1) {\\n      combinations[i] = [digit];\\n      continue;\\n    }\\n\\n    // Fill in the other combinations.\\n    combinations[i] = [];\\n    for (const expression of combinations[i + 1]) {\\n      combinations[i].push(digit + expression);\\n      if (\\n        expression.startsWith('0') &&\\n        expression.split(/[\\\\+\\\\-\\\\*]/g)[0] !== '0'\\n      ) {\\n        continue;\\n      }\\n      OPERATORS.forEach(operator =>\\n        combinations[i].push(digit + operator + expression)\\n      );\\n    }\\n  }\\n\\n  // Get valid expressions.\\n  return combinations[0].filter(\\n    expression => evaluate(expression) === targetNumber\\n  );\\n}\\n\\n/**\\n * @param {string} expression\\n * @returns {number}\\n */\\nfunction evaluate(expression) {\\n  // Split + and - into an array of addends.\\n  const addParts = expression.split('+');\\n  const addends = [];\\n  for (const addPart of addParts) {\\n    if (addPart.includes('-')) {\\n      const subtractParts = addPart.split('-');\\n      addends.push(subtractParts[0]);\\n      for (let i = 1; i < subtractParts.length; i++) {\\n        addends.push('-' + subtractParts[i]);\\n      }\\n    } else {\\n      addends.push(addPart);\\n    }\\n  }\\n\\n  // Resolve multiplications within each addend and sum.\\n  let sum = 0;\\n  for (const addend of addends) {\\n    if (addend.includes('*')) {\\n      const factors = addend.split('*');\\n      if (factors.includes('0')) continue;\\n      const product = factors\\n        .filter(factor => factor !== '1')\\n        .map(factor => parseInt(factor))\\n        .reduce((a, b) => a * b);\\n      sum += product;\\n    } else {\\n      sum += parseInt(addend);\\n    }\\n  }\\n  return sum;\\n}\\n\",\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":354,\"_hash\":\"e60a956a9f1f2c8e855494c69fbca65956aefe1e41d241f04fb2a1641c2d32ed\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Generate IP Addresses\\n *\\n * Given the following string containing only digits, return an array with all\\n * possible valid IP address combinations that can be created from the input.\\n *\\n * Note that an octet cannot begin with a '0' unless the number itself is\\n * actually 0. For example, '192.168.010.1' is not a valid IP.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function generateIpAddresses(input) {\\n  return _getAddresses(input).filter(\\n    address => address.split('.').length === 4\\n  );\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} [depth]\\n * @returns {string[]}\\n */\\nfunction _getAddresses(str, depth) {\\n  if (depth === undefined) depth = 0;\\n  if (depth === 4) return [];\\n  const beginningSections = _getBeginningSections(str);\\n  const addresses = [];\\n  for (const beginningSection of beginningSections) {\\n    const restOfStr = str.substring(beginningSection.toString().length);\\n    if (restOfStr === '') {\\n      addresses.push(...beginningSections);\\n    } else {\\n      const addressVariants = _getAddresses(restOfStr, depth + 1);\\n      for (const variant of addressVariants) {\\n        if (variant.replaceAll('.', '') === restOfStr) {\\n          addresses.push(beginningSection + '.' + variant);\\n        }\\n      }\\n    }\\n  }\\n  return [...new Set(addresses)];\\n}\\n\\n/**\\n * A section is the first 1-3 characters of the {@link str} where there cannot\\n * be a leading zero nor can there be a leading zero after the section. The\\n * section must also be a number between 0 and 255.\\n *\\n * @param {string} str\\n */\\nfunction _getBeginningSections(str) {\\n  if (str.length === 0) return [];\\n  return [1, 2, 3]\\n    .filter(length => length === 1 || str[0] !== '0') // cannot be a leading zero after the section\\n    .map(length => parseInt(str.substring(0, length)))\\n    .filter(section => section >= 0 && section <= 255)\\n    .map(section => section.toString());\\n}\\n\",\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":355,\"_hash\":\"0f8ead77c485ea6b40daebdc532c4a27d1d48eaa1fd2e51e4567dbc41a48de72\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Total Ways to Sum\\n *\\n * It is possible write four as a sum in exactly four different ways:\\n *\\n *  3 + 1\\n *  2 + 2\\n *  2 + 1 + 1\\n *  1 + 1 + 1 + 1\\n *\\n * How many different ways can the input number be written as a sum of at least\\n * two positive integers?\\n *\\n * @param {number} input\\n * @returns {number} number of ways to sum\\n */\\nexport function totalWaysToSum(input) {\\n  const waysToSum = new Array(input + 1).fill(0);\\n  waysToSum[0] = 1;\\n\\n  for (let i = 1; i < input; i++) {\\n    for (let j = i; j < input + 1; j++) {\\n      waysToSum[j] = waysToSum[j] + waysToSum[j - i];\\n    }\\n  }\\n\\n  return waysToSum[input];\\n}\\n\",\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":356,\"_hash\":\"8a68acbe2492a05c86e6546f54c823867bf6cff25d4d2e86d552aff1098d18db\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Find Largest Prime Factor\\n *\\n * A prime factor is a factor that is a prime number. What is the largest prime\\n * factor of the input?\\n *\\n * @param {number} input\\n * @returns {number} largest prime factor\\n */\\nexport function findLargestPrimeFactor(input) {\\n  /** @type {Object.<number, boolean>} */\\n  const cachedPrimeNumberMap = {};\\n\\n  const primes = [];\\n  for (let i = 1; i <= input; i++) {\\n    if (input % i !== 0) continue;\\n    if (_isPrime(i, cachedPrimeNumberMap)) primes.push(i);\\n  }\\n  return primes.slice(-1)[0];\\n}\\n\\n/**\\n * Checks if a number is prime.\\n *\\n * @param {number} number\\n * @param {Object.<number, boolean>} cachedPrimeNumberMap\\n */\\nfunction _isPrime(number, cachedPrimeNumberMap) {\\n  if (number in cachedPrimeNumberMap) return cachedPrimeNumberMap[number];\\n  for (let i = 2; i < number; i++) {\\n    if (number % i === 0) {\\n      cachedPrimeNumberMap[number] = false;\\n      return false;\\n    }\\n  }\\n  cachedPrimeNumberMap[number] = true;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":357,\"_hash\":\"adaa0db1e11a934a70dc2e8e62ddd1dafa5485848c0fc539ce14dfcc5307e512\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i:\\n *\\n * 112,61,181,149,39,17,143,192,196,120,151\\n *\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can only buy and sell the stock once). If no profit can\\n * be made then the answer should be 0. Note that you have to buy the stock\\n * before you can sell it\\n *\\n * @param {string} input\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderI(input) {\\n  let maxProfit = 0;\\n  for (let day = 0; day < input.length - 1; day++) {\\n    const profit = Math.max(...input.slice(day + 1)) - input[day];\\n    if (profit > maxProfit) maxProfit = profit;\\n  }\\n  return maxProfit;\\n}\\n\\nconsole.log(\\n  algorithmicStockTraderI([112, 61, 181, 149, 39, 17, 143, 192, 196, 120, 151])\\n);\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":358,\"_hash\":\"e2816fc708994620ac4a831daf31fe7c7e085d179d3b45f7fdbd3ec249c19d5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader II\\n *\\n * You are given the following array of stock prices (which are numbers) where\\n * the i-th element represents the stock price on day i.\\n *\\n * Determine the maximum possible profit you can earn using as many transactions\\n * as you'd like. A transaction is defined as buying and then selling one share\\n * of the stock. Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.\\n *\\n * If no profit can be made, then the answer should be 0\\n *\\n * @param {int[]} stockPrices\\n * @returns {number}\\n */\\nexport function algorithmicStockTraderII(stockPrices) {\\n  let profit = 0;\\n\\n  let day = -1;\\n  while (day < stockPrices.length) {\\n    day++;\\n    if (stockPrices[day + 1] > stockPrices[day]) {\\n      let minPrice = stockPrices[day];\\n      day++;\\n\\n      while (\\n        day < stockPrices.length &&\\n        stockPrices[day + 1] > stockPrices[day]\\n      ) {\\n        day++;\\n      }\\n      let maxPrice = stockPrices[day];\\n      profit += maxPrice - minPrice;\\n    }\\n  }\\n\\n  return profit;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":359,\"_hash\":\"408d4f1e8f53592e4245048ecddbcdf5cbfa68ccea591735e28c2a10fca59457\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/algorithmic-stock-trader-iii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":360,\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"404: Not Found\",\"filename\":\"/contracts/unique-paths-in-a-grid-i.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":361,\"_hash\":\"d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Subarray with Maximum Sum\\n *\\n * Given the following integer array, find the contiguous subarray (containing\\n * at least one number) which has the largest sum and return that sum. 'Sum'\\n * refers to the sum of all the numbers in the subarray.\\n *\\n * @param {number[]} input\\n * @returns {number}\\n */\\nexport function subarrayWithMaximumSum(input) {\\n  let maxSum = input[0];\\n  for (let startIndex = 0; startIndex < input.length; startIndex++) {\\n    for (let endIndex = startIndex + 1; endIndex <= input.length; endIndex++) {\\n      const subarray = input.slice(startIndex, endIndex);\\n      const sum = subarray.reduce((a, b) => a + b);\\n      maxSum = Math.max(maxSum, sum);\\n    }\\n  }\\n  return maxSum;\\n}\\n\",\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":362,\"_hash\":\"5cdf8f48468f4da70baeb04591bb73878aae85e5d0541f20b982457c69806d53\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sanitize Parentheses in Expression\\n *\\n * Remove the minimum number of invalid parentheses in order to validate the\\n * string. If there are multiple minimal ways to validate the string, provide\\n * all of the possible results. The answer should be provided as an array of\\n * strings. If it is impossible to validate the string the result should be an\\n * array with only an empty string.\\n *\\n * IMPORTANT: The string may contain letters, not just parentheses.\\n *\\n * @param {string} input\\n * @returns {string[]}\\n */\\nexport function sanitizeParenthesesInExpression(input) {\\n  if (_isValid(input)) return [input];\\n\\n  let parenthesesToRemove = 1;\\n  let variants = [];\\n  while (parenthesesToRemove <= input.length) {\\n    variants = [...new Set(_getVariants(input, parenthesesToRemove))].filter(\\n      _isValid\\n    );\\n    if (variants.length > 0) break;\\n    parenthesesToRemove++;\\n  }\\n  return variants;\\n}\\n\\n/**\\n * @param {string} str\\n * @param {number} parenthesesToRemove\\n * @returns {string[]}\\n */\\nfunction _getVariants(str, parenthesesToRemove) {\\n  if (parenthesesToRemove === 0) return [str];\\n  const variants = [];\\n  for (let i = 0; i < str.length; i++) {\\n    if (str.charAt(i) !== '(' && str.charAt(i) !== ')') continue;\\n    const variant = str.substring(0, i) + str.substring(i + 1, str.length);\\n    if (parenthesesToRemove === 1) {\\n      variants.push(variant);\\n    } else {\\n      const furtherVariants = _getVariants(variant, parenthesesToRemove - 1);\\n      for (const furtherVariant of furtherVariants) {\\n        if (variants.includes(furtherVariant)) continue;\\n        variants.push(furtherVariant);\\n      }\\n    }\\n  }\\n  return variants;\\n}\\n\\nfunction _isValid(str) {\\n  if (str === '') return true;\\n  const stack = [];\\n  const characters = str.split('');\\n  for (const character of characters) {\\n    if (character === '(') stack.push(character);\\n    else if (character === ')' && stack.pop() !== '(') return false;\\n  }\\n  return stack.length === 0;\\n}\\n\",\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":363,\"_hash\":\"62149e986e689565cc9daaea888f5d6c8e3f0d01af3d0e963079f1ea60b4d6b7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid II\\n *\\n * You are located in the top-left corner of a grid.\\n *\\n * You are trying reach the bottom-right corner of the grid, but you can only\\n * move down or right on each step. Furthermore, there are obstacles on the grid\\n * that you cannot move onto. These obstacles are denoted by '1', while empty\\n * spaces are denoted by 0.\\n *\\n * Determine how many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an 2D array of numbers\\n * representing the grid.\\n *\\n * @param {int[][]} input\\n */\\nexport function uniquePathsInAGridII(input) {\\n  return new Set(getUniquePaths(input, 0, 0, '')).size;\\n}\\n\\n/**\\n * @param {int[][]} grid\\n * @param {int} startX\\n * @param {int} startY\\n * @returns {string[]} list of instructions (e.g. \\\"DDRR\\\")\\n */\\nexport function getUniquePaths(grid, startX, startY, instructionsThusFar) {\\n  if (startX === grid[0].length - 1 && startY === grid.length - 1) {\\n    return [instructionsThusFar];\\n  }\\n  const allInstructions = [];\\n  if (_canMoveRight(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX + 1, startY, instructionsThusFar + 'R')\\n    );\\n  }\\n  if (_canMoveDown(grid, startX, startY)) {\\n    allInstructions.push(\\n      ...getUniquePaths(grid, startX, startY + 1, instructionsThusFar + 'D')\\n    );\\n  }\\n  return allInstructions;\\n}\\n\\nfunction _canMoveRight(grid, x, y) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\nfunction _canMoveDown(grid, x, y) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid-ii.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":364,\"_hash\":\"46f788491f931079774091844bc994940b3a5e29a2c9dcd8b2ab13715a41cf4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\nimport { sort } from '/utils/misc.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SOURCE_COLUMN_HEADER = 'Source';\\nconst MONEY_COLUMN_HEADER = 'Money';\\nconst MONEY_ABBR_COLUMN_HEADER = 'Money (Abbr.)';\\nconst PERCENT_NET_WORTH_COLUMN_HEADER = '% net worth';\\n\\n/**\\n * Prints out net worth along with breakdown on how much of net worth is in each\\n * stock and in cash.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let stocks = [];\\n  try {\\n    stocks = ns.stock\\n      .getSymbols()\\n      .map(symbol => new Stock(ns, symbol))\\n      .filter(stock => stock.worth > 0);\\n    sort(stocks, stock => stock.symbol);\\n    sort(stocks, stock => stock.worth);\\n  } catch (_) {}\\n\\n  const cash = ns.getServerMoneyAvailable(HOME_SERVER_NAME);\\n  const netWorth =\\n    cash + stocks.map(stock => stock.worth).reduce((a, b) => a + b, 0);\\n\\n  const sections = [\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Cash',\\n        [MONEY_COLUMN_HEADER]: formatMoney(cash),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(cash, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(cash / netWorth),\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n    [\\n      {\\n        [SOURCE_COLUMN_HEADER]: 'Net worth',\\n        [MONEY_COLUMN_HEADER]: formatMoney(netWorth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(netWorth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ],\\n  ];\\n  if (stocks.length > 0) {\\n    sections.unshift(\\n      stocks.map(stock => ({\\n        [SOURCE_COLUMN_HEADER]: stock.symbol,\\n        [MONEY_COLUMN_HEADER]: formatMoney(stock.worth),\\n        [MONEY_ABBR_COLUMN_HEADER]: formatMoney(stock.worth, true),\\n        [PERCENT_NET_WORTH_COLUMN_HEADER]: formatPercent(\\n          stock.worth / netWorth\\n        ),\\n      }))\\n    );\\n  }\\n  printTable(\\n    ns,\\n    {\\n      [MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MONEY_ABBR_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_NET_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...sections\\n  );\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.worth = getStockWorth(ns, symbol);\\n  }\\n}\\n\",\"filename\":\"get-net-worth.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///a134bb8b-1aa7-40a4-8901-b8d57e2fae2f\",\"moduleSequenceNumber\":21837},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///f67a1f1b-cb12-497b-bece-c8372c97f9cc\",\"moduleSequenceNumber\":21832},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///15b78a73-9a71-4bb5-848c-02f1995818a4\",\"moduleSequenceNumber\":21835},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///ab53a06d-b297-4631-b6d1-290668677c38\",\"moduleSequenceNumber\":21836},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":21830},{\"filename\":\"get-net-worth.js\",\"url\":\"blob:file:///449222ac-af0e-40c9-95e2-54b91f22c66a\",\"moduleSequenceNumber\":154578}],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":365,\"_hash\":\"808af31cf036be749f7db8413971ad21e883c085cd797aa2023756737e7cadc4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, RowColor, printTable } from '/utils/table.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { sort } from '/utils/misc.js';\\nimport {\\n  getAllServerNames,\\n  getFreeRam,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server Name';\\nconst FREE_RAM_COLUMN_HEADER = 'Free RAM';\\nconst MAX_RAM_COLUMN_HEADER = 'Max RAM';\\n\\n/**\\n * Prints out free RAM from all servers that have any RAM.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.freeRam > 0);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const totalFreeRam = servers\\n    .map(server => server.freeRam)\\n    .reduce((a, b) => a + b);\\n  const totalMaxRam = servers\\n    .map(server => server.maxRam)\\n    .reduce((a, b) => a + b);\\n\\n  printTable(\\n    ns,\\n    {\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    servers.map(server => ({\\n      [SERVER_NAME_COLUMN_HEADER]: server.name,\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(server.freeRam) + ' GB',\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(server.maxRam) + ' GB',\\n      rowColor: server.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    })),\\n    [\\n      {\\n        [SERVER_NAME_COLUMN_HEADER]: 'Total free RAM',\\n        [FREE_RAM_COLUMN_HEADER]: formatNumber(totalFreeRam) + ' GB',\\n        [MAX_RAM_COLUMN_HEADER]: formatNumber(totalMaxRam) + ' GB',\\n      },\\n    ]\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.name = serverName;\\n    this.freeRam = getFreeRam(ns, serverName);\\n    this.maxRam = ns.getServerMaxRam(serverName);\\n    this.isPurchased = serverName.startsWith(PURCHASED_SERVER_PREFIX);\\n  }\\n}\\n\",\"filename\":\"get-free-ram.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///69891272-795a-4f94-826e-3fd3e04ca49d\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///256a5415-89ec-49c4-8a5c-b4320c6e6dd3\",\"moduleSequenceNumber\":350},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///848ed4cc-c72d-46c9-9a05-ce612545a3ce\",\"moduleSequenceNumber\":367},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///6e0704b3-f31c-4af9-9d6e-f46cfdfcb2f8\",\"moduleSequenceNumber\":349},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///aef5164e-170b-448b-9b15-164189e58e6b\",\"moduleSequenceNumber\":347},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///3397009b-ea78-4257-ba80-f2a98778e0a7\",\"moduleSequenceNumber\":374},{\"filename\":\"get-free-ram.js\",\"url\":\"blob:file:///091eca9b-2219-4222-b9a2-5e2e71d1eeaf\",\"moduleSequenceNumber\":313688}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":313688,\"_hash\":\"7c26dcb443ebca8174c811dfd3f5981d041f317059672535ca3bfcb150a4b6a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const COMMISSION_FEE = 100000;\\nconst MIN_PRICE_HISTORY_MILLIS = 5 * 6 * 1000; // Min 5 ticks of history.\\nconst MAX_PRICE_HISTORY_MILLIS = 10 * 60 * 1000; // Max 10 minutes of history.\\n\\n/**\\n * Map of timestamp to price.\\n *\\n * @typedef {Object.<string, number>} PriceHistory\\n */\\n\\n/** @type {Object.<string, PriceHistory>} */\\nconst symbolToAskPriceHistoryMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMaxAskPriceMap = {};\\n\\n/** @type {Object.<string, number>} */\\nconst symbolToMinAskPriceMap = {};\\n\\n/**\\n * Gets how much a stock is worth based on how much of it we own and how much\\n * the bid price is.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n */\\nexport function getStockWorth(ns, symbol) {\\n  const ownedShares = ns.stock.getPosition(symbol)[0];\\n  const bidPrice = ns.stock.getBidPrice(symbol);\\n  return ownedShares * bidPrice - COMMISSION_FEE;\\n}\\n\\n/**\\n * Gets the real forecast or get a predicted forecast for a given stock symbol.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nexport function getForecast(ns, symbol) {\\n  try {\\n    return ns.stock.getForecast(symbol);\\n  } catch (_) {\\n    return predictForecast(ns, symbol);\\n  }\\n}\\n\\n/**\\n * Predicts the forecast based on how many times the ask price has increased or\\n * decreased in the past.\\n *\\n * @param {import ('../index').NS} ns\\n * @param {string} symbol\\n * @returns {number}\\n */\\nfunction predictForecast(ns, symbol) {\\n  const currentTimestamp = Date.now();\\n  const currentAskPrice = ns.stock.getAskPrice(symbol);\\n  if (!(symbol in symbolToAskPriceHistoryMap)) {\\n    symbolToAskPriceHistoryMap[symbol] = {\\n      [currentTimestamp]: currentAskPrice,\\n    };\\n    return 0.5;\\n  }\\n  symbolToAskPriceHistoryMap[symbol][currentTimestamp] = currentAskPrice;\\n  const askPrices = Object.values(symbolToAskPriceHistoryMap[symbol]);\\n  symbolToMaxAskPriceMap[symbol] = Math.max(...askPrices);\\n  symbolToMinAskPriceMap[symbol] = Math.min(...askPrices);\\n\\n  // Not enough data.\\n  let timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const historyMillis = currentTimestamp - Math.min(...timestamps);\\n  if (historyMillis < MIN_PRICE_HISTORY_MILLIS) return 0.5;\\n\\n  if (historyMillis > MAX_PRICE_HISTORY_MILLIS) {\\n    // Trim out any data points that we no longer need.\\n    for (const timestamp of timestamps) {\\n      if (currentTimestamp - timestamp > MAX_PRICE_HISTORY_MILLIS) {\\n        delete symbolToAskPriceHistoryMap[symbol][timestamp];\\n      }\\n    }\\n  }\\n\\n  timestamps = getAskPriceHistoryTimestamps(symbol);\\n  const askPriceHistory = symbolToAskPriceHistoryMap[symbol];\\n  let noChangeCount = 0;\\n  let increaseCount = 0;\\n  let decreaseCount = 0;\\n  for (let i = 1; i < timestamps.length; i++) {\\n    const askPriceDiff =\\n      askPriceHistory[timestamps[i]] - askPriceHistory[timestamps[i - 1]];\\n    if (askPriceDiff > 0) increaseCount++;\\n    else if (askPriceDiff < 0) decreaseCount++;\\n    else if (timestamps[i] - timestamps[i - 1] >= 6000) noChangeCount++;\\n  }\\n\\n  const totalCount = noChangeCount + increaseCount + decreaseCount;\\n  let forecast = 0.5 + increaseCount / totalCount - decreaseCount / totalCount;\\n  for (let i = 0; i < noChangeCount; i++) {\\n    if (forecast < 0.5) forecast += noChangeCount / totalCount;\\n    if (forecast > 0.5) forecast -= noChangeCount / totalCount;\\n  }\\n  if (symbolToMaxAskPriceMap[symbol] === currentAskPrice) forecast /= 2;\\n  if (symbolToMinAskPriceMap[symbol] === currentAskPrice) forecast *= 2;\\n  return forecast;\\n}\\n\\n/**\\n * @param {string} symbol\\n * @returns {number[]}\\n */\\nfunction getAskPriceHistoryTimestamps(symbol) {\\n  const timestamps = Object.keys(symbolToAskPriceHistoryMap[symbol]).map(\\n    timestamp => parseInt(timestamp)\\n  );\\n  timestamps.sort();\\n  return timestamps;\\n}\\n\",\"filename\":\"/utils/stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.1,\"server\":\"home\",\"moduleSequenceNumber\":367,\"_hash\":\"54c0d8d5338c659cb1b9446c193097d28553efe2e46f5f58adf0dff2c99b4c64\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Sell all stocks.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const symbols = ns.stock.getSymbols();\\n  for (const symbol of symbols) {\\n    ns.stock.sell(symbol, ns.stock.getPosition(symbol)[0]);\\n  }\\n}\\n\",\"filename\":\"sell-all-stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sell-all-stocks.js\",\"url\":\"blob:file:///93be0ac8-7f50-4308-94e2-3cf6841a9e2a\",\"moduleSequenceNumber\":193331}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"moduleSequenceNumber\":368,\"_hash\":\"969b0f01584407efec3f1c21529ee242c87d002f07ce3f2a9c822e470a6e2b99\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { arrayJumpingGame } from '/contracts/array-jumping-game.js';\\nimport { findValidMathExpressions } from './contracts/find-valid-math-solutions.js';\\nimport { findLargestPrimeFactor } from '/contracts/find-largest-prime-factor.js';\\nimport { generateIpAddresses } from '/contracts/generate-ip-addresses.js';\\nimport { mergeOverlappingIntervals } from '/contracts/merge-overlapping-intervals.js';\\nimport { minimumPathSumInATriangle } from '/contracts/minimum-path-sum-in-a-triangle.js';\\nimport { sanitizeParenthesesInExpression } from '/contracts/sanitize-parentheses-in-expression.js';\\nimport { spiralizeMatrix } from '/contracts/spiralize-matrix.js';\\nimport { subarrayWithMaximumSum } from '/contracts/subarray-with-maximum-sum.js';\\nimport { totalWaysToSum } from '/contracts/total-ways-to-sum.js';\\nimport {\\n  algorithmicStockTraderI,\\n  algorithmicStockTraderII,\\n  algorithmicStockTraderIII,\\n  algorithmicStockTraderIV,\\n} from '/contracts/algorithmic-stock-trader.js';\\nimport {\\n  uniquePathsInAGridI,\\n  uniquePathsInAGridII,\\n} from '/contracts/unique-paths-in-a-grid.js';\\nimport {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n} from '/utils/servers.js';\\n\\nconst CONTRACT_TYPE_TO_SOLVER_FN_MAP = {\\n  'Algorithmic Stock Trader I': algorithmicStockTraderI,\\n  'Algorithmic Stock Trader II': algorithmicStockTraderII,\\n  'Algorithmic Stock Trader III': algorithmicStockTraderIII,\\n  'Algorithmic Stock Trader IV': algorithmicStockTraderIV,\\n  'Array Jumping Game': arrayJumpingGame,\\n  'Find All Valid Math Expressions': findValidMathExpressions,\\n  'Find Largest Prime Factor': findLargestPrimeFactor,\\n  'Generate IP Addresses': generateIpAddresses,\\n  'Merge Overlapping Intervals': mergeOverlappingIntervals,\\n  'Minimum Path Sum in a Triangle': minimumPathSumInATriangle,\\n  'Sanitize Parentheses in Expression': sanitizeParenthesesInExpression,\\n  'Spiralize Matrix': spiralizeMatrix,\\n  'Subarray with Maximum Sum': subarrayWithMaximumSum,\\n  'Total Ways to Sum': totalWaysToSum,\\n  'Unique Paths in a Grid I': uniquePathsInAGridI,\\n  'Unique Paths in a Grid II': uniquePathsInAGridII,\\n};\\n\\n/**\\n * Finds all the contracts across all servers and solves any that we can solve\\n * as we go. Print out all unsolved contracts.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns).filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n\\n  // Get all contracts.\\n  const allContracts = [];\\n  for (const serverName of serverNames) {\\n    const contracts = ns\\n      .ls(serverName)\\n      .filter(fileName => fileName.endsWith('.cct'))\\n      .map(fileName => new Contract(fileName, serverName));\\n    allContracts.push(...contracts);\\n  }\\n\\n  // Attempt to solve contracts.\\n  const unsolvedContracts = allContracts.filter(\\n    contract => !contract.attemptToSolve(ns)\\n  );\\n\\n  if (unsolvedContracts.length === 0) {\\n    ns.tprintf('\\\\nno unsolved contracts available at the moment');\\n  }\\n}\\n\\nclass Contract {\\n  constructor(fileName, serverName) {\\n    this.fileName = fileName;\\n    this.serverName = serverName;\\n  }\\n\\n  /**\\n   * Attemps to solve a contract.\\n   *\\n   * @param {import('index').NS} ns\\n   * @returns {boolean} true if successfully solved\\n   */\\n  attemptToSolve(ns) {\\n    const contractType = ns.codingcontract.getContractType(\\n      this.fileName,\\n      this.serverName\\n    );\\n    if (!(contractType in CONTRACT_TYPE_TO_SOLVER_FN_MAP)) {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns)\\n      );\\n      return false;\\n    }\\n\\n    const input = ns.codingcontract.getData(this.fileName, this.serverName);\\n    let answer;\\n    try {\\n      answer = CONTRACT_TYPE_TO_SOLVER_FN_MAP[contractType](input);\\n    } catch (exception) {\\n      ns.tprint('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          exception: exception,\\n        })\\n      );\\n      return false;\\n    }\\n    const response = ns.codingcontract.attempt(\\n      answer,\\n      this.fileName,\\n      this.serverName,\\n      { returnReward: true }\\n    );\\n    if (response === '') {\\n      ns.tprintf('\\\\n');\\n      ns.tprintf(\\n        'ERROR\\\\ncould not solve %s\\\\n%s\\\\n%s\\\\n',\\n        contractType,\\n        this.getPath(ns),\\n        JSON.stringify({\\n          input: input,\\n          attemptedAnswer: answer,\\n        })\\n      );\\n      return false;\\n    }\\n\\n    ns.tprintf(\\n      '\\\\nsolved %s: %s\\\\n%s\\\\n',\\n      contractType,\\n      response,\\n      JSON.stringify({\\n        input: input,\\n        output: answer,\\n      })\\n    );\\n    return true;\\n  }\\n\\n  getPath(ns) {\\n    return (\\n      getPath(ns, this.serverName)\\n        .map(path => `connect ${path}`)\\n        .join('; ') + `; run ${this.fileName}`\\n    );\\n  }\\n}\\n\",\"filename\":\"find-contracts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///d77434a7-1a83-4254-a63c-fd58f21c3a1b\",\"moduleSequenceNumber\":350},{\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"blob:file:///92f4a6fe-afcb-403f-9b9d-fd5b6065760c\",\"moduleSequenceNumber\":382},{\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"blob:file:///15be85b6-3804-49c2-b39a-0cff4a823527\",\"moduleSequenceNumber\":380},{\"filename\":\"/contracts/total-ways-to-sum.js\",\"url\":\"blob:file:///ee0688e1-2f64-4ef0-9555-958017eb269f\",\"moduleSequenceNumber\":356},{\"filename\":\"/contracts/subarray-with-maximum-sum.js\",\"url\":\"blob:file:///4f5e1493-90be-477a-9ded-ec04dcadfe93\",\"moduleSequenceNumber\":362},{\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"blob:file:///e92bf4b3-9e6d-467e-b3b4-26fa9b8e7ffc\",\"moduleSequenceNumber\":381},{\"filename\":\"/contracts/sanitize-parentheses-in-expression.js\",\"url\":\"blob:file:///c10e52d6-5098-4462-9543-7352712d1301\",\"moduleSequenceNumber\":363},{\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"blob:file:///395576bc-9ea1-412a-b9cc-f41472c692eb\",\"moduleSequenceNumber\":377},{\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"blob:file:///4fc79b1d-26a7-4838-affc-ce64aed766c3\",\"moduleSequenceNumber\":376},{\"filename\":\"/contracts/generate-ip-addresses.js\",\"url\":\"blob:file:///619aa882-3610-418a-883c-89be78fc7d66\",\"moduleSequenceNumber\":355},{\"filename\":\"/contracts/find-largest-prime-factor.js\",\"url\":\"blob:file:///052d2481-1de9-41ce-b18f-16d8ef69db48\",\"moduleSequenceNumber\":357},{\"filename\":\"/contracts/find-valid-math-solutions.js\",\"url\":\"blob:file:///e0d8a93e-8817-4adc-8e41-adef51241ca3\",\"moduleSequenceNumber\":354},{\"filename\":\"/contracts/array-jumping-game.js\",\"url\":\"blob:file:///db4a3b50-7e42-4f57-a2c2-65fa2336f830\",\"moduleSequenceNumber\":353},{\"filename\":\"find-contracts.js\",\"url\":\"blob:file:///aa4b926f-a638-41ed-b8b7-27c8d71d2a17\",\"moduleSequenceNumber\":46054}],\"dependents\":[],\"ramUsage\":22.05,\"server\":\"home\",\"moduleSequenceNumber\":46054,\"_hash\":\"2fd40bbd41cb4f81527a04f0552b2231f1ff6ed86765f96d77d24dd62522b067\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  getAllServerNames,\\n  getPath,\\n  HOME_SERVER_NAME,\\n  PURCHASED_SERVER_PREFIX,\\n} from '/utils/servers.js';\\n\\nconst DISABLE_LOGGING_FUNCTIONS = ['scan', 'sleep', 'getHackingLevel'];\\n\\n/**\\n * Finds any servers that do not have backdoor installed and can have backdoor\\n * installed.\\n *\\n * Run this script with `--tail`.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  const hackableServerNames = getAllServerNames(ns).filter(\\n    server =>\\n      server !== HOME_SERVER_NAME && !server.startsWith(PURCHASED_SERVER_PREFIX)\\n  );\\n\\n  // If we have SF4, then we can automatically run the backdoors.\\n  try {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n    for (const serverName of serverNames) {\\n      _connectTo(ns, serverName, ns.getCurrentServer());\\n      await ns.installBackdoor();\\n    }\\n    _connectTo(ns, HOME_SERVER_NAME, ns.getCurrentServer());\\n  } catch (_) {\\n    // No Source File 4 API\\n  }\\n\\n  while (true) {\\n    const serverNames = _getBackdoorableServerNames(ns, hackableServerNames);\\n\\n    if (serverNames.length === 0) {\\n      ns.print('No servers that we can install backdoor available.');\\n      ns.tprint('No servers that we can install backdoor available.');\\n      return;\\n    }\\n\\n    ns.clearLog();\\n    ns.print(\\n      '\\\\n' +\\n        serverNames\\n          .map(\\n            serverName =>\\n              `${serverName}\\\\n${[\\n                'home',\\n                ...getPath(ns, serverName).map(path => `connect ${path}`),\\n                'backdoor',\\n              ].join('; ')}`\\n          )\\n          .join('\\\\n\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _getBackdoorableServerNames(ns, hackableServerNames) {\\n  return hackableServerNames.filter(serverName => {\\n    const server = ns.getServer(serverName);\\n    return (\\n      server.hasAdminRights &&\\n      !server.backdoorInstalled &&\\n      server.requiredHackingSkill <= ns.getHackingLevel()\\n    );\\n  });\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction _connectTo(ns, serverName, lastServerName) {\\n  const path = getPath(ns, serverName, lastServerName, '');\\n  for (const server of path) ns.connect(server);\\n}\",\"filename\":\"find-backdoors.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fe0a666a-9c48-4063-b6db-78853422ec1a\",\"moduleSequenceNumber\":350},{\"filename\":\"find-backdoors.js\",\"url\":\"blob:file:///3b10f658-3e4c-4162-8263-44b76f1e5189\",\"moduleSequenceNumber\":776}],\"dependents\":[],\"ramUsage\":99.85,\"server\":\"home\",\"moduleSequenceNumber\":776,\"_hash\":\"1fa72ed546c8e0b9e667ab27c57f7e22fc31369c404b7a1d4297663b244f2e11\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getCurrentServer\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatNumber } from '/utils/format.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\nimport {\\n  isHackable,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst GROWING_COLUMN_HEADER = 'Growing';\\nconst WEAKENING_COLUMN_HEADER = 'Weakening';\\nconst HACKING_COLUMN_HEADER = 'Hacking';\\nconst MAX_RAM_COLUMN_HEADER = 'Max ram';\\nconst USED_RAM_COLUMN_HEADER = 'Used ram';\\nconst FREE_RAM_COLUMN_HEADER = 'Free ram';\\n\\n/**\\n * Prints out information about all servers that we have root access to and\\n * which scripts they're running.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  let servers = getAllServerNames(ns)\\n    .map(serverName => new Server(ns, serverName))\\n    .filter(server => server.hasRootAccess);\\n  sort(servers, server => server.name);\\n  sort(servers, server => server.maxRam, true);\\n  sort(servers, server => server.isPurchased, true);\\n\\n  const hackableServerNames = servers\\n    .filter(server => isHackable(ns, server.name))\\n    .map(server => server.name);\\n  sort(hackableServerNames, serverName => serverName);\\n  for (const server of servers) {\\n    for (const targetServerName of hackableServerNames) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        server.growing.push({\\n          targetServerName: targetServerName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        server.weakening.push({\\n          targetServerName: targetServerName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        server.name,\\n        targetServerName,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        server.hacking.push({\\n          targetServerName: targetServerName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  servers = servers.filter(server => server.maxRam > 0);\\n  printTable(\\n    ns,\\n    {\\n      [GROWING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [WEAKENING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACKING_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [USED_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FREE_RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    ...servers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    const server = ns.getServer(serverName);\\n    this.hasRootAccess = server.hasAdminRights;\\n    if (!this.hasRootAccess) return;\\n\\n    this.isPurchased = server.purchasedByPlayer;\\n\\n    // RAM information.\\n    this.maxRam = server.maxRam;\\n    this.usedRam = server.ramUsed;\\n    this.freeRam = this.maxRam - this.usedRam;\\n\\n    this.growing = [];\\n    this.weakening = [];\\n    this.hacking = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n    sort(scripts, script => script.threadCount, true);\\n    return scripts\\n      .map(\\n        script =>\\n          script.targetServerName +\\n          ` (${formatNumber(script.threadCount, true)})`\\n      )\\n      .join('\\\\n');\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SERVER_NAME_COLUMN_HEADER]: this.name,\\n      [GROWING_COLUMN_HEADER]: this._formatScripts(this.growing),\\n      [WEAKENING_COLUMN_HEADER]: this._formatScripts(this.weakening),\\n      [HACKING_COLUMN_HEADER]: this._formatScripts(this.hacking),\\n      [MAX_RAM_COLUMN_HEADER]: formatNumber(this.maxRam, true) + ' GB',\\n      [USED_RAM_COLUMN_HEADER]: formatNumber(this.usedRam, true) + ' GB',\\n      [FREE_RAM_COLUMN_HEADER]: formatNumber(this.freeRam, true) + ' GB',\\n      rowColor: this.isPurchased ? RowColor.NORMAL : RowColor.WARN,\\n    };\\n  }\\n}\\n\",\"filename\":\"get-servers-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///9e8f911f-1f26-4b07-a686-5f6a0d45d826\",\"moduleSequenceNumber\":137942},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///1d75221b-a36a-4019-89de-a7bf7ef23243\",\"moduleSequenceNumber\":137933},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///6dcb2154-1124-4216-b3b5-13efb7bbda17\",\"moduleSequenceNumber\":137932},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///98a48ff7-a8d1-4c97-af5b-2c87452a4951\",\"moduleSequenceNumber\":137940},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///d42224ab-1a6b-4890-8fde-036f3e6230e8\",\"moduleSequenceNumber\":137941},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///ae61acb1-b47b-47b6-80f3-368c51d28d77\",\"moduleSequenceNumber\":137937},{\"filename\":\"get-servers-info.js\",\"url\":\"blob:file:///01e7ab26-6bc3-43f9-8c52-225cd7774e2f\",\"moduleSequenceNumber\":165711}],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":371,\"_hash\":\"613ab5c851562e617a1ae6bb50baede41b0257dcb48404a4ef4a917b334c93a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport {\\n  formatMoney,\\n  formatNumber,\\n  formatPercent,\\n  formatTime,\\n} from '/utils/format.js';\\nimport {\\n  getHackingHeuristic,\\n  GROW_SCRIPT,\\n  HACK_SCRIPT,\\n  isHackable,\\n  WEAKEN_SCRIPT,\\n} from '/utils/hacking.js';\\nimport { sort } from '/utils/misc.js';\\nimport { getAllServerNames } from '/utils/servers.js';\\n\\nconst SERVER_NAME_COLUMN_HEADER = 'Server name';\\nconst AVAILABLE_MONEY_COLUMN_HEADER = 'Available money';\\nconst SECURITY_LEVEL_COLUMN_HEADER = 'Security level';\\nconst HACK_CHANCE_COLUMN_HEADER = 'Hack chance';\\nconst BEING_GROWN_COLUMN_HEADER = 'Growing by';\\nconst BEING_WEAKENED_COLUMN_HEADER = 'Weakening by';\\nconst BEING_HACKED_COLUMN_HEADER = 'Hacked by';\\nconst HACK_EXP_HEADER = 'Hack exp';\\n\\n/**\\n * Prints out information about all hackable servers.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const allServerNames = getAllServerNames(ns);\\n\\n  const hackableServers = allServerNames\\n    .filter(serverName => isHackable(ns, serverName))\\n    .map(serverName => new Server(ns, serverName));\\n  sort(hackableServers, server => getHackingHeuristic(ns, server.name));\\n\\n  const rootAccessServerNames = allServerNames.filter(serverName =>\\n    ns.hasRootAccess(serverName)\\n  );\\n  for (const serverName of rootAccessServerNames) {\\n    for (const targetServer of hackableServers) {\\n      const growingScript = ns.getRunningScript(\\n        GROW_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (growingScript !== null) {\\n        targetServer.beingGrownBy.push({\\n          serverName: serverName,\\n          threadCount: growingScript.threads,\\n        });\\n      }\\n\\n      const weakeningScript = ns.getRunningScript(\\n        WEAKEN_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (weakeningScript !== null) {\\n        targetServer.beingWeakenedBy.push({\\n          serverName: serverName,\\n          threadCount: weakeningScript.threads,\\n        });\\n      }\\n\\n      const hackingScript = ns.getRunningScript(\\n        HACK_SCRIPT,\\n        serverName,\\n        targetServer.name,\\n        1\\n      );\\n      if (hackingScript !== null) {\\n        targetServer.beingHackedBy.push({\\n          serverName: serverName,\\n          threadCount: hackingScript.threads,\\n        });\\n      }\\n    }\\n  }\\n\\n  printTable(\\n    ns,\\n    {\\n      [AVAILABLE_MONEY_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_CHANCE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_GROWN_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_WEAKENED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BEING_HACKED_COLUMN_HEADER]: Alignment.RIGHT,\\n      [HACK_EXP_HEADER]: Alignment.RIGHT,\\n    },\\n    ...hackableServers.map(server => [server.getTableRow()])\\n  );\\n}\\n\\nclass Server {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} serverName\\n   */\\n  constructor(ns, serverName) {\\n    this.ns = ns;\\n    this.name = serverName;\\n\\n    this.hackHeuristic = getHackingHeuristic(ns, serverName);\\n\\n    this.availableMoney = ns.getServerMoneyAvailable(serverName);\\n    this.percentMaxMoney =\\n      this.availableMoney / ns.getServerMaxMoney(serverName);\\n\\n    this.securityLevel = ns.getServerSecurityLevel(serverName);\\n    this.minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    this.hackChance = ns.hackAnalyzeChance(serverName);\\n\\n    this.growTime = ns.getGrowTime(serverName);\\n    this.weakenTime = ns.getWeakenTime(serverName);\\n    this.hackTime = ns.getHackTime(serverName);\\n\\n    try {\\n      this.hackExp = ns.formulas.hacking.hackExp(\\n        ns.getServer(serverName),\\n        ns.getPlayer()\\n      );\\n    } catch (_) {\\n      // No Formulas.exe\\n    }\\n\\n    this.beingGrownBy = [];\\n    this.beingWeakenedBy = [];\\n    this.beingHackedBy = [];\\n  }\\n\\n  _formatScripts(scripts) {\\n    if (scripts.length === 0) return '--';\\n\\n    const totalThreadCount = scripts\\n      .map(script => script.threadCount)\\n      .reduce((a, b) => a + b);\\n    const totalServerCount = scripts.length;\\n    return `${totalServerCount} servers\\\\n${formatNumber(\\n      totalThreadCount,\\n      true\\n    )} threads`;\\n  }\\n\\n  _getRowColor() {\\n    const attackPoints = [\\n      this.beingGrownBy.length > 0 ? 1 : 0,\\n      this.beingWeakenedBy.length > 0 ? 1 : 0,\\n      this.beingHackedBy.length > 0 ? 1 : 0,\\n    ].reduce((a, b) => a + b);\\n    switch (attackPoints) {\\n      case 3:\\n        return RowColor.ERROR;\\n      case 2:\\n        return RowColor.WARN;\\n      case 1:\\n        return RowColor.NORMAL;\\n      case 0:\\n        return RowColor.INFO;\\n    }\\n  }\\n\\n  getTableRow() {\\n    const row = {\\n      [SERVER_NAME_COLUMN_HEADER]:\\n        this.name +\\n        `\\\\nHack heuristic: ${formatNumber(this.hackHeuristic, true)}`,\\n      [AVAILABLE_MONEY_COLUMN_HEADER]:\\n        formatMoney(this.availableMoney, true) +\\n        ` (${formatPercent(\\n          this.percentMaxMoney\\n        )} of max)\\\\nGrow time: ${formatTime(this.growTime)}`,\\n      [SECURITY_LEVEL_COLUMN_HEADER]: `${this.securityLevel.toFixed(\\n        2\\n      )} (out of ${this.minSecurityLevel})\\\\nWeaken time: ${formatTime(\\n        this.weakenTime\\n      )}`,\\n      [HACK_CHANCE_COLUMN_HEADER]: `${formatPercent(\\n        this.hackChance\\n      )}\\\\nHack time: ${formatTime(this.hackTime)}`,\\n      [BEING_GROWN_COLUMN_HEADER]: this._formatScripts(this.beingGrownBy),\\n      [BEING_WEAKENED_COLUMN_HEADER]: this._formatScripts(this.beingWeakenedBy),\\n      [BEING_HACKED_COLUMN_HEADER]: this._formatScripts(this.beingHackedBy),\\n    };\\n    if (this.hackExp) row[HACK_EXP_HEADER] = formatNumber(this.hackExp, true);\\n    row.rowColor = this._getRowColor();\\n    return row;\\n  }\\n}\\n\",\"filename\":\"get-hacking-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e637d569-173c-404f-b10e-1e4f28552dba\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///57ce0fd8-b7dc-493e-abdb-9b1b96378be8\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///e586792f-1851-4b02-93a6-ad2e3a48f475\",\"moduleSequenceNumber\":139},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///d85e71ad-c063-48e7-b614-f184ccce14f8\",\"moduleSequenceNumber\":121},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///7027ad72-770d-4312-af3e-4bc48358c8ca\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/hacking.js\",\"url\":\"blob:file:///a424e95e-97e5-4a78-9e04-84d5f1af65fa\",\"moduleSequenceNumber\":120},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///25339bc6-ebed-4255-96a4-bfe6359dc1b6\",\"moduleSequenceNumber\":119},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///3430fb6c-2270-46ad-909d-7fc65a866935\",\"moduleSequenceNumber\":146},{\"filename\":\"get-hacking-info.js\",\"url\":\"blob:file:///e81a3bb3-f3ac-48a3-9042-e16803380156\",\"moduleSequenceNumber\":118602}],\"dependents\":[],\"ramUsage\":7.35,\"server\":\"home\",\"moduleSequenceNumber\":372,\"_hash\":\"a2200d433d9b7c84a62ba22143ad157c55cc3fde27f94e9b8611dfe4bd95a366\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sort } from '/utils/misc.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\nimport { getStockWorth } from '/utils/stock.js';\\nimport { Alignment, printTable, RowColor } from '/utils/table.js';\\n\\nconst SYMBOL_COLUMN_HEADER = 'Symbol';\\nconst ASK_PRICE_COLUMN_HEADER = 'Ask price';\\nconst BID_PRICE_COLUMN_HEADER = 'Bid price';\\nconst OWNED_SHARE_COUNT_COLUMN_HEADER = 'Owned shares';\\nconst MAX_SHARE_COUNT_COLUMN_HEADER = 'Max shares';\\nconst PERCENT_MAX_SHARE_COLUMN_HEADER = '% of max';\\nconst SHARES_WORTH_COLUMN_HEADER = 'Worth';\\nconst SHARES_PROFIT_COLUMN_HEADER = 'Profit';\\nconst FORECAST_COLUMN_HEADER = 'Forecast';\\n\\n/**\\n * Prints out stock info.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const stocks = ns.stock.getSymbols().map(symbol => new Stock(ns, symbol));\\n  sort(stocks, stock => stock.profit, true);\\n\\n  printTable(\\n    ns,\\n    {\\n      [ASK_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [BID_PRICE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_WORTH_COLUMN_HEADER]: Alignment.RIGHT,\\n      [SHARES_PROFIT_COLUMN_HEADER]: Alignment.RIGHT,\\n      [FORECAST_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    stocks.map(stock => stock.getTableRow())\\n  );\\n\\n  // ns.tprint(table);\\n}\\n\\nclass Stock {\\n  /**\\n   * @param {import('index').NS} ns\\n   * @param {string} symbol\\n   */\\n  constructor(ns, symbol) {\\n    this.symbol = symbol;\\n    this.askPrice = ns.stock.getAskPrice(symbol);\\n    this.bidPrice = ns.stock.getBidPrice(symbol);\\n    this.maxShareCount = ns.stock.getMaxShares(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    this.ownedShareCount = position[0];\\n    this.ownedShareAvgPrice = position[1];\\n    this.sharesWorth = getStockWorth(ns, symbol);\\n    this.profit =\\n      (this.sharesWorth - this.ownedShareCount * this.ownedShareAvgPrice) /\\n      (this.ownedShareCount * this.ownedShareAvgPrice);\\n\\n    this.forecast = ns.stock.getForecast(symbol);\\n  }\\n\\n  _getForecast() {\\n    if (this.forecast > 0.8) return '+++';\\n    if (this.forecast > 0.64) return '++';\\n    if (this.forecast >= 0.5) return '+';\\n    if (this.forecast > 0.32) return '-';\\n    if (this.forecast > 0.16) return '--';\\n    return '---';\\n  }\\n\\n  _getRowColor() {\\n    if (this.profit === 0) return RowColor.WARN;\\n    return this.profit > 0 ? RowColor.NORMAL : RowColor.ERROR;\\n  }\\n\\n  getTableRow() {\\n    return {\\n      [SYMBOL_COLUMN_HEADER]: this.symbol,\\n      [ASK_PRICE_COLUMN_HEADER]: formatMoney(this.askPrice),\\n      [BID_PRICE_COLUMN_HEADER]: formatMoney(this.bidPrice),\\n      [OWNED_SHARE_COUNT_COLUMN_HEADER]: formatNumber(\\n        this.ownedShareCount,\\n        true\\n      ),\\n      [MAX_SHARE_COUNT_COLUMN_HEADER]: formatNumber(this.maxShareCount, true),\\n      [PERCENT_MAX_SHARE_COLUMN_HEADER]: formatPercent(\\n        this.ownedShareCount / this.maxShareCount\\n      ),\\n      [SHARES_WORTH_COLUMN_HEADER]:\\n        this.ownedShareCount === 0 ? '--' : formatMoney(this.sharesWorth, true),\\n      [SHARES_PROFIT_COLUMN_HEADER]:\\n        this.ownedShareCount === 0\\n          ? '--'\\n          : (this.profit > 0 ? '+' : '') + formatPercent(this.profit),\\n      [FORECAST_COLUMN_HEADER]: this._getForecast(),\\n      rowColor: this._getRowColor(),\\n    };\\n  }\\n}\\n\",\"filename\":\"get-stock-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///9c3264f6-993b-4338-9da0-c144b8e64bc4\"},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///8ce78e3e-5b38-4745-9208-49a558120b99\"},{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///5aaf1f10-1d28-48f5-bef3-b91f6f0029d4\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///8ba9f67a-1e5a-4a82-a15f-10cd232496d0\"},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///ad4050d6-1fed-4597-8ada-d32cc43213f1\"},{\"filename\":\"get-stock-info.js\",\"url\":\"blob:file:///38c6bdee-8bbc-492b-b73d-605b0e8c795b\"}],\"dependents\":[],\"ramUsage\":14.1,\"server\":\"home\",\"moduleSequenceNumber\":373,\"_hash\":\"f3bbc46e80bfd4c6386e22c95a62972d37bbd7348daf690e020321d6af4b1349\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef Alignment\\n */\\n\\n/**\\n * Enum for cell alignment.\\n *\\n * @readonly\\n * @enum {Alignment}\\n */\\nexport const Alignment = Object.freeze({ LEFT: 'left', RIGHT: 'right' });\\n\\n/**\\n * @typedef RowColor\\n */\\n\\n/**\\n * Enum for color of row.\\n *\\n * @readonly\\n * @enum {RowColor}\\n */\\nexport const RowColor = Object.freeze({\\n  INFO: 'INFO  ',\\n  WARN: 'WARN  ',\\n  ERROR: 'ERROR ',\\n  NORMAL: '      ',\\n});\\n\\nconst PIPE = '┊';\\nconst DASH = '—';\\nconst JOIN = '+';\\n\\n/**\\n * Utils for printing a table in the terminal.\\n *\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n *        if a column header is not specified in this map, then it is assumed\\n *        that it will be left-aligned\\n * @param {...Object.<string, any>[]} sections\\n *        sections contain rows that are divided by a divider; all rows must\\n *        have the same keys (which are used for column headers)\\n */\\nexport function printTable(ns, columnHeaderToAlignmentMap, ...sections) {\\n  // Fill in any missing alignments. Note that the alignments are not guaranteed\\n  // to be in the same order as the column headers, so we cannot rely on the\\n  // order.\\n  const columnHeaders = Object.keys(sections[0][0]).filter(\\n    key => key !== 'rowColor'\\n  );\\n  if (!columnHeaderToAlignmentMap) columnHeaderToAlignmentMap = {};\\n  for (const columnHeader of columnHeaders) {\\n    if (!(columnHeader in columnHeaderToAlignmentMap)) {\\n      columnHeaderToAlignmentMap[columnHeader] = Alignment.LEFT;\\n    }\\n  }\\n\\n  // Get width of each column.\\n  const columnHeaderToWidthMap = columnHeaders.reduce(\\n    (map, columnHeader) => ({ ...map, [columnHeader]: columnHeader.length }),\\n    {}\\n  );\\n  for (const columnHeader of columnHeaders) {\\n    for (const rows of sections) {\\n      for (const row of rows) {\\n        const lines = row[columnHeader].toString().split('\\\\n');\\n        columnHeaderToWidthMap[columnHeader] = Math.max(\\n          columnHeaderToWidthMap[columnHeader],\\n          ...lines.map(line => line.length)\\n        );\\n      }\\n    }\\n  }\\n\\n  // Print the column headers.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n\\n  // Print each section.\\n  for (let i = 0; i < sections.length; i++) {\\n    for (let j = 0; j < sections[i].length; j++) {\\n      _printRow(\\n        ns,\\n        sections[i][j],\\n        columnHeaders,\\n        columnHeaderToAlignmentMap,\\n        columnHeaderToWidthMap,\\n        j === sections[i].length - 1 && i !== sections.length - 1\\n      );\\n    }\\n  }\\n\\n  // Print the column headers at the end again.\\n  _printColumnHeaders(\\n    ns,\\n    columnHeaders,\\n    columnHeaderToAlignmentMap,\\n    columnHeaderToWidthMap\\n  );\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {Object.<string, any>} row\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @param {boolean} shouldAddDivider\\n */\\nfunction _printRow(\\n  ns,\\n  row,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap,\\n  shouldAddDivider\\n) {\\n  const height = Math.max(\\n    ...Object.values(row).map(value => value.toString().split('\\\\n').length)\\n  );\\n\\n  const contents = new Array(height).fill('');\\n  for (const columnHeader of columnHeaders) {\\n    const lines = row[columnHeader].split('\\\\n');\\n    const width = columnHeaderToWidthMap[columnHeader];\\n\\n    for (let i = 0; i < contents.length; i++) {\\n      let line = lines[i] || '';\\n      line =\\n        columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n          ? line.padStart(width)\\n          : line.padEnd(width);\\n      contents[i] += `${PIPE} ${line} `;\\n    }\\n  }\\n  for (let i = 0; i < contents.length; i++) {\\n    contents[i] =\\n      (i === 0 && row.rowColor ? row.rowColor : RowColor.NORMAL) +\\n      contents[i] +\\n      PIPE;\\n  }\\n  if (shouldAddDivider) {\\n    contents.push(\\n      RowColor.NORMAL + _getDivider(columnHeaders, columnHeaderToWidthMap)\\n    );\\n  }\\n\\n  ns.tprintf('%s', contents.join('\\\\n'));\\n}\\n\\n/**\\n * @param {import('../index').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, Alignment>} columnHeaderToAlignmentMap\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printColumnHeaders(\\n  ns,\\n  columnHeaders,\\n  columnHeaderToAlignmentMap,\\n  columnHeaderToWidthMap\\n) {\\n  const contents = columnHeaders\\n    .map(columnHeader => {\\n      const width = columnHeaderToWidthMap[columnHeader];\\n      return columnHeaderToAlignmentMap[columnHeader] === Alignment.RIGHT\\n        ? columnHeader.padStart(width)\\n        : columnHeader.padEnd(width);\\n    })\\n    .join(` ${PIPE} `)\\n    .toUpperCase();\\n  const divider = _getDivider(columnHeaders, columnHeaderToWidthMap);\\n  ns.tprintf(\\n    '%s',\\n    [\\n      RowColor.INFO + divider,\\n      RowColor.NORMAL + PIPE + ` ${contents} ` + PIPE,\\n      RowColor.NORMAL + divider,\\n    ].join('\\\\n')\\n  );\\n}\\n\\n/**\\n * @param {import('..').NS} ns\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n */\\nfunction _printDivider(ns, columnHeaders, columnHeaderToWidthMap) {\\n  ns.tprintf(\\n    '%s%s',\\n    RowColor.INFO,\\n    _getDivider(columnHeaders, columnHeaderToWidthMap)\\n  );\\n}\\n\\n/**\\n * Gets just the divider string without the row color print.\\n *\\n * This function does not print anything.\\n *\\n * @param {string[]} columnHeaders\\n * @param {Object.<string, number>} columnHeaderToWidthMap\\n * @returns {string}\\n */\\nfunction _getDivider(columnHeaders, columnHeaderToWidthMap) {\\n  const contents = columnHeaders\\n    .map(columnHeader => ''.padEnd(columnHeaderToWidthMap[columnHeader], DASH))\\n    .join(DASH + JOIN + DASH);\\n  return [JOIN, DASH, contents, DASH, JOIN].join('');\\n}\\n\",\"filename\":\"/utils/table.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":374,\"_hash\":\"e6e0f0dac4daafd7cb1872f980a02b2d7ddaffe54f6741be2e57a9e3aaf08b0c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Alignment, printTable, RowColor } from '/utils/table.js';\\nimport { sort } from '/utils/misc.js';\\nimport { HOME_SERVER_NAME } from '/utils/servers.js';\\n\\nconst SCRIPT_NAME_COLUMN_HEADER = 'Script name';\\nconst RAM_COLUMN_HEADER = 'RAM';\\nconst IS_RUNNING_COLUMN_HEADER = 'Is running';\\n\\n/**\\n * Prints out how much RAM each script takes up.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const scriptNames = ns\\n    .ls(HOME_SERVER_NAME)\\n    .filter(fileName => fileName.endsWith('.js') && !fileName.startsWith('/'));\\n  sort(scriptNames, scriptName => scriptName);\\n  const scripts = scriptNames.map(fileName => ({\\n    [SCRIPT_NAME_COLUMN_HEADER]: fileName,\\n    [RAM_COLUMN_HEADER]: ns.getScriptRam(fileName) + ' GB',\\n    [IS_RUNNING_COLUMN_HEADER]: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? 'true'\\n      : '--',\\n    rowColor: ns.scriptRunning(fileName, HOME_SERVER_NAME)\\n      ? RowColor.NORMAL\\n      : RowColor.INFO,\\n  }));\\n\\n  printTable(\\n    ns,\\n    {\\n      [RAM_COLUMN_HEADER]: Alignment.RIGHT,\\n      [IS_RUNNING_COLUMN_HEADER]: Alignment.RIGHT,\\n    },\\n    scripts,\\n    [\\n      {\\n        [SCRIPT_NAME_COLUMN_HEADER]: 'Total',\\n        [RAM_COLUMN_HEADER]:\\n          scriptNames\\n            .map(scriptName => ns.getScriptRam(scriptName, HOME_SERVER_NAME))\\n            .reduce((a, b) => a + b)\\n            .toFixed(2) + ' GB',\\n        [IS_RUNNING_COLUMN_HEADER]: '--',\\n        rowColor: RowColor.WARN,\\n      },\\n    ]\\n  );\\n}\\n\",\"filename\":\"get-scripts-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///c7b654dc-3bcf-447d-b650-eda0e4103457\",\"moduleSequenceNumber\":65},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///90a54629-0918-49b2-90ce-5e5f24fbbcb1\",\"moduleSequenceNumber\":65},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///2216d083-97bc-4425-887a-1cb813c33d49\",\"moduleSequenceNumber\":82},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///799389da-f9e2-4998-814f-a736b9c5f723\",\"moduleSequenceNumber\":64},{\"filename\":\"/utils/table.js\",\"url\":\"blob:file:///82dbc008-f00e-4aa6-9de6-75c43bb09c7b\",\"moduleSequenceNumber\":89},{\"filename\":\"get-scripts-info.js\",\"url\":\"blob:file:///6a580a71-226b-4e06-8627-6944165270bc\",\"moduleSequenceNumber\":314}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":375,\"_hash\":\"22a7af45c38cd14eb6c8f6dd6dc5cf0ccaabb9c565942e7005e1c8a468995be0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Merge Overlapping Intervals\\n *\\n * Given the following array of array of numbers representing a list of\\n * intervals, merge all overlapping intervals.\\n *\\n * The intervals must be returned in ASCENDING order. You can assume that in an\\n * interval, the first number will always be smaller than the second.\\n *\\n * @param {number[][]} input\\n */\\nexport function mergeOverlappingIntervals(input) {\\n  return _mergeOverlappingIntervals(input);\\n}\\n\\n/**\\n * @param {number[][]} intervals\\n * @returns {number[][]} merged intervals\\n */\\nfunction _mergeOverlappingIntervals(intervals) {\\n  // Sort by second number and then by first number.\\n  intervals.sort((a, b) => a[1] - b[1]);\\n  intervals.sort((a, b) => a[0] - b[0]);\\n\\n  // Find any overlaps.\\n  let overlappingIntervals = [];\\n  let mergedInterval;\\n  for (let i = 0; i < intervals.length - 1; i++) {\\n    for (let j = i + 1; j < intervals.length; j++) {\\n      if (_hasOverlap(intervals[i], intervals[j])) {\\n        overlappingIntervals.push(intervals[i], intervals[j]);\\n        mergedInterval = _merge(intervals[i], intervals[j]);\\n        break;\\n      }\\n    }\\n    if (mergedInterval) break;\\n  }\\n\\n  if (mergedInterval === undefined) return intervals;\\n  intervals = [\\n    mergedInterval,\\n    ...intervals.filter(interval => {\\n      for (const overlappingInterval of overlappingIntervals) {\\n        if (_equal(overlappingInterval, interval)) return false;\\n      }\\n      return true;\\n    }),\\n  ];\\n  return _mergeOverlappingIntervals(intervals);\\n}\\n\\n/**\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {boolean} true if has overlap\\n */\\nfunction _hasOverlap(a, b) {\\n  if (a[0] === b[0] || a[1] === b[1]) return true;\\n  return a[0] < b[0] ? b[0] <= a[1] : a[0] <= b[1];\\n}\\n\\n/**\\n * Merge overlapping intervals. Intervals **must** be overlapping.\\n *\\n * @param {number[]} a interval\\n * @param {number[]} b interval\\n * @returns {number[]} merged interval\\n */\\nfunction _merge(a, b) {\\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\\n}\\n\\nfunction _equal(a, b) {\\n  return a[0] === b[0] && a[1] === b[1];\\n}\\n\",\"filename\":\"/contracts/merge-overlapping-intervals.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":376,\"_hash\":\"e1a3fee96bfcb47b06fcf82a1625a24dfaec6e621278b577b1318efb365181e1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Minimum Path Sum in a Triangle\\n *\\n * Given a triangle, find the minimum path sum from top to bottom. In each step\\n * of the path, you may only move to adjacent numbers in the row below. The\\n * triangle is represented as a 2D array of numbers:\\n *\\n * [\\n *             [5],\\n *            [4,5],\\n *           [7,4,6],\\n *          [9,6,4,3],\\n *         [7,4,9,7,8],\\n *        [6,2,7,9,4,2],\\n *       [5,2,3,8,1,5,1],\\n *      [8,4,9,7,1,1,1,2],\\n *     [4,8,1,8,1,3,9,8,6],\\n *    [7,1,1,7,5,8,3,5,3,6],\\n *   [4,6,3,6,4,7,8,5,9,5,8]\\n * ]\\n *\\n * Example: If you are given the following triangle:\\n *\\n * [\\n *      [2],\\n *     [3,4],\\n *    [6,5,7],\\n *   [4,1,8,3]\\n * ]\\n *\\n * The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\n *\\n * @param {number[][]} input\\n */\\nexport function minimumPathSumInATriangle(input) {\\n  let rootNode = new Node(input, 0, 0);\\n  return Math.min(\\n    ..._getPaths(rootNode, '').map(path => path.reduce((a, b) => a + b))\\n  );\\n}\\n\\nfunction _getPaths(rootNode, pathThusFar) {\\n  pathThusFar = [...pathThusFar, rootNode.number];\\n  if (rootNode.nextNodes.length === 0) {\\n    return [pathThusFar];\\n  }\\n  const paths = [];\\n  for (const nextNode of rootNode.nextNodes) {\\n    paths.push(..._getPaths(nextNode, pathThusFar));\\n  }\\n  return paths;\\n}\\n\\nclass Node {\\n  constructor(input, row, column) {\\n    this.number = input[row][column];\\n    this.row = row;\\n    this.column = column;\\n\\n    if (this.row === input.length - 1) {\\n      this.nextNodes = [];\\n    } else {\\n      this.nextNodes = [\\n        new Node(input, row + 1, column),\\n        new Node(input, row + 1, column + 1),\\n      ];\\n    }\\n  }\\n}\\n\",\"filename\":\"/contracts/minimum-path-sum-in-a-triangle.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":377,\"_hash\":\"b58fab38dc5a586f5c6c2795100c671d9b3302ba8dfd4d490d994f3f4e9d159f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const MANAGE_SERVERS_TO_MANAGE_HACKING_PORT = 1;\\nexport const MANAGE_HACKING_TO_MANAGE_STOCKS_PORT = 2;\\n\\nexport const NULL_PORT_DATA = 'NULL PORT DATA';\\n\",\"filename\":\"/utils/ports.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":378,\"_hash\":\"42d5972a2164f7240d5da41c0ba94b9d48bcf741587306fa984ce2e6023f732d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath, HOME_SERVER_NAME } from '/utils/servers.js';\\n\\n/**\\n * Prints the command to go to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint(`usage: run get-path.js <server name>`);\\n    return;\\n  }\\n  const path = [\\n    HOME_SERVER_NAME,\\n    ...getPath(ns, serverName).map(path => 'connect ' + path),\\n  ].join('; ');\\n  ns.tprintf('%s', path);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"get-path.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///3e8038f7-9cc4-454d-aa53-53e2ad0ee134\",\"moduleSequenceNumber\":122},{\"filename\":\"get-path.js\",\"url\":\"blob:file:///a89e6eab-7f6c-42d3-ae36-2cac9e23532f\",\"moduleSequenceNumber\":1471}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":379,\"_hash\":\"5d4680d9f7dbc8846cc1c53692a347168f5a7ad8703e441fb1237de6726247a8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Algorithmic Stock Trader I\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderI = input => _getMaxProfit(1, input);\\n\\n/**\\n * Algorithmic Stock Trader II\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderII = input =>\\n  _getMaxProfit(input.length, input);\\n\\n/**\\n * Algorithmic Stock Trader III\\n *\\n * @param {number[]} input stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIII = input => _getMaxProfit(2, input);\\n\\n/**\\n * Algorithmic Stock Trader IV\\n *\\n * @param {any[]} input where the first element is the number of trade counts\\n *                      and the second element is the stock prices\\n * @returns {number} max profit\\n */\\nexport const algorithmicStockTraderIV = input =>\\n  _getMaxProfit(input[0], input[1]);\\n\\n/**\\n * @param {number} maxTradeCount\\n * @param {number[]} stockPrices\\n * @returns {number} max profit\\n */\\nfunction _getMaxProfit(maxTradeCount, stockPrices) {\\n  const tradesWithPositiveProfits = Array(stockPrices.length); // Index is buy day\\n  for (let buyDay = 0; buyDay < stockPrices.length; buyDay++) {\\n    tradesWithPositiveProfits[buyDay] = _getTradesWithPositiveProfit(\\n      stockPrices,\\n      buyDay\\n    );\\n  }\\n\\n  const tradePermutations = Array(stockPrices.length); // Index is buy day.\\n  for (let buyDay = stockPrices.length - 1; buyDay >= 0; buyDay--) {\\n    const availableTrades = tradesWithPositiveProfits[buyDay];\\n    tradePermutations[buyDay] = availableTrades.map(trade => [trade]);\\n\\n    if (buyDay === stockPrices.length - 1) continue;\\n\\n    const futureTradePermutations = tradePermutations[buyDay + 1];\\n    for (const futureTradePermutation of futureTradePermutations) {\\n      tradePermutations[buyDay].push(futureTradePermutation);\\n      if (futureTradePermutation.length === maxTradeCount) continue;\\n\\n      for (const availableTrade of availableTrades) {\\n        if (availableTrade.sellDay <= futureTradePermutation[0].buyDay) {\\n          tradePermutations[buyDay].push([\\n            availableTrade,\\n            ...futureTradePermutation,\\n          ]);\\n        }\\n      }\\n    }\\n\\n    // Trim permutations so that only one permutation of each length and\\n    // buy day (where the chosen permutation is the one with the max profit)\\n    /** @type {Object.<number, Permutation[]>} */\\n    const buyDayToPermutationsMap = {};\\n    for (const permutation of tradePermutations[buyDay]) {\\n      const key = permutation[0].buyDay;\\n      if (!(key in buyDayToPermutationsMap)) buyDayToPermutationsMap[key] = [];\\n      buyDayToPermutationsMap[key].push(permutation);\\n    }\\n    const permutationsToKeep = [];\\n    for (const permutations of Object.values(buyDayToPermutationsMap)) {\\n      const lengthToBestPermutationMap = {};\\n      const lengthToMaxProfitMap = {};\\n      for (const permutation of permutations) {\\n        const length = permutation.length;\\n        const profit = permutation\\n          .map(trade => trade.profit)\\n          .reduce((a, b) => a + b, 0);\\n        if (\\n          !(length in lengthToMaxProfitMap) ||\\n          profit > lengthToMaxProfitMap[length]\\n        ) {\\n          lengthToMaxProfitMap[length] = profit;\\n          lengthToBestPermutationMap[length] = permutation;\\n        }\\n      }\\n      permutationsToKeep.push(...Object.values(lengthToBestPermutationMap));\\n    }\\n    tradePermutations[buyDay] = permutationsToKeep;\\n  }\\n\\n  return Math.max(\\n    ...tradePermutations[0].map(trades =>\\n      trades.map(trade => trade.profit).reduce((a, b) => a + b, 0)\\n    )\\n  );\\n}\\n\\n/**\\n * @typedef {Trade[]} Permutation\\n */\\n\\n/**\\n * @typedef {Object} Trade\\n * @property {number} buyDay\\n * @property {number} sellDay\\n * @property {number} profit\\n */\\n\\n/**\\n * @param {number[]} stockPrices\\n * @param {number} buyDay\\n * @returns {Trade[]} trades with positive profit\\n */\\nfunction _getTradesWithPositiveProfit(stockPrices, buyDay) {\\n  const buyPrice = stockPrices[buyDay];\\n  const trades = [];\\n  for (let sellDay = buyDay + 1; sellDay < stockPrices.length; sellDay++) {\\n    const sellPrice = stockPrices[sellDay];\\n    const profit = sellPrice - buyPrice;\\n    if (profit > 0) {\\n      trades.push({ buyDay: buyDay, sellDay: sellDay, profit: profit });\\n    }\\n  }\\n  return trades;\\n}\\n\",\"filename\":\"/contracts/algorithmic-stock-trader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":380,\"_hash\":\"8f1ce73f1ee6a0f7e5a26f84082207c53ce4a1febf88bc9ead2dfcc6c03fcc69\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Spiralize Matrix\\n *\\n * Given the following array of arrays of numbers representing a 2D matrix,\\n * return the elements of the matrix as an array in spiral order\\n *\\n * @param {number[][]} input\\n * @returns {number[]}\\n */\\nexport function spiralizeMatrix(input) {\\n  const visitedMatrix = Array.from({ length: input.length }, () =>\\n    Array(input[0].length).fill(false)\\n  );\\n  return _getPath(input, visitedMatrix, 0, 0, Direction.RIGHT, []);\\n}\\n\\n/**\\n * @typedef {number} Direction\\n */\\n\\n/**\\n * @readonly\\n * @enum {Direction}\\n */\\nconst Direction = Object.freeze({\\n  RIGHT: 0,\\n  DOWN: 1,\\n  LEFT: 2,\\n  UP: 3,\\n});\\n\\n/**\\n * @param {number[][]} matrix\\n * @param {boolean[][]} visitedMatrix copy of matrix for marking which cells we've visited\\n * @param {number} currentX\\n * @param {number} currentY\\n * @param {Direction} currentDirection\\n * @param {number[]} pathThusFar\\n */\\nfunction _getPath(\\n  matrix,\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection,\\n  pathThusFar\\n) {\\n  pathThusFar.push(matrix[currentY][currentX]);\\n  visitedMatrix[currentY][currentX] = true;\\n\\n  // Check if we have visited all cells.\\n  if (_visitedAll(visitedMatrix)) return pathThusFar;\\n\\n  const nextDirection = _getNextDirection(\\n    visitedMatrix,\\n    currentX,\\n    currentY,\\n    currentDirection\\n  );\\n  return _getPath(\\n    matrix,\\n    visitedMatrix,\\n    _getNextX(currentX, nextDirection),\\n    _getNextY(currentY, nextDirection),\\n    nextDirection,\\n    pathThusFar\\n  );\\n}\\n\\nfunction _getNextDirection(\\n  visitedMatrix,\\n  currentX,\\n  currentY,\\n  currentDirection\\n) {\\n  if (_canMove(visitedMatrix, currentX, currentY, currentDirection)) {\\n    return currentDirection;\\n  }\\n  return (currentDirection + 1) % Object.keys(Direction).length;\\n}\\n\\nfunction _canMove(visitedMatrix, currentX, currentY, nextDirection) {\\n  const x = _getNextX(currentX, nextDirection);\\n  const y = _getNextY(currentY, nextDirection);\\n  if (x < 0 || x >= visitedMatrix[0].length) return false;\\n  if (y < 0 || y >= visitedMatrix.length) return false;\\n  return !visitedMatrix[y][x];\\n}\\n\\nfunction _getNextX(currentX, nextDirection) {\\n  if (nextDirection === Direction.LEFT) return currentX - 1;\\n  if (nextDirection === Direction.RIGHT) return currentX + 1;\\n  return currentX;\\n}\\n\\nfunction _getNextY(currentY, nextDirection) {\\n  if (nextDirection === Direction.UP) return currentY - 1;\\n  if (nextDirection === Direction.DOWN) return currentY + 1;\\n  return currentY;\\n}\\n\\nfunction _visitedAll(visitedMatrix) {\\n  for (let y = 0; y < visitedMatrix.length; y++) {\\n    for (let x = 0; x < visitedMatrix[y].length; x++) {\\n      if (!visitedMatrix[y][x]) return false;\\n    }\\n  }\\n  return true;\\n}\\n\",\"filename\":\"/contracts/spiralize-matrix.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":381,\"_hash\":\"e4811fbcb4e08d87e2f6b7535abe9a79be10092ade4a3c606f43b16279aa517e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Unique Paths in a Grid I\\n *\\n * You are in a grid with N rows and M columns, and you are positioned in the\\n * top-left corner of that grid. You are trying to reach the bottom-right corner\\n * of the grid, but you can only move down or right on each step. Determine how\\n * many unique paths there are from start to finish.\\n *\\n * NOTE: The data returned for this contract is an array with the number of rows\\n * and columns.\\n *\\n * @param {number[]} input array representing number of rows and columns\\n * @returns {number} number of unique paths\\n */\\nexport function uniquePathsInAGridI(input) {\\n  const rowCount = input[0];\\n  const columnCount = input[1];\\n  const grid = Array(columnCount).fill(Array(rowCount).fill(0));\\n  return _getUniquePathCount(grid);\\n}\\n\\n/**\\n * Unique Paths in a Grid II\\n *\\n * @param {number[][]} input grid\\n * @returns {number} number of unique paths\\n */\\nexport const uniquePathsInAGridII = _getUniquePathCount;\\n\\n/**\\n * String that is the Object {x: x, y: y} stringified.\\n *\\n * @typedef {string} Coordinates\\n */\\n\\n/**\\n * String containing of only 'D' and 'R' where 'D' represents moving down and\\n * 'R' represents moving right.\\n *\\n * @typedef {string} Path\\n */\\n\\n/**\\n * @param {number[][]} grid\\n * @returns {number} number of unique paths\\n */\\nfunction _getUniquePathCount(grid) {\\n  /** @type {Object.<Coordinates, Path[]>} */\\n  const coordinatesToUniquePathsMap = {};\\n\\n  const columnCount = grid.length;\\n  const rowCount = grid[0].length;\\n  for (let y = columnCount - 1; y >= 0; y--) {\\n    for (let x = rowCount - 1; x >= 0; x--) {\\n      const coordinates = JSON.stringify({ x: x, y: y });\\n      const uniquePaths = _getUniquePaths(\\n        x,\\n        y,\\n        grid,\\n        coordinatesToUniquePathsMap\\n      );\\n      coordinatesToUniquePathsMap[coordinates] = uniquePaths;\\n    }\\n  }\\n\\n  return coordinatesToUniquePathsMap[JSON.stringify({ x: 0, y: 0 })].length;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @param {Object.<Coordinates, Path[]>} coordinatesToUniquePathsMap\\n * @returns {Path[]}\\n */\\nfunction _getUniquePaths(x, y, grid, coordinatesToUniquePathsMap) {\\n  if (y === grid.length - 1 && x === grid[0].length - 1) return [''];\\n\\n  const allPaths = [];\\n\\n  // Get paths if we moved right.\\n  if (_canMoveRight(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x + 1, y: y });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'R' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  // Get paths if we moved down.\\n  if (_canMoveDown(x, y, grid)) {\\n    const coordinate = JSON.stringify({ x: x, y: y + 1 });\\n    if (coordinate in coordinatesToUniquePathsMap) {\\n      const paths = coordinatesToUniquePathsMap[coordinate].map(\\n        (/** @type {Path} */ path) => 'D' + path\\n      );\\n      for (const path of paths) allPaths.push(path);\\n    }\\n  }\\n\\n  return allPaths;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveRight(x, y, grid) {\\n  if (x + 1 === grid[0].length) return false;\\n  if (grid[y][x + 1] === 1) return false;\\n  return true;\\n}\\n\\n/**\\n * @param {number} x\\n * @param {number} y\\n * @param {number[][]} grid\\n * @returns {boolean} true if we can move, false if we cannot move\\n */\\nfunction _canMoveDown(x, y, grid) {\\n  if (y + 1 === grid.length) return false;\\n  if (grid[y + 1][x] === 1) return false;\\n  return true;\\n}\\n\",\"filename\":\"/contracts/unique-paths-in-a-grid.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":382,\"_hash\":\"f28c78bf6d9946291215c40e2fea083e70af5c3a45d8320cde91ac933b45b830\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const STOCK_EXCHANGE_API = 'Stock Exchange API';\\nexport const STOCK_MARKET_DATA_API = 'Stock Market Data API';\\nexport const SF4_API = 'SF4 API';\\n\",\"filename\":\"/utils/apis.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":383,\"_hash\":\"bedec2aa15c0ed8f32f7d33bb1c1e3e1e3e742d78dd1765250809a0a9c92aeb3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/utils/api.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":384,\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getPath } from '/utils/servers.js';\\n\\n/**\\n * Connects to a server.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport function main(ns) {\\n  if (typeof ns.args[0] !== 'string') {\\n    ns.tprint(`usage: run connect.js <server name>`);\\n    return;\\n  }\\n  const path = getPath(ns, ns.args[0]);\\n  for (const server of path) ns.connect(server);\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///b2ecd93f-e761-41f8-9dab-3efd68e818ca\",\"moduleSequenceNumber\":122},{\"filename\":\"connect.js\",\"url\":\"blob:file:///77075a83-c349-4661-abd6-ffaf44aa8bc7\",\"moduleSequenceNumber\":1470}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"moduleSequenceNumber\":385,\"_hash\":\"630533065cffaa6689959d488806cdaede0e456c0811ac6148d496b1db5728b0\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  formatPercent,\\n  formatMoney,\\n  formatNumber,\\n  formatTime,\\n} from '/utils/format.js';\\n\\n/**\\n * Monitors a single server in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const serverName = ns.args[0];\\n  if (typeof serverName !== 'string') {\\n    ns.tprint('usage: run monitor-server.js <server name> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(serverName);\\n\\n    const availableMoney = ns.getServerMoneyAvailable(serverName);\\n    const percentMaxMoney = availableMoney / ns.getServerMaxMoney(serverName);\\n    ns.print(\\n      `\\\\navailable money: ${formatMoney(availableMoney)} (${formatPercent(\\n        percentMaxMoney\\n      )} of max)`\\n    );\\n\\n    const securityLevel = ns.getServerSecurityLevel(serverName);\\n    const minSecurityLevel = ns.getServerMinSecurityLevel(serverName);\\n    ns.print(\\n      `security level:  ${formatNumber(securityLevel)} (min is ${formatNumber(\\n        minSecurityLevel\\n      )})`\\n    );\\n\\n    ns.print(`hack chance: ${formatPercent(ns.hackAnalyzeChance(serverName))}`);\\n\\n    ns.print(\\n      '\\\\n' +\\n        [\\n          `time to hack:   ${formatTime(ns.getHackTime(serverName))}`,\\n          `time to grow:   ${formatTime(ns.getGrowTime(serverName))}`,\\n          `time to weaken: ${formatTime(ns.getWeakenTime(serverName))}`,\\n        ].join('\\\\n')\\n    );\\n\\n    await ns.sleep(1000);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"monitor-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///625064d1-46ee-427d-bd07-ad9ba932eb85\"},{\"filename\":\"monitor-server.js\",\"url\":\"blob:file:///6a6a2172-87d7-4941-9392-8db1b856cc38\"}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":386,\"_hash\":\"45b6a42f6e2cc9bd77d3789b9e1fa5dfac2e81d8add5f155e670d20935793d2f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const PROGRAMS = [\\n  'SQLInject.exe',\\n  'HTTPWorm.exe',\\n  'relaySMTP.exe',\\n  'FTPCrack.exe',\\n  'BruteSSH.exe',\\n  'Formulas.exe',\\n];\\n\\n/**\\n * Buys TOR router and programs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const player = ns.getPlayer();\\n\\n  // Buy TOR router.\\n  if (!player.tor) {\\n    while (!ns.purchaseTor()) await ns.sleep(1000);\\n    ns.toast('Bought TOR');\\n  }\\n\\n  // Buy programs.\\n  let programsToBuy;\\n  do {\\n    programsToBuy = PROGRAMS.filter(program => !ns.fileExists(program));\\n\\n    for (const program of programsToBuy) {\\n      if (ns.isBusy() && ns.getPlayer().createProgramName === program) {\\n        continue;\\n      }\\n      const success = ns.purchaseProgram(program);\\n      if (success) ns.toast('Bought ' + program);\\n    }\\n\\n    await ns.sleep(1000);\\n  } while (programsToBuy.length > 0);\\n}\\n\",\"filename\":\"manage-programs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manage-programs.js\",\"url\":\"blob:file:///d38b0d86-c113-42d9-b942-6a1cdf8e12d1\",\"moduleSequenceNumber\":775}],\"dependents\":[],\"ramUsage\":74.2,\"server\":\"home\",\"moduleSequenceNumber\":775,\"_hash\":\"0a1a3edc774c4e50505c968ddb851560ba22c940ebdd09e78df9e2a6894f2242\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const DISABLE_LOGGING_FUNCTIONS = ['sleep'];\\n\\nconst WORKING_WORK_TYPES = [\\n  'Working for Company part-time',\\n  'Working for Company',\\n];\\n\\n/**\\n * Manages life when we're not busy playing.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  DISABLE_LOGGING_FUNCTIONS.forEach(ns.disableLog);\\n\\n  while (true) {\\n    const player = ns.getPlayer();\\n\\n    if (\\n      ns.isBusy() &&\\n      (WORKING_WORK_TYPES.includes(player.workType) ||\\n        player.crimeType !== '' ||\\n        player.createProgramName !== '' ||\\n        player.currentWorkFactionName !== '')\\n    ) {\\n      // Working at a job or doing a crime, so keep on working.\\n      await ns.sleep(10000);\\n      continue;\\n    }\\n\\n    const lowestSkill = Math.min(\\n      player.hacking,\\n      player.charisma,\\n      player.strength,\\n      player.defense,\\n      player.dexterity,\\n      player.agility\\n    );\\n    if (ns.isBusy() && player.workType.startsWith('Study')) {\\n      // Studying or Taking a class at university\\n      switch (player.className) {\\n        case 'training your strength at a gym':\\n          if (lowestSkill != player.strength) ns.stopAction();\\n          break;\\n        case 'training your defense at a gym':\\n          if (lowestSkill != player.defense) ns.stopAction();\\n          break;\\n        case 'training your dexterity at a gym':\\n          if (lowestSkill != player.dexterity) ns.stopAction();\\n          break;\\n        case 'training your agility at a gym':\\n          if (lowestSkill != player.agility) ns.stopAction();\\n          break;\\n        case 'taking a Leadership course':\\n          if (lowestSkill != player.charisma) ns.stopAction();\\n          break;\\n        case 'taking an Algorithms course':\\n          if (lowestSkill != player.hacking) ns.stopAction();\\n          break;\\n        default:\\n          // Not sure what class we're taking, but stop it!\\n          ns.stopAction();\\n      }\\n      if (ns.isBusy()) {\\n        await ns.sleep(10000);\\n        continue;\\n      }\\n    }\\n\\n    // Player is no longer busy, so start learning something!\\n    switch (lowestSkill) {\\n      case player.strength:\\n        ns.gymWorkout('powerhouse gym', 'strength');\\n        break;\\n      case player.defense:\\n        ns.gymWorkout('powerhouse gym', 'defense');\\n        break;\\n      case player.dexterity:\\n        ns.gymWorkout('powerhouse gym', 'dexterity');\\n        break;\\n      case player.agility:\\n        ns.gymWorkout('powerhouse gym', 'agility');\\n        break;\\n      case player.charisma:\\n        ns.universityCourse('rothman university', 'Leadership');\\n        break;\\n      case player.hacking:\\n        ns.universityCourse('rothman university', 'Algorithms');\\n        break;\\n      default:\\n        // Should never get here.\\n        ns.universityCourse('rothman university', 'Leadership');\\n    }\\n    await ns.sleep(10000);\\n  }\\n}\\n\",\"filename\":\"manage-life.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manage-life.js\",\"url\":\"blob:file:///85c95031-e444-4001-ba59-e908d39d9e11\",\"moduleSequenceNumber\":153}],\"dependents\":[],\"ramUsage\":90.1,\"server\":\"home\",\"moduleSequenceNumber\":388,\"_hash\":\"502d1493ca2b7caa2b126c91c507ce13be99ed9fd0bc924c707efe26401cc7b5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getForecast } from '/utils/stock.js';\\nimport { formatMoney, formatNumber, formatPercent } from '/utils/format.js';\\n\\n/**\\n * Monitors a single stock in logs.\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  let symbols = [];\\n  try {\\n    symbols = ns.stock.getSymbols();\\n  } catch (_) {\\n    ns.tprint('stock API not bought yet');\\n    return;\\n  }\\n\\n  const symbol = ns.args[0];\\n  if (typeof symbol !== 'string' || !symbols.includes(symbol)) {\\n    ns.tprint('usage: run monitor-stock.js <stock symbol> --tail');\\n    return;\\n  }\\n\\n  while (true) {\\n    ns.clearLog();\\n    ns.print(symbol);\\n\\n    const position = ns.stock.getPosition(symbol);\\n    const ownedShareCount = position[0];\\n    const ownedAvgSharePrice = position[1];\\n    ns.print('owned shared count:     ', formatNumber(ownedShareCount));\\n    ns.print('owned avg. share price: ', formatMoney(ownedAvgSharePrice));\\n\\n    const askPrice = ns.stock.getAskPrice(symbol);\\n    const bidPrice = ns.stock.getBidPrice(symbol);\\n    ns.print('ask price: ', formatMoney(askPrice));\\n    ns.print('bid price: ', formatMoney(bidPrice), '\\\\n');\\n    ns.print('forecast: ', formatPercent(getForecast(ns, symbol)));\\n\\n    await ns.sleep(6000);\\n  }\\n}\\n\",\"filename\":\"monitor-stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///273103e9-03ca-40d0-a58e-4c0bfa94c8dc\"},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///3f4be85e-f1c5-42f3-a813-8922f8bac344\"},{\"filename\":\"monitor-stock.js\",\"url\":\"blob:file:///fef1cf13-fcfa-4ae5-a748-0a7c15157192\"}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"moduleSequenceNumber\":389,\"_hash\":\"049233dae835648710e421548d0d39f0a5940cccdde4876058c91940a10804b1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServerNames } from '/utils/servers.js';\\n\\nconst COMPANY_NAMES = {\\n  ECorp: { stockSymbol: 'ECP' },\\n  MegaCorp: { stockSymbol: 'MGCP' },\\n  'Blade Industries': { stockSymbol: 'BLD' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK' },\\n  'Four Sigma': { stockSymbol: 'FSIG' },\\n  'KuaiGong International': { stockSymbol: 'KGI' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM' },\\n  'Storm Technologies': { stockSymbol: 'STM' },\\n  DefComm: { stockSymbol: 'DCOMM' },\\n  'Helios Labs': { stockSymbol: 'HLS' },\\n  VitaLife: { stockSymbol: 'VITA' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS' },\\n  'Universal Energy': { stockSymbol: 'UNV' },\\n  AeroCorp: { stockSymbol: 'AERO' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH' },\\n  'Nova Medical': { stockSymbol: 'NVMD' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO' },\\n  'Rho Construction': { stockSymbol: 'RHOC' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE' },\\n  'SysCore Securities': { stockSymbol: 'SYSC' },\\n  CompuTek: { stockSymbol: 'CTK' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK' },\\n  'Omega Software': { stockSymbol: 'OMGA' },\\n  FoodNStuff: { stockSymbol: 'FNS' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN' },\\n  'Titan Laboratories': { stockSymbol: 'TITN' },\\n};\\n\\nexport function main(ns) {\\n  // ns.tprint(Object.keys(COMPANY_NAMES).length);\\n  // ns.tprint(ns.stock.getSymbols().length);\\n  const serverNames = getAllServerNames(ns);\\n  for (const serverName of serverNames) {\\n    ns.tprint(ns.getServer(serverName).organizationName);\\n  }\\n}\\n\",\"filename\":\"/utils/companies.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/companies.js\",\"url\":\"blob:file:///1286c66f-cb85-4d0a-8f25-beba3ad005cb\"}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":390,\"_hash\":\"e794661723ab1af3726d0ee386e3e10b8c6e5d84afe5dad138446185ab3a4d4b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ORGANIZATIONS = {\\n  ECorp: { stockSymbol: 'ECP', serverName: 'ecorp' },\\n  MegaCorp: { stockSymbol: 'MGCP', serverName: 'megacorp' },\\n  'Blade Industries': { stockSymbol: 'BLD', serverName: 'blade' },\\n  'Clarke Incorporated': { stockSymbol: 'CLRK', serverName: 'clarkinc' },\\n  'OmniTek Incorporated': { stockSymbol: 'OMTK', serverName: 'omnitek' },\\n  'Four Sigma': { stockSymbol: 'FSIG', serverName: '4sigma' },\\n  'KuaiGong International': { stockSymbol: 'KGI', serverName: 'kuai-gong' },\\n  'Fulcrum Technologies': { stockSymbol: 'FLCM', serverName: 'fulcrumtech' },\\n  'Storm Technologies': { stockSymbol: 'STM', serverName: 'stormtech' },\\n  DefComm: { stockSymbol: 'DCOMM', serverName: 'defcomm' },\\n  'Helios Labs': { stockSymbol: 'HLS', serverName: 'helios' },\\n  VitaLife: { stockSymbol: 'VITA', serverName: 'vitalife' },\\n  'Icarus Microsystems': { stockSymbol: 'ICRS', serverName: 'icarus' },\\n  'Universal Energy': { stockSymbol: 'UNV', serverName: 'univ-energy' },\\n  AeroCorp: { stockSymbol: 'AERO', serverName: 'aerocorp' },\\n  'Omnia Cybersystems': { stockSymbol: 'OMN', serverName: 'omnia' },\\n  'Solaris Space Systems': { stockSymbol: 'SLRS', serverName: 'solaris' },\\n  'Global Pharmaceuticals': { stockSymbol: 'GPH', serverName: 'global-pharm' },\\n  'Nova Medical': { stockSymbol: 'NVMD', serverName: 'nova-med' },\\n  'Watchdog Security': { stockSymbol: 'WDS' },\\n  LexoCorp: { stockSymbol: 'LXO', serverName: 'lexo-corp' },\\n  'Rho Construction': { stockSymbol: 'RHOC', serverName: 'rho-construction' },\\n  'Alpha Enterprises': { stockSymbol: 'APHE', serverName: 'alpha-ent' },\\n  'SysCore Securities': { stockSymbol: 'SYSC', serverName: 'syscore' },\\n  CompuTek: { stockSymbol: 'CTK', serverName: 'comptek' },\\n  'NetLink Technologies': { stockSymbol: 'NTLK', serverName: 'netlink' },\\n  'Omega Software': { stockSymbol: 'OMGA', serverName: 'omega-net' },\\n  FoodNStuff: { stockSymbol: 'FNS', serverName: 'foodnstuff' },\\n  'Sigma Cosmetics': { stockSymbol: 'SGC', serverName: 'sigma-cosmetics' },\\n  \\\"Joe's Guns\\\": { stockSymbol: 'JGN', serverName: 'joesguns' },\\n  'Catalyst Ventures': { stockSymbol: 'CTYS', serverName: 'catalyst' },\\n  'Microdyne Technologies': { stockSymbol: 'MDYN', serverName: 'microdyne' },\\n  'Titan Laboratories': { stockSymbol: 'TITN', serverName: 'titan-labs' },\\n};\\n\\n/**\\n * @param {string} serverName\\n * @returns {string|undefined} stock symbol\\n */\\nexport function getStockSymbol(serverName) {\\n  const organizations = Object.values(ORGANIZATIONS);\\n  const organization = organizations.find(\\n    organization => organization.serverName === serverName\\n  );\\n  return organization === undefined ? undefined : organization.stockSymbol;\\n}\\n\",\"filename\":\"/utils/organizations.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///fd79090d-3e5c-44c0-bd2a-2784feb89ded\"},{\"filename\":\"/utils/organizations.js\",\"url\":\"blob:file:///e98eb0ff-a686-41d3-9223-a2ac132a04dd\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":391,\"_hash\":\"87c11a870fd8c62ffd2783a85ca99f5023b43d9b5d1922aaf0ad763d3a0eb9dc\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatNumber, formatTime } from '/utils/format.js';\\n\\nconst HISTORY_LENGTH = 100;\\nconst HISTORY_SECONDS = 10;\\n\\n/**\\n *\\n * @param {import('index').NS} ns\\n */\\nexport async function main(ns) {\\n  const targetLevel = ns.args[0];\\n  if (typeof targetLevel !== 'number') {\\n    ns.tprint(`usage: run get-hacking-skill-progress.js <target level>`);\\n    return;\\n  }\\n  if (!ns.fileExists('Formulas.exe')) {\\n    ns.tprint('Need Formulas.exe');\\n    return;\\n  }\\n  const player = ns.getPlayer();\\n  const targetExp = ns.formulas.skills.calculateExp(9000, player.hacking_mult);\\n\\n  // Get current rate of exp growth.\\n  const expHistory = [];\\n  for (let i = 0; i < HISTORY_LENGTH; i++) {\\n    expHistory.push(getCurrentExp(ns));\\n    await ns.sleep((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  }\\n  const expDiffs = [];\\n  for (let i = 1; i < expHistory.length; i++) {\\n    expDiffs.push(expHistory[i] - expHistory[i - 1]);\\n  }\\n  const averageGrowth = expDiffs.reduce((a, b) => a + b) / HISTORY_LENGTH;\\n  const averageGrowthPerMs =\\n    averageGrowth / ((HISTORY_SECONDS * 1000) / HISTORY_LENGTH);\\n  const currentExp = getCurrentExp(ns);\\n  const timeLeftMs = (targetExp - currentExp) / averageGrowthPerMs;\\n\\n  ns.tprintf('Current hacking experience: ' + formatNumber(currentExp, true));\\n  ns.tprintf('Target hacking experience: ' + formatNumber(targetExp, true));\\n  ns.tprintf(\\n    'Average exp growth per second: ' +\\n      formatNumber(averageGrowthPerMs * 1000, true)\\n  );\\n  ns.tprintf('Time to reach target: ' + formatTime(timeLeftMs));\\n}\\n\\n/** @param {import('index').NS} ns */\\nfunction getCurrentExp(ns) {\\n  const player = ns.getPlayer();\\n  return ns.formulas.skills.calculateExp(player.hacking, player.hacking_mult);\\n}\\n\",\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/format.js\",\"url\":\"blob:file:///562b51d8-b973-4652-bf9f-09c6f5aa605d\",\"moduleSequenceNumber\":156243},{\"filename\":\"get-hacking-skill-progress.js\",\"url\":\"blob:file:///27db7ff0-7b0b-4145-ae9a-9ad7ecef722e\",\"moduleSequenceNumber\":191611}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":392,\"_hash\":\"c12132038d1dccdd6809c6332588105a4c1105ded343fe02c3ed7e2a8112ad26\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllServerNames} from '/utils/servers.js'\\nimport {sort} from '/utils/misc.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const serverNames = getAllServerNames(ns);\\n  sort(serverNames, serverName => getWeakenAbility(ns, serverName), true)\\n  \\n  ns.tprint(serverNames[0]);\\n}\\n\\n/** @param {NS} ns **/\\nfunction getWeakenAbility(ns, serverName) {\\n  return ns.formulas.hacking.hackExp(ns.getServer(serverName), ns.getPlayer()) / Math.max(500, ns.getWeakenTime(serverName));\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///24437277-1184-43f9-a54c-a0c79f7e047b\",\"moduleSequenceNumber\":122},{\"filename\":\"/utils/stock.js\",\"url\":\"blob:file:///7c45a3cf-3f9e-45aa-b3f9-a0e0220b75d5\",\"moduleSequenceNumber\":139},{\"filename\":\"/utils/misc.js\",\"url\":\"blob:file:///345120fa-4688-47ed-b07d-f29996c2c264\",\"moduleSequenceNumber\":121},{\"filename\":\"/utils/servers.js\",\"url\":\"blob:file:///e0974ad3-38af-4543-bf83-36f2f9958df7\",\"moduleSequenceNumber\":122},{\"filename\":\"test.js\",\"url\":\"blob:file:///d223fa19-643c-4afa-916b-dddf49786c43\",\"moduleSequenceNumber\":2028}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":393,\"_hash\":\"3554a6554bbd5b080c2fae53d06f3bb362a956a25abb3a34be5848dbf4d06aa9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"lauren\",\"lauren-0\",\"lauren-1\",\"lauren-4\",\"lauren-5\",\"lauren-6\",\"lauren-9\",\"lauren-10\",\"lauren-22\",\"lauren-3\",\"lauren-14\",\"lauren-16\",\"lauren-17\",\"lauren-18\",\"lauren-19\",\"lauren-20\",\"lauren-21\",\"lauren-2\",\"lauren-7\",\"lauren-11\",\"lauren-13\",\"lauren-15\",\"lauren-23\",\"lauren-8\",\"lauren-12\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":27.956000000000035,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"96.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":12339002066.400002,\"moneyMax\":61695010332.000015,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1148,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"53.3.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10120421822.4,\"moneyMax\":50602109112,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1229,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"4.9.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":4921980520.6,\"moneyMax\":24609902603.000004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":951,\"serverGrowth\":72}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"13.4.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":308.2099999999918,\"pid\":460166,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":19,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d9de9f94-4a27-4e03-b634-67ea8e85bedc\",\"moduleSequenceNumber\":767}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":232.0099999999959,\"pid\":461187,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":27,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d9de9f94-4a27-4e03-b634-67ea8e85bedc\",\"moduleSequenceNumber\":767}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000079,\"pid\":463020,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":12,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d9de9f94-4a27-4e03-b634-67ea8e85bedc\",\"moduleSequenceNumber\":767}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.6100000000000008,\"pid\":464266,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":15,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f7d90a4f-af82-4240-98c8-15e18812bb48\",\"moduleSequenceNumber\":4933}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d9de9f94-4a27-4e03-b634-67ea8e85bedc\",\"moduleSequenceNumber\":767}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f7d90a4f-af82-4240-98c8-15e18812bb48\",\"moduleSequenceNumber\":4933}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":4933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5d587bb7-1d2f-430f-8b08-647acc40d4c5\",\"moduleSequenceNumber\":16173}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":16173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":5908069789.6,\"moneyMax\":29540348948,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1200,\"serverGrowth\":71}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"90.3.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":4679068478.400001,\"moneyMax\":23395342392.000004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1275,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"68.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":4286369905.6000004,\"moneyMax\":21431849528.000004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":962,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"79.0.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":228.8099999999961,\"pid\":461234,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":12,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a4b41be-c3dc-4990-a93c-46aeb68bae28\",\"moduleSequenceNumber\":757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.21000000000079,\"pid\":463019,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":21,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a4b41be-c3dc-4990-a93c-46aeb68bae28\",\"moduleSequenceNumber\":757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.01000000000001,\"pid\":463777,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":35,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a4b41be-c3dc-4990-a93c-46aeb68bae28\",\"moduleSequenceNumber\":757}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.20999999999993,\"pid\":463911,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":5,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3fe4d43d-40ed-4ca0-a53e-93b9d957fa3b\",\"moduleSequenceNumber\":13785}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a4b41be-c3dc-4990-a93c-46aeb68bae28\",\"moduleSequenceNumber\":757}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3fe4d43d-40ed-4ca0-a53e-93b9d957fa3b\",\"moduleSequenceNumber\":13785}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":13785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///75be6a6f-b732-48c2-bd3f-1679c7047d6a\",\"moduleSequenceNumber\":25688}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":25688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":2673406425.6000004,\"moneyMax\":13367032128.000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1036,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"87.7.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":4147214516.8,\"moneyMax\":20736072584,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":76}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"79.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":5233992711.6,\"moneyMax\":26169963558.000004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1296,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"55.1.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":371.20999999998827,\"pid\":459306,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a158e36-62cf-4c0e-957f-df5ace339f41\",\"moduleSequenceNumber\":762}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":109.61000000000098,\"pid\":462842,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":25,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a158e36-62cf-4c0e-957f-df5ace339f41\",\"moduleSequenceNumber\":762}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.01000000000074,\"pid\":463066,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a158e36-62cf-4c0e-957f-df5ace339f41\",\"moduleSequenceNumber\":762}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.6100000000007,\"pid\":463111,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":36,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///91e70b0d-e7b1-47a0-9a2f-03221df2ef7e\",\"moduleSequenceNumber\":4928}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6a158e36-62cf-4c0e-957f-df5ace339f41\",\"moduleSequenceNumber\":762}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///91e70b0d-e7b1-47a0-9a2f-03221df2ef7e\",\"moduleSequenceNumber\":4928}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":4928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4ee17ba7-75c5-40b4-84ed-9dfaba29479d\",\"moduleSequenceNumber\":16168}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":16168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":341625741.6,\"moneyMax\":1708128708.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1245,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"34.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1115,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"28.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":213524778.8,\"moneyMax\":1067623894,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"13.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":187100539.4,\"moneyMax\":935502697,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1047,\"serverGrowth\":59}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"34.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":173141638.4,\"moneyMax\":865708192,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":916,\"serverGrowth\":56}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"91.5.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461423,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c71dee22-1877-45d6-a52f-6b19284070fa\",\"moduleSequenceNumber\":763}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c71dee22-1877-45d6-a52f-6b19284070fa\",\"moduleSequenceNumber\":763}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///157322e2-cdbf-4e8e-af80-2c05dcb3e834\",\"moduleSequenceNumber\":4929}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":4929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e66d0340-9589-44e4-b3b4-cb4f4a422129\",\"moduleSequenceNumber\":16169}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":16169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":131869440.80000001,\"moneyMax\":659347204.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"17.8.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":228.8099999999961,\"pid\":461232,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///afd10a03-d845-4dac-b05d-7c618d9316f0\",\"moduleSequenceNumber\":766}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///afd10a03-d845-4dac-b05d-7c618d9316f0\",\"moduleSequenceNumber\":766}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///6832337e-dd8c-44f1-8603-839201d1295d\",\"moduleSequenceNumber\":4932}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":4932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///317a2f5f-918d-4b6a-a74f-eb8a9374c14b\",\"moduleSequenceNumber\":16172}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":16172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":157782212,\"moneyMax\":788911060,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"61.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":189663628,\"moneyMax\":948318140,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"25.4.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461419,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d5dd8b4b-59cb-45ef-ba06-6ac8d2a921ea\",\"moduleSequenceNumber\":758}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d5dd8b4b-59cb-45ef-ba06-6ac8d2a921ea\",\"moduleSequenceNumber\":758}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///08087bd9-fefa-474a-b2aa-9007f275d098\",\"moduleSequenceNumber\":13786}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":13786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2d177889-4585-4107-9f93-1e2b10442416\",\"moduleSequenceNumber\":25689}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":25689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":222832826.4,\"moneyMax\":1114164132,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"28.5.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":132.61000000000104,\"pid\":462533,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":29,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f31a866-acef-4df1-9c69-96458b90e38a\",\"moduleSequenceNumber\":756}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.01000000000074,\"pid\":463065,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":30,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f31a866-acef-4df1-9c69-96458b90e38a\",\"moduleSequenceNumber\":756}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.80999999999998,\"pid\":463822,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":14,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f31a866-acef-4df1-9c69-96458b90e38a\",\"moduleSequenceNumber\":756}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f31a866-acef-4df1-9c69-96458b90e38a\",\"moduleSequenceNumber\":756}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f0eba863-4270-48a1-8044-d3b8283d7fb9\",\"moduleSequenceNumber\":13784}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":13784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///37dbd6ec-2d8b-482e-b836-8b2734ae1b7a\",\"moduleSequenceNumber\":25687}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":25687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":172676838.20000002,\"moneyMax\":863384191,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"88.2.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461421,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///070de41b-0c1c-4655-ac2f-dc434e31a89a\",\"moduleSequenceNumber\":760}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///070de41b-0c1c-4655-ac2f-dc434e31a89a\",\"moduleSequenceNumber\":760}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0d792d15-5caa-452a-8cbf-1197559d5b6c\",\"moduleSequenceNumber\":13788}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":13788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///768d7487-06d5-4bec-9074-d82fc9e510d1\",\"moduleSequenceNumber\":25691}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":25691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":127269987,\"moneyMax\":636349935,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":85}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"23.5.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":176080623.4,\"moneyMax\":880403117,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":895,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"77.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":163591891.4,\"moneyMax\":817959457,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":863,\"serverGrowth\":86}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"72.4.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":210770367.20000002,\"moneyMax\":1053851836,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":895,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"4.7.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":232.0099999999959,\"pid\":461186,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":6,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///841dca23-e7c3-4a34-b846-2b576eb17737\",\"moduleSequenceNumber\":754}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000023,\"pid\":463555,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///841dca23-e7c3-4a34-b846-2b576eb17737\",\"moduleSequenceNumber\":754}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///841dca23-e7c3-4a34-b846-2b576eb17737\",\"moduleSequenceNumber\":754}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///358ea3f9-3b6a-455e-8356-8f121aae358d\",\"moduleSequenceNumber\":13782}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":13782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///90502259-ce8b-4921-ab73-5e682e9f5e98\",\"moduleSequenceNumber\":25685}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":25685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":194812922.8,\"moneyMax\":974064614,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"5.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":207105979.8,\"moneyMax\":1035529899,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"76.2.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":167108379,\"moneyMax\":835541895,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"38.5.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461420,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7b5c69dd-16c2-4453-a758-6fffa8d05c14\",\"moduleSequenceNumber\":759}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7b5c69dd-16c2-4453-a758-6fffa8d05c14\",\"moduleSequenceNumber\":759}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7e705ce7-4650-4c10-8ab8-07abe0fab8e6\",\"moduleSequenceNumber\":13787}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":13787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9eb810db-d749-4b1a-8e28-6358e4de08f4\",\"moduleSequenceNumber\":25690}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":25690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":165840290,\"moneyMax\":829201450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":762,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"28.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":266708089.8,\"moneyMax\":1333540449,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":58}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"21.2.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461415,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08a63753-be90-4ebe-af7a-6e1d13505876\",\"moduleSequenceNumber\":750}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08a63753-be90-4ebe-af7a-6e1d13505876\",\"moduleSequenceNumber\":750}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f4d920b-1b37-495b-bf40-ed5a37e8bb92\",\"moduleSequenceNumber\":13778}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":13778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///341e9691-2908-41a8-8512-ab01d4ad1530\",\"moduleSequenceNumber\":25681}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":25681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":312951006.2,\"moneyMax\":1564755031,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":791,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"75.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":243921553.4,\"moneyMax\":1219607767,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"77.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":260999900.4,\"moneyMax\":1304999502,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":810,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"93.5.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":238.60999999999558,\"pid\":461094,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b76459e4-d263-418f-9296-41983db4f459\",\"moduleSequenceNumber\":755}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000064,\"pid\":463156,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b76459e4-d263-418f-9296-41983db4f459\",\"moduleSequenceNumber\":755}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b76459e4-d263-418f-9296-41983db4f459\",\"moduleSequenceNumber\":755}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///59d077ff-89ba-4699-afab-97670bc6af8a\",\"moduleSequenceNumber\":13783}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":13783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///564c8b86-7b48-4293-9e9e-060f9c3bd94f\",\"moduleSequenceNumber\":25686}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":25686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":202285219.20000002,\"moneyMax\":1011426096,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"42.4.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461416,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///688a3916-d0b7-43a5-ab22-d42f81c86ec0\",\"moduleSequenceNumber\":751}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///688a3916-d0b7-43a5-ab22-d42f81c86ec0\",\"moduleSequenceNumber\":751}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3efab7c8-ea4c-46d0-88ee-35a439ba0a73\",\"moduleSequenceNumber\":13779}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":13779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///211e5671-cfd6-41b1-8afc-9b1b84d0d785\",\"moduleSequenceNumber\":25682}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":25682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":158501664,\"moneyMax\":792508320,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":731,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"13.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461413,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///eea17e07-b2b5-4a3a-8315-55714addf4b8\",\"moduleSequenceNumber\":748}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///eea17e07-b2b5-4a3a-8315-55714addf4b8\",\"moduleSequenceNumber\":748}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///06b97dfe-e2ae-4b6e-8079-56b5f886c2d4\",\"moduleSequenceNumber\":13776}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":13776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ab04eae4-557a-4c1b-80b1-cb68843ad721\",\"moduleSequenceNumber\":25679}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":25679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":107087426,\"moneyMax\":535437130,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":501,\"serverGrowth\":55}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"85.8.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461417,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///001c7b6b-98bc-4f3d-a247-6e127825295e\",\"moduleSequenceNumber\":752}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///001c7b6b-98bc-4f3d-a247-6e127825295e\",\"moduleSequenceNumber\":752}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ba79d6b0-bcec-43c3-abbc-e9cdb75938fb\",\"moduleSequenceNumber\":13780}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":13780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8763d42d-7ac4-453f-a9e2-00aff3abffed\",\"moduleSequenceNumber\":25683}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":25683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":123601936.60000001,\"moneyMax\":618009683,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":536,\"serverGrowth\":53}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"19.3.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461418,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1304f7b5-6262-4ddd-9584-ff28d9c373d0\",\"moduleSequenceNumber\":753}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1304f7b5-6262-4ddd-9584-ff28d9c373d0\",\"moduleSequenceNumber\":753}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f6e134c2-fb87-44b1-bb95-ef5bfa3939ba\",\"moduleSequenceNumber\":13781}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":13781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5d783793-b530-428c-915a-5e2c4fdaaee0\",\"moduleSequenceNumber\":25684}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":25684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":67237554,\"moneyMax\":336187770,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":450,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"57.8.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":304.809999999992,\"pid\":460212,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///096cd7b1-1813-4ecf-99ad-b098e197e55d\",\"moduleSequenceNumber\":743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":142.61000000000055,\"pid\":462400,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":40,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///096cd7b1-1813-4ecf-99ad-b098e197e55d\",\"moduleSequenceNumber\":743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000006,\"pid\":463732,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":24,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///096cd7b1-1813-4ecf-99ad-b098e197e55d\",\"moduleSequenceNumber\":743}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///096cd7b1-1813-4ecf-99ad-b098e197e55d\",\"moduleSequenceNumber\":743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///dbb275ed-1689-4540-ab30-92fe81f0cd70\",\"moduleSequenceNumber\":13771}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":13771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2540c01a-956f-4f10-afb6-45fba3604a51\",\"moduleSequenceNumber\":25674}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":25674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":39108881,\"moneyMax\":195544405,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"19.3.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":182.4099999999985,\"pid\":461867,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":11,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7451f2ca-471e-4392-9415-7c04e25431ad\",\"moduleSequenceNumber\":744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464311,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":25,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7451f2ca-471e-4392-9415-7c04e25431ad\",\"moduleSequenceNumber\":744}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7451f2ca-471e-4392-9415-7c04e25431ad\",\"moduleSequenceNumber\":744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b17b1501-dc84-4d03-bc43-04b1d49b1610\",\"moduleSequenceNumber\":13772}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":13772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///53bfaaff-7368-459c-b1ed-5e9774a4dcc8\",\"moduleSequenceNumber\":25675}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":25675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":196718560.20000002,\"moneyMax\":983592801,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":764,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"83.8.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":182.4099999999985,\"pid\":461868,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b4f9e822-4bb3-47f4-9190-86e08c604977\",\"moduleSequenceNumber\":745}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b4f9e822-4bb3-47f4-9190-86e08c604977\",\"moduleSequenceNumber\":745}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///87b8ff43-c485-4fa4-8b88-8558d8031010\",\"moduleSequenceNumber\":13773}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":13773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///aa1989f0-da1c-40cd-b27a-b2a02b3259c2\",\"moduleSequenceNumber\":25676}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":25676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":44178583,\"moneyMax\":220892915,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":448,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"30.7.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":83080274.2,\"moneyMax\":415401371,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":612,\"serverGrowth\":63}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"33.9.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461411,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":49,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0ca6a795-11c8-4538-b464-78b4d73b01ff\",\"moduleSequenceNumber\":746}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000023,\"pid\":463554,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0ca6a795-11c8-4538-b464-78b4d73b01ff\",\"moduleSequenceNumber\":746}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999977,\"pid\":464089,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0ca6a795-11c8-4538-b464-78b4d73b01ff\",\"moduleSequenceNumber\":746}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0ca6a795-11c8-4538-b464-78b4d73b01ff\",\"moduleSequenceNumber\":746}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///505aff8c-c143-498e-b5c6-1f61e4e18044\",\"moduleSequenceNumber\":13774}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":13774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ff7ea780-f006-4c3b-ad7c-6e095d1fadaf\",\"moduleSequenceNumber\":25677}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":25677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":89450792.80000001,\"moneyMax\":447253964.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":439,\"serverGrowth\":42}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"54.7.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999977,\"pid\":464088,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bd56042c-4814-4dce-9646-5c93622002ac\",\"moduleSequenceNumber\":742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464310,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":10,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bd56042c-4814-4dce-9646-5c93622002ac\",\"moduleSequenceNumber\":742}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///bd56042c-4814-4dce-9646-5c93622002ac\",\"moduleSequenceNumber\":742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5ff25e04-ff0f-4af7-8c61-fa8d67cf457e\",\"moduleSequenceNumber\":13770}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":13770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c70e8f5f-a2e4-42d6-b154-0d61f0eff904\",\"moduleSequenceNumber\":23978}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":23978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"zb-institute\",\"summit-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":37618147.2,\"moneyMax\":188090736.00000003,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":278,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"76.8.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":49639803.800000004,\"moneyMax\":248199019,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":349,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"71.9.8.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464305,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08f71bcd-0d3a-4406-bb1f-1f58e9dae2a0\",\"moduleSequenceNumber\":1513}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///08f71bcd-0d3a-4406-bb1f-1f58e9dae2a0\",\"moduleSequenceNumber\":1513}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d7c1d6d7-5b2a-48f9-8f66-f27823264f38\",\"moduleSequenceNumber\":123537}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1f7fa4aa-a9c8-45d7-a521-50828083ce1d\",\"moduleSequenceNumber\":736}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":397,\"serverGrowth\":69}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"77.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":16288113,\"moneyMax\":81440565,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":251,\"serverGrowth\":47}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"86.7.5.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464267,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2f440882-1952-4a55-95ef-268c30b16d2a\",\"moduleSequenceNumber\":1483}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2f440882-1952-4a55-95ef-268c30b16d2a\",\"moduleSequenceNumber\":1483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5717a661-4128-4e5f-9768-92f04c595eb8\",\"moduleSequenceNumber\":13072}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":13072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///11f67c68-37a0-42e6-93e4-d64a631a7e6b\",\"moduleSequenceNumber\":699}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"96.4.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464268,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///de08e486-6150-48ec-8997-6569653d99a0\",\"moduleSequenceNumber\":1484}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///de08e486-6150-48ec-8997-6569653d99a0\",\"moduleSequenceNumber\":1484}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8c87bd8b-8a75-472d-9bf5-d805fbcc215b\",\"moduleSequenceNumber\":13073}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":13073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///67b538ed-24ea-448c-bb29-2467eebaf868\",\"moduleSequenceNumber\":700}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":76.94200000000173,\"minDifficulty\":3,\"moneyAvailable\":601717.6859668322,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"32.7.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464269,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9bb4b2e4-4436-4e28-b309-1781989abd2a\",\"moduleSequenceNumber\":1485}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9bb4b2e4-4436-4e28-b309-1781989abd2a\",\"moduleSequenceNumber\":1485}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///47f86635-dbf3-46e6-a2d3-1f6e68c274d4\",\"moduleSequenceNumber\":13074}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":13074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///24e9adec-bb29-4b75-94ec-8b8cf94b72f8\",\"moduleSequenceNumber\":701}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":69.10200000000026,\"minDifficulty\":3,\"moneyAvailable\":686354.4841996026,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"41.7.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464270,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8bb138d5-1029-45ae-88f1-8e2859a546bf\",\"moduleSequenceNumber\":1486}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///8bb138d5-1029-45ae-88f1-8e2859a546bf\",\"moduleSequenceNumber\":1486}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///465c1377-90e1-4bd9-a53e-b12ffc797481\",\"moduleSequenceNumber\":13075}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":13075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3fdb7353-5c2c-496b-b67c-47ba82428223\",\"moduleSequenceNumber\":702}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":71.91400000000054,\"minDifficulty\":5,\"moneyAvailable\":1429891.6478489116,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"58.1.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464300,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///792a8d6f-57cb-4ed8-9e7c-f5bfd1b9dc81\",\"moduleSequenceNumber\":1508}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///792a8d6f-57cb-4ed8-9e7c-f5bfd1b9dc81\",\"moduleSequenceNumber\":1508}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///90806248-e250-4dc2-8e23-e7c367dd9c6e\",\"moduleSequenceNumber\":35144}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b9a427c6-bf57-4f1b-8701-3b925d27be3e\",\"moduleSequenceNumber\":731}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":43.77800000000002,\"minDifficulty\":8,\"moneyAvailable\":3314368.336143115,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"50.3.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464307,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///40126aa1-46e0-43b0-b0a6-49c936512df9\",\"moduleSequenceNumber\":1515}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///40126aa1-46e0-43b0-b0a6-49c936512df9\",\"moduleSequenceNumber\":1515}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f2d917f5-bfdf-411e-8b9d-c8c65da6043c\",\"moduleSequenceNumber\":37078}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9159a9df-6ce8-4f6f-be47-2149ca004a8c\",\"moduleSequenceNumber\":738}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":58.86800000000016,\"minDifficulty\":7,\"moneyAvailable\":1059758.097657956,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"86.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464303,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e119f132-a48b-4b59-98a9-d945f130023c\",\"moduleSequenceNumber\":1511}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e119f132-a48b-4b59-98a9-d945f130023c\",\"moduleSequenceNumber\":1511}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8a935e9e-318a-4b40-8b1b-5b3f194f1a57\",\"moduleSequenceNumber\":35147}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bf4ae276-c375-457c-9b46-7a24a5cc0c94\",\"moduleSequenceNumber\":734}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":46.367999999999974,\"minDifficulty\":8,\"moneyAvailable\":1349998.302494475,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"10.7.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464304,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e2666143-a424-4e38-bb20-35fc154c9c97\",\"moduleSequenceNumber\":1512}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e2666143-a424-4e38-bb20-35fc154c9c97\",\"moduleSequenceNumber\":1512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3aeb9c99-3f0b-47c2-84b2-74fd00bca75a\",\"moduleSequenceNumber\":35148}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///fc1c238d-f1f5-4045-b32c-220a236e095e\",\"moduleSequenceNumber\":735}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":34.32199999999977,\"minDifficulty\":10,\"moneyAvailable\":4603509.798807344,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"85.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464271,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93ca759d-ec0a-4e50-b492-3984da3e9b82\",\"moduleSequenceNumber\":1487}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93ca759d-ec0a-4e50-b492-3984da3e9b82\",\"moduleSequenceNumber\":1487}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0a6ec512-2da3-422a-aad7-3dc45c87efd5\",\"moduleSequenceNumber\":13076}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":13076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8493294f-79b3-4818-bcd4-c7a920ddd734\",\"moduleSequenceNumber\":703}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":49.085999999999956,\"minDifficulty\":5,\"moneyAvailable\":1079858.5799852784,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"69.7.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464272,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ecacc7fb-5cbe-44e7-a752-f6b2d49ee133\",\"moduleSequenceNumber\":1488}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ecacc7fb-5cbe-44e7-a752-f6b2d49ee133\",\"moduleSequenceNumber\":1488}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///47cd104d-1e3f-4ee0-8f3a-97eee03ad89d\",\"moduleSequenceNumber\":13077}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":13077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///14af47d7-2eb6-49cb-8575-b842a8f56280\",\"moduleSequenceNumber\":704}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":44.114000000000345,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"6.0.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464308,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///51b75ea2-0f7b-4014-859d-882a2f637318\",\"moduleSequenceNumber\":740}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///51b75ea2-0f7b-4014-859d-882a2f637318\",\"moduleSequenceNumber\":740}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f03ce4a2-0302-479b-b5f5-74766a6c8d83\",\"moduleSequenceNumber\":8325}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":8325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///02496723-7744-40aa-9b42-a64ca7ad7135\",\"moduleSequenceNumber\":739}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":47.64200000000057,\"minDifficulty\":7,\"moneyAvailable\":3880309.839745974,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"67.0.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464301,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2aeea85f-bf17-4940-aa0c-5ad5535bfbd5\",\"moduleSequenceNumber\":1509}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2aeea85f-bf17-4940-aa0c-5ad5535bfbd5\",\"moduleSequenceNumber\":1509}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3244580a-0c62-42ac-b896-47a1c1995165\",\"moduleSequenceNumber\":35145}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f99c1726-c065-4512-b845-21b34171b5a9\",\"moduleSequenceNumber\":732}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":55.21199999999997,\"minDifficulty\":5,\"moneyAvailable\":4281578.239116047,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"24.4.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464309,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///827981bc-b105-478c-ba64-12cd0dd9e4aa\",\"moduleSequenceNumber\":741}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///827981bc-b105-478c-ba64-12cd0dd9e4aa\",\"moduleSequenceNumber\":741}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f33c3864-e891-4662-abdd-0ef0a27282ab\",\"moduleSequenceNumber\":13769}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":13769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9ad72f0d-397c-4df2-94b4-62bf9317840d\",\"moduleSequenceNumber\":40282}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":40282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":32,\"hackDifficulty\":23.67200000000005,\"minDifficulty\":11,\"moneyAvailable\":3965526.757888913,\"moneyMax\":61788979,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":195,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"92.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":10691717.200000001,\"moneyMax\":53458586.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":266,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"96.3.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464273,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6add1dbf-5420-4428-bdc4-1b1961aa7ff2\",\"moduleSequenceNumber\":1489}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6add1dbf-5420-4428-bdc4-1b1961aa7ff2\",\"moduleSequenceNumber\":1489}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4cb941b3-1bb5-4664-90aa-75c2f9c7b0fd\",\"moduleSequenceNumber\":13078}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2e9c765e-dc74-4505-b18c-7926ceb69469\",\"moduleSequenceNumber\":705}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":49.0800000000001,\"minDifficulty\":10,\"moneyAvailable\":3393725.882687014,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"86.5.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461414,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d3014192-e2b7-4f77-9f5f-b2aa8db16430\",\"moduleSequenceNumber\":749}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d3014192-e2b7-4f77-9f5f-b2aa8db16430\",\"moduleSequenceNumber\":749}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d184532a-bf6a-49a7-88e4-053ec5c400ff\",\"moduleSequenceNumber\":13777}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":13777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///efbc777d-1ffb-4f1c-9f96-d163a09fe7f5\",\"moduleSequenceNumber\":25680}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":25680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"2.8.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.0100000000004,\"pid\":462354,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":24,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d65a95cd-2746-452a-b1c3-0b2eb2cd2ec6\",\"moduleSequenceNumber\":765}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":86.41000000000064,\"pid\":463157,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":12,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d65a95cd-2746-452a-b1c3-0b2eb2cd2ec6\",\"moduleSequenceNumber\":765}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d65a95cd-2746-452a-b1c3-0b2eb2cd2ec6\",\"moduleSequenceNumber\":765}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///64d4aced-85de-4e79-a489-707c8f413a2b\",\"moduleSequenceNumber\":4931}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":4931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///69c148fb-9e09-4af2-8c2b-5bddd69f50f6\",\"moduleSequenceNumber\":16171}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":16171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":972,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"98.0.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":683,\"serverGrowth\":42}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"23.7.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461422,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1996d69c-fee2-489c-88c4-b04eedf63e4d\",\"moduleSequenceNumber\":761}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1996d69c-fee2-489c-88c4-b04eedf63e4d\",\"moduleSequenceNumber\":761}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9894052f-995f-4716-bd1c-e88352d4fbb1\",\"moduleSequenceNumber\":13789}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":13789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///e14036a4-5701-4962-befa-fa195bd6bf0e\",\"moduleSequenceNumber\":25692}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":25692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"11.5.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461412,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":18,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ebfdb928-d9ba-4a3b-95b1-04ebbc81b6ab\",\"moduleSequenceNumber\":747}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ebfdb928-d9ba-4a3b-95b1-04ebbc81b6ab\",\"moduleSequenceNumber\":747}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4d09feba-8c43-4b47-8d35-33d741df3308\",\"moduleSequenceNumber\":13775}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":13775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c4170e29-8e36-49e8-beb5-f77b0479ce46\",\"moduleSequenceNumber\":25678}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":25678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":365,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"71.7.5.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464306,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///15b81da7-df05-4726-bfee-9721d11e1a8c\",\"moduleSequenceNumber\":1514}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///15b81da7-df05-4726-bfee-9721d11e1a8c\",\"moduleSequenceNumber\":1514}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///793fed9b-7d6f-4875-b6c3-3ac60844ef1b\",\"moduleSequenceNumber\":12113}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1e9228e2-c882-40e3-8d04-208fb0831a68\",\"moduleSequenceNumber\":737}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"67.1.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":215.60999999999677,\"pid\":461424,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f5f5d877-f3d1-497c-b20a-ce1d78b9dcfe\",\"moduleSequenceNumber\":764}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f5f5d877-f3d1-497c-b20a-ce1d78b9dcfe\",\"moduleSequenceNumber\":764}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///29c9ccec-a605-45da-b3d8-ca88a98b68eb\",\"moduleSequenceNumber\":4930}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":4930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///54c5602c-fc00-4495-b1b8-7ea3d043d3a2\",\"moduleSequenceNumber\":16170}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":16170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"76.7.5.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464302,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7ca4d1a0-2adf-4fba-9e42-0d892b4f9ca9\",\"moduleSequenceNumber\":1510}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///7ca4d1a0-2adf-4fba-9e42-0d892b4f9ca9\",\"moduleSequenceNumber\":1510}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9211a0ce-ba85-4cd4-9df6-c1c2ea95821b\",\"moduleSequenceNumber\":35146}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///628410b0-4089-4702-9f37-20c8bba99d90\",\"moduleSequenceNumber\":733}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"65.2.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"12.0.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"89.0.6.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren\",\"httpPortOpen\":true,\"ip\":\"77.9.2.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464274,\"ramUsage\":1.75,\"server\":\"lauren\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cbecff75-3861-4f59-9219-62769fb51201\",\"moduleSequenceNumber\":1497}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///cbecff75-3861-4f59-9219-62769fb51201\",\"moduleSequenceNumber\":1497}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren\",\"moduleSequenceNumber\":1497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7c625382-9c7f-48b9-b29c-877f5fed4121\",\"moduleSequenceNumber\":13084}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren\",\"moduleSequenceNumber\":13084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8fe492b8-e164-48fd-9727-9b5c7b2a96d3\",\"moduleSequenceNumber\":717}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-0\",\"httpPortOpen\":true,\"ip\":\"19.3.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464275,\"ramUsage\":1.75,\"server\":\"lauren-0\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b953d4dd-f5dc-4acc-bc07-cf1559575590\",\"moduleSequenceNumber\":1498}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b953d4dd-f5dc-4acc-bc07-cf1559575590\",\"moduleSequenceNumber\":1498}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-0\",\"moduleSequenceNumber\":1498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8a7c242a-c4e6-4597-9aef-8e28d48b75a5\",\"moduleSequenceNumber\":13085}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-0\",\"moduleSequenceNumber\":13085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4b3736dc-c79e-4943-9427-c62cdd7d4517\",\"moduleSequenceNumber\":718}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-0\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-1\",\"httpPortOpen\":true,\"ip\":\"5.9.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464276,\"ramUsage\":1.75,\"server\":\"lauren-1\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b55622d1-f9df-4e8c-8ae9-33c31573e3af\",\"moduleSequenceNumber\":1499}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b55622d1-f9df-4e8c-8ae9-33c31573e3af\",\"moduleSequenceNumber\":1499}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-1\",\"moduleSequenceNumber\":1499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///62bed032-0e1e-4a96-9414-ee007ff88f38\",\"moduleSequenceNumber\":13086}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-1\",\"moduleSequenceNumber\":13086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///843261a1-b9f4-42e6-9856-eae63c992611\",\"moduleSequenceNumber\":719}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-1\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-4\",\"httpPortOpen\":true,\"ip\":\"90.5.2.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464277,\"ramUsage\":1.75,\"server\":\"lauren-4\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1822f304-fbbc-48fe-90f0-de623e819324\",\"moduleSequenceNumber\":1502}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1822f304-fbbc-48fe-90f0-de623e819324\",\"moduleSequenceNumber\":1502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-4\",\"moduleSequenceNumber\":1502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///1204bf69-a573-47a2-9d15-550a0945d18e\",\"moduleSequenceNumber\":27052}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-4\",\"moduleSequenceNumber\":27052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7888b92d-8cec-474d-acd3-e20d4184605a\",\"moduleSequenceNumber\":722}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-4\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-5\",\"httpPortOpen\":true,\"ip\":\"96.0.4.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464278,\"ramUsage\":1.75,\"server\":\"lauren-5\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e16ca657-8870-427f-a5c4-b5287c61eb8b\",\"moduleSequenceNumber\":1503}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e16ca657-8870-427f-a5c4-b5287c61eb8b\",\"moduleSequenceNumber\":1503}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-5\",\"moduleSequenceNumber\":1503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-5\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///70b9b1a2-32ac-4c3f-a727-b7362720a297\",\"moduleSequenceNumber\":723}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-5\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-6\",\"httpPortOpen\":true,\"ip\":\"80.7.8.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464279,\"ramUsage\":1.75,\"server\":\"lauren-6\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d7d4f176-1ca9-49c3-ba57-a37873c2eb43\",\"moduleSequenceNumber\":1504}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d7d4f176-1ca9-49c3-ba57-a37873c2eb43\",\"moduleSequenceNumber\":1504}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-6\",\"moduleSequenceNumber\":1504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-6\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7b1049b7-757f-484b-bb1d-93500aa27397\",\"moduleSequenceNumber\":724}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-6\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-9\",\"httpPortOpen\":true,\"ip\":\"5.4.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464280,\"ramUsage\":1.75,\"server\":\"lauren-9\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b0872151-7df9-4264-81f4-a12b5da5a1a9\",\"moduleSequenceNumber\":1519}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b0872151-7df9-4264-81f4-a12b5da5a1a9\",\"moduleSequenceNumber\":1519}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-9\",\"moduleSequenceNumber\":1519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///83153bf7-2dfa-4327-ae05-5260922ac17e\",\"moduleSequenceNumber\":13089}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-9\",\"moduleSequenceNumber\":13089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///06861fb4-2d41-49bc-858f-88e0292748ba\",\"moduleSequenceNumber\":774}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-9\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-10\",\"httpPortOpen\":true,\"ip\":\"55.2.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464281,\"ramUsage\":1.75,\"server\":\"lauren-10\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d7cb2ed7-0251-4255-a4f7-8b3b5029f6af\",\"moduleSequenceNumber\":1516}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///d7cb2ed7-0251-4255-a4f7-8b3b5029f6af\",\"moduleSequenceNumber\":1516}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-10\",\"moduleSequenceNumber\":1516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-10\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///42e5fef8-363b-4b68-a26d-555e7ccd3b71\",\"moduleSequenceNumber\":727}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-10\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-22\",\"httpPortOpen\":true,\"ip\":\"14.8.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464282,\"ramUsage\":1.75,\"server\":\"lauren-22\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1ca21236-9c0a-4cbd-b276-f7d07bdf75e5\",\"moduleSequenceNumber\":46407}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1ca21236-9c0a-4cbd-b276-f7d07bdf75e5\",\"moduleSequenceNumber\":46407}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-22\",\"moduleSequenceNumber\":46407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-22\",\"moduleSequenceNumber\":46405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-22\",\"moduleSequenceNumber\":46406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-3\",\"httpPortOpen\":true,\"ip\":\"68.0.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464283,\"ramUsage\":1.75,\"server\":\"lauren-3\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///13e83e55-503f-48cf-9923-9fb6e4dea77a\",\"moduleSequenceNumber\":46760}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///13e83e55-503f-48cf-9923-9fb6e4dea77a\",\"moduleSequenceNumber\":46760}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-3\",\"moduleSequenceNumber\":46760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-3\",\"moduleSequenceNumber\":46758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-3\",\"moduleSequenceNumber\":46759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-14\",\"httpPortOpen\":true,\"ip\":\"12.7.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464284,\"ramUsage\":1.75,\"server\":\"lauren-14\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9d6b8242-e8c5-4fa2-ab66-da45192c9abd\",\"moduleSequenceNumber\":47452}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9d6b8242-e8c5-4fa2-ab66-da45192c9abd\",\"moduleSequenceNumber\":47452}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-14\",\"moduleSequenceNumber\":47452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-14\",\"moduleSequenceNumber\":47450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-14\",\"moduleSequenceNumber\":47451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-16\",\"httpPortOpen\":true,\"ip\":\"6.7.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464285,\"ramUsage\":1.75,\"server\":\"lauren-16\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///498c91d9-4a91-4c61-a82a-13c483253bc3\",\"moduleSequenceNumber\":47799}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///498c91d9-4a91-4c61-a82a-13c483253bc3\",\"moduleSequenceNumber\":47799}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-16\",\"moduleSequenceNumber\":47799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5e083545-770a-48f3-8e04-652af7fdbefb\",\"moduleSequenceNumber\":48478}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-16\",\"moduleSequenceNumber\":48478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-16\",\"moduleSequenceNumber\":47797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-17\",\"httpPortOpen\":true,\"ip\":\"73.8.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464286,\"ramUsage\":1.75,\"server\":\"lauren-17\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e11a3ec2-57a6-437f-b61e-bc108b5951c9\",\"moduleSequenceNumber\":60351}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e11a3ec2-57a6-437f-b61e-bc108b5951c9\",\"moduleSequenceNumber\":60351}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-17\",\"moduleSequenceNumber\":60351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f0e5b6d1-3a1d-4a74-a9b6-3eaaae897dd5\",\"moduleSequenceNumber\":60691}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-17\",\"moduleSequenceNumber\":60691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-17\",\"moduleSequenceNumber\":60349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-18\",\"httpPortOpen\":true,\"ip\":\"13.1.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464287,\"ramUsage\":1.75,\"server\":\"lauren-18\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///60ea7af5-9cc6-4c34-a8dd-66a7cd469b99\",\"moduleSequenceNumber\":77310}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///60ea7af5-9cc6-4c34-a8dd-66a7cd469b99\",\"moduleSequenceNumber\":77310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-18\",\"moduleSequenceNumber\":77310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///624ac22e-3d09-4f7e-b4a0-49f429ff1625\",\"moduleSequenceNumber\":77311}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-18\",\"moduleSequenceNumber\":77311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-18\",\"moduleSequenceNumber\":77308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-19\",\"httpPortOpen\":true,\"ip\":\"79.0.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464288,\"ramUsage\":1.75,\"server\":\"lauren-19\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///94e41250-0aa2-471a-a153-df2bdd0cd4c3\",\"moduleSequenceNumber\":103083}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///94e41250-0aa2-471a-a153-df2bdd0cd4c3\",\"moduleSequenceNumber\":103083}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-19\",\"moduleSequenceNumber\":103083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9c60aec4-ca4d-434f-acd9-8c8b1563b6ee\",\"moduleSequenceNumber\":103084}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-19\",\"moduleSequenceNumber\":103084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-19\",\"moduleSequenceNumber\":103081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-20\",\"httpPortOpen\":true,\"ip\":\"0.7.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464289,\"ramUsage\":1.75,\"server\":\"lauren-20\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0b92d38b-5106-43de-a2de-55a3f338f0c3\",\"moduleSequenceNumber\":121398}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0b92d38b-5106-43de-a2de-55a3f338f0c3\",\"moduleSequenceNumber\":121398}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-20\",\"moduleSequenceNumber\":121398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///237d7fd3-e5f8-46bf-b20f-96f8dbdaa383\",\"moduleSequenceNumber\":122416}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-20\",\"moduleSequenceNumber\":122416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-20\",\"moduleSequenceNumber\":121396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-21\",\"httpPortOpen\":true,\"ip\":\"57.4.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464290,\"ramUsage\":1.75,\"server\":\"lauren-21\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9b1f18ed-9f55-48f6-b4a3-44756bf8d9ec\",\"moduleSequenceNumber\":134967}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9b1f18ed-9f55-48f6-b4a3-44756bf8d9ec\",\"moduleSequenceNumber\":134967}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-21\",\"moduleSequenceNumber\":134967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///27720d3c-9b70-4424-bcfe-30c53712c6bb\",\"moduleSequenceNumber\":142087}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-21\",\"moduleSequenceNumber\":142087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-21\",\"moduleSequenceNumber\":134965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-2\",\"httpPortOpen\":true,\"ip\":\"44.9.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464291,\"ramUsage\":1.75,\"server\":\"lauren-2\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f8af0c8d-da5f-441c-b36d-93e9ddd8f975\",\"moduleSequenceNumber\":220742}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f8af0c8d-da5f-441c-b36d-93e9ddd8f975\",\"moduleSequenceNumber\":220742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-2\",\"moduleSequenceNumber\":220742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-2\",\"moduleSequenceNumber\":220740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-2\",\"moduleSequenceNumber\":220741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-7\",\"httpPortOpen\":true,\"ip\":\"47.7.3.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464292,\"ramUsage\":1.75,\"server\":\"lauren-7\",\"threads\":292,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4820b05c-d229-4ecd-bd8a-10ce4fabb47b\",\"moduleSequenceNumber\":246866}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4820b05c-d229-4ecd-bd8a-10ce4fabb47b\",\"moduleSequenceNumber\":246866}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-7\",\"moduleSequenceNumber\":246866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-7\",\"moduleSequenceNumber\":246864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-7\",\"moduleSequenceNumber\":246865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-11\",\"httpPortOpen\":true,\"ip\":\"1.3.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464293,\"ramUsage\":1.75,\"server\":\"lauren-11\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ed7efbe0-a55d-4fce-8ec3-ed7a68652e02\",\"moduleSequenceNumber\":246858}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ed7efbe0-a55d-4fce-8ec3-ed7a68652e02\",\"moduleSequenceNumber\":246858}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-11\",\"moduleSequenceNumber\":246858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-11\",\"moduleSequenceNumber\":246850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-11\",\"moduleSequenceNumber\":246851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-13\",\"httpPortOpen\":true,\"ip\":\"15.4.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464294,\"ramUsage\":1.75,\"server\":\"lauren-13\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///dafc711d-fc5e-4262-a967-ea97923fc278\",\"moduleSequenceNumber\":246859}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///dafc711d-fc5e-4262-a967-ea97923fc278\",\"moduleSequenceNumber\":246859}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-13\",\"moduleSequenceNumber\":246859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///990f56af-3bf2-4b1c-b223-bed3c367bd37\",\"moduleSequenceNumber\":247213}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-13\",\"moduleSequenceNumber\":247213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ca5a66d6-f579-4fbd-a66f-e13bfffbe303\",\"moduleSequenceNumber\":297406}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-13\",\"moduleSequenceNumber\":297406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-15\",\"httpPortOpen\":true,\"ip\":\"82.7.4.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464295,\"ramUsage\":1.75,\"server\":\"lauren-15\",\"threads\":146,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e92954bf-89ce-473d-8722-c4ab417ca48e\",\"moduleSequenceNumber\":247220}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e92954bf-89ce-473d-8722-c4ab417ca48e\",\"moduleSequenceNumber\":247220}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-15\",\"moduleSequenceNumber\":247220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-15\",\"moduleSequenceNumber\":247218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///514879b0-839f-4dfe-a55b-a0f667266c84\",\"moduleSequenceNumber\":271300}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-15\",\"moduleSequenceNumber\":271300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-23\",\"httpPortOpen\":true,\"ip\":\"15.5.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464296,\"ramUsage\":1.75,\"server\":\"lauren-23\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///621a3e68-5edd-421e-a5a7-c1c4bdb5c418\",\"moduleSequenceNumber\":247212}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///621a3e68-5edd-421e-a5a7-c1c4bdb5c418\",\"moduleSequenceNumber\":247212}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-23\",\"moduleSequenceNumber\":247212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///bbfaa60f-425d-49dd-b7c4-1d33600ce305\",\"moduleSequenceNumber\":252306}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-23\",\"moduleSequenceNumber\":252306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f714dbd5-a553-4bde-91de-596074b6670c\",\"moduleSequenceNumber\":271301}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-23\",\"moduleSequenceNumber\":271301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-8\",\"httpPortOpen\":true,\"ip\":\"38.3.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464297,\"ramUsage\":1.75,\"server\":\"lauren-8\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c1a7474f-e6df-407d-b4d2-02b057db8df7\",\"moduleSequenceNumber\":267569}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c1a7474f-e6df-407d-b4d2-02b057db8df7\",\"moduleSequenceNumber\":267569}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-8\",\"moduleSequenceNumber\":267569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7da4eef7-5e54-4fbb-8fc9-2d4f30b01690\",\"moduleSequenceNumber\":267909}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-8\",\"moduleSequenceNumber\":267909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0ec10763-bb07-4d94-8ca1-084da6348658\",\"moduleSequenceNumber\":272319}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-8\",\"moduleSequenceNumber\":272319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"lauren-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lauren-12\",\"httpPortOpen\":true,\"ip\":\"17.5.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":464298,\"ramUsage\":1.75,\"server\":\"lauren-12\",\"threads\":73,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f78c8323-4b79-4c88-bf53-717647075cfe\",\"moduleSequenceNumber\":311313}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that grows the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run grow.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run grow.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountGrown = await ns.grow(host, { stock: true });\\n    amountGrown === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f78c8323-4b79-4c88-bf53-717647075cfe\",\"moduleSequenceNumber\":311313}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-12\",\"moduleSequenceNumber\":311313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that weakens the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run weaken.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run weaken.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountDecreased = await ns.weaken(host, { stock: true });\\n    amountDecreased === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///5cd34d49-33ba-4483-bde7-afb841bf0cc5\",\"moduleSequenceNumber\":311653}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lauren-12\",\"moduleSequenceNumber\":311653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Small script that hacks the host.\\n *\\n * If the number of times is passed into the argument, then only runs for that\\n * many times. Otherwise, runs infinitely.\\n *\\n * @example run hack.js <hostname> <number of times>\\n * @param {import('index').NS } ns\\n */\\nexport async function main(ns) {\\n  const host = ns.args[0];\\n  const numberOfTimes = ns.args[1];\\n  if (typeof host !== 'string') {\\n    ns.tprint(`usage: run hack.js <host> <number of times>`);\\n    return;\\n  }\\n  let index = 0;\\n  let noEffectTimeCount = 0;\\n  while (\\n    (typeof numberOfTimes !== 'number' ? true : index++ < numberOfTimes) &&\\n    noEffectTimeCount < 5\\n  ) {\\n    const amountStolen = await ns.hack(host, { stock: true });\\n    amountStolen === 0 ? noEffectTimeCount++ : (noEffectTimeCount = 0);\\n  }\\n}\\n\\n/**\\n * @param {Object} data\\n * @returns {string[]}\\n */\\nexport const autocomplete = data => [...data.servers];\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lauren-12\",\"moduleSequenceNumber\":311311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":23228.390519633755,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":39.62493400497926,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.7484,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":30.67,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.449,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":50135.48619757883,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":121.6544,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":32002.073720096756,\"favor\":66.4293,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":27.6537,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":29120.999020492716}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":23.2061,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":47.2728,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":37140.62324763613}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":15.8558,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":16.6876,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":58.901,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":64119.64471296077}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":49.5727,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":66.0187,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":42527.25583987824}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":100,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":70,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"solarized-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":true,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"'Input', Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":1,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643239712535","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643239712556"}}